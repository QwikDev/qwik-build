{"version":3,"file":"core.cjs","sources":["../../../dist-dev/tsc-out/packages/qwik/src/core/util/implicit_dollar.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/qdev.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/element.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/log.js","../../../dist-dev/tsc-out/packages/qwik/src/core/error/assert.js","../../../dist-dev/tsc-out/packages/qwik/src/core/error/error.js","../../../dist-dev/tsc-out/packages/qwik/src/core/platform/platform.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/flyweight.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/types.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/dom.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/shared/types.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/markers.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/constants.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/fast-calls.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/case.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/event.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/listeners.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/promises.js","../../../dist-dev/tsc-out/packages/qwik/src/core/version.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/utils.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/shared/event-names.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-sequential-scope.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-context.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/error-handling.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/unitless_number.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/shared/vnode-data-types.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/prop.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/slot.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/hash_code.js","../../../dist-dev/tsc-out/packages/qwik/src/core/style/qrl-styles.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/shared/scoped-styles.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/client/types.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/client/vnode-namespace.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-on.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/shared/component-execution.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/shared/character-escaping.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/client/vnode-diff.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/shared/scheduler.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/shared/shared-container.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/client/process-vnode-data.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/client/dom-container.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/client/vnode.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/execute-component.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/ssr/render-ssr.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/ssr/ssr-render-component.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/async-generator.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/ssr/ssr-render-jsx.js","../../../dist-dev/tsc-out/packages/qwik/src/core/qrl/inlined-fn.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/shared-types.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/jsx-runtime.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/shared/shared-serialization.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/store.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/render-dom.js","../../../dist-dev/tsc-out/packages/qwik/src/core/container/resume.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-lexical-scope.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/signals.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/notify-render.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-task.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/context.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-locale.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-core.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/signal.js","../../../dist-dev/tsc-out/packages/qwik/src/core/container/container.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/visitor.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/operations.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/virtual-element.js","../../../dist-dev/tsc-out/packages/qwik/src/core/container/pause.js","../../../dist-dev/tsc-out/packages/qwik/src/core/qrl/qrl.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-resource.js","../../../dist-dev/tsc-out/packages/qwik/src/core/container/serializers.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/common.js","../../../dist-dev/tsc-out/packages/qwik/src/core/qrl/qrl-class.js","../../../dist-dev/tsc-out/packages/qwik/src/core/qrl/qrl.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/component/component.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/client/dom-render.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-store.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-id.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-env-data.js","../../../dist-dev/tsc-out/packages/qwik/src/core/style/scoped-stylesheet.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-styles.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-signal.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-error-boundary.js","../../../dist-dev/tsc-out/packages/qwik/src/core/components/prefetch.js"],"sourcesContent":["import { dollar } from '../qrl/qrl.public';\n// <docs markdown=\"../readme.md#implicit$FirstArg\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#implicit$FirstArg instead)\n/**\n * Create a `____$(...)` convenience method from `___(...)`.\n *\n * It is very common for functions to take a lazy-loadable resource as a first argument. For this\n * reason, the Qwik Optimizer automatically extracts the first argument from any function which ends\n * in `$`.\n *\n * This means that `foo$(arg0)` and `foo($(arg0))` are equivalent with respect to Qwik Optimizer.\n * The former is just a shorthand for the latter.\n *\n * For example, these function calls are equivalent:\n *\n * - `component$(() => {...})` is same as `component($(() => {...}))`\n *\n * ```tsx\n * export function myApi(callback: QRL<() => void>): void {\n *   // ...\n * }\n *\n * export const myApi$ = implicit$FirstArg(myApi);\n * // type of myApi$: (callback: () => void): void\n *\n * // can be used as:\n * myApi$(() => console.log('callback'));\n *\n * // will be transpiled to:\n * // FILE: <current file>\n * myApi(qrl('./chunk-abc.js', 'callback'));\n *\n * // FILE: chunk-abc.js\n * export const callback = () => console.log('callback');\n * ```\n *\n * @param fn - A function that should have its first argument automatically `$`.\n * @public\n */\n// </docs>\nexport const implicit$FirstArg = (fn) => {\n    return function (first, ...rest) {\n        return fn.call(null, dollar(first), ...rest);\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wbGljaXRfZG9sbGFyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvaW1wbGljaXRfZG9sbGFyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQVksTUFBTSxtQkFBbUIsQ0FBQztBQUVyRCxtREFBbUQ7QUFDbkQseUNBQXlDO0FBQ3pDLGdEQUFnRDtBQUNoRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQ0c7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FDL0IsRUFBMkMsRUFDTCxFQUFFO0lBQ3hDLE9BQU8sVUFBVSxLQUFZLEVBQUUsR0FBRyxJQUFVO1FBQzFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDL0MsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZG9sbGFyLCB0eXBlIFFSTCB9IGZyb20gJy4uL3FybC9xcmwucHVibGljJztcblxuLy8gPGRvY3MgbWFya2Rvd249XCIuLi9yZWFkbWUubWQjaW1wbGljaXQkRmlyc3RBcmdcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjaW1wbGljaXQkRmlyc3RBcmcgaW5zdGVhZClcbi8qKlxuICogQ3JlYXRlIGEgYF9fX18kKC4uLilgIGNvbnZlbmllbmNlIG1ldGhvZCBmcm9tIGBfX18oLi4uKWAuXG4gKlxuICogSXQgaXMgdmVyeSBjb21tb24gZm9yIGZ1bmN0aW9ucyB0byB0YWtlIGEgbGF6eS1sb2FkYWJsZSByZXNvdXJjZSBhcyBhIGZpcnN0IGFyZ3VtZW50LiBGb3IgdGhpc1xuICogcmVhc29uLCB0aGUgUXdpayBPcHRpbWl6ZXIgYXV0b21hdGljYWxseSBleHRyYWN0cyB0aGUgZmlyc3QgYXJndW1lbnQgZnJvbSBhbnkgZnVuY3Rpb24gd2hpY2ggZW5kc1xuICogaW4gYCRgLlxuICpcbiAqIFRoaXMgbWVhbnMgdGhhdCBgZm9vJChhcmcwKWAgYW5kIGBmb28oJChhcmcwKSlgIGFyZSBlcXVpdmFsZW50IHdpdGggcmVzcGVjdCB0byBRd2lrIE9wdGltaXplci5cbiAqIFRoZSBmb3JtZXIgaXMganVzdCBhIHNob3J0aGFuZCBmb3IgdGhlIGxhdHRlci5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgdGhlc2UgZnVuY3Rpb24gY2FsbHMgYXJlIGVxdWl2YWxlbnQ6XG4gKlxuICogLSBgY29tcG9uZW50JCgoKSA9PiB7Li4ufSlgIGlzIHNhbWUgYXMgYGNvbXBvbmVudCgkKCgpID0+IHsuLi59KSlgXG4gKlxuICogYGBgdHN4XG4gKiBleHBvcnQgZnVuY3Rpb24gbXlBcGkoY2FsbGJhY2s6IFFSTDwoKSA9PiB2b2lkPik6IHZvaWQge1xuICogICAvLyAuLi5cbiAqIH1cbiAqXG4gKiBleHBvcnQgY29uc3QgbXlBcGkkID0gaW1wbGljaXQkRmlyc3RBcmcobXlBcGkpO1xuICogLy8gdHlwZSBvZiBteUFwaSQ6IChjYWxsYmFjazogKCkgPT4gdm9pZCk6IHZvaWRcbiAqXG4gKiAvLyBjYW4gYmUgdXNlZCBhczpcbiAqIG15QXBpJCgoKSA9PiBjb25zb2xlLmxvZygnY2FsbGJhY2snKSk7XG4gKlxuICogLy8gd2lsbCBiZSB0cmFuc3BpbGVkIHRvOlxuICogLy8gRklMRTogPGN1cnJlbnQgZmlsZT5cbiAqIG15QXBpKHFybCgnLi9jaHVuay1hYmMuanMnLCAnY2FsbGJhY2snKSk7XG4gKlxuICogLy8gRklMRTogY2h1bmstYWJjLmpzXG4gKiBleHBvcnQgY29uc3QgY2FsbGJhY2sgPSAoKSA9PiBjb25zb2xlLmxvZygnY2FsbGJhY2snKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBmbiAtIEEgZnVuY3Rpb24gdGhhdCBzaG91bGQgaGF2ZSBpdHMgZmlyc3QgYXJndW1lbnQgYXV0b21hdGljYWxseSBgJGAuXG4gKiBAcHVibGljXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCBpbXBsaWNpdCRGaXJzdEFyZyA9IDxGSVJTVCwgUkVTVCBleHRlbmRzIGFueVtdLCBSRVQ+KFxuICBmbjogKHFybDogUVJMPEZJUlNUPiwgLi4ucmVzdDogUkVTVCkgPT4gUkVUXG4pOiAoKHFybDogRklSU1QsIC4uLnJlc3Q6IFJFU1QpID0+IFJFVCkgPT4ge1xuICByZXR1cm4gZnVuY3Rpb24gKGZpcnN0OiBGSVJTVCwgLi4ucmVzdDogUkVTVCk6IFJFVCB7XG4gICAgcmV0dXJuIGZuLmNhbGwobnVsbCwgZG9sbGFyKGZpcnN0KSwgLi4ucmVzdCk7XG4gIH07XG59O1xuIl19","// same as isDev but separate so we can test\nexport const qDev = globalThis.qDev !== false;\nexport const qInspector = globalThis.qInspector === true;\nexport const qSerialize = globalThis.qSerialize !== false;\nexport const qDynamicPlatform = globalThis.qDynamicPlatform !== false;\nexport const qTest = globalThis.qTest === true;\nexport const qRuntimeQrl = globalThis.qRuntimeQrl === true;\nexport const seal = (obj) => {\n    if (qDev) {\n        Object.seal(obj);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicWRldi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL3FkZXYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNENBQTRDO0FBQzVDLE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQztBQUM5QyxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLFVBQVUsS0FBSyxJQUFJLENBQUM7QUFDekQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxVQUFVLEtBQUssS0FBSyxDQUFDO0FBQzFELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLFVBQVUsQ0FBQyxnQkFBZ0IsS0FBSyxLQUFLLENBQUM7QUFDdEUsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDO0FBQy9DLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsV0FBVyxLQUFLLElBQUksQ0FBQztBQUUzRCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxHQUFRLEVBQUUsRUFBRTtJQUMvQixJQUFJLElBQUksRUFBRSxDQUFDO1FBQ1QsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQixDQUFDO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc2FtZSBhcyBpc0RldiBidXQgc2VwYXJhdGUgc28gd2UgY2FuIHRlc3RcbmV4cG9ydCBjb25zdCBxRGV2ID0gZ2xvYmFsVGhpcy5xRGV2ICE9PSBmYWxzZTtcbmV4cG9ydCBjb25zdCBxSW5zcGVjdG9yID0gZ2xvYmFsVGhpcy5xSW5zcGVjdG9yID09PSB0cnVlO1xuZXhwb3J0IGNvbnN0IHFTZXJpYWxpemUgPSBnbG9iYWxUaGlzLnFTZXJpYWxpemUgIT09IGZhbHNlO1xuZXhwb3J0IGNvbnN0IHFEeW5hbWljUGxhdGZvcm0gPSBnbG9iYWxUaGlzLnFEeW5hbWljUGxhdGZvcm0gIT09IGZhbHNlO1xuZXhwb3J0IGNvbnN0IHFUZXN0ID0gZ2xvYmFsVGhpcy5xVGVzdCA9PT0gdHJ1ZTtcbmV4cG9ydCBjb25zdCBxUnVudGltZVFybCA9IGdsb2JhbFRoaXMucVJ1bnRpbWVRcmwgPT09IHRydWU7XG5cbmV4cG9ydCBjb25zdCBzZWFsID0gKG9iajogYW55KSA9PiB7XG4gIGlmIChxRGV2KSB7XG4gICAgT2JqZWN0LnNlYWwob2JqKTtcbiAgfVxufTtcblxuZGVjbGFyZSBjb25zdCBnbG9iYWxUaGlzOiBhbnk7XG4iXX0=","export const isNode = (value) => {\n    return value && typeof value.nodeType === 'number';\n};\nexport const isDocument = (value) => {\n    return value.nodeType === 9;\n};\nexport const isElement = (value) => {\n    return value.nodeType === 1;\n};\nexport const isQwikElement = (value) => {\n    const nodeType = value.nodeType;\n    return nodeType === 1 || nodeType === 11 || nodeType === 111;\n};\nexport const isNodeElement = (value) => {\n    const nodeType = value.nodeType;\n    return nodeType === 1 || nodeType === 11 || nodeType === 111 || nodeType === 3;\n};\nexport const isVirtualElement = (value) => {\n    const nodeType = value.nodeType;\n    return nodeType === 11 || nodeType === 111;\n};\nexport const isVirtualElementOpenComment = (value) => {\n    return isComment(value) && value.data.startsWith('qv ');\n};\nexport const isText = (value) => {\n    return value.nodeType === 3;\n};\nexport const isComment = (value) => {\n    return value.nodeType === 8;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL2VsZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBVSxFQUFpQixFQUFFO0lBQ2xELE9BQU8sS0FBSyxJQUFJLE9BQU8sS0FBSyxDQUFDLFFBQVEsS0FBSyxRQUFRLENBQUM7QUFDckQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsS0FBVyxFQUFxQixFQUFFO0lBQzNELE9BQVEsS0FBYSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDdkMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBYSxFQUFvQixFQUFFO0lBQzNELE9BQVEsS0FBYSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDdkMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsS0FBYSxFQUF3QixFQUFFO0lBQ25FLE1BQU0sUUFBUSxHQUFJLEtBQWEsQ0FBQyxRQUFRLENBQUM7SUFDekMsT0FBTyxRQUFRLEtBQUssQ0FBQyxJQUFJLFFBQVEsS0FBSyxFQUFFLElBQUksUUFBUSxLQUFLLEdBQUcsQ0FBQztBQUMvRCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxLQUFhLEVBQXdCLEVBQUU7SUFDbkUsTUFBTSxRQUFRLEdBQUksS0FBYSxDQUFDLFFBQVEsQ0FBQztJQUN6QyxPQUFPLFFBQVEsS0FBSyxDQUFDLElBQUksUUFBUSxLQUFLLEVBQUUsSUFBSSxRQUFRLEtBQUssR0FBRyxJQUFJLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDakYsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxLQUFhLEVBQTJCLEVBQUU7SUFDekUsTUFBTSxRQUFRLEdBQUksS0FBYSxDQUFDLFFBQVEsQ0FBQztJQUN6QyxPQUFPLFFBQVEsS0FBSyxFQUFFLElBQUksUUFBUSxLQUFLLEdBQUcsQ0FBQztBQUM3QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxDQUFDLEtBQTRCLEVBQW9CLEVBQUU7SUFDNUYsT0FBTyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBeUIsRUFBaUIsRUFBRTtJQUNqRSxPQUFRLEtBQWEsQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDO0FBQ3ZDLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFDLEtBQXlCLEVBQW9CLEVBQUU7SUFDdkUsT0FBUSxLQUFhLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQztBQUN2QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFF3aWtFbGVtZW50LCBWaXJ0dWFsRWxlbWVudCB9IGZyb20gJy4uL3JlbmRlci9kb20vdmlydHVhbC1lbGVtZW50JztcblxuZXhwb3J0IGNvbnN0IGlzTm9kZSA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgTm9kZSA9PiB7XG4gIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUubm9kZVR5cGUgPT09ICdudW1iZXInO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzRG9jdW1lbnQgPSAodmFsdWU6IE5vZGUpOiB2YWx1ZSBpcyBEb2N1bWVudCA9PiB7XG4gIHJldHVybiAodmFsdWUgYXMgYW55KS5ub2RlVHlwZSA9PT0gOTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc0VsZW1lbnQgPSAodmFsdWU6IG9iamVjdCk6IHZhbHVlIGlzIEVsZW1lbnQgPT4ge1xuICByZXR1cm4gKHZhbHVlIGFzIGFueSkubm9kZVR5cGUgPT09IDE7XG59O1xuXG5leHBvcnQgY29uc3QgaXNRd2lrRWxlbWVudCA9ICh2YWx1ZTogb2JqZWN0KTogdmFsdWUgaXMgUXdpa0VsZW1lbnQgPT4ge1xuICBjb25zdCBub2RlVHlwZSA9ICh2YWx1ZSBhcyBhbnkpLm5vZGVUeXBlO1xuICByZXR1cm4gbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDExIHx8IG5vZGVUeXBlID09PSAxMTE7XG59O1xuXG5leHBvcnQgY29uc3QgaXNOb2RlRWxlbWVudCA9ICh2YWx1ZTogb2JqZWN0KTogdmFsdWUgaXMgUXdpa0VsZW1lbnQgPT4ge1xuICBjb25zdCBub2RlVHlwZSA9ICh2YWx1ZSBhcyBhbnkpLm5vZGVUeXBlO1xuICByZXR1cm4gbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDExIHx8IG5vZGVUeXBlID09PSAxMTEgfHwgbm9kZVR5cGUgPT09IDM7XG59O1xuXG5leHBvcnQgY29uc3QgaXNWaXJ0dWFsRWxlbWVudCA9ICh2YWx1ZTogb2JqZWN0KTogdmFsdWUgaXMgVmlydHVhbEVsZW1lbnQgPT4ge1xuICBjb25zdCBub2RlVHlwZSA9ICh2YWx1ZSBhcyBhbnkpLm5vZGVUeXBlO1xuICByZXR1cm4gbm9kZVR5cGUgPT09IDExIHx8IG5vZGVUeXBlID09PSAxMTE7XG59O1xuXG5leHBvcnQgY29uc3QgaXNWaXJ0dWFsRWxlbWVudE9wZW5Db21tZW50ID0gKHZhbHVlOiBOb2RlIHwgVmlydHVhbEVsZW1lbnQpOiB2YWx1ZSBpcyBDb21tZW50ID0+IHtcbiAgcmV0dXJuIGlzQ29tbWVudCh2YWx1ZSkgJiYgdmFsdWUuZGF0YS5zdGFydHNXaXRoKCdxdiAnKTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc1RleHQgPSAodmFsdWU6IE5vZGUgfCBRd2lrRWxlbWVudCk6IHZhbHVlIGlzIFRleHQgPT4ge1xuICByZXR1cm4gKHZhbHVlIGFzIGFueSkubm9kZVR5cGUgPT09IDM7XG59O1xuXG5leHBvcnQgY29uc3QgaXNDb21tZW50ID0gKHZhbHVlOiBOb2RlIHwgUXdpa0VsZW1lbnQpOiB2YWx1ZSBpcyBDb21tZW50ID0+IHtcbiAgcmV0dXJuICh2YWx1ZSBhcyBhbnkpLm5vZGVUeXBlID09PSA4O1xufTtcbiJdfQ==","import { isElement, isNode } from './element';\nimport { qDev, qTest } from './qdev';\nconst STYLE = qDev\n    ? `background: #564CE0; color: white; padding: 2px 3px; border-radius: 2px; font-size: 0.8em;`\n    : '';\nexport const logError = (message, ...optionalParams) => {\n    return createAndLogError(false, message, ...optionalParams);\n};\nexport const throwErrorAndStop = (message, ...optionalParams) => {\n    const error = createAndLogError(false, message, ...optionalParams);\n    // eslint-disable-next-line no-debugger\n    debugger;\n    throw error;\n};\nexport const logErrorAndStop = (message, ...optionalParams) => {\n    const err = createAndLogError(true, message, ...optionalParams);\n    // eslint-disable-next-line no-debugger\n    debugger;\n    return err;\n};\nconst _printed = /*#__PURE__*/ new Set();\nexport const logOnceWarn = (message, ...optionalParams) => {\n    if (qDev) {\n        const key = 'warn' + String(message);\n        if (!_printed.has(key)) {\n            _printed.add(key);\n            logWarn(message, ...optionalParams);\n        }\n    }\n};\nexport const logWarn = (message, ...optionalParams) => {\n    if (qDev) {\n        console.warn('%cQWIK WARN', STYLE, message, ...printParams(optionalParams));\n    }\n};\nexport const logDebug = (message, ...optionalParams) => {\n    if (qDev) {\n        // eslint-disable-next-line no-console\n        console.debug('%cQWIK', STYLE, message, ...printParams(optionalParams));\n    }\n};\nexport const tryGetContext = (element) => {\n    return element['_qc_'];\n};\nconst printParams = (optionalParams) => {\n    if (qDev) {\n        return optionalParams.map((p) => {\n            if (isNode(p) && isElement(p)) {\n                return printElement(p);\n            }\n            return p;\n        });\n    }\n    return optionalParams;\n};\nconst printElement = (el) => {\n    const ctx = tryGetContext(el);\n    const isServer = /*#__PURE__*/ (() => typeof process !== 'undefined' && !!process.versions && !!process.versions.node)();\n    return {\n        tagName: el.tagName,\n        renderQRL: ctx?.$componentQrl$?.getSymbol(),\n        element: isServer ? undefined : el,\n        ctx: isServer ? undefined : ctx,\n    };\n};\nconst createAndLogError = (asyncThrow, message, ...optionalParams) => {\n    const err = message instanceof Error ? message : new Error(message);\n    // display the error message first, then the optional params, and finally the stack trace\n    // the stack needs to be displayed last because the given params will be lost among large stack traces so it will\n    // provide a bad developer experience\n    console.error('%cQWIK ERROR', STYLE, err.message, ...printParams(optionalParams), err.stack);\n    asyncThrow &&\n        !qTest &&\n        setTimeout(() => {\n            // throwing error asynchronously to avoid breaking the current call stack.\n            // We throw so that the error is delivered to the global error handler for\n            // reporting it to a third-party tools such as Qwik Insights, Sentry or New Relic.\n            throw err;\n        }, 0);\n    return err;\n};\n//# sourceMappingURL=data:application/json;base64,","import { isElement, isQwikElement } from '../util/element';\nimport { throwErrorAndStop } from '../util/log';\nimport { qDev } from '../util/qdev';\nconst ASSERT_DISCLAIMER = 'Internal assert, this is likely caused by a bug in Qwik: ';\nexport function assertDefined(value, text, ...parts) {\n    if (qDev) {\n        if (value != null) {\n            return;\n        }\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertEqual(value1, value2, text, ...parts) {\n    if (qDev) {\n        if (value1 === value2) {\n            return;\n        }\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertFail(text, ...parts) {\n    if (qDev) {\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertTrue(value1, text, ...parts) {\n    if (qDev) {\n        if (value1 === true) {\n            return;\n        }\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertFalse(value1, text, ...parts) {\n    if (qDev) {\n        if (value1 === false) {\n            return;\n        }\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertNumber(value1, text, ...parts) {\n    if (qDev) {\n        if (typeof value1 === 'number') {\n            return;\n        }\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertString(value1, text, ...parts) {\n    if (qDev) {\n        if (typeof value1 === 'string') {\n            return;\n        }\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertQwikElement(el) {\n    if (qDev) {\n        if (!isQwikElement(el)) {\n            console.error('Not a Qwik Element, got', el.nodeType, el);\n            throwErrorAndStop(ASSERT_DISCLAIMER + 'Not a Qwik Element');\n        }\n    }\n}\nexport function assertElement(el) {\n    if (qDev) {\n        if (!isElement(el)) {\n            console.error('Not a Element, got', el);\n            throwErrorAndStop(ASSERT_DISCLAIMER + 'Not an Element');\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL2Vycm9yL2Fzc2VydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNoRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXBDLE1BQU0saUJBQWlCLEdBQUcsMkRBQTJELENBQUM7QUFFdEYsTUFBTSxVQUFVLGFBQWEsQ0FDM0IsS0FBUSxFQUNSLElBQVksRUFDWixHQUFHLEtBQVk7SUFFZixJQUFJLElBQUksRUFBRSxDQUFDO1FBQ1QsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFLENBQUM7WUFDbEIsT0FBTztRQUNULENBQUM7UUFDRCxpQkFBaUIsQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUN4RCxDQUFDO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQ3pCLE1BQVcsRUFDWCxNQUFXLEVBQ1gsSUFBWSxFQUNaLEdBQUcsS0FBWTtJQUVmLElBQUksSUFBSSxFQUFFLENBQUM7UUFDVCxJQUFJLE1BQU0sS0FBSyxNQUFNLEVBQUUsQ0FBQztZQUN0QixPQUFPO1FBQ1QsQ0FBQztRQUNELGlCQUFpQixDQUFDLGlCQUFpQixHQUFHLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQ3hELENBQUM7QUFDSCxDQUFDO0FBR0QsTUFBTSxVQUFVLFVBQVUsQ0FBQyxJQUFZLEVBQUUsR0FBRyxLQUFZO0lBQ3RELElBQUksSUFBSSxFQUFFLENBQUM7UUFDVCxpQkFBaUIsQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUN4RCxDQUFDO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUMsTUFBVyxFQUFFLElBQVksRUFBRSxHQUFHLEtBQVk7SUFDbkUsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNULElBQUksTUFBTSxLQUFLLElBQUksRUFBRSxDQUFDO1lBQ3BCLE9BQU87UUFDVCxDQUFDO1FBQ0QsaUJBQWlCLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDeEQsQ0FBQztBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLE1BQVcsRUFBRSxJQUFZLEVBQUUsR0FBRyxLQUFZO0lBQ3BFLElBQUksSUFBSSxFQUFFLENBQUM7UUFDVCxJQUFJLE1BQU0sS0FBSyxLQUFLLEVBQUUsQ0FBQztZQUNyQixPQUFPO1FBQ1QsQ0FBQztRQUNELGlCQUFpQixDQUFDLGlCQUFpQixHQUFHLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQ3hELENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxNQUFXLEVBQUUsSUFBWSxFQUFFLEdBQUcsS0FBWTtJQUNyRSxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ1QsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUUsQ0FBQztZQUMvQixPQUFPO1FBQ1QsQ0FBQztRQUNELGlCQUFpQixDQUFDLGlCQUFpQixHQUFHLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQ3hELENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxNQUFXLEVBQUUsSUFBWSxFQUFFLEdBQUcsS0FBWTtJQUNyRSxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ1QsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUUsQ0FBQztZQUMvQixPQUFPO1FBQ1QsQ0FBQztRQUNELGlCQUFpQixDQUFDLGlCQUFpQixHQUFHLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQ3hELENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEVBQU87SUFDdkMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNULElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUN2QixPQUFPLENBQUMsS0FBSyxDQUFDLHlCQUF5QixFQUFFLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDMUQsaUJBQWlCLENBQUMsaUJBQWlCLEdBQUcsb0JBQW9CLENBQUMsQ0FBQztRQUM5RCxDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFDLEVBQXlCO0lBQ3JELElBQUksSUFBSSxFQUFFLENBQUM7UUFDVCxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDbkIsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN4QyxpQkFBaUIsQ0FBQyxpQkFBaUIsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzFELENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUXdpa0VsZW1lbnQsIFZpcnR1YWxFbGVtZW50IH0gZnJvbSAnLi4vcmVuZGVyL2RvbS92aXJ0dWFsLWVsZW1lbnQnO1xuaW1wb3J0IHsgaXNFbGVtZW50LCBpc1F3aWtFbGVtZW50IH0gZnJvbSAnLi4vdXRpbC9lbGVtZW50JztcbmltcG9ydCB7IHRocm93RXJyb3JBbmRTdG9wIH0gZnJvbSAnLi4vdXRpbC9sb2cnO1xuaW1wb3J0IHsgcURldiB9IGZyb20gJy4uL3V0aWwvcWRldic7XG5cbmNvbnN0IEFTU0VSVF9ESVNDTEFJTUVSID0gJ0ludGVybmFsIGFzc2VydCwgdGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFF3aWs6ICc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnREZWZpbmVkPFQ+KFxuICB2YWx1ZTogVCxcbiAgdGV4dDogc3RyaW5nLFxuICAuLi5wYXJ0czogYW55W11cbik6IGFzc2VydHMgdmFsdWUgaXMgTm9uTnVsbGFibGU8VD4ge1xuICBpZiAocURldikge1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93RXJyb3JBbmRTdG9wKEFTU0VSVF9ESVNDTEFJTUVSICsgdGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRFcXVhbChcbiAgdmFsdWUxOiBhbnksXG4gIHZhbHVlMjogYW55LFxuICB0ZXh0OiBzdHJpbmcsXG4gIC4uLnBhcnRzOiBhbnlbXVxuKTogYXNzZXJ0cyB2YWx1ZTEgaXMgdHlwZW9mIHZhbHVlMiB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKHZhbHVlMSA9PT0gdmFsdWUyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93RXJyb3JBbmRTdG9wKEFTU0VSVF9ESVNDTEFJTUVSICsgdGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRGYWlsKHRleHQ6IHN0cmluZywgLi4ucGFydHM6IGFueVtdKTogbmV2ZXI7XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RmFpbCh0ZXh0OiBzdHJpbmcsIC4uLnBhcnRzOiBhbnlbXSkge1xuICBpZiAocURldikge1xuICAgIHRocm93RXJyb3JBbmRTdG9wKEFTU0VSVF9ESVNDTEFJTUVSICsgdGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRUcnVlKHZhbHVlMTogYW55LCB0ZXh0OiBzdHJpbmcsIC4uLnBhcnRzOiBhbnlbXSk6IGFzc2VydHMgdmFsdWUxIGlzIHRydWUge1xuICBpZiAocURldikge1xuICAgIGlmICh2YWx1ZTEgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhyb3dFcnJvckFuZFN0b3AoQVNTRVJUX0RJU0NMQUlNRVIgKyB0ZXh0LCAuLi5wYXJ0cyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEZhbHNlKHZhbHVlMTogYW55LCB0ZXh0OiBzdHJpbmcsIC4uLnBhcnRzOiBhbnlbXSk6IGFzc2VydHMgdmFsdWUxIGlzIHRydWUge1xuICBpZiAocURldikge1xuICAgIGlmICh2YWx1ZTEgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93RXJyb3JBbmRTdG9wKEFTU0VSVF9ESVNDTEFJTUVSICsgdGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnROdW1iZXIodmFsdWUxOiBhbnksIHRleHQ6IHN0cmluZywgLi4ucGFydHM6IGFueVtdKTogYXNzZXJ0cyB2YWx1ZTEgaXMgbnVtYmVyIHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlMSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhyb3dFcnJvckFuZFN0b3AoQVNTRVJUX0RJU0NMQUlNRVIgKyB0ZXh0LCAuLi5wYXJ0cyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFN0cmluZyh2YWx1ZTE6IGFueSwgdGV4dDogc3RyaW5nLCAuLi5wYXJ0czogYW55W10pOiBhc3NlcnRzIHZhbHVlMSBpcyBzdHJpbmcge1xuICBpZiAocURldikge1xuICAgIGlmICh0eXBlb2YgdmFsdWUxID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aHJvd0Vycm9yQW5kU3RvcChBU1NFUlRfRElTQ0xBSU1FUiArIHRleHQsIC4uLnBhcnRzKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0UXdpa0VsZW1lbnQoZWw6IGFueSk6IGFzc2VydHMgZWwgaXMgUXdpa0VsZW1lbnQge1xuICBpZiAocURldikge1xuICAgIGlmICghaXNRd2lrRWxlbWVudChlbCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ05vdCBhIFF3aWsgRWxlbWVudCwgZ290JywgZWwubm9kZVR5cGUsIGVsKTtcbiAgICAgIHRocm93RXJyb3JBbmRTdG9wKEFTU0VSVF9ESVNDTEFJTUVSICsgJ05vdCBhIFF3aWsgRWxlbWVudCcpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RWxlbWVudChlbDogTm9kZSB8IFZpcnR1YWxFbGVtZW50KTogYXNzZXJ0cyBlbCBpcyBFbGVtZW50IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAoIWlzRWxlbWVudChlbCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ05vdCBhIEVsZW1lbnQsIGdvdCcsIGVsKTtcbiAgICAgIHRocm93RXJyb3JBbmRTdG9wKEFTU0VSVF9ESVNDTEFJTUVSICsgJ05vdCBhbiBFbGVtZW50Jyk7XG4gICAgfVxuICB9XG59XG4iXX0=","import { logErrorAndStop } from '../util/log';\nimport { qDev } from '../util/qdev';\nexport const codeToText = (code, ...parts) => {\n    if (qDev) {\n        // Keep one error, one line to make it easier to search for the error message.\n        const MAP = [\n            'Error while serializing class attribute', // 0\n            'Can not serialize a HTML Node that is not an Element', // 1\n            'Runtime but no instance found on element.', // 2\n            'Only primitive and object literals can be serialized', // 3\n            'Crash while rendering', // 4\n            'You can render over a existing q:container. Skipping render().', // 5\n            'Set property {{0}}', // 6\n            \"Only function's and 'string's are supported.\", // 7\n            \"Only objects can be wrapped in 'QObject'\", // 8\n            `Only objects literals can be wrapped in 'QObject'`, // 9\n            'QRL is not a function', // 10\n            'Dynamic import not found', // 11\n            'Unknown type argument', // 12\n            `Actual value for useContext({{0}}) can not be found, make sure some ancestor component has set a value using useContextProvider(). In the browser make sure that the context was used during SSR so its state was serialized.`, // 13\n            \"Invoking 'use*()' method outside of invocation context.\", // 14\n            'Cant access renderCtx for existing context', // 15\n            'Cant access document for existing context', // 16\n            'props are immutable', // 17\n            '<div> component can only be used at the root of a Qwik component$()', // 18\n            'Props are immutable by default.', // 19\n            `Calling a 'use*()' method outside 'component$(() => { HERE })' is not allowed. 'use*()' methods provide hooks to the 'component$' state and lifecycle, ie 'use' hooks can only be called synchronously within the 'component$' function or another 'use' method.\\nSee https://qwik.dev/docs/components/tasks/#use-method-rules`, // 20\n            'Container is already paused. Skipping', // 21\n            '', // 22 -- unused\n            'When rendering directly on top of Document, the root node must be a <html>', // 23\n            'A <html> node must have 2 children. The first one <head> and the second one a <body>', // 24\n            'Invalid JSXNode type \"{{0}}\". It must be either a function or a string. Found:', // 25\n            'Tracking value changes can only be done to useStore() objects and component props', // 26\n            'Missing Object ID for captured object', // 27\n            'The provided Context reference \"{{0}}\" is not a valid context created by createContextId()', // 28\n            '<html> is the root container, it can not be rendered inside a component', // 29\n            'QRLs can not be resolved because it does not have an attached container. This means that the QRL does not know where it belongs inside the DOM, so it cant dynamically import() from a relative path.', // 30\n            'QRLs can not be dynamically resolved, because it does not have a chunk path', // 31\n            'The JSX ref attribute must be a Signal', // 32\n        ];\n        let text = MAP[code] ?? '';\n        if (parts.length) {\n            text = text.replaceAll(/{{(\\d+)}}/g, (_, index) => {\n                let v = parts[index];\n                if (v && typeof v === 'object' && v.constructor === Object) {\n                    v = JSON.stringify(v).slice(0, 50);\n                }\n                return v;\n            });\n        }\n        return `Code(${code}): ${text}`;\n    }\n    else {\n        // cute little hack to give roughly the correct line number. Update the line number if it shifts.\n        return `Code(${code}) https://github.com/QwikDev/qwik/blob/main/packages/qwik/src/core/error/error.ts#L${8 + code}`;\n    }\n};\nexport const QError_stringifyClassOrStyle = 0;\nexport const QError_cannotSerializeNode = 1;\nexport const QError_runtimeQrlNoElement = 2;\nexport const QError_verifySerializable = 3;\nexport const QError_errorWhileRendering = 4;\nexport const QError_cannotRenderOverExistingContainer = 5;\nexport const QError_setProperty = 6;\nexport const QError_qrlOrError = 7;\nexport const QError_onlyObjectWrapped = 8;\nexport const QError_onlyLiteralWrapped = 9;\nexport const QError_qrlIsNotFunction = 10;\nexport const QError_dynamicImportFailed = 11;\nexport const QError_unknownTypeArgument = 12;\nexport const QError_notFoundContext = 13;\nexport const QError_useMethodOutsideContext = 14;\nexport const QError_missingRenderCtx = 15;\nexport const QError_missingDoc = 16;\nexport const QError_immutableProps = 17;\nexport const QError_hostCanOnlyBeAtRoot = 18;\nexport const QError_immutableJsxProps = 19;\nexport const QError_useInvokeContext = 20;\nexport const QError_containerAlreadyPaused = 21;\nexport const QError_unused_please_reuse = 22;\nexport const QError_rootNodeMustBeHTML = 23;\nexport const QError_strictHTMLChildren = 24;\nexport const QError_invalidJsxNodeType = 25;\nexport const QError_trackUseStore = 26;\nexport const QError_missingObjectId = 27;\nexport const QError_invalidContext = 28;\nexport const QError_canNotRenderHTML = 29;\nexport const QError_qrlMissingContainer = 30;\nexport const QError_qrlMissingChunk = 31;\nexport const QError_invalidRefValue = 32;\nexport const qError = (code, ...parts) => {\n    const text = codeToText(code, ...parts);\n    return logErrorAndStop(text, ...parts);\n};\n//# sourceMappingURL=data:application/json;base64,","import { isServer } from '@builder.io/qwik/build';\nimport { qError, QError_qrlMissingChunk, QError_qrlMissingContainer } from '../error/error';\nimport { getSymbolHash } from '../qrl/qrl-class';\nimport { qDynamicPlatform } from '../util/qdev';\nexport const createPlatform = () => {\n    return {\n        isServer,\n        importSymbol(containerEl, url, symbolName) {\n            if (isServer) {\n                const hash = getSymbolHash(symbolName);\n                const regSym = globalThis.__qwik_reg_symbols?.get(hash);\n                if (regSym) {\n                    return regSym;\n                }\n            }\n            if (!url) {\n                throw qError(QError_qrlMissingChunk, symbolName);\n            }\n            if (!containerEl) {\n                throw qError(QError_qrlMissingContainer, url, symbolName);\n            }\n            const urlDoc = toUrl(containerEl.ownerDocument, containerEl, url).toString();\n            const urlCopy = new URL(urlDoc);\n            urlCopy.hash = '';\n            const importURL = urlCopy.href;\n            return import(/* @vite-ignore */ importURL).then((mod) => {\n                return mod[symbolName];\n            });\n        },\n        raf: (fn) => {\n            return new Promise((resolve) => {\n                requestAnimationFrame(() => {\n                    resolve(fn());\n                });\n            });\n        },\n        nextTick: (fn) => {\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(fn());\n                });\n            });\n        },\n        chunkForSymbol(symbolName, chunk) {\n            return [symbolName, chunk ?? '_'];\n        },\n    };\n};\n/**\n * Convert relative base URI and relative URL into a fully qualified URL.\n *\n * @param base -`QRL`s are relative, and therefore they need a base for resolution.\n *\n *   - `Element` use `base.ownerDocument.baseURI`\n *   - `Document` use `base.baseURI`\n *   - `string` use `base` as is\n *   - `QConfig` use `base.baseURI`\n *\n * @param url - Relative URL\n * @returns Fully qualified URL.\n */\nexport const toUrl = (doc, containerEl, url) => {\n    const baseURI = doc.baseURI;\n    const base = new URL(containerEl.getAttribute('q:base') ?? baseURI, baseURI);\n    return new URL(url, base);\n};\nlet _platform = /*#__PURE__ */ createPlatform();\n// <docs markdown=\"./readme.md#setPlatform\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ./readme.md#setPlatform instead)\n/**\n * Sets the `CorePlatform`.\n *\n * This is useful to override the platform in tests to change the behavior of,\n * `requestAnimationFrame`, and import resolution.\n *\n * @param doc - The document of the application for which the platform is needed.\n * @param platform - The platform to use.\n * @public\n */\n// </docs>\nexport const setPlatform = (plt) => (_platform = plt);\n// <docs markdown=\"./readme.md#getPlatform\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ./readme.md#getPlatform instead)\n/**\n * Retrieve the `CorePlatform`.\n *\n * The `CorePlatform` is also responsible for retrieving the Manifest, that contains mappings from\n * symbols to javascript import chunks. For this reason, `CorePlatform` can't be global, but is\n * specific to the application currently running. On server it is possible that many different\n * applications are running in a single server instance, and for this reason the `CorePlatform` is\n * associated with the application document.\n *\n * @param docOrNode - The document (or node) of the application for which the platform is needed.\n * @public\n */\n// </docs>\nexport const getPlatform = () => {\n    return _platform;\n};\nexport const isServerPlatform = () => {\n    if (qDynamicPlatform) {\n        return _platform.isServer;\n    }\n    return false;\n};\n//# sourceMappingURL=data:application/json;base64,","/** @internal */\nexport const EMPTY_ARRAY = [];\nexport const EMPTY_OBJ = {};\nObject.freeze(EMPTY_ARRAY);\nObject.freeze(EMPTY_OBJ);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmx5d2VpZ2h0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvZmx5d2VpZ2h0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQjtBQUNoQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsRUFBVyxDQUFDO0FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxFQUF5QixDQUFDO0FBRW5ELE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDM0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBFTVBUWV9BUlJBWSA9IFtdIGFzIGFueVtdO1xuZXhwb3J0IGNvbnN0IEVNUFRZX09CSiA9IHt9IGFzIFJlY29yZDxzdHJpbmcsIGFueT47XG5cbk9iamVjdC5mcmVlemUoRU1QVFlfQVJSQVkpO1xuT2JqZWN0LmZyZWV6ZShFTVBUWV9PQkopO1xuIl19","/** @private */\nexport const isHtmlElement = (node) => {\n    return node ? node.nodeType === 1 : false;\n};\nexport const isSerializableObject = (v) => {\n    const proto = Object.getPrototypeOf(v);\n    return proto === Object.prototype || proto === null;\n};\nexport const isObject = (v) => {\n    return !!v && typeof v === 'object';\n};\nexport const isArray = (v) => {\n    return Array.isArray(v);\n};\nexport const isString = (v) => {\n    return typeof v === 'string';\n};\nexport const isFunction = (v) => {\n    return typeof v === 'function';\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC90eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxlQUFlO0FBQ2YsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsSUFBYSxFQUFtQixFQUFFO0lBQzlELE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBRSxJQUFhLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQ3RELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLENBQUMsQ0FBVSxFQUFnQyxFQUFFO0lBQy9FLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkMsT0FBTyxLQUFLLEtBQUssTUFBTSxDQUFDLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDO0FBQ3RELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQVUsRUFBZSxFQUFFO0lBQ2xELE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLENBQUM7QUFDdEMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBVSxFQUFrQixFQUFFO0lBQ3BELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFVLEVBQWUsRUFBRTtJQUNsRCxPQUFPLE9BQU8sQ0FBQyxLQUFLLFFBQVEsQ0FBQztBQUMvQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBa0MsQ0FBVSxFQUFVLEVBQUU7SUFDaEYsT0FBTyxPQUFPLENBQUMsS0FBSyxVQUFVLENBQUM7QUFDakMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBwcml2YXRlICovXG5leHBvcnQgY29uc3QgaXNIdG1sRWxlbWVudCA9IChub2RlOiB1bmtub3duKTogbm9kZSBpcyBFbGVtZW50ID0+IHtcbiAgcmV0dXJuIG5vZGUgPyAobm9kZSBhcyBOb2RlKS5ub2RlVHlwZSA9PT0gMSA6IGZhbHNlO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzU2VyaWFsaXphYmxlT2JqZWN0ID0gKHY6IHVua25vd24pOiB2IGlzIFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0+IHtcbiAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yodik7XG4gIHJldHVybiBwcm90byA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBwcm90byA9PT0gbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCBpc09iamVjdCA9ICh2OiB1bmtub3duKTogdiBpcyBvYmplY3QgPT4ge1xuICByZXR1cm4gISF2ICYmIHR5cGVvZiB2ID09PSAnb2JqZWN0Jztcbn07XG5cbmV4cG9ydCBjb25zdCBpc0FycmF5ID0gKHY6IHVua25vd24pOiB2IGlzIHVua25vd25bXSA9PiB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHYpO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzU3RyaW5nID0gKHY6IHVua25vd24pOiB2IGlzIHN0cmluZyA9PiB7XG4gIHJldHVybiB0eXBlb2YgdiA9PT0gJ3N0cmluZyc7XG59O1xuXG5leHBvcnQgY29uc3QgaXNGdW5jdGlvbiA9IDxUIGV4dGVuZHMgKC4uLmFyZ3M6IGFueSkgPT4gYW55Pih2OiB1bmtub3duKTogdiBpcyBUID0+IHtcbiAgcmV0dXJuIHR5cGVvZiB2ID09PSAnZnVuY3Rpb24nO1xufTtcblxuLyoqXG4gKiBUeXBlIHJlcHJlc2VudGluZyBhIHZhbHVlIHdoaWNoIGlzIGVpdGhlciByZXNvbHZlIG9yIGEgcHJvbWlzZS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIFZhbHVlT3JQcm9taXNlPFQ+ID0gVCB8IFByb21pc2U8VD47XG4iXX0=","import { assertDefined } from '../error/assert';\nimport { qDynamicPlatform } from './qdev';\nexport const getDocument = (node) => {\n    if (!qDynamicPlatform) {\n        return document;\n    }\n    if (typeof document !== 'undefined') {\n        return document;\n    }\n    if (node.nodeType === 9) {\n        return node;\n    }\n    const doc = node.ownerDocument;\n    assertDefined(doc, 'doc must be defined');\n    return doc;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvZG9tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVoRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFMUMsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsSUFBNEIsRUFBWSxFQUFFO0lBQ3BFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3RCLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFDRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFdBQVcsRUFBRSxDQUFDO1FBQ3BDLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDeEIsT0FBTyxJQUF1QixDQUFDO0lBQ2pDLENBQUM7SUFDRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQy9CLGFBQWEsQ0FBQyxHQUFHLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUMxQyxPQUFPLEdBQUksQ0FBQztBQUNkLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydERlZmluZWQgfSBmcm9tICcuLi9lcnJvci9hc3NlcnQnO1xuaW1wb3J0IHR5cGUgeyBRd2lrRWxlbWVudCB9IGZyb20gJy4uL3JlbmRlci9kb20vdmlydHVhbC1lbGVtZW50JztcbmltcG9ydCB7IHFEeW5hbWljUGxhdGZvcm0gfSBmcm9tICcuL3FkZXYnO1xuXG5leHBvcnQgY29uc3QgZ2V0RG9jdW1lbnQgPSAobm9kZTogUXdpa0VsZW1lbnQgfCBEb2N1bWVudCk6IERvY3VtZW50ID0+IHtcbiAgaWYgKCFxRHluYW1pY1BsYXRmb3JtKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50O1xuICB9XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50O1xuICB9XG4gIGlmIChub2RlLm5vZGVUeXBlID09PSA5KSB7XG4gICAgcmV0dXJuIG5vZGUgYXMgYW55IGFzIERvY3VtZW50O1xuICB9XG4gIGNvbnN0IGRvYyA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgYXNzZXJ0RGVmaW5lZChkb2MsICdkb2MgbXVzdCBiZSBkZWZpbmVkJyk7XG4gIHJldHVybiBkb2MhO1xufTtcbiJdfQ==","export const isContainer2 = (container) => {\n    return container && typeof container === 'object' && typeof container.setHostProp === 'function';\n};\n/**\n * A friendly name tag for a VirtualVNode.\n *\n * Theses are used to give a name to a VirtualVNode. This is useful for debugging and testing.\n *\n * The name is only added in development mode and is not included in production builds.\n */\nexport const DEBUG_TYPE = 'q:type';\nexport var VirtualType;\n(function (VirtualType) {\n    VirtualType[\"Virtual\"] = \"V\";\n    VirtualType[\"Fragment\"] = \"F\";\n    VirtualType[\"DerivedSignal\"] = \"D\";\n    VirtualType[\"Awaited\"] = \"A\";\n    VirtualType[\"Component\"] = \"C\";\n    VirtualType[\"InlineComponent\"] = \"I\";\n    VirtualType[\"Projection\"] = \"P\";\n})(VirtualType || (VirtualType = {}));\nconst START = '\\x1b[34m';\nconst END = '\\x1b[0m';\nexport const VirtualTypeName = {\n    [VirtualType.Virtual]: /* ********* */ START + 'Virtual' + END, //\n    [VirtualType.Fragment]: /* ******** */ START + 'Fragment' + END, //\n    [VirtualType.DerivedSignal]: /* *** */ START + 'Signal' + END, //\n    [VirtualType.Awaited]: /* ********* */ START + 'Awaited' + END, //\n    [VirtualType.Component]: /* ******* */ START + 'Component' + END, //\n    [VirtualType.InlineComponent]: /* * */ START + 'InlineComponent' + END, //\n    [VirtualType.Projection]: /* ****** */ START + 'Projection' + END, //\n};\nexport var QContainerValue;\n(function (QContainerValue) {\n    QContainerValue[\"PAUSED\"] = \"paused\";\n    QContainerValue[\"RESUMED\"] = \"resumed\";\n    // these values below are used in the qwik loader as a plain text for the q:container selector\n    // standard dangerouslySetInnerHTML\n    QContainerValue[\"HTML\"] = \"html\";\n    // textarea\n    QContainerValue[\"TEXT\"] = \"text\";\n})(QContainerValue || (QContainerValue = {}));\n//# sourceMappingURL=data:application/json;base64,","import { QContainerValue } from '../v2/shared/types';\n/** State factory of the component. */\nexport const OnRenderProp = 'q:renderFn';\n/** Component style host prefix */\nexport const ComponentStylesPrefixHost = '💎';\n/** Component style content prefix */\nexport const ComponentStylesPrefixContent = '⭐️';\n/** Prefix used to identify on listeners. */\nexport const EventPrefix = 'on:';\n/** Attribute used to mark that an event listener is attached. */\nexport const EventAny = 'on:.';\n/** `<some-element q:slot=\"...\">` */\nexport const QSlot = 'q:slot';\nexport const QSlotParent = ':';\nexport const QSlotRef = 'q:sref';\nexport const QSlotS = 'q:s';\nexport const QStyle = 'q:style';\nexport const QStyleSelector = 'style[q\\\\:style]';\nexport const QStyleSSelector = 'style[q\\\\:sstyle]';\nexport const QStylesAllSelector = QStyleSelector + ',' + QStyleSSelector;\nexport const QScopedStyle = 'q:sstyle';\nexport const QCtxAttr = 'q:ctx';\nexport const QManifestHash = 'q:manifest-hash';\nexport const QFuncsPrefix = 'qFuncs_';\nexport const getQFuncs = (document, hash) => {\n    return document[QFuncsPrefix + hash] || [];\n};\nexport const QRenderAttr = 'q:render';\nexport const QRuntimeAttr = 'q:runtime';\nexport const QVersionAttr = 'q:version';\nexport const QBaseAttr = 'q:base';\nexport const QLocaleAttr = 'q:locale';\nexport const QManifestHashAttr = 'q:manifest-hash';\nexport const QInstanceAttr = 'q:instance';\nexport const QContainerIsland = 'q:container-island';\nexport const QContainerIslandEnd = '/' + QContainerIsland;\nexport const QIgnore = 'q:ignore';\nexport const QIgnoreEnd = '/' + QIgnore;\nexport const QContainerAttr = 'q:container';\nexport const QContainerAttrEnd = '/' + QContainerAttr;\nexport const QShadowRoot = 'q:shadowroot';\nexport const QTemplate = 'q:template';\n// the same selector should be inside the qwik loader\n// and the same selector should be inside the qwik city spa-shim and spa-init\nexport const QContainerSelector = '[q\\\\:container]:not([q\\\\:container=' +\n    QContainerValue.HTML +\n    ']):not([q\\\\:container=' +\n    QContainerValue.TEXT +\n    '])';\nexport const HTML_NS = 'http://www.w3.org/1999/xhtml';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\nexport const MATH_NS = 'http://www.w3.org/1998/Math/MathML';\nexport const ResourceEvent = 'qResource';\nexport const ComputedEvent = 'qComputed';\nexport const RenderEvent = 'qRender';\nexport const TaskEvent = 'qTask';\n/** `<q:slot name=\"...\">` */\nexport const QSlotInertName = '\\u0000';\nexport const QDefaultSlot = '';\n/**\n * Attribute to mark that this VNode has a pointer to itself from the `qwik/json` state.\n *\n * As the VNode get materialized the vnode now becomes eligible for mutation. Once the vnode mutates\n * the `VNode` references from the `qwik/json` may become invalid. For this reason, these references\n * need to be eagerly resolved. `VNODE_REF` stores a pointer to \"this\" vnode. This allows the system\n * to eagerly resolve these pointes as the vnodes are materialized.\n */\nexport const ELEMENT_ID = 'q:id';\nexport const ELEMENT_KEY = 'q:key';\nexport const ELEMENT_PROPS = 'q:props';\nexport const ELEMENT_SEQ = 'q:seq';\nexport const ELEMENT_SEQ_IDX = 'q:seqIdx';\nexport const ELEMENT_SELF_ID = -1;\nexport const ELEMENT_ID_SELECTOR = '[q\\\\:id]';\nexport const ELEMENT_ID_PREFIX = '#';\nexport const INLINE_FN_PREFIX = '@';\n/** Non serializable markers - always begins with `:` character */\nexport const USE_ON_LOCAL = ':on';\nexport const USE_ON_LOCAL_SEQ_IDX = ':onIdx';\nexport const USE_ON_LOCAL_FLAGS = ':onFlags';\n// comment nodes\nexport const FLUSH_COMMENT = 'qkssr-f';\nexport const STREAM_BLOCK_START_COMMENT = 'qkssr-pu';\nexport const STREAM_BLOCK_END_COMMENT = 'qkssr-po';\n//# sourceMappingURL=data:application/json;base64,","export const QObjectRecursive = 1 << 0;\nexport const QObjectImmutable = 1 << 1;\nexport const QObjectTargetSymbol = Symbol('proxy target');\nexport const QObjectFlagsSymbol = Symbol('proxy flags');\nexport const QObjectManagerSymbol = Symbol('proxy manager');\n/** @internal */\nexport const _CONST_PROPS = Symbol('CONST');\n/** @internal */\nexport const _VAR_PROPS = Symbol('VAR');\n/** @internal @deprecated v1 compat */\nexport const _IMMUTABLE = Symbol('IMMUTABLE');\n/** @deprecated */\nexport const _IMMUTABLE_PREFIX = '$$';\n/**\n * @internal\n * Key for the virtual element stored on qv comments\n */\nexport const VIRTUAL_SYMBOL = '__virtual';\n/**\n * @internal\n * Key for the `QContext` object stored on QwikElements\n */\nexport const Q_CTX = '_qc_';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3N0YXRlL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFdkMsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQzFELE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN4RCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7QUFFNUQsZ0JBQWdCO0FBQ2hCLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDNUMsZ0JBQWdCO0FBQ2hCLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFeEMsc0NBQXNDO0FBQ3RDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDOUMsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQztBQUV0Qzs7O0dBR0c7QUFDSCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsV0FBVyxDQUFDO0FBQzFDOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgUU9iamVjdFJlY3Vyc2l2ZSA9IDEgPDwgMDtcbmV4cG9ydCBjb25zdCBRT2JqZWN0SW1tdXRhYmxlID0gMSA8PCAxO1xuXG5leHBvcnQgY29uc3QgUU9iamVjdFRhcmdldFN5bWJvbCA9IFN5bWJvbCgncHJveHkgdGFyZ2V0Jyk7XG5leHBvcnQgY29uc3QgUU9iamVjdEZsYWdzU3ltYm9sID0gU3ltYm9sKCdwcm94eSBmbGFncycpO1xuZXhwb3J0IGNvbnN0IFFPYmplY3RNYW5hZ2VyU3ltYm9sID0gU3ltYm9sKCdwcm94eSBtYW5hZ2VyJyk7XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBfQ09OU1RfUFJPUFMgPSBTeW1ib2woJ0NPTlNUJyk7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgX1ZBUl9QUk9QUyA9IFN5bWJvbCgnVkFSJyk7XG5cbi8qKiBAaW50ZXJuYWwgQGRlcHJlY2F0ZWQgdjEgY29tcGF0ICovXG5leHBvcnQgY29uc3QgX0lNTVVUQUJMRSA9IFN5bWJvbCgnSU1NVVRBQkxFJyk7XG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBjb25zdCBfSU1NVVRBQkxFX1BSRUZJWCA9ICckJCc7XG5cbi8qKlxuICogQGludGVybmFsXG4gKiBLZXkgZm9yIHRoZSB2aXJ0dWFsIGVsZW1lbnQgc3RvcmVkIG9uIHF2IGNvbW1lbnRzXG4gKi9cbmV4cG9ydCBjb25zdCBWSVJUVUFMX1NZTUJPTCA9ICdfX3ZpcnR1YWwnO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIEtleSBmb3IgdGhlIGBRQ29udGV4dGAgb2JqZWN0IHN0b3JlZCBvbiBRd2lrRWxlbWVudHNcbiAqL1xuZXhwb3J0IGNvbnN0IFFfQ1RYID0gJ19xY18nO1xuIl19","export const directSetAttribute = (el, prop, value) => {\n    return el.setAttribute(prop, value);\n};\nexport const directGetAttribute = (el, prop) => {\n    return el.getAttribute(prop);\n};\nexport const directRemoveAttribute = (el, prop) => {\n    return el.removeAttribute(prop);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFzdC1jYWxscy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvZmFzdC1jYWxscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQWUsRUFBRSxJQUFZLEVBQUUsS0FBYSxFQUFFLEVBQUU7SUFDakYsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN0QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQWUsRUFBRSxJQUFZLEVBQUUsRUFBRTtJQUNsRSxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxFQUFlLEVBQUUsSUFBWSxFQUFFLEVBQUU7SUFDckUsT0FBTyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUXdpa0VsZW1lbnQgfSBmcm9tICcuL2RvbS92aXJ0dWFsLWVsZW1lbnQnO1xuXG5leHBvcnQgY29uc3QgZGlyZWN0U2V0QXR0cmlidXRlID0gKGVsOiBRd2lrRWxlbWVudCwgcHJvcDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBlbC5zZXRBdHRyaWJ1dGUocHJvcCwgdmFsdWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGRpcmVjdEdldEF0dHJpYnV0ZSA9IChlbDogUXdpa0VsZW1lbnQsIHByb3A6IHN0cmluZykgPT4ge1xuICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKHByb3ApO1xufTtcblxuZXhwb3J0IGNvbnN0IGRpcmVjdFJlbW92ZUF0dHJpYnV0ZSA9IChlbDogUXdpa0VsZW1lbnQsIHByb3A6IHN0cmluZykgPT4ge1xuICByZXR1cm4gZWwucmVtb3ZlQXR0cmlidXRlKHByb3ApO1xufTtcbiJdfQ==","export const fromCamelToKebabCase = (text) => {\n    return text.replace(/([A-Z])/g, '-$1').toLowerCase();\n};\nexport const fromKebabToCamelCase = (text) => {\n    return text.replace(/-./g, (x) => x[1].toUpperCase());\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FzZS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL2Nhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxJQUFZLEVBQVUsRUFBRTtJQUMzRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3ZELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLENBQUMsSUFBWSxFQUFVLEVBQUU7SUFDM0QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDeEQsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGZyb21DYW1lbFRvS2ViYWJDYXNlID0gKHRleHQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiB0ZXh0LnJlcGxhY2UoLyhbQS1aXSkvZywgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG5leHBvcnQgY29uc3QgZnJvbUtlYmFiVG9DYW1lbENhc2UgPSAodGV4dDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIHRleHQucmVwbGFjZSgvLS4vZywgKHgpID0+IHhbMV0udG9VcHBlckNhc2UoKSk7XG59O1xuIl19","import { isBrowser } from '@builder.io/qwik/build';\nimport { qTest } from './qdev';\nexport const emitEvent = (el, eventName, detail, bubbles) => {\n    if (!qTest && (isBrowser || typeof CustomEvent === 'function')) {\n        if (el) {\n            el.dispatchEvent(new CustomEvent(eventName, {\n                detail,\n                bubbles: bubbles,\n                composed: bubbles,\n            }));\n        }\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC9ldmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDbkQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUUvQixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FDdkIsRUFBdUIsRUFDdkIsU0FBaUIsRUFDakIsTUFBVyxFQUNYLE9BQWdCLEVBQ2hCLEVBQUU7SUFDRixJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsU0FBUyxJQUFJLE9BQU8sV0FBVyxLQUFLLFVBQVUsQ0FBQyxFQUFFLENBQUM7UUFDL0QsSUFBSSxFQUFFLEVBQUUsQ0FBQztZQUNQLEVBQUUsQ0FBQyxhQUFhLENBQ2QsSUFBSSxXQUFXLENBQUMsU0FBUyxFQUFFO2dCQUN6QixNQUFNO2dCQUNOLE9BQU8sRUFBRSxPQUFPO2dCQUNoQixRQUFRLEVBQUUsT0FBTzthQUNsQixDQUFDLENBQ0gsQ0FBQztRQUNKLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNCcm93c2VyIH0gZnJvbSAnQGJ1aWxkZXIuaW8vcXdpay9idWlsZCc7XG5pbXBvcnQgeyBxVGVzdCB9IGZyb20gJy4vcWRldic7XG5cbmV4cG9ydCBjb25zdCBlbWl0RXZlbnQgPSAoXG4gIGVsOiBFbGVtZW50IHwgdW5kZWZpbmVkLFxuICBldmVudE5hbWU6IHN0cmluZyxcbiAgZGV0YWlsOiBhbnksXG4gIGJ1YmJsZXM6IGJvb2xlYW5cbikgPT4ge1xuICBpZiAoIXFUZXN0ICYmIChpc0Jyb3dzZXIgfHwgdHlwZW9mIEN1c3RvbUV2ZW50ID09PSAnZnVuY3Rpb24nKSkge1xuICAgIGlmIChlbCkge1xuICAgICAgZWwuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgbmV3IEN1c3RvbUV2ZW50KGV2ZW50TmFtZSwge1xuICAgICAgICAgIGRldGFpbCxcbiAgICAgICAgICBidWJibGVzOiBidWJibGVzLFxuICAgICAgICAgIGNvbXBvc2VkOiBidWJibGVzLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn07XG4iXX0=","import { inflateQrl, parseQRL } from '../qrl/qrl';\nimport { assertQrl, isQrl } from '../qrl/qrl-class';\nimport { dollar } from '../qrl/qrl.public';\nimport { isArray } from '../util/types';\nimport { assertTrue } from '../error/assert';\nimport { EMPTY_ARRAY } from '../util/flyweight';\nimport { qRuntimeQrl, qSerialize } from '../util/qdev';\nimport { fromCamelToKebabCase } from '../util/case';\nconst ON_PROP_REGEX = /^(on|window:|document:)/;\nexport const PREVENT_DEFAULT = 'preventdefault:';\nexport const isOnProp = (prop) => {\n    return prop.endsWith('$') && ON_PROP_REGEX.test(prop);\n};\nexport const groupListeners = (listeners) => {\n    if (listeners.length === 0) {\n        return EMPTY_ARRAY;\n    }\n    if (listeners.length === 1) {\n        const listener = listeners[0];\n        return [[listener[0], [listener[1]]]];\n    }\n    const keys = [];\n    for (let i = 0; i < listeners.length; i++) {\n        const eventName = listeners[i][0];\n        if (!keys.includes(eventName)) {\n            keys.push(eventName);\n        }\n    }\n    return keys.map((eventName) => {\n        return [eventName, listeners.filter((l) => l[0] === eventName).map((a) => a[1])];\n    });\n};\nexport const setEvent = (existingListeners, prop, input, containerEl) => {\n    assertTrue(prop.endsWith('$'), 'render: event property does not end with $', prop);\n    prop = normalizeOnProp(prop.slice(0, -1));\n    if (input) {\n        if (isArray(input)) {\n            const processed = input\n                .flat(Infinity)\n                .filter((q) => q != null)\n                .map((q) => [prop, ensureQrl(q, containerEl)]);\n            existingListeners.push(...processed);\n        }\n        else {\n            existingListeners.push([prop, ensureQrl(input, containerEl)]);\n        }\n    }\n    return prop;\n};\nconst PREFIXES = ['on', 'window:on', 'document:on'];\nconst SCOPED = ['on', 'on-window', 'on-document'];\nexport const normalizeOnProp = (prop) => {\n    let scope = 'on';\n    for (let i = 0; i < PREFIXES.length; i++) {\n        const prefix = PREFIXES[i];\n        if (prop.startsWith(prefix)) {\n            scope = SCOPED[i];\n            prop = prop.slice(prefix.length);\n            break;\n        }\n    }\n    if (prop.startsWith('-')) {\n        prop = fromCamelToKebabCase(prop.slice(1));\n    }\n    else {\n        prop = prop.toLowerCase();\n    }\n    return scope + ':' + prop;\n};\nconst ensureQrl = (value, containerEl) => {\n    if (qSerialize && !qRuntimeQrl) {\n        assertQrl(value);\n        value.$setContainer$(containerEl);\n        return value;\n    }\n    const qrl = isQrl(value) ? value : dollar(value);\n    qrl.$setContainer$(containerEl);\n    return qrl;\n};\nexport const getDomListeners = (elCtx, containerEl) => {\n    const attributes = elCtx.$element$.attributes;\n    const listeners = [];\n    for (let i = 0; i < attributes.length; i++) {\n        const { name, value } = attributes.item(i);\n        if (name.startsWith('on:') ||\n            name.startsWith('on-window:') ||\n            name.startsWith('on-document:')) {\n            const urls = value.split('\\n');\n            for (const url of urls) {\n                const qrl = parseQRL(url, containerEl);\n                if (qrl.$capture$) {\n                    inflateQrl(qrl, elCtx);\n                }\n                listeners.push([name, qrl]);\n            }\n        }\n    }\n    return listeners;\n};\n//# sourceMappingURL=data:application/json;base64,","import { throwErrorAndStop } from './log';\nexport const isPromise = (value) => {\n    // not using \"value instanceof Promise\" to have zone.js support\n    return value && typeof value == 'object' && typeof value.then === 'function';\n};\nexport const safeCall = (call, thenFn, rejectFn) => {\n    try {\n        const result = call();\n        if (isPromise(result)) {\n            return result.then(thenFn, rejectFn);\n        }\n        else {\n            return thenFn(result);\n        }\n    }\n    catch (e) {\n        return rejectFn(e);\n    }\n};\nexport const maybeThen = (promise, thenFn) => {\n    return isPromise(promise) ? promise.then(thenFn, shouldNotError) : thenFn(promise);\n};\nexport const maybeThenPassError = (promise, thenFn) => {\n    return isPromise(promise) ? promise.then(thenFn) : thenFn(promise);\n};\nexport const shouldNotError = (reason) => {\n    throwErrorAndStop('QWIK ERROR:', reason);\n};\nexport const maybeThenMap = (array, thenMapFn, thenFn) => {\n    const length = array.length;\n    const mappedArray = [];\n    let idx = 0;\n    const drain = () => {\n        let result;\n        do {\n            const item = array[idx];\n            result = isPromise(item) ? item.then(thenMapFn) : thenMapFn(item);\n            if (isPromise(result)) {\n                return result.then((value) => {\n                    mappedArray[idx] = value;\n                    return drain();\n                });\n            }\n            else {\n                mappedArray[idx] = result;\n                idx++;\n            }\n        } while (idx < length);\n        return mappedArray;\n    };\n    return maybeThen(drain(), thenFn);\n};\nexport const promiseAll = (promises) => {\n    const hasPromise = promises.some(isPromise);\n    if (hasPromise) {\n        return Promise.all(promises);\n    }\n    return promises;\n};\nexport const promiseAllLazy = (promises) => {\n    if (promises.length > 0) {\n        return Promise.all(promises);\n    }\n    return promises;\n};\nexport const isNotNullable = (v) => {\n    return v != null;\n};\nexport const delay = (timeout) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, timeout);\n    });\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbWlzZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC9wcm9taXNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFLMUMsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBVSxFQUF5QixFQUFFO0lBQzdELCtEQUErRDtJQUMvRCxPQUFPLEtBQUssSUFBSSxPQUFPLEtBQUssSUFBSSxRQUFRLElBQUksT0FBTyxLQUFLLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQztBQUMvRSxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FDdEIsSUFBNkIsRUFDN0IsTUFBc0QsRUFDdEQsUUFBb0QsRUFDN0IsRUFBRTtJQUN6QixJQUFJLENBQUM7UUFDSCxNQUFNLE1BQU0sR0FBRyxJQUFJLEVBQUUsQ0FBQztRQUN0QixJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1lBQ3RCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDOUMsQ0FBQzthQUFNLENBQUM7WUFDTixPQUFPLE1BQU0sQ0FBQyxNQUFhLENBQUMsQ0FBQztRQUMvQixDQUFDO0lBQ0gsQ0FBQztJQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDWCxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyQixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQ3ZCLE9BQTBCLEVBQzFCLE1BQThDLEVBQzNCLEVBQUU7SUFDckIsT0FBTyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBYSxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FB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QUUsT0FBTyxDQUFDLENBQUM7SUFDL0IsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0aHJvd0Vycm9yQW5kU3RvcCB9IGZyb20gJy4vbG9nJztcbmltcG9ydCB0eXBlIHsgVmFsdWVPclByb21pc2UgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IHR5cGUgUHJvbWlzZVRyZWU8VD4gPSBUIHwgUHJvbWlzZTxUPiB8IFByb21pc2U8VFtdPiB8IEFycmF5PFByb21pc2VUcmVlPFQ+PjtcblxuZXhwb3J0IGNvbnN0IGlzUHJvbWlzZSA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgUHJvbWlzZTxhbnk+ID0+IHtcbiAgLy8gbm90IHVzaW5nIFwidmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlXCIgdG8gaGF2ZSB6b25lLmpzIHN1cHBvcnRcbiAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbmV4cG9ydCBjb25zdCBzYWZlQ2FsbCA9IDxULCBCLCBDPihcbiAgY2FsbDogKCkgPT4gVmFsdWVPclByb21pc2U8VD4sXG4gIHRoZW5GbjogeyBmKGFyZzogQXdhaXRlZDxUPik6IFZhbHVlT3JQcm9taXNlPEI+IH1bJ2YnXSxcbiAgcmVqZWN0Rm46IHsgZihyZWFzb246IGFueSk6IFZhbHVlT3JQcm9taXNlPEM+IH1bJ2YnXVxuKTogVmFsdWVPclByb21pc2U8QiB8IEM+ID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXN1bHQgPSBjYWxsKCk7XG4gICAgaWYgKGlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICByZXR1cm4gcmVzdWx0LnRoZW4odGhlbkZuIGFzIGFueSwgcmVqZWN0Rm4pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhlbkZuKHJlc3VsdCBhcyBhbnkpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiByZWplY3RGbihlKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IG1heWJlVGhlbiA9IDxULCBCPihcbiAgcHJvbWlzZTogVmFsdWVPclByb21pc2U8VD4sXG4gIHRoZW5GbjogKGFyZzogQXdhaXRlZDxUPikgPT4gVmFsdWVPclByb21pc2U8Qj5cbik6IFZhbHVlT3JQcm9taXNlPEI+ID0+IHtcbiAgcmV0dXJuIGlzUHJvbWlzZShwcm9taXNlKSA/IHByb21pc2UudGhlbih0aGVuRm4gYXMgYW55LCBzaG91bGROb3RFcnJvcikgOiB0aGVuRm4ocHJvbWlzZSBhcyBhbnkpO1xufTtcblxuZXhwb3J0IGNvbnN0IG1heWJlVGhlblBhc3NFcnJvciA9IDxULCBCPihcbiAgcHJvbWlzZTogVmFsdWVPclByb21pc2U8VD4sXG4gIHRoZW5GbjogKGFyZzogQXdhaXRlZDxUPikgPT4gVmFsdWVPclByb21pc2U8Qj5cbik6IFZhbHVlT3JQcm9taXNlPEI+ID0+IHtcbiAgcmV0dXJuIGlzUHJvbWlzZShwcm9taXNlKSA/IHByb21pc2UudGhlbih0aGVuRm4gYXMgYW55KSA6IHRoZW5Gbihwcm9taXNlIGFzIGFueSk7XG59O1xuXG5leHBvcnQgY29uc3Qgc2hvdWxkTm90RXJyb3IgPSAocmVhc29uOiBhbnkpOiBhbnkgPT4ge1xuICB0aHJvd0Vycm9yQW5kU3RvcCgnUVdJSyBFUlJPUjonLCByZWFzb24pO1xufTtcblxuZXhwb3J0IGNvbnN0IG1heWJlVGhlbk1hcCA9IDxULCBNQVBfUkVULCBSRVQ+KFxuICBhcnJheTogVmFsdWVPclByb21pc2U8VD5bXSxcbiAgdGhlbk1hcEZuOiAoaXRlbTogVCkgPT4gVmFsdWVPclByb21pc2U8TUFQX1JFVD4sXG4gIHRoZW5GbjogKGl0ZW1zOiBNQVBfUkVUW10pID0+IFZhbHVlT3JQcm9taXNlPFJFVD5cbik6IFZhbHVlT3JQcm9taXNlPFJFVD4gPT4ge1xuICBjb25zdCBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIGNvbnN0IG1hcHBlZEFycmF5OiBNQVBfUkVUW10gPSBbXTtcbiAgbGV0IGlkeCA9IDA7XG4gIGNvbnN0IGRyYWluID0gKCk6IFZhbHVlT3JQcm9taXNlPE1BUF9SRVRbXT4gPT4ge1xuICAgIGxldCByZXN1bHQ6IFZhbHVlT3JQcm9taXNlPE1BUF9SRVQ+O1xuICAgIGRvIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBhcnJheVtpZHhdO1xuICAgICAgcmVzdWx0ID0gaXNQcm9taXNlKGl0ZW0pID8gaXRlbS50aGVuKHRoZW5NYXBGbikgOiB0aGVuTWFwRm4oaXRlbSk7XG4gICAgICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgIG1hcHBlZEFycmF5W2lkeF0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gZHJhaW4oKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXBwZWRBcnJheVtpZHhdID0gcmVzdWx0O1xuICAgICAgICBpZHgrKztcbiAgICAgIH1cbiAgICB9IHdoaWxlIChpZHggPCBsZW5ndGgpO1xuICAgIHJldHVybiBtYXBwZWRBcnJheTtcbiAgfTtcbiAgcmV0dXJuIG1heWJlVGhlbihkcmFpbigpLCB0aGVuRm4pO1xufTtcblxuZXhwb3J0IGNvbnN0IHByb21pc2VBbGwgPSA8VCBleHRlbmRzIHJlYWRvbmx5IHVua25vd25bXSB8IFtdPihcbiAgcHJvbWlzZXM6IFRcbik6IFZhbHVlT3JQcm9taXNlPHsgLXJlYWRvbmx5IFtQIGluIGtleW9mIFRdOiBBd2FpdGVkPFRbUF0+IH0+ID0+IHtcbiAgY29uc3QgaGFzUHJvbWlzZSA9IHByb21pc2VzLnNvbWUoaXNQcm9taXNlKTtcbiAgaWYgKGhhc1Byb21pc2UpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICB9XG4gIHJldHVybiBwcm9taXNlcyBhcyBhbnk7XG59O1xuXG5leHBvcnQgY29uc3QgcHJvbWlzZUFsbExhenkgPSA8VCBleHRlbmRzIHJlYWRvbmx5IHVua25vd25bXSB8IFtdPihcbiAgcHJvbWlzZXM6IFRcbik6IFZhbHVlT3JQcm9taXNlPHZvaWQ+ID0+IHtcbiAgaWYgKHByb21pc2VzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpIGFzIGFueTtcbiAgfVxuICByZXR1cm4gcHJvbWlzZXMgYXMgYW55O1xufTtcblxuZXhwb3J0IGNvbnN0IGlzTm90TnVsbGFibGUgPSA8VD4odjogVCk6IHYgaXMgTm9uTnVsbGFibGU8VD4gPT4ge1xuICByZXR1cm4gdiAhPSBudWxsO1xufTtcblxuZXhwb3J0IGNvbnN0IGRlbGF5ID0gKHRpbWVvdXQ6IG51bWJlcikgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVvdXQpO1xuICB9KTtcbn07XG4iXX0=","/**\n * QWIK_VERSION\n *\n * @public\n */\nexport const version = globalThis.QWIK_VERSION;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS92ZXJzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUksVUFBa0IsQ0FBQyxZQUFzQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBRV0lLX1ZFUlNJT05cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB2ZXJzaW9uID0gKGdsb2JhbFRoaXMgYXMgYW55KS5RV0lLX1ZFUlNJT04gYXMgc3RyaW5nO1xuIl19","import { STREAM_BLOCK_END_COMMENT, STREAM_BLOCK_START_COMMENT } from '../../util/markers';\nimport { jsx, RenderOnce } from '../jsx/jsx-runtime';\n/** @public */\nexport const SkipRender = Symbol('skip render');\n/** @public */\nexport const SSRRaw = () => null;\n/** @public */\nexport const SSRComment = () => null;\n/** @public */\nexport const SSRStreamBlock = (props) => {\n    return [\n        jsx(SSRComment, { data: STREAM_BLOCK_START_COMMENT }),\n        props.children,\n        jsx(SSRComment, { data: STREAM_BLOCK_END_COMMENT }),\n    ];\n};\n/** @public */\nexport const SSRStream = (props, key) => jsx(RenderOnce, { children: jsx(InternalSSRStream, props) }, key);\nexport const InternalSSRStream = () => null;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMucHVibGljLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3JlbmRlci9qc3gvdXRpbHMucHVibGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSwwQkFBMEIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzFGLE9BQU8sRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFLckQsY0FBYztBQUNkLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBWSxNQUFNLENBQUMsYUFBYSxDQUFRLENBQUM7QUFFaEUsY0FBYztBQUNkLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBd0MsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDO0FBRXRFLGNBQWM7QUFDZCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQXdDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztBQUUxRSxjQUFjO0FBQ2QsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFnRCxDQUFDLEtBQUssRUFBRSxFQUFFO0lBQ25GLE9BQU87UUFDTCxHQUFHLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLDBCQUEwQixFQUFFLENBQUM7UUFDckQsS0FBSyxDQUFDLFFBQVE7UUFDZCxHQUFHLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLENBQUM7S0FDcEQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQWFGLGNBQWM7QUFDZCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQXNDLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQ3pFLEdBQUcsQ0FBQyxVQUFVLEVBQUUsRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFPcEUsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQXNDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNUUkVBTV9CTE9DS19FTkRfQ09NTUVOVCwgU1RSRUFNX0JMT0NLX1NUQVJUX0NPTU1FTlQgfSBmcm9tICcuLi8uLi91dGlsL21hcmtlcnMnO1xuaW1wb3J0IHsganN4LCBSZW5kZXJPbmNlIH0gZnJvbSAnLi4vanN4L2pzeC1ydW50aW1lJztcbmltcG9ydCB0eXBlIHsgU3RyZWFtV3JpdGVyIH0gZnJvbSAnLi4vc3NyL3JlbmRlci1zc3InO1xuaW1wb3J0IHR5cGUgeyBGdW5jdGlvbkNvbXBvbmVudCwgSlNYTm9kZSwgSlNYT3V0cHV0IH0gZnJvbSAnLi90eXBlcy9qc3gtbm9kZSc7XG5pbXBvcnQgdHlwZSB7IEpTWENoaWxkcmVuIH0gZnJvbSAnLi90eXBlcy9qc3gtcXdpay1hdHRyaWJ1dGVzJztcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBTa2lwUmVuZGVyOiBKU1hOb2RlID0gU3ltYm9sKCdza2lwIHJlbmRlcicpIGFzIGFueTtcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBTU1JSYXc6IEZ1bmN0aW9uQ29tcG9uZW50PHsgZGF0YTogc3RyaW5nIH0+ID0gKCkgPT4gbnVsbDtcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBTU1JDb21tZW50OiBGdW5jdGlvbkNvbXBvbmVudDx7IGRhdGE6IHN0cmluZyB9PiA9ICgpID0+IG51bGw7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgU1NSU3RyZWFtQmxvY2s6IEZ1bmN0aW9uQ29tcG9uZW50PHsgY2hpbGRyZW4/OiBKU1hPdXRwdXQgfT4gPSAocHJvcHMpID0+IHtcbiAgcmV0dXJuIFtcbiAgICBqc3goU1NSQ29tbWVudCwgeyBkYXRhOiBTVFJFQU1fQkxPQ0tfU1RBUlRfQ09NTUVOVCB9KSxcbiAgICBwcm9wcy5jaGlsZHJlbixcbiAgICBqc3goU1NSQ29tbWVudCwgeyBkYXRhOiBTVFJFQU1fQkxPQ0tfRU5EX0NPTU1FTlQgfSksXG4gIF07XG59O1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgU1NSU3RyZWFtUHJvcHMgPSB7XG4gIGNoaWxkcmVuOiBTU1JTdHJlYW1DaGlsZHJlbjtcbn07XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgdHlwZSBTU1JTdHJlYW1DaGlsZHJlbiA9XG4gIHwgQXN5bmNHZW5lcmF0b3I8SlNYQ2hpbGRyZW4sIHZvaWQsIGFueT5cbiAgfCAoKHN0cmVhbTogU3RyZWFtV3JpdGVyKSA9PiBQcm9taXNlPHZvaWQ+KVxuICB8ICgoKSA9PiBBc3luY0dlbmVyYXRvcjxKU1hDaGlsZHJlbiwgdm9pZCwgYW55Pik7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgU1NSU3RyZWFtOiBGdW5jdGlvbkNvbXBvbmVudDxTU1JTdHJlYW1Qcm9wcz4gPSAocHJvcHMsIGtleSkgPT5cbiAganN4KFJlbmRlck9uY2UsIHsgY2hpbGRyZW46IGpzeChJbnRlcm5hbFNTUlN0cmVhbSwgcHJvcHMpIH0sIGtleSk7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgdHlwZSBTU1JIaW50UHJvcHMgPSB7XG4gIGR5bmFtaWM/OiBib29sZWFuO1xufTtcblxuZXhwb3J0IGNvbnN0IEludGVybmFsU1NSU3RyZWFtOiBGdW5jdGlvbkNvbXBvbmVudDxTU1JTdHJlYW1Qcm9wcz4gPSAoKSA9PiBudWxsO1xuIl19","/**\n * Think of `-` as an escape character which makes the next character uppercase. `--` is just `-`.\n *\n * Rules for JSX property event names starting with `on`:\n *\n * - Are case insensitive: `onClick$` is same `onclick$`\n * - A `--` is `-`: `dbl--click` => `dbl-click`\n * - Become case sensitive if prefixed by `-`: `-Click` is `Click`\n * - A `-` (not at the beginning) makes next character uppercase: `dbl-click` => `dblClick`\n */\nexport const isJsxPropertyAnEventName = (name) => {\n    return ((name.startsWith('on') || name.startsWith('window:on') || name.startsWith('document:on')) &&\n        name.endsWith('$'));\n};\nexport const isHtmlAttributeAnEventName = (name) => {\n    return name.startsWith('on:') || name.startsWith('on-window:') || name.startsWith('on-document:');\n};\nexport const getEventNameFromJsxProp = (name) => {\n    if (name.endsWith('$')) {\n        let idx = -1;\n        if (name.startsWith('on')) {\n            idx = 2;\n        }\n        else if (name.startsWith('window:on')) {\n            idx = 9;\n        }\n        else if (name.startsWith('document:on')) {\n            idx = 11;\n        }\n        if (idx != -1) {\n            const isCaseSensitive = isDashAt(name, idx) && !isDashAt(name, idx + 1);\n            if (isCaseSensitive) {\n                idx++;\n            }\n            let lastIdx = idx;\n            let eventName = '';\n            while (true) {\n                idx = name.indexOf('-', lastIdx);\n                const chunk = name.substring(lastIdx, idx === -1 ? name.length - 1 /* don't include `$` */ : idx);\n                eventName += isCaseSensitive ? chunk : chunk.toLowerCase();\n                if (idx == -1) {\n                    return eventName;\n                }\n                if (isDashAt(name, idx + 1)) {\n                    eventName += '-';\n                    idx++;\n                }\n                else {\n                    eventName += name.charAt(idx + 1).toUpperCase();\n                    idx++;\n                }\n                lastIdx = idx + 1;\n            }\n        }\n    }\n    return null;\n};\nexport const getEventNameScopeFromJsxProp = (name) => {\n    const index = name.indexOf(':');\n    return index !== -1 ? name.substring(0, index) : '';\n};\nexport const getEventNameFromHtmlAttr = (name) => {\n    let idx = -1;\n    if (name.startsWith('on:')) {\n        idx = 3; // 'on:'.length\n    }\n    else if (name.startsWith('on-window:')) {\n        idx = 10; // 'on-window:'.length\n    }\n    else if (name.startsWith('on-document:')) {\n        idx = 12; // 'on-document:'.length\n    }\n    if (idx != -1) {\n        let lastIdx = idx;\n        let eventName = '';\n        while (true) {\n            idx = name.indexOf('-', lastIdx);\n            const chunk = name.substring(lastIdx, idx === -1 ? name.length : idx);\n            eventName += chunk;\n            if (idx == -1) {\n                return eventName;\n            }\n            eventName += name.charAt(idx + 1).toUpperCase();\n            idx++;\n            lastIdx = idx + 1;\n        }\n    }\n    return null;\n};\nconst isDashAt = (name, idx) => name.charCodeAt(idx) === 45; /* - */\nexport const convertEventNameFromHtmlAttrToJsxProp = (name) => {\n    let prefix = null;\n    if (name.startsWith('on:')) {\n        prefix = 'on';\n    }\n    else if (name.startsWith('on-window:')) {\n        prefix = 'window:on';\n    }\n    else if (name.startsWith('on-document:')) {\n        prefix = 'document:on';\n    }\n    if (prefix !== null) {\n        const eventName = getEventNameFromHtmlAttr(name);\n        let kebabCase = fromCamelToKebabCase(eventName);\n        if (isDashAt(kebabCase, 0) && !isDashAt(kebabCase, 1)) {\n            // special case for events which start with a `-`\n            // if we would just append it would be interpreted as a case sensitive event\n            kebabCase = '-' + kebabCase.charAt(1).toUpperCase() + kebabCase.substring(2);\n        }\n        return prefix + kebabCase + '$';\n    }\n    return null;\n};\nexport const convertEventNameFromJsxPropToHtmlAttr = (name) => {\n    if (name.endsWith('$')) {\n        let prefix = null;\n        // let idx = -1;\n        if (name.startsWith('on')) {\n            prefix = 'on:';\n            // idx = 2; // 'on'.length\n        }\n        else if (name.startsWith('window:on')) {\n            prefix = 'on-window:';\n            // idx = 9; // 'window:on'.length\n        }\n        else if (name.startsWith('document:on')) {\n            prefix = 'on-document:';\n            // idx = 11; // 'document:on'.length\n        }\n        if (prefix !== null) {\n            const eventName = getEventNameFromJsxProp(name);\n            return prefix + fromCamelToKebabCase(eventName);\n        }\n    }\n    return null;\n};\nexport const fromCamelToKebabCase = (text) => {\n    return text.replace(/([A-Z-])/g, '-$1').toLowerCase();\n};\nexport function isPreventDefault(key) {\n    return key.startsWith('preventdefault:');\n}\n//# sourceMappingURL=data:application/json;base64,","import { verifySerializable } from '../state/common';\nimport {} from '../state/context';\nimport { ELEMENT_SEQ, ELEMENT_SEQ_IDX } from '../util/markers';\nimport { qDev, qSerialize } from '../util/qdev';\nimport { useInvokeContext } from './use-core';\n/**\n * @internal\n * The storage provider for hooks. Each invocation increases index i. Data is stored in an array.\n */\nexport const useSequentialScope = () => {\n    const iCtx = useInvokeContext();\n    const hostElement = iCtx.$hostElement$;\n    const host = hostElement;\n    let seq = iCtx.$container2$.getHostProp(host, ELEMENT_SEQ);\n    if (seq === null) {\n        seq = [];\n        iCtx.$container2$.setHostProp(host, ELEMENT_SEQ, seq);\n    }\n    let seqIdx = iCtx.$container2$.getHostProp(host, ELEMENT_SEQ_IDX);\n    if (seqIdx === null) {\n        seqIdx = 0;\n    }\n    iCtx.$container2$.setHostProp(host, ELEMENT_SEQ_IDX, seqIdx + 1);\n    while (seq.length <= seqIdx) {\n        seq.push(undefined);\n    }\n    const set = (value) => {\n        if (qDev && qSerialize) {\n            verifySerializable(value);\n        }\n        return (seq[seqIdx] = value);\n    };\n    return {\n        val: seq[seqIdx],\n        set,\n        i: seqIdx,\n        iCtx,\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXNlcXVlbnRpYWwtc2NvcGUuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXNlL3VzZS1zZXF1ZW50aWFsLXNjb3BlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3JELE9BQU8sRUFBaUIsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRWhELE9BQU8sRUFBRSxnQkFBZ0IsRUFBNEIsTUFBTSxZQUFZLENBQUM7QUFheEU7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsR0FBMEIsRUFBRTtJQUM1RCxNQUFNLElBQUksR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDdkMsTUFBTSxJQUFJLEdBQWdCLFdBQWtCLENBQUM7SUFDN0MsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQVEsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ2xFLElBQUksR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDO1FBQ2pCLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDVCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFDRCxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBUyxJQUFJLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDMUUsSUFBSSxNQUFNLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDcEIsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNiLENBQUM7SUFDRCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNqRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLElBQUksTUFBTSxFQUFFLENBQUM7UUFDNUIsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBQ0QsTUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFRLEVBQUUsRUFBRTtRQUN2QixJQUFJLElBQUksSUFBSSxVQUFVLEVBQUUsQ0FBQztZQUN2QixrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QixDQUFDO1FBQ0QsT0FBTyxDQUFDLEdBQUksQ0FBQyxNQUFPLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDLENBQUM7SUFFRixPQUFPO1FBQ0wsR0FBRyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFDaEIsR0FBRztRQUNILENBQUMsRUFBRSxNQUFNO1FBQ1QsSUFBSTtLQUNPLENBQUM7QUFDaEIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdmVyaWZ5U2VyaWFsaXphYmxlIH0gZnJvbSAnLi4vc3RhdGUvY29tbW9uJztcbmltcG9ydCB7IHR5cGUgUUNvbnRleHQgfSBmcm9tICcuLi9zdGF0ZS9jb250ZXh0JztcbmltcG9ydCB7IEVMRU1FTlRfU0VRLCBFTEVNRU5UX1NFUV9JRFggfSBmcm9tICcuLi91dGlsL21hcmtlcnMnO1xuaW1wb3J0IHsgcURldiwgcVNlcmlhbGl6ZSB9IGZyb20gJy4uL3V0aWwvcWRldic7XG5pbXBvcnQgdHlwZSB7IGZpeE1lQW55LCBIb3N0RWxlbWVudCB9IGZyb20gJy4uL3YyL3NoYXJlZC90eXBlcyc7XG5pbXBvcnQgeyB1c2VJbnZva2VDb250ZXh0LCB0eXBlIFJlbmRlckludm9rZUNvbnRleHQgfSBmcm9tICcuL3VzZS1jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBTZXF1ZW50aWFsU2NvcGU8VD4ge1xuICAvKiogVGhlIGN1cnJlbnRseSBzdG9yZWQgZGF0YSBmb3IgdGhlIGhvb2sgdGhhdCBjYWxscyB0aGlzICovXG4gIHJlYWRvbmx5IHZhbDogVCB8IHVuZGVmaW5lZDtcbiAgLyoqIFN0b3JlIG5ldyBkYXRhIGZvciB0aGUgaG9vayB0aGF0IGNhbGxzIHRoaXMgKi9cbiAgcmVhZG9ubHkgc2V0OiAodjogVCkgPT4gVDtcbiAgLyoqIEluZGV4IG9mIHRoZSBob29rICovXG4gIHJlYWRvbmx5IGk6IG51bWJlcjtcbiAgcmVhZG9ubHkgaUN0eDogUmVuZGVySW52b2tlQ29udGV4dDtcbiAgcmVhZG9ubHkgZWxDdHg6IFFDb250ZXh0O1xufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICogVGhlIHN0b3JhZ2UgcHJvdmlkZXIgZm9yIGhvb2tzLiBFYWNoIGludm9jYXRpb24gaW5jcmVhc2VzIGluZGV4IGkuIERhdGEgaXMgc3RvcmVkIGluIGFuIGFycmF5LlxuICovXG5leHBvcnQgY29uc3QgdXNlU2VxdWVudGlhbFNjb3BlID0gPFQ+KCk6IFNlcXVlbnRpYWxTY29wZTxUPiA9PiB7XG4gIGNvbnN0IGlDdHggPSB1c2VJbnZva2VDb250ZXh0KCk7XG4gIGNvbnN0IGhvc3RFbGVtZW50ID0gaUN0eC4kaG9zdEVsZW1lbnQkO1xuICBjb25zdCBob3N0OiBIb3N0RWxlbWVudCA9IGhvc3RFbGVtZW50IGFzIGFueTtcbiAgbGV0IHNlcSA9IGlDdHguJGNvbnRhaW5lcjIkLmdldEhvc3RQcm9wPGFueVtdPihob3N0LCBFTEVNRU5UX1NFUSk7XG4gIGlmIChzZXEgPT09IG51bGwpIHtcbiAgICBzZXEgPSBbXTtcbiAgICBpQ3R4LiRjb250YWluZXIyJC5zZXRIb3N0UHJvcChob3N0LCBFTEVNRU5UX1NFUSwgc2VxKTtcbiAgfVxuICBsZXQgc2VxSWR4ID0gaUN0eC4kY29udGFpbmVyMiQuZ2V0SG9zdFByb3A8bnVtYmVyPihob3N0LCBFTEVNRU5UX1NFUV9JRFgpO1xuICBpZiAoc2VxSWR4ID09PSBudWxsKSB7XG4gICAgc2VxSWR4ID0gMDtcbiAgfVxuICBpQ3R4LiRjb250YWluZXIyJC5zZXRIb3N0UHJvcChob3N0LCBFTEVNRU5UX1NFUV9JRFgsIHNlcUlkeCArIDEpO1xuICB3aGlsZSAoc2VxLmxlbmd0aCA8PSBzZXFJZHgpIHtcbiAgICBzZXEucHVzaCh1bmRlZmluZWQpO1xuICB9XG4gIGNvbnN0IHNldCA9ICh2YWx1ZTogVCkgPT4ge1xuICAgIGlmIChxRGV2ICYmIHFTZXJpYWxpemUpIHtcbiAgICAgIHZlcmlmeVNlcmlhbGl6YWJsZSh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiAoc2VxIVtzZXFJZHghXSA9IHZhbHVlKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHZhbDogc2VxW3NlcUlkeF0sXG4gICAgc2V0LFxuICAgIGk6IHNlcUlkeCxcbiAgICBpQ3R4LFxuICB9IGFzIGZpeE1lQW55O1xufTtcbiJdfQ==","import { assertTrue } from '../error/assert';\nimport { qError, QError_invalidContext, QError_notFoundContext } from '../error/error';\nimport { getVirtualElement, } from '../render/dom/virtual-element';\nimport { verifySerializable } from '../state/common';\nimport { Q_CTX, VIRTUAL_SYMBOL } from '../state/constants';\nimport { getContext } from '../state/context';\nimport { isComment } from '../util/element';\nimport { qDev, qSerialize } from '../util/qdev';\nimport { isObject } from '../util/types';\nimport { fromCamelToKebabCase } from '../v2/shared/event-names';\nimport { invoke } from './use-core';\nimport { useSequentialScope } from './use-sequential-scope';\n// <docs markdown=\"../readme.md#createContextId\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#createContextId instead)\n/**\n * Create a context ID to be used in your application. The name should be written with no spaces.\n *\n * Context is a way to pass stores to the child components without prop-drilling.\n *\n * Use `createContextId()` to create a `ContextId`. A `ContextId` is just a serializable identifier\n * for the context. It is not the context value itself. See `useContextProvider()` and\n * `useContext()` for the values. Qwik needs a serializable ID for the context so that the it can\n * track context providers and consumers in a way that survives resumability.\n *\n * ### Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContextId<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n *\n * @param name - The name of the context.\n * @public\n */\n// </docs>\nexport const createContextId = (name) => {\n    assertTrue(/^[\\w/.-]+$/.test(name), 'Context name must only contain A-Z,a-z,0-9, _', name);\n    return /*#__PURE__*/ Object.freeze({\n        id: fromCamelToKebabCase(name),\n    });\n};\n// <docs markdown=\"../readme.md#useContextProvider\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useContextProvider instead)\n/**\n * Assign a value to a Context.\n *\n * Use `useContextProvider()` to assign a value to a context. The assignment happens in the\n * component's function. Once assigned, use `useContext()` in any child component to retrieve the\n * value.\n *\n * Context is a way to pass stores to the child components without prop-drilling. Note that scalar\n * values are allowed, but for reactivity you need signals or stores.\n *\n * ### Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContextId<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n *\n * @param context - The context to assign a value to.\n * @param value - The value to assign to the context.\n * @public\n */\n// </docs>\nexport const useContextProvider = (context, newValue) => {\n    const { val, set, elCtx, iCtx } = useSequentialScope();\n    if (val !== undefined) {\n        return;\n    }\n    if (qDev) {\n        validateContext(context);\n    }\n    if (qDev && qSerialize) {\n        verifySerializable(newValue);\n    }\n    if (iCtx.$container2$) {\n        iCtx.$container2$.setContext(iCtx.$hostElement$, context, newValue);\n    }\n    else {\n        const contexts = (elCtx.$contexts$ || (elCtx.$contexts$ = new Map()));\n        contexts.set(context.id, newValue);\n    }\n    set(1);\n};\n// <docs markdown=\"../readme.md#useContext\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useContext instead)\n/**\n * Retrieve Context value.\n *\n * Use `useContext()` to retrieve the value of context in a component. To retrieve a value a parent\n * component needs to invoke `useContextProvider()` to assign a value.\n *\n * ### Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContextId<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n *\n * @param context - The context to retrieve a value from.\n * @public\n */\n// </docs>\nexport const useContext = (context, defaultValue) => {\n    const { val, set, iCtx, elCtx } = useSequentialScope();\n    if (val !== undefined) {\n        return val;\n    }\n    if (qDev) {\n        validateContext(context);\n    }\n    let value;\n    if (iCtx.$container2$) {\n        value = iCtx.$container2$.resolveContext(iCtx.$hostElement$, context);\n    }\n    else {\n        value = resolveContext(context, elCtx, iCtx.$renderCtx$.$static$.$containerState$);\n    }\n    if (typeof defaultValue === 'function') {\n        return set(invoke(undefined, defaultValue, value));\n    }\n    if (value !== undefined) {\n        return set(value);\n    }\n    if (defaultValue !== undefined) {\n        return set(defaultValue);\n    }\n    throw qError(QError_notFoundContext, context.id);\n};\n/** Find a wrapping Virtual component in the DOM */\nconst findParentCtx = (el, containerState) => {\n    let node = el;\n    let stack = 1;\n    while (node && !node.hasAttribute?.('q:container')) {\n        // Walk the siblings backwards, each comment might be the Virtual wrapper component\n        while ((node = node.previousSibling)) {\n            if (isComment(node)) {\n                const virtual = node[VIRTUAL_SYMBOL];\n                if (virtual) {\n                    const qtx = virtual[Q_CTX];\n                    if (node === virtual.open) {\n                        // We started inside this node so this is our parent\n                        return qtx ?? getContext(virtual, containerState);\n                    }\n                    // This is a sibling, check if it knows our parent\n                    if (qtx?.$parentCtx$) {\n                        return qtx.$parentCtx$;\n                    }\n                    // Skip over this entire virtual sibling\n                    node = virtual;\n                    continue;\n                }\n                if (node.data === '/qv') {\n                    stack++;\n                }\n                else if (node.data.startsWith('qv ')) {\n                    stack--;\n                    if (stack === 0) {\n                        return getContext(getVirtualElement(node), containerState);\n                    }\n                }\n            }\n        }\n        // No more siblings, walk up the DOM tree. The parent will never be a Virtual component.\n        node = el.parentElement;\n        el = node;\n    }\n    return null;\n};\nconst getParentProvider = (ctx, containerState) => {\n    // `null` means there's no parent, `undefined` means we don't know yet.\n    if (ctx.$parentCtx$ === undefined) {\n        // Not fully resumed container, find context from DOM\n        // We cannot recover $realParentCtx$ from this but that's fine because we don't need to pause on the client\n        ctx.$parentCtx$ = findParentCtx(ctx.$element$, containerState);\n    }\n    /**\n     * Note, the parentCtx is used during pause to to get the immediate parent, so we can't shortcut\n     * the search for $contexts$ here. If that turns out to be needed, it needs to be cached in a\n     * separate property.\n     */\n    return ctx.$parentCtx$;\n};\nexport const resolveContext = (context, hostCtx, containerState) => {\n    const contextID = context.id;\n    if (!hostCtx) {\n        return;\n    }\n    let ctx = hostCtx;\n    while (ctx) {\n        const found = ctx.$contexts$?.get(contextID);\n        if (found) {\n            return found;\n        }\n        ctx = getParentProvider(ctx, containerState);\n    }\n};\nexport const validateContext = (context) => {\n    if (!isObject(context) || typeof context.id !== 'string' || context.id.length === 0) {\n        throw qError(QError_invalidContext, context);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { isServerPlatform } from '../platform/platform';\nimport { tryGetContext } from '../state/context';\nimport { createContextId, resolveContext } from '../use/use-context';\nimport { isVirtualElement } from '../util/element';\nimport { qDev } from '../util/qdev';\nexport const ERROR_CONTEXT = /*#__PURE__*/ createContextId('qk-error');\nexport const handleError = (err, hostElement, containerState) => {\n    const elCtx = tryGetContext(hostElement);\n    if (qDev) {\n        // Clean vdom\n        if (!isServerPlatform() && typeof document !== 'undefined' && isVirtualElement(hostElement)) {\n            // (hostElement as any).$vdom$ = null;\n            elCtx.$vdom$ = null;\n            const errorDiv = document.createElement('errored-host');\n            if (err && err instanceof Error) {\n                errorDiv.props = { error: err };\n            }\n            errorDiv.setAttribute('q:key', '_error_');\n            errorDiv.append(...hostElement.childNodes);\n            hostElement.appendChild(errorDiv);\n        }\n        if (err && err instanceof Error) {\n            if (!('hostElement' in err)) {\n                err['hostElement'] = hostElement;\n            }\n        }\n        if (!isRecoverable(err)) {\n            throw err;\n        }\n    }\n    if (isServerPlatform()) {\n        throw err;\n    }\n    else {\n        const errorStore = resolveContext(ERROR_CONTEXT, elCtx, containerState);\n        if (errorStore === undefined) {\n            throw err;\n        }\n        errorStore.error = err;\n    }\n};\nexport const isRecoverable = (err) => {\n    if (err && err instanceof Error) {\n        if ('plugin' in err) {\n            return false;\n        }\n    }\n    return true;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItaGFuZGxpbmcuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2Vycm9yLWhhbmRsaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFRcEMsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLGFBQWEsQ0FBQyxlQUFlLENBQXFCLFVBQVUsQ0FBQyxDQUFDO0FBRTNGLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLEdBQVEsRUFBRSxXQUF3QixFQUFFLGNBQThCLEVBQUUsRUFBRTtJQUNoRyxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFFLENBQUM7SUFDMUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNULGFBQWE7UUFDYixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxPQUFPLFFBQVEsS0FBSyxXQUFXLElBQUksZ0JBQWdCLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztZQUM1RixzQ0FBc0M7WUFDdEMsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7WUFDcEIsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUN4RCxJQUFJLEdBQUcsSUFBSSxHQUFHLFlBQVksS0FBSyxFQUFFLENBQUM7Z0JBQy9CLFFBQWdCLENBQUMsS0FBSyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDO1lBQzNDLENBQUM7WUFDRCxRQUFRLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztZQUMxQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzNDLFdBQVcsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEMsQ0FBQztRQUVELElBQUksR0FBRyxJQUFJLEdBQUcsWUFBWSxLQUFLLEVBQUUsQ0FBQztZQUNoQyxJQUFJLENBQUMsQ0FBQyxhQUFhLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDM0IsR0FBVyxDQUFDLGFBQWEsQ0FBQyxHQUFHLFdBQVcsQ0FBQztZQUM1QyxDQUFDO1FBQ0gsQ0FBQztRQUNELElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUN4QixNQUFNLEdBQUcsQ0FBQztRQUNaLENBQUM7SUFDSCxDQUFDO0lBQ0QsSUFBSSxnQkFBZ0IsRUFBRSxFQUFFLENBQUM7UUFDdkIsTUFBTSxHQUFHLENBQUM7SUFDWixDQUFDO1NBQU0sQ0FBQztRQUNOLE1BQU0sVUFBVSxHQUFHLGNBQWMsQ0FBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ3hFLElBQUksVUFBVSxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQzdCLE1BQU0sR0FBRyxDQUFDO1FBQ1osQ0FBQztRQUNELFVBQVUsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO0lBQ3pCLENBQUM7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxHQUFRLEVBQUUsRUFBRTtJQUN4QyxJQUFJLEdBQUcsSUFBSSxHQUFHLFlBQVksS0FBSyxFQUFFLENBQUM7UUFDaEMsSUFBSSxRQUFRLElBQUksR0FBRyxFQUFFLENBQUM7WUFDcEIsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO0lBQ0gsQ0FBQztJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDb250YWluZXJTdGF0ZSB9IGZyb20gJy4uL2NvbnRhaW5lci9jb250YWluZXInO1xuaW1wb3J0IHsgaXNTZXJ2ZXJQbGF0Zm9ybSB9IGZyb20gJy4uL3BsYXRmb3JtL3BsYXRmb3JtJztcbmltcG9ydCB7IHRyeUdldENvbnRleHQgfSBmcm9tICcuLi9zdGF0ZS9jb250ZXh0JztcbmltcG9ydCB7IGNyZWF0ZUNvbnRleHRJZCwgcmVzb2x2ZUNvbnRleHQgfSBmcm9tICcuLi91c2UvdXNlLWNvbnRleHQnO1xuaW1wb3J0IHsgaXNWaXJ0dWFsRWxlbWVudCB9IGZyb20gJy4uL3V0aWwvZWxlbWVudCc7XG5pbXBvcnQgeyBxRGV2IH0gZnJvbSAnLi4vdXRpbC9xZGV2JztcbmltcG9ydCB0eXBlIHsgUXdpa0VsZW1lbnQgfSBmcm9tICcuL2RvbS92aXJ0dWFsLWVsZW1lbnQnO1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGludGVyZmFjZSBFcnJvckJvdW5kYXJ5U3RvcmUge1xuICBlcnJvcjogYW55IHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgY29uc3QgRVJST1JfQ09OVEVYVCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlQ29udGV4dElkPEVycm9yQm91bmRhcnlTdG9yZT4oJ3FrLWVycm9yJyk7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVFcnJvciA9IChlcnI6IGFueSwgaG9zdEVsZW1lbnQ6IFF3aWtFbGVtZW50LCBjb250YWluZXJTdGF0ZTogQ29udGFpbmVyU3RhdGUpID0+IHtcbiAgY29uc3QgZWxDdHggPSB0cnlHZXRDb250ZXh0KGhvc3RFbGVtZW50KSE7XG4gIGlmIChxRGV2KSB7XG4gICAgLy8gQ2xlYW4gdmRvbVxuICAgIGlmICghaXNTZXJ2ZXJQbGF0Zm9ybSgpICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNWaXJ0dWFsRWxlbWVudChob3N0RWxlbWVudCkpIHtcbiAgICAgIC8vIChob3N0RWxlbWVudCBhcyBhbnkpLiR2ZG9tJCA9IG51bGw7XG4gICAgICBlbEN0eC4kdmRvbSQgPSBudWxsO1xuICAgICAgY29uc3QgZXJyb3JEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdlcnJvcmVkLWhvc3QnKTtcbiAgICAgIGlmIChlcnIgJiYgZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgKGVycm9yRGl2IGFzIGFueSkucHJvcHMgPSB7IGVycm9yOiBlcnIgfTtcbiAgICAgIH1cbiAgICAgIGVycm9yRGl2LnNldEF0dHJpYnV0ZSgncTprZXknLCAnX2Vycm9yXycpO1xuICAgICAgZXJyb3JEaXYuYXBwZW5kKC4uLmhvc3RFbGVtZW50LmNoaWxkTm9kZXMpO1xuICAgICAgaG9zdEVsZW1lbnQuYXBwZW5kQ2hpbGQoZXJyb3JEaXYpO1xuICAgIH1cblxuICAgIGlmIChlcnIgJiYgZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIGlmICghKCdob3N0RWxlbWVudCcgaW4gZXJyKSkge1xuICAgICAgICAoZXJyIGFzIGFueSlbJ2hvc3RFbGVtZW50J10gPSBob3N0RWxlbWVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFpc1JlY292ZXJhYmxlKGVycikpIHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH1cbiAgaWYgKGlzU2VydmVyUGxhdGZvcm0oKSkge1xuICAgIHRocm93IGVycjtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBlcnJvclN0b3JlID0gcmVzb2x2ZUNvbnRleHQoRVJST1JfQ09OVEVYVCwgZWxDdHgsIGNvbnRhaW5lclN0YXRlKTtcbiAgICBpZiAoZXJyb3JTdG9yZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIGVycm9yU3RvcmUuZXJyb3IgPSBlcnI7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBpc1JlY292ZXJhYmxlID0gKGVycjogYW55KSA9PiB7XG4gIGlmIChlcnIgJiYgZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICBpZiAoJ3BsdWdpbicgaW4gZXJyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufTtcbiJdfQ==","/** CSS properties which accept numbers but are not in units of \"px\". */\nconst unitlessNumbers = new Set([\n    'animationIterationCount',\n    'aspectRatio',\n    'borderImageOutset',\n    'borderImageSlice',\n    'borderImageWidth',\n    'boxFlex',\n    'boxFlexGroup',\n    'boxOrdinalGroup',\n    'columnCount',\n    'columns',\n    'flex',\n    'flexGrow',\n    'flexShrink',\n    'gridArea',\n    'gridRow',\n    'gridRowEnd',\n    'gridRowStart',\n    'gridColumn',\n    'gridColumnEnd',\n    'gridColumnStart',\n    'fontWeight',\n    'lineClamp',\n    'lineHeight',\n    'opacity',\n    'order',\n    'orphans',\n    'scale',\n    'tabSize',\n    'widows',\n    'zIndex',\n    'zoom',\n    'MozAnimationIterationCount', // Known Prefixed Properties\n    'MozBoxFlex', // TODO: Remove these since they shouldn't be used in modern code\n    'msFlex',\n    'msFlexPositive',\n    'WebkitAnimationIterationCount',\n    'WebkitBoxFlex',\n    'WebkitBoxOrdinalGroup',\n    'WebkitColumnCount',\n    'WebkitColumns',\n    'WebkitFlex',\n    'WebkitFlexGrow',\n    'WebkitFlexShrink',\n    'WebkitLineClamp',\n]);\nexport const isUnitlessNumber = (name) => {\n    return unitlessNumbers.has(name);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdGxlc3NfbnVtYmVyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvdW5pdGxlc3NfbnVtYmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUN4RSxNQUFNLGVBQWUsR0FBRyxJQUFJLEdBQUcsQ0FBQztJQUM5Qix5QkFBeUI7SUFDekIsYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixrQkFBa0I7SUFDbEIsa0JBQWtCO0lBQ2xCLFNBQVM7SUFDVCxjQUFjO0lBQ2QsaUJBQWlCO0lBQ2pCLGFBQWE7SUFDYixTQUFTO0lBQ1QsTUFBTTtJQUNOLFVBQVU7SUFDVixZQUFZO0lBQ1osVUFBVTtJQUNWLFNBQVM7SUFDVCxZQUFZO0lBQ1osY0FBYztJQUNkLFlBQVk7SUFDWixlQUFlO0lBQ2YsaUJBQWlCO0lBQ2pCLFlBQVk7SUFDWixXQUFXO0lBQ1gsWUFBWTtJQUNaLFNBQVM7SUFDVCxPQUFPO0lBQ1AsU0FBUztJQUNULE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixNQUFNO0lBQ04sNEJBQTRCLEVBQUUsNEJBQTRCO0lBQzFELFlBQVksRUFBRSxpRUFBaUU7SUFDL0UsUUFBUTtJQUNSLGdCQUFnQjtJQUNoQiwrQkFBK0I7SUFDL0IsZUFBZTtJQUNmLHVCQUF1QjtJQUN2QixtQkFBbUI7SUFDbkIsZUFBZTtJQUNmLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsa0JBQWtCO0lBQ2xCLGlCQUFpQjtDQUNsQixDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLElBQVksRUFBVyxFQUFFO0lBQ3hELE9BQU8sZUFBZSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ1NTIHByb3BlcnRpZXMgd2hpY2ggYWNjZXB0IG51bWJlcnMgYnV0IGFyZSBub3QgaW4gdW5pdHMgb2YgXCJweFwiLiAqL1xuY29uc3QgdW5pdGxlc3NOdW1iZXJzID0gbmV3IFNldChbXG4gICdhbmltYXRpb25JdGVyYXRpb25Db3VudCcsXG4gICdhc3BlY3RSYXRpbycsXG4gICdib3JkZXJJbWFnZU91dHNldCcsXG4gICdib3JkZXJJbWFnZVNsaWNlJyxcbiAgJ2JvcmRlckltYWdlV2lkdGgnLFxuICAnYm94RmxleCcsXG4gICdib3hGbGV4R3JvdXAnLFxuICAnYm94T3JkaW5hbEdyb3VwJyxcbiAgJ2NvbHVtbkNvdW50JyxcbiAgJ2NvbHVtbnMnLFxuICAnZmxleCcsXG4gICdmbGV4R3JvdycsXG4gICdmbGV4U2hyaW5rJyxcbiAgJ2dyaWRBcmVhJyxcbiAgJ2dyaWRSb3cnLFxuICAnZ3JpZFJvd0VuZCcsXG4gICdncmlkUm93U3RhcnQnLFxuICAnZ3JpZENvbHVtbicsXG4gICdncmlkQ29sdW1uRW5kJyxcbiAgJ2dyaWRDb2x1bW5TdGFydCcsXG4gICdmb250V2VpZ2h0JyxcbiAgJ2xpbmVDbGFtcCcsXG4gICdsaW5lSGVpZ2h0JyxcbiAgJ29wYWNpdHknLFxuICAnb3JkZXInLFxuICAnb3JwaGFucycsXG4gICdzY2FsZScsXG4gICd0YWJTaXplJyxcbiAgJ3dpZG93cycsXG4gICd6SW5kZXgnLFxuICAnem9vbScsXG4gICdNb3pBbmltYXRpb25JdGVyYXRpb25Db3VudCcsIC8vIEtub3duIFByZWZpeGVkIFByb3BlcnRpZXNcbiAgJ01vekJveEZsZXgnLCAvLyBUT0RPOiBSZW1vdmUgdGhlc2Ugc2luY2UgdGhleSBzaG91bGRuJ3QgYmUgdXNlZCBpbiBtb2Rlcm4gY29kZVxuICAnbXNGbGV4JyxcbiAgJ21zRmxleFBvc2l0aXZlJyxcbiAgJ1dlYmtpdEFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50JyxcbiAgJ1dlYmtpdEJveEZsZXgnLFxuICAnV2Via2l0Qm94T3JkaW5hbEdyb3VwJyxcbiAgJ1dlYmtpdENvbHVtbkNvdW50JyxcbiAgJ1dlYmtpdENvbHVtbnMnLFxuICAnV2Via2l0RmxleCcsXG4gICdXZWJraXRGbGV4R3JvdycsXG4gICdXZWJraXRGbGV4U2hyaW5rJyxcbiAgJ1dlYmtpdExpbmVDbGFtcCcsXG5dKTtcblxuZXhwb3J0IGNvbnN0IGlzVW5pdGxlc3NOdW1iZXIgPSAobmFtZTogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gIHJldHVybiB1bml0bGVzc051bWJlcnMuaGFzKG5hbWUpO1xufTtcbiJdfQ==","/**\n * @file\n *\n *   VNodeData is additional information which allows the `vnode` to recover virtual VNode information\n *   from the HTML.\n */\n/**\n * VNodeDataSeparator contains information about splitting up the VNodeData and attaching it to the\n * HTML.\n */\nexport const VNodeDataSeparator = {\n    REFERENCE_CH: /* ***** */ `~`, // `~` is a reference to the node. Save it.\n    REFERENCE: /* ******** */ 126, // `~` is a reference to the node. Save it.\n    ADVANCE_1_CH: /* ***** */ `!`, // `!` is vNodeData separator skipping 0. (ie next vNode)\n    ADVANCE_1: /* ********* */ 33, // `!` is vNodeData separator skipping 0. (ie next vNode)\n    ADVANCE_2_CH: /* ***** */ `\"`, // `\"` is vNodeData separator skipping 1.\n    ADVANCE_2: /* ********* */ 34, // `\"` is vNodeData separator skipping 1.\n    ADVANCE_4_CH: /* ***** */ `#`, // `#` is vNodeData separator skipping 2.\n    ADVANCE_4: /* ********* */ 35, // `#` is vNodeData separator skipping 2.\n    ADVANCE_8_CH: /* ***** */ `$`, // `$` is vNodeData separator skipping 4.\n    ADVANCE_8: /* ********* */ 36, // `$` is vNodeData separator skipping 4.\n    ADVANCE_16_CH: /* **** */ `%`, // `%` is vNodeData separator skipping 8.\n    ADVANCE_16: /* ******** */ 37, // `%` is vNodeData separator skipping 8.\n    ADVANCE_32_CH: /* **** */ `&`, // `&` is vNodeData separator skipping 16.\n    ADVANCE_32: /* ******** */ 38, // `&` is vNodeData separator skipping 16.\n    ADVANCE_64_CH: /* **** */ `'`, // `'` is vNodeData separator skipping 32.\n    ADVANCE_64: /* ******** */ 39, // `'` is vNodeData separator skipping 32.\n    ADVANCE_128_CH: /* *** */ `(`, // `(` is vNodeData separator skipping 64.\n    ADVANCE_128: /* ******* */ 40, // `(` is vNodeData separator skipping 64.\n    ADVANCE_256_CH: /* *** */ `)`, // `)` is vNodeData separator skipping 128.\n    ADVANCE_256: /* ******* */ 41, // `)` is vNodeData separator skipping 128.\n    ADVANCE_512_CH: /* *** */ `*`, // `*` is vNodeData separator skipping 256.\n    ADVANCE_512: /* ******* */ 42, // `*` is vNodeData separator skipping 256.\n    ADVANCE_1024_CH: /* ** */ `+`, // `+` is vNodeData separator skipping 512.\n    ADVANCE_1024: /* ****** */ 43, // `+` is vNodeData separator skipping 512.\n    ADVANCE_2048_CH: /* *  */ ',', // ',' is vNodeData separator skipping 1024.\n    ADVANCE_2048: /* ****** */ 44, // ',' is vNodeData separator skipping 1024.\n    ADVANCE_4096_CH: /* *  */ `-`, // `-` is vNodeData separator skipping 2048.\n    ADVANCE_4096: /* ****** */ 45, // `-` is vNodeData separator skipping 2048.\n    ADVANCE_8192_CH: /* *  */ `.`, // `.` is vNodeData separator skipping 4096.\n    ADVANCE_8192: /* ****** */ 46, // `.` is vNodeData separator skipping 4096.\n};\n/** VNodeDataChar contains information about the VNodeData used for encoding props */\nexport const VNodeDataChar = {\n    OPEN: /* ************** */ 123, // `{` is the start of the VNodeData.\n    OPEN_CHAR: /* ****** */ '{',\n    CLOSE: /* ************* */ 125, // `}` is the end of the VNodeData.\n    CLOSE_CHAR: /* ***** */ '}',\n    SCOPED_STYLE: /* ******* */ 59, // `;` - `q:sstyle` - Style attribute.\n    SCOPED_STYLE_CHAR: /* */ ';',\n    RENDER_FN: /* ********** */ 60, // `<` - `q:renderFn' - Component QRL render function (body)\n    RENDER_FN_CHAR: /* ** */ '<',\n    ID: /* ***************** */ 61, // `=` - `q:id` - ID of the element.\n    ID_CHAR: /* ********* */ '=',\n    PROPS: /* ************** */ 62, // `>` - `q:props' - Component Props\n    PROPS_CHAR: /* ****** */ '>',\n    SLOT_REF: /* *********** */ 63, // `?` - `q:sref` - Slot reference.\n    SLOT_REF_CHAR: /* *** */ '?',\n    KEY: /* **************** */ 64, // `@` - `q:key` - Element key.\n    KEY_CHAR: /* ******** */ '@',\n    SEQ: /* **************** */ 91, // `[` - `q:seq' - Seq value from `useSequentialScope()`\n    SEQ_CHAR: /* ******** */ '[',\n    DON_T_USE: /* ********** */ 93, // `\\` - SKIP because `\\` is used as escaping\n    DON_T_USE_CHAR: '\\\\',\n    CONTEXT: /* ************ */ 93, // `]` - `q:ctx' - Component context/props\n    CONTEXT_CHAR: /* **** */ ']',\n    SEQ_IDX: /* ************ */ 94, // `^` - `q:seqIdx' - Sequential scope id\n    SEQ_IDX_CHAR: /* **** */ '^',\n    SEPARATOR: /* ********* */ 124, // `|` - Separator char to encode any key/value pairs.\n    SEPARATOR_CHAR: /* ** */ '|',\n    SLOT: /* ************** */ 126, // `~` - `q:slot' - Slot name\n    SLOT_CHAR: /* ******* */ '~',\n};\n//# sourceMappingURL=data:application/json;base64,","import { QSlotParent } from './markers';\nexport function isSlotProp(prop) {\n    return !prop.startsWith('q:');\n}\nexport function isParentSlotProp(prop) {\n    return prop.startsWith(QSlotParent);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL3Byb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUV4QyxNQUFNLFVBQVUsVUFBVSxDQUFDLElBQVk7SUFDckMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxJQUFZO0lBQzNDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUVNsb3RQYXJlbnQgfSBmcm9tICcuL21hcmtlcnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNTbG90UHJvcChwcm9wOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuICFwcm9wLnN0YXJ0c1dpdGgoJ3E6Jyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1BhcmVudFNsb3RQcm9wKHByb3A6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gcHJvcC5zdGFydHNXaXRoKFFTbG90UGFyZW50KTtcbn1cbiJdfQ==","import { QSlotS } from '../../util/markers';\nimport { Virtual, _jsxSorted } from './jsx-runtime';\n/**\n * Allows to project the children of the current component. <Slot/> can only be used within the\n * context of a component defined with `component$`.\n *\n * @public\n */\nexport const Slot = (props) => {\n    return _jsxSorted(Virtual, null, { [QSlotS]: '' }, props.children, 0, props.name ?? '');\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xvdC5wdWJsaWMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2pzeC9zbG90LnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDNUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJcEQ7Ozs7O0dBS0c7QUFDSCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBR1osQ0FBQyxLQUFLLEVBQUUsRUFBRTtJQUNiLE9BQU8sVUFBVSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7QUFDMUYsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUVNsb3RTIH0gZnJvbSAnLi4vLi4vdXRpbC9tYXJrZXJzJztcbmltcG9ydCB7IFZpcnR1YWwsIF9qc3hTb3J0ZWQgfSBmcm9tICcuL2pzeC1ydW50aW1lJztcbmltcG9ydCB0eXBlIHsgRnVuY3Rpb25Db21wb25lbnQgfSBmcm9tICcuL3R5cGVzL2pzeC1ub2RlJztcbmltcG9ydCB0eXBlIHsgSlNYQ2hpbGRyZW4gfSBmcm9tICcuL3R5cGVzL2pzeC1xd2lrLWF0dHJpYnV0ZXMnO1xuXG4vKipcbiAqIEFsbG93cyB0byBwcm9qZWN0IHRoZSBjaGlsZHJlbiBvZiB0aGUgY3VycmVudCBjb21wb25lbnQuIDxTbG90Lz4gY2FuIG9ubHkgYmUgdXNlZCB3aXRoaW4gdGhlXG4gKiBjb250ZXh0IG9mIGEgY29tcG9uZW50IGRlZmluZWQgd2l0aCBgY29tcG9uZW50JGAuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgU2xvdDogRnVuY3Rpb25Db21wb25lbnQ8e1xuICBuYW1lPzogc3RyaW5nO1xuICBjaGlsZHJlbj86IEpTWENoaWxkcmVuO1xufT4gPSAocHJvcHMpID0+IHtcbiAgcmV0dXJuIF9qc3hTb3J0ZWQoVmlydHVhbCwgbnVsbCwgeyBbUVNsb3RTXTogJycgfSwgcHJvcHMuY2hpbGRyZW4sIDAsIHByb3BzLm5hbWUgPz8gJycpO1xufTtcbiJdfQ==","export const hashCode = (text, hash = 0) => {\n    for (let i = 0; i < text.length; i++) {\n        const chr = text.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n    return Number(Math.abs(hash)).toString(36);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaF9jb2RlLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvaGFzaF9jb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLElBQVksRUFBRSxPQUFlLENBQUMsRUFBRSxFQUFFO0lBQ3pELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDckMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQixJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsMkJBQTJCO0lBQ3hDLENBQUM7SUFDRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzdDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBoYXNoQ29kZSA9ICh0ZXh0OiBzdHJpbmcsIGhhc2g6IG51bWJlciA9IDApID0+IHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY2hyID0gdGV4dC5jaGFyQ29kZUF0KGkpO1xuICAgIGhhc2ggPSAoaGFzaCA8PCA1KSAtIGhhc2ggKyBjaHI7XG4gICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuICByZXR1cm4gTnVtYmVyKE1hdGguYWJzKGhhc2gpKS50b1N0cmluZygzNik7XG59O1xuIl19","import { ComponentStylesPrefixContent } from '../util/markers';\nimport { hashCode } from '../util/hash_code';\nimport { assertQrl } from '../qrl/qrl-class';\nexport const styleKey = (qStyles, index) => {\n    assertQrl(qStyles);\n    return `${hashCode(qStyles.$hash$)}-${index}`;\n};\nexport const styleHost = (styleId) => {\n    return styleId;\n};\nexport const styleContent = (styleId) => {\n    return ComponentStylesPrefixContent + styleId;\n};\nexport const serializeSStyle = (scopeIds) => {\n    const value = scopeIds.join('|');\n    if (value.length > 0) {\n        return value;\n    }\n    return undefined;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXJsLXN0eWxlcy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9zdHlsZS9xcmwtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUU3QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFN0MsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsT0FBb0IsRUFBRSxLQUFhLEVBQVUsRUFBRTtJQUN0RSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbkIsT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUM7QUFDaEQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsT0FBZSxFQUFVLEVBQUU7SUFDbkQsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQUMsT0FBZSxFQUFVLEVBQUU7SUFDdEQsT0FBTyw0QkFBNEIsR0FBRyxPQUFPLENBQUM7QUFDaEQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsUUFBa0IsRUFBRSxFQUFFO0lBQ3BELE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakMsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3JCLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudFN0eWxlc1ByZWZpeENvbnRlbnQgfSBmcm9tICcuLi91dGlsL21hcmtlcnMnO1xuaW1wb3J0IHsgaGFzaENvZGUgfSBmcm9tICcuLi91dGlsL2hhc2hfY29kZSc7XG5pbXBvcnQgdHlwZSB7IFFSTCB9IGZyb20gJy4uL3FybC9xcmwucHVibGljJztcbmltcG9ydCB7IGFzc2VydFFybCB9IGZyb20gJy4uL3FybC9xcmwtY2xhc3MnO1xuXG5leHBvcnQgY29uc3Qgc3R5bGVLZXkgPSAocVN0eWxlczogUVJMPHN0cmluZz4sIGluZGV4OiBudW1iZXIpOiBzdHJpbmcgPT4ge1xuICBhc3NlcnRRcmwocVN0eWxlcyk7XG4gIHJldHVybiBgJHtoYXNoQ29kZShxU3R5bGVzLiRoYXNoJCl9LSR7aW5kZXh9YDtcbn07XG5cbmV4cG9ydCBjb25zdCBzdHlsZUhvc3QgPSAoc3R5bGVJZDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIHN0eWxlSWQ7XG59O1xuXG5leHBvcnQgY29uc3Qgc3R5bGVDb250ZW50ID0gKHN0eWxlSWQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBDb21wb25lbnRTdHlsZXNQcmVmaXhDb250ZW50ICsgc3R5bGVJZDtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXJpYWxpemVTU3R5bGUgPSAoc2NvcGVJZHM6IHN0cmluZ1tdKSA9PiB7XG4gIGNvbnN0IHZhbHVlID0gc2NvcGVJZHMuam9pbignfCcpO1xuICBpZiAodmFsdWUubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbiJdfQ==","import { styleContent } from '../../style/qrl-styles';\nexport function hasClassAttr(props) {\n    for (const key in props) {\n        if (Object.prototype.hasOwnProperty.call(props, key) && isClassAttr(key)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function isClassAttr(key) {\n    return key === 'class' || key === 'className';\n}\nexport function getScopedStyleIdsAsPrefix(scopedStyleIds) {\n    return Array.from(scopedStyleIds)\n        .map((styleId) => styleContent(styleId))\n        .join(' ');\n}\nexport function convertScopedStyleIdsToArray(scopedStyleIds) {\n    return scopedStyleIds?.split(' ') ?? null;\n}\nexport function convertStyleIdsToString(scopedStyleIds) {\n    return Array.from(scopedStyleIds).join(' ');\n}\nexport const addComponentStylePrefix = (styleId) => {\n    if (styleId) {\n        let idx = 0;\n        do {\n            styleId = styleId.substring(0, idx) + styleContent(styleId.substring(idx));\n        } while ((idx = styleId.indexOf(' ', idx) + 1) !== 0);\n    }\n    return styleId || null;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NvcGVkLXN0eWxlcy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS92Mi9zaGFyZWQvc2NvcGVkLXN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFdEQsTUFBTSxVQUFVLFlBQVksQ0FBQyxLQUFZO0lBQ3ZDLEtBQUssTUFBTSxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7UUFDeEIsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ3pFLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztJQUNILENBQUM7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLEdBQVc7SUFDckMsT0FBTyxHQUFHLEtBQUssT0FBTyxJQUFJLEdBQUcsS0FBSyxXQUFXLENBQUM7QUFDaEQsQ0FBQztBQUVELE1BQU0sVUFBVSx5QkFBeUIsQ0FBQyxjQUEyQjtJQUNuRSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDO1NBQzlCLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3ZDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNmLENBQUM7QUFFRCxNQUFNLFVBQVUsNEJBQTRCLENBQUMsY0FBOEI7SUFDekUsT0FBTyxjQUFjLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQztBQUM1QyxDQUFDO0FBRUQsTUFBTSxVQUFVLHVCQUF1QixDQUFDLGNBQTJCO0lBQ2pFLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLENBQUMsT0FBdUIsRUFBaUIsRUFBRTtJQUNoRixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ1osSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ1osR0FBRyxDQUFDO1lBQ0YsT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDN0UsQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRTtJQUN4RCxDQUFDO0lBQ0QsT0FBTyxPQUFPLElBQUksSUFBSSxDQUFDO0FBQ3pCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUHJvcHMgfSBmcm9tICcuLi8uLi9yZW5kZXIvanN4L2pzeC1ydW50aW1lJztcbmltcG9ydCB7IHN0eWxlQ29udGVudCB9IGZyb20gJy4uLy4uL3N0eWxlL3FybC1zdHlsZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaGFzQ2xhc3NBdHRyKHByb3BzOiBQcm9wcyk6IGJvb2xlYW4ge1xuICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wcykge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIGtleSkgJiYgaXNDbGFzc0F0dHIoa2V5KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ2xhc3NBdHRyKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBrZXkgPT09ICdjbGFzcycgfHwga2V5ID09PSAnY2xhc3NOYW1lJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjb3BlZFN0eWxlSWRzQXNQcmVmaXgoc2NvcGVkU3R5bGVJZHM6IFNldDxzdHJpbmc+KTogc3RyaW5nIHtcbiAgcmV0dXJuIEFycmF5LmZyb20oc2NvcGVkU3R5bGVJZHMpXG4gICAgLm1hcCgoc3R5bGVJZCkgPT4gc3R5bGVDb250ZW50KHN0eWxlSWQpKVxuICAgIC5qb2luKCcgJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0U2NvcGVkU3R5bGVJZHNUb0FycmF5KHNjb3BlZFN0eWxlSWRzPzogc3RyaW5nIHwgbnVsbCk6IEFycmF5PHN0cmluZz4gfCBudWxsIHtcbiAgcmV0dXJuIHNjb3BlZFN0eWxlSWRzPy5zcGxpdCgnICcpID8/IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0U3R5bGVJZHNUb1N0cmluZyhzY29wZWRTdHlsZUlkczogU2V0PHN0cmluZz4pOiBzdHJpbmcge1xuICByZXR1cm4gQXJyYXkuZnJvbShzY29wZWRTdHlsZUlkcykuam9pbignICcpO1xufVxuXG5leHBvcnQgY29uc3QgYWRkQ29tcG9uZW50U3R5bGVQcmVmaXggPSAoc3R5bGVJZD86IHN0cmluZyB8IG51bGwpOiBzdHJpbmcgfCBudWxsID0+IHtcbiAgaWYgKHN0eWxlSWQpIHtcbiAgICBsZXQgaWR4ID0gMDtcbiAgICBkbyB7XG4gICAgICBzdHlsZUlkID0gc3R5bGVJZC5zdWJzdHJpbmcoMCwgaWR4KSArIHN0eWxlQ29udGVudChzdHlsZUlkLnN1YnN0cmluZyhpZHgpKTtcbiAgICB9IHdoaWxlICgoaWR4ID0gc3R5bGVJZC5pbmRleE9mKCcgJywgaWR4KSArIDEpICE9PSAwKTtcbiAgfVxuICByZXR1cm4gc3R5bGVJZCB8fCBudWxsO1xufTtcbiJdfQ==","/** @file Public types for the client deserialization */\n/**\n * Flags for VNode.\n *\n * # Materialize vs Inflation\n *\n * - Materialized: The node has all of its children. Specifically `firstChild`/`lastChild` are NOT\n *   `undefined`. Materialization creates lazy instantiation of the children. NOTE: Only\n *   ElementVNode need to be materialized.\n * - Inflation:\n *\n *   - If Text: It means that it is safe to write to the node. When Text nodes are first Deserialized\n *       multiple text nodes can share the same DOM node. On write the sibling text nodes need to be\n *       converted into separate text nodes.\n *   - If Element: It means that the element tag attributes have not yet been read from the DOM.\n *\n * Inflation and materialization are not the same, they are two independent things.\n *\n * @internal\n */\nexport var VNodeFlags;\n(function (VNodeFlags) {\n    VNodeFlags[VNodeFlags[\"Element\"] = 1] = \"Element\";\n    VNodeFlags[VNodeFlags[\"Virtual\"] = 2] = \"Virtual\";\n    VNodeFlags[VNodeFlags[\"ELEMENT_OR_VIRTUAL_MASK\"] = 3] = \"ELEMENT_OR_VIRTUAL_MASK\";\n    VNodeFlags[VNodeFlags[\"ELEMENT_OR_TEXT_MASK\"] = 5] = \"ELEMENT_OR_TEXT_MASK\";\n    VNodeFlags[VNodeFlags[\"TYPE_MASK\"] = 7] = \"TYPE_MASK\";\n    VNodeFlags[VNodeFlags[\"INFLATED_TYPE_MASK\"] = 15] = \"INFLATED_TYPE_MASK\";\n    VNodeFlags[VNodeFlags[\"Text\"] = 4] = \"Text\";\n    /// Extra flag which marks if a node needs to be inflated.\n    VNodeFlags[VNodeFlags[\"Inflated\"] = 8] = \"Inflated\";\n    /// Marks if the `ensureProjectionResolved` has been called on the node.\n    VNodeFlags[VNodeFlags[\"Resolved\"] = 16] = \"Resolved\";\n    /// Flags for Namespace\n    VNodeFlags[VNodeFlags[\"NAMESPACE_MASK\"] = 96] = \"NAMESPACE_MASK\";\n    VNodeFlags[VNodeFlags[\"NEGATED_NAMESPACE_MASK\"] = -97] = \"NEGATED_NAMESPACE_MASK\";\n    VNodeFlags[VNodeFlags[\"NS_html\"] = 0] = \"NS_html\";\n    VNodeFlags[VNodeFlags[\"NS_svg\"] = 32] = \"NS_svg\";\n    VNodeFlags[VNodeFlags[\"NS_math\"] = 64] = \"NS_math\";\n})(VNodeFlags || (VNodeFlags = {}));\nexport var VNodeFlagsIndex;\n(function (VNodeFlagsIndex) {\n    VNodeFlagsIndex[VNodeFlagsIndex[\"mask\"] = -128] = \"mask\";\n    VNodeFlagsIndex[VNodeFlagsIndex[\"negated_mask\"] = 127] = \"negated_mask\";\n    VNodeFlagsIndex[VNodeFlagsIndex[\"shift\"] = 7] = \"shift\";\n})(VNodeFlagsIndex || (VNodeFlagsIndex = {}));\nexport var VNodeProps;\n(function (VNodeProps) {\n    VNodeProps[VNodeProps[\"flags\"] = 0] = \"flags\";\n    VNodeProps[VNodeProps[\"parent\"] = 1] = \"parent\";\n    VNodeProps[VNodeProps[\"previousSibling\"] = 2] = \"previousSibling\";\n    VNodeProps[VNodeProps[\"nextSibling\"] = 3] = \"nextSibling\";\n})(VNodeProps || (VNodeProps = {}));\nexport var ElementVNodeProps;\n(function (ElementVNodeProps) {\n    ElementVNodeProps[ElementVNodeProps[\"firstChild\"] = 4] = \"firstChild\";\n    ElementVNodeProps[ElementVNodeProps[\"lastChild\"] = 5] = \"lastChild\";\n    ElementVNodeProps[ElementVNodeProps[\"element\"] = 6] = \"element\";\n    ElementVNodeProps[ElementVNodeProps[\"elementName\"] = 7] = \"elementName\";\n    ElementVNodeProps[ElementVNodeProps[\"PROPS_OFFSET\"] = 8] = \"PROPS_OFFSET\";\n})(ElementVNodeProps || (ElementVNodeProps = {}));\nexport var TextVNodeProps;\n(function (TextVNodeProps) {\n    TextVNodeProps[TextVNodeProps[\"node\"] = 4] = \"node\";\n    TextVNodeProps[TextVNodeProps[\"text\"] = 5] = \"text\";\n})(TextVNodeProps || (TextVNodeProps = {}));\nexport var VirtualVNodeProps;\n(function (VirtualVNodeProps) {\n    VirtualVNodeProps[VirtualVNodeProps[\"firstChild\"] = 4] = \"firstChild\";\n    VirtualVNodeProps[VirtualVNodeProps[\"lastChild\"] = 5] = \"lastChild\";\n    VirtualVNodeProps[VirtualVNodeProps[\"PROPS_OFFSET\"] = 6] = \"PROPS_OFFSET\";\n})(VirtualVNodeProps || (VirtualVNodeProps = {}));\n//# sourceMappingURL=data:application/json;base64,","import { HTML_NS, MATH_NS, SVG_NS } from '../../util/markers';\nimport { getDomContainerFromQContainerElement } from './dom-container';\nimport { ElementVNodeProps, TextVNodeProps, VNodeFlags, VNodeProps, } from './types';\nimport { ensureElementVNode, shouldIgnoreChildren, vnode_getDOMChildNodes, vnode_getDomParentVNode, vnode_getElementName, vnode_getFirstChild, vnode_getNextSibling, vnode_getParent, vnode_isElementVNode, vnode_isTextVNode, } from './vnode';\nexport const isForeignObjectElement = (elementName) => elementName.toLowerCase() === 'foreignobject';\nexport const isSvgElement = (elementName) => elementName === 'svg' || isForeignObjectElement(elementName);\nexport const isMathElement = (elementName) => elementName === 'math';\nexport const vnode_isDefaultNamespace = (vnode) => {\n    const flags = vnode[VNodeProps.flags];\n    return (flags & VNodeFlags.NAMESPACE_MASK) === 0;\n};\nexport const vnode_getElementNamespaceFlags = (elementName) => {\n    if (isSvgElement(elementName)) {\n        return VNodeFlags.NS_svg;\n    }\n    else if (isMathElement(elementName)) {\n        return VNodeFlags.NS_math;\n    }\n    else {\n        return VNodeFlags.NS_html;\n    }\n};\nexport function vnode_getDomChildrenWithCorrectNamespacesToInsert(journal, domParentVNode, newChild) {\n    const { elementNamespace, elementNamespaceFlag } = getNewElementNamespaceData(domParentVNode, newChild);\n    let domChildren = [];\n    if (elementNamespace === HTML_NS) {\n        // parent is in the default namespace, so just get the dom children. This is the fast path.\n        domChildren = vnode_getDOMChildNodes(journal, newChild);\n    }\n    else {\n        // parent is in a different namespace, so we need to clone the children with the correct namespace.\n        // The namespace cannot be changed on nodes, so we need to clone these nodes\n        const children = vnode_getDOMChildNodes(journal, newChild, true);\n        for (let i = 0; i < children.length; i++) {\n            const childVNode = children[i];\n            if (vnode_isTextVNode(childVNode)) {\n                // text nodes are always in the default namespace\n                domChildren.push(childVNode[TextVNodeProps.node]);\n                continue;\n            }\n            if ((childVNode[VNodeProps.flags] & VNodeFlags.NAMESPACE_MASK) ===\n                (domParentVNode[VNodeProps.flags] & VNodeFlags.NAMESPACE_MASK)) {\n                // if the child and parent have the same namespace, we don't need to clone the element\n                domChildren.push(childVNode[ElementVNodeProps.element]);\n                continue;\n            }\n            // clone the element with the correct namespace\n            const newChildElement = vnode_cloneElementWithNamespace(childVNode, domParentVNode, elementNamespace, elementNamespaceFlag);\n            if (newChildElement) {\n                domChildren.push(newChildElement);\n            }\n        }\n    }\n    return domChildren;\n}\n/** This function clones an element with a different namespace, but without the children. */\nfunction cloneElementWithNamespace(element, elementName, namespace) {\n    const newElement = element.ownerDocument.createElementNS(namespace, elementName);\n    const attributes = element.attributes;\n    for (const attribute of attributes) {\n        const name = attribute.name;\n        const value = attribute.value;\n        if (!name || name === ':') {\n            continue;\n        }\n        newElement.setAttribute(name, value);\n    }\n    return newElement;\n}\n/**\n * This function clones an ElementVNode with a different namespace, including the children. This\n * traverse the tree using depth-first search and clones the elements using\n * `cloneElementWithNamespace`.\n */\nfunction vnode_cloneElementWithNamespace(elementVNode, parentVNode, namespace, namespaceFlag) {\n    ensureElementVNode(elementVNode);\n    let vCursor = elementVNode;\n    let vParent = null;\n    let rootElement = null;\n    let parentElement = null;\n    while (vCursor) {\n        let childElement = null;\n        let newChildElement = null;\n        if (vnode_isElementVNode(vCursor)) {\n            // Clone the element\n            childElement = vCursor[ElementVNodeProps.element];\n            const childElementTag = vnode_getElementName(vCursor);\n            // We need to check if the parent is a foreignObject element\n            // and get a new namespace data.\n            const vCursorParent = vnode_getParent(vCursor);\n            // For the first vNode parentNode is not parent from vNode tree, but parent from DOM tree\n            // this is because vNode is not moved yet.\n            // rootElement is null only for the first vNode\n            const vCursorDomParent = rootElement == null ? parentVNode : vCursorParent && vnode_getDomParentVNode(vCursorParent);\n            if (vCursorDomParent) {\n                const namespaceData = getNewElementNamespaceData(vCursorDomParent, vnode_getElementName(vCursor));\n                namespace = namespaceData.elementNamespace;\n                namespaceFlag = namespaceData.elementNamespaceFlag;\n            }\n            newChildElement = cloneElementWithNamespace(childElement, childElementTag, namespace);\n            childElement.remove();\n            if (rootElement == null) {\n                rootElement = newChildElement;\n            }\n            if (parentElement) {\n                parentElement.appendChild(newChildElement);\n            }\n            // Descend into children\n            // We need first get the first child, if any\n            const vFirstChild = vnode_getFirstChild(vCursor);\n            // Then we can overwrite the cursor with newly created element.\n            // This is because we need to materialize the children before we assign new element\n            vCursor[ElementVNodeProps.element] = newChildElement;\n            // Set correct namespace flag\n            vCursor[VNodeProps.flags] &= VNodeFlags.NEGATED_NAMESPACE_MASK;\n            vCursor[VNodeProps.flags] |= namespaceFlag;\n            if (vFirstChild) {\n                vCursor = vFirstChild;\n                parentElement = newChildElement;\n                continue;\n            }\n            else if (shouldIgnoreChildren(childElement)) {\n                // If we should ignore children of the element this means that the element is a container\n                // We need to get the first child of the container\n                const container = getDomContainerFromQContainerElement(childElement);\n                if (container) {\n                    const innerContainerFirstVNode = vnode_getFirstChild(container.rootVNode);\n                    if (innerContainerFirstVNode) {\n                        vCursor = innerContainerFirstVNode;\n                        parentElement = newChildElement;\n                        continue;\n                    }\n                }\n            }\n        }\n        if (vCursor === elementVNode) {\n            // we are where we started, this means that vNode has no children, so we are done.\n            return rootElement;\n        }\n        // Out of children, go to next sibling\n        const vNextSibling = vnode_getNextSibling(vCursor);\n        if (vNextSibling) {\n            vCursor = vNextSibling;\n            continue;\n        }\n        // Out of siblings, go to parent\n        vParent = vnode_getParent(vCursor);\n        while (vParent) {\n            if (vParent === elementVNode) {\n                // We are back where we started, we are done.\n                return rootElement;\n            }\n            const vNextParentSibling = vnode_getNextSibling(vParent);\n            if (vNextParentSibling) {\n                vCursor = vNextParentSibling;\n                return rootElement;\n            }\n            vParent = vnode_getParent(vParent);\n        }\n        if (vParent == null) {\n            // We are done.\n            return rootElement;\n        }\n    }\n    return rootElement;\n}\nfunction isSvg(tagOrVNode) {\n    return typeof tagOrVNode === 'string'\n        ? isSvgElement(tagOrVNode)\n        : (tagOrVNode[VNodeProps.flags] & VNodeFlags.NS_svg) !== 0;\n}\nfunction isMath(tagOrVNode) {\n    return typeof tagOrVNode === 'string'\n        ? isMathElement(tagOrVNode)\n        : (tagOrVNode[VNodeProps.flags] & VNodeFlags.NS_math) !== 0;\n}\nexport function getNewElementNamespaceData(domParentVNode, tagOrVNode) {\n    const parentIsDefaultNamespace = domParentVNode\n        ? !!vnode_getElementName(domParentVNode) && vnode_isDefaultNamespace(domParentVNode)\n        : true;\n    const parentIsForeignObject = !parentIsDefaultNamespace\n        ? isForeignObjectElement(vnode_getElementName(domParentVNode))\n        : false;\n    let elementNamespace = HTML_NS;\n    let elementNamespaceFlag = VNodeFlags.NS_html;\n    const isElementVNodeOrString = typeof tagOrVNode === 'string' || vnode_isElementVNode(tagOrVNode);\n    if (isElementVNodeOrString && isSvg(tagOrVNode)) {\n        elementNamespace = SVG_NS;\n        elementNamespaceFlag = VNodeFlags.NS_svg;\n    }\n    else if (isElementVNodeOrString && isMath(tagOrVNode)) {\n        elementNamespace = MATH_NS;\n        elementNamespaceFlag = VNodeFlags.NS_math;\n    }\n    else if (domParentVNode && !parentIsForeignObject && !parentIsDefaultNamespace) {\n        const isParentSvg = (domParentVNode[VNodeProps.flags] & VNodeFlags.NS_svg) !== 0;\n        const isParentMath = (domParentVNode[VNodeProps.flags] & VNodeFlags.NS_math) !== 0;\n        elementNamespace = isParentSvg ? SVG_NS : isParentMath ? MATH_NS : HTML_NS;\n        elementNamespaceFlag = domParentVNode[VNodeProps.flags] & VNodeFlags.NAMESPACE_MASK;\n    }\n    return {\n        elementNamespace,\n        elementNamespaceFlag,\n    };\n}\n//# sourceMappingURL=data:application/json;base64,","import { useInvokeContext } from './use-core';\nimport {} from '../render/jsx/types/jsx-qwik-events';\nimport { USE_ON_LOCAL, USE_ON_LOCAL_FLAGS, USE_ON_LOCAL_SEQ_IDX } from '../util/markers';\n// <docs markdown=\"../readme.md#useOn\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOn instead)\n/**\n * Register a listener on the current component's host element.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX. Otherwise, it's adding a JSX listener in the `<div>` is a better idea.\n *\n * @public\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n */\n// </docs>\nexport const useOn = (event, eventQrl) => {\n    _useOn(createEventName(event, undefined), eventQrl);\n};\n// <docs markdown=\"../readme.md#useOnDocument\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOnDocument instead)\n/**\n * Register a listener on `document`.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX.\n *\n * @public\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * ```tsx\n * function useScroll() {\n *   useOnDocument(\n *     'scroll',\n *     $((event) => {\n *       console.log('body scrolled', event);\n *     })\n *   );\n * }\n *\n * const Cmp = component$(() => {\n *   useScroll();\n *   return <div>Profit!</div>;\n * });\n * ```\n */\n// </docs>\nexport const useOnDocument = (event, eventQrl) => {\n    _useOn(createEventName(event, 'document'), eventQrl);\n};\n// <docs markdown=\"../readme.md#useOnWindow\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOnWindow instead)\n/**\n * Register a listener on `window`.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX.\n *\n * @public\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * ```tsx\n * function useAnalytics() {\n *   useOnWindow(\n *     'popstate',\n *     $((event) => {\n *       console.log('navigation happened', event);\n *       // report to analytics\n *     })\n *   );\n * }\n *\n * const Cmp = component$(() => {\n *   useAnalytics();\n *   return <div>Profit!</div>;\n * });\n * ```\n */\n// </docs>\nexport const useOnWindow = (event, eventQrl) => {\n    _useOn(createEventName(event, 'window'), eventQrl);\n};\nconst createEventName = (event, eventType) => {\n    const prefix = eventType !== undefined ? eventType + ':' : '';\n    const map = (name) => prefix + 'on' + name.charAt(0).toUpperCase() + name.substring(1) + '$';\n    const res = Array.isArray(event) ? event.map(map) : map(event);\n    return res;\n};\nconst _useOn = (eventName, eventQrl) => {\n    const { isAdded, addEvent } = useOnEventsSequentialScope();\n    if (isAdded) {\n        return;\n    }\n    if (eventQrl) {\n        Array.isArray(eventName)\n            ? eventName.forEach((event) => addEvent(event, eventQrl))\n            : addEvent(eventName, eventQrl);\n    }\n};\n/**\n * This hook is like the `useSequentialScope` but it is specifically for `useOn`. This is needed\n * because we want to execute the `useOn` hooks only once and store the event listeners on the host\n * element. From Qwik V2 the component is rerunning when the promise is thrown, so we need to make\n * sure that the event listeners are not added multiple times.\n *\n * - The event listeners are stored in the `USE_ON_LOCAL` property.\n * - The `USE_ON_LOCAL_SEQ_IDX` is used to keep track of the index of the hook that calls this.\n * - The `USE_ON_LOCAL_FLAGS` is used to keep track of whether the event listener has been added or\n *   not.\n */\nconst useOnEventsSequentialScope = () => {\n    const iCtx = useInvokeContext();\n    const hostElement = iCtx.$hostElement$;\n    const host = hostElement;\n    let onMap = iCtx.$container2$.getHostProp(host, USE_ON_LOCAL);\n    if (onMap === null) {\n        onMap = {};\n        iCtx.$container2$.setHostProp(host, USE_ON_LOCAL, onMap);\n    }\n    let seqIdx = iCtx.$container2$.getHostProp(host, USE_ON_LOCAL_SEQ_IDX);\n    if (seqIdx === null) {\n        seqIdx = 0;\n    }\n    iCtx.$container2$.setHostProp(host, USE_ON_LOCAL_SEQ_IDX, seqIdx + 1);\n    let addedFlags = iCtx.$container2$.getHostProp(host, USE_ON_LOCAL_FLAGS);\n    if (addedFlags === null) {\n        addedFlags = [];\n        iCtx.$container2$.setHostProp(host, USE_ON_LOCAL_FLAGS, addedFlags);\n    }\n    while (addedFlags.length <= seqIdx) {\n        addedFlags.push(false);\n    }\n    const addEvent = (eventName, eventQrl) => {\n        addedFlags[seqIdx] = true;\n        let events = onMap[eventName];\n        if (!events) {\n            onMap[eventName] = events = [];\n        }\n        events.push(eventQrl);\n    };\n    return {\n        isAdded: addedFlags[seqIdx],\n        addEvent,\n    };\n};\n//# sourceMappingURL=data:application/json;base64,","import { isDev } from '@builder.io/qwik/build';\nimport { isQwikComponent } from '../../component/component.public';\nimport { assertDefined } from '../../error/assert';\nimport { isQrl } from '../../qrl/qrl-class';\nimport { JSXNodeImpl, isJSXNode } from '../../render/jsx/jsx-runtime';\nimport { SubscriptionType } from '../../state/common';\nimport { isSignal } from '../../state/signal';\nimport { invokeApply, newInvokeContext, untrack } from '../../use/use-core';\nimport {} from '../../use/use-on';\nimport { EMPTY_OBJ } from '../../util/flyweight';\nimport { ELEMENT_PROPS, ELEMENT_SEQ_IDX, OnRenderProp, RenderEvent, USE_ON_LOCAL, USE_ON_LOCAL_SEQ_IDX, } from '../../util/markers';\nimport { isPromise, maybeThen, safeCall } from '../../util/promises';\nimport { logWarn } from '../../util/log';\n/**\n * Use `executeComponent2` to execute a component.\n *\n * Component execution can be complex because of:\n *\n * - It can by async\n * - It can contain many tasks which need to be awaited\n * - Each task can run multiple times if they track signals which change.\n * - The JSX may be re-generated multiple times of a task needs to be rerun due to signal change.\n * - It needs to keep track of hook state.\n *\n * For `component$`: `renderHost` === `subscriptionHost` For inlined-components: the\n * `subscriptionHost` is a parent `component$` which needs to re-execute.\n *\n * @param container\n * @param renderHost - VNode into which the component is rendered into.\n * @param subscriptionHost - VNode which will be re-executed if the component needs to re-render.\n * @param componentQRL\n * @param props\n * @returns\n */\nexport const executeComponent2 = (container, renderHost, subscriptionHost, componentQRL, props) => {\n    const iCtx = newInvokeContext(container.$locale$, subscriptionHost, undefined, RenderEvent);\n    iCtx.$subscriber$ = [SubscriptionType.HOST, subscriptionHost];\n    iCtx.$container2$ = container;\n    let componentFn;\n    container.ensureProjectionResolved(renderHost);\n    if (componentQRL === null) {\n        componentQRL = componentQRL || container.getHostProp(renderHost, OnRenderProp);\n        assertDefined(componentQRL, 'No Component found at this location');\n    }\n    if (isQrl(componentQRL)) {\n        props = props || container.getHostProp(renderHost, ELEMENT_PROPS) || EMPTY_OBJ;\n        componentFn = componentQRL.getFn(iCtx);\n    }\n    else if (isQwikComponent(componentQRL)) {\n        const qComponentFn = componentQRL;\n        componentFn = () => invokeApply(iCtx, qComponentFn, [props || EMPTY_OBJ, null, 0]);\n    }\n    else {\n        const inlineComponent = componentQRL;\n        componentFn = () => invokeApply(iCtx, inlineComponent, [props || EMPTY_OBJ]);\n    }\n    const executeComponentWithPromiseExceptionRetry = () => safeCall(() => {\n        container.setHostProp(renderHost, ELEMENT_SEQ_IDX, null);\n        container.setHostProp(renderHost, USE_ON_LOCAL_SEQ_IDX, null);\n        container.setHostProp(renderHost, ELEMENT_PROPS, props);\n        return componentFn(props);\n    }, (jsx) => {\n        const useOnEvents = container.getHostProp(renderHost, USE_ON_LOCAL);\n        if (useOnEvents) {\n            return maybeThen(addUseOnEvents(jsx, useOnEvents), () => jsx);\n        }\n        return jsx;\n    }, (err) => {\n        if (isPromise(err)) {\n            return err.then(executeComponentWithPromiseExceptionRetry);\n        }\n        else {\n            throw err;\n        }\n    });\n    return executeComponentWithPromiseExceptionRetry();\n};\n/**\n * Stores the JSX output of the last execution of the component.\n *\n * Component can execute multiple times because:\n *\n * - Component can have multiple tasks\n * - Tasks can track signals\n * - Task A can change signal which causes Task B to rerun.\n *\n * So when executing a component we only care about its last JSX Output.\n */\nfunction addUseOnEvents(jsx, useOnEvents) {\n    const jsxElement = findFirstStringJSX(jsx);\n    return maybeThen(jsxElement, (jsxElement) => {\n        let isInvisibleComponent = false;\n        if (!jsxElement) {\n            /**\n             * We did not find any jsx node with a string tag. This means that we should append:\n             *\n             * ```html\n             * <script type=\"placeholder\" hidden on-document:qinit=\"...\"></script>\n             * ```\n             *\n             * This is needed because use on events should have a node to attach them to.\n             */\n            isInvisibleComponent = true;\n        }\n        for (const key in useOnEvents) {\n            if (Object.prototype.hasOwnProperty.call(useOnEvents, key)) {\n                if (isInvisibleComponent) {\n                    if (key === 'onQvisible$') {\n                        jsxElement = addScriptNodeForInvisibleComponents(jsx);\n                        if (jsxElement) {\n                            addUseOnEvent(jsxElement, 'document:onQinit$', useOnEvents[key]);\n                        }\n                    }\n                    else if (key.startsWith('document:') || key.startsWith('window:')) {\n                        jsxElement = addScriptNodeForInvisibleComponents(jsx);\n                        if (jsxElement) {\n                            addUseOnEvent(jsxElement, key, useOnEvents[key]);\n                        }\n                    }\n                    else if (isDev) {\n                        logWarn('You are trying to add an event \"' +\n                            key +\n                            '\" using `useOn` hook, ' +\n                            'but a node to which you can add an event is not found. ' +\n                            'Please make sure that the component has a valid element node. ');\n                    }\n                }\n                else if (jsxElement) {\n                    addUseOnEvent(jsxElement, key, useOnEvents[key]);\n                }\n            }\n        }\n        return jsxElement;\n    });\n}\nfunction addUseOnEvent(jsxElement, key, value) {\n    let props = jsxElement.props;\n    if (props === EMPTY_OBJ) {\n        props = jsxElement.props = {};\n    }\n    let propValue = props[key];\n    if (propValue === undefined) {\n        propValue = [];\n    }\n    else if (!Array.isArray(propValue)) {\n        propValue = [propValue];\n    }\n    propValue.push(...value);\n    props[key] = propValue;\n}\nfunction findFirstStringJSX(jsx) {\n    const queue = [jsx];\n    while (queue.length) {\n        const jsx = queue.shift();\n        if (isJSXNode(jsx)) {\n            if (typeof jsx.type === 'string') {\n                return jsx;\n            }\n            queue.push(jsx.children);\n        }\n        else if (Array.isArray(jsx)) {\n            queue.push(...jsx);\n        }\n        else if (isPromise(jsx)) {\n            return maybeThen(jsx, (jsx) => findFirstStringJSX(jsx));\n        }\n        else if (isSignal(jsx)) {\n            return findFirstStringJSX(untrack(() => jsx.value));\n        }\n    }\n    return null;\n}\nfunction addScriptNodeForInvisibleComponents(jsx) {\n    if (isJSXNode(jsx)) {\n        const jsxElement = new JSXNodeImpl('script', {}, {\n            type: 'placeholder',\n            hidden: '',\n        }, null, 3);\n        if (jsx.children == null) {\n            jsx.children = jsxElement;\n        }\n        else if (Array.isArray(jsx.children)) {\n            jsx.children.push(jsxElement);\n        }\n        else {\n            jsx.children = [jsx.children, jsxElement];\n        }\n        return jsxElement;\n    }\n    else if (Array.isArray(jsx) && jsx.length) {\n        // get first element\n        return addScriptNodeForInvisibleComponents(jsx[0]);\n    }\n    return null;\n}\n//# sourceMappingURL=data:application/json;base64,","export function escapeHTML(html) {\n    let escapedHTML = '';\n    const length = html.length;\n    let idx = 0;\n    let lastIdx = idx;\n    for (; idx < length; idx++) {\n        // We get the charCode NOT string. String would allocate memory.\n        const ch = html.charCodeAt(idx);\n        // Every time we concat a string we allocate memory. We want to minimize that.\n        if (ch === 60 /* < */) {\n            escapedHTML += html.substring(lastIdx, idx) + '&lt;';\n        }\n        else if (ch === 62 /* > */) {\n            escapedHTML += html.substring(lastIdx, idx) + '&gt;';\n        }\n        else if (ch === 38 /* & */) {\n            escapedHTML += html.substring(lastIdx, idx) + '&amp;';\n        }\n        else if (ch === 34 /* \" */) {\n            escapedHTML += html.substring(lastIdx, idx) + '&quot;';\n        }\n        else if (ch === 39 /* ' */) {\n            escapedHTML += html.substring(lastIdx, idx) + '&#39;';\n        }\n        else {\n            continue;\n        }\n        lastIdx = idx + 1;\n    }\n    if (lastIdx === 0) {\n        // This is most common case, just return previous string no memory allocation.\n        return html;\n    }\n    else {\n        // Add the tail of replacement.\n        return escapedHTML + html.substring(lastIdx);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmFjdGVyLWVzY2FwaW5nLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3YyL3NoYXJlZC9jaGFyYWN0ZXItZXNjYXBpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxVQUFVLFVBQVUsQ0FBQyxJQUFZO0lBQ3JDLElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQztJQUNyQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQzNCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNaLElBQUksT0FBTyxHQUFHLEdBQUcsQ0FBQztJQUNsQixPQUFPLEdBQUcsR0FBRyxNQUFNLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQztRQUMzQixnRUFBZ0U7UUFDaEUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoQyw4RUFBOEU7UUFDOUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3RCLFdBQVcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDdkQsQ0FBQzthQUFNLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUM3QixXQUFXLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ3ZELENBQUM7YUFBTSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDN0IsV0FBVyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQztRQUN4RCxDQUFDO2FBQU0sSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzdCLFdBQVcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUM7UUFDekQsQ0FBQzthQUFNLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUM3QixXQUFXLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDO1FBQ3hELENBQUM7YUFBTSxDQUFDO1lBQ04sU0FBUztRQUNYLENBQUM7UUFDRCxPQUFPLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBQ0QsSUFBSSxPQUFPLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDbEIsOEVBQThFO1FBQzlFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztTQUFNLENBQUM7UUFDTiwrQkFBK0I7UUFDL0IsT0FBTyxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvQyxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBlc2NhcGVIVE1MKGh0bWw6IHN0cmluZyk6IHN0cmluZyB7XG4gIGxldCBlc2NhcGVkSFRNTCA9ICcnO1xuICBjb25zdCBsZW5ndGggPSBodG1sLmxlbmd0aDtcbiAgbGV0IGlkeCA9IDA7XG4gIGxldCBsYXN0SWR4ID0gaWR4O1xuICBmb3IgKDsgaWR4IDwgbGVuZ3RoOyBpZHgrKykge1xuICAgIC8vIFdlIGdldCB0aGUgY2hhckNvZGUgTk9UIHN0cmluZy4gU3RyaW5nIHdvdWxkIGFsbG9jYXRlIG1lbW9yeS5cbiAgICBjb25zdCBjaCA9IGh0bWwuY2hhckNvZGVBdChpZHgpO1xuICAgIC8vIEV2ZXJ5IHRpbWUgd2UgY29uY2F0IGEgc3RyaW5nIHdlIGFsbG9jYXRlIG1lbW9yeS4gV2Ugd2FudCB0byBtaW5pbWl6ZSB0aGF0LlxuICAgIGlmIChjaCA9PT0gNjAgLyogPCAqLykge1xuICAgICAgZXNjYXBlZEhUTUwgKz0gaHRtbC5zdWJzdHJpbmcobGFzdElkeCwgaWR4KSArICcmbHQ7JztcbiAgICB9IGVsc2UgaWYgKGNoID09PSA2MiAvKiA+ICovKSB7XG4gICAgICBlc2NhcGVkSFRNTCArPSBodG1sLnN1YnN0cmluZyhsYXN0SWR4LCBpZHgpICsgJyZndDsnO1xuICAgIH0gZWxzZSBpZiAoY2ggPT09IDM4IC8qICYgKi8pIHtcbiAgICAgIGVzY2FwZWRIVE1MICs9IGh0bWwuc3Vic3RyaW5nKGxhc3RJZHgsIGlkeCkgKyAnJmFtcDsnO1xuICAgIH0gZWxzZSBpZiAoY2ggPT09IDM0IC8qIFwiICovKSB7XG4gICAgICBlc2NhcGVkSFRNTCArPSBodG1sLnN1YnN0cmluZyhsYXN0SWR4LCBpZHgpICsgJyZxdW90Oyc7XG4gICAgfSBlbHNlIGlmIChjaCA9PT0gMzkgLyogJyAqLykge1xuICAgICAgZXNjYXBlZEhUTUwgKz0gaHRtbC5zdWJzdHJpbmcobGFzdElkeCwgaWR4KSArICcmIzM5Oyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBsYXN0SWR4ID0gaWR4ICsgMTtcbiAgfVxuICBpZiAobGFzdElkeCA9PT0gMCkge1xuICAgIC8vIFRoaXMgaXMgbW9zdCBjb21tb24gY2FzZSwganVzdCByZXR1cm4gcHJldmlvdXMgc3RyaW5nIG5vIG1lbW9yeSBhbGxvY2F0aW9uLlxuICAgIHJldHVybiBodG1sO1xuICB9IGVsc2Uge1xuICAgIC8vIEFkZCB0aGUgdGFpbCBvZiByZXBsYWNlbWVudC5cbiAgICByZXR1cm4gZXNjYXBlZEhUTUwgKyBodG1sLnN1YnN0cmluZyhsYXN0SWR4KTtcbiAgfVxufVxuIl19","import { isDev } from '@builder.io/qwik/build';\nimport {} from '../../component/component.public';\nimport { SERIALIZABLE_STATE } from '../../container/serializers';\nimport { assertDefined, assertFalse, assertTrue } from '../../error/assert';\nimport { dangerouslySetInnerHTML, serializeAttribute } from '../../render/execute-component';\nimport { Fragment, JSXNodeImpl, isJSXNode } from '../../render/jsx/jsx-runtime';\nimport { Slot } from '../../render/jsx/slot.public';\nimport { SSRComment, SSRRaw, SkipRender } from '../../render/jsx/utils.public';\nimport { SubscriptionType } from '../../state/common';\nimport { SignalDerived, isSignal } from '../../state/signal';\nimport { trackSignal } from '../../use/use-core';\nimport { TaskFlags, cleanupTask, isTask } from '../../use/use-task';\nimport { EMPTY_OBJ } from '../../util/flyweight';\nimport { ELEMENT_KEY, ELEMENT_PROPS, ELEMENT_SEQ, OnRenderProp, QContainerAttr, QDefaultSlot, QSlot, QSlotParent, QStyle, QTemplate, } from '../../util/markers';\nimport { isPromise } from '../../util/promises';\nimport {} from '../../util/types';\nimport { convertEventNameFromJsxPropToHtmlAttr, getEventNameFromJsxProp, getEventNameScopeFromJsxProp, isHtmlAttributeAnEventName, isJsxPropertyAnEventName, } from '../shared/event-names';\nimport { ChoreType } from '../shared/scheduler';\nimport { hasClassAttr } from '../shared/scoped-styles';\nimport { DEBUG_TYPE, QContainerValue, VirtualType } from '../shared/types';\nimport { ElementVNodeProps, VNodeFlags, VNodeProps, VirtualVNodeProps, } from './types';\nimport { mapApp_findIndx, mapArray_set, vnode_ensureElementInflated, vnode_getAttr, vnode_getDomParentVNode, vnode_getElementName, vnode_getFirstChild, vnode_getNextSibling, vnode_getNode, vnode_getParent, vnode_getProjectionParentComponent, vnode_getProp, vnode_getPropStartIndex, vnode_getText, vnode_getType, vnode_insertBefore, vnode_isElementVNode, vnode_isTextVNode, vnode_isVNode, vnode_isVirtualVNode, vnode_locate, vnode_newElement, vnode_newText, vnode_newVirtual, vnode_remove, vnode_setAttr, vnode_setProp, vnode_setText, vnode_truncate, vnode_walkVNode, } from './vnode';\nimport { getNewElementNamespaceData } from './vnode-namespace';\nimport { executeComponent2 } from '../shared/component-execution';\nimport { isParentSlotProp, isSlotProp } from '../../util/prop';\nimport { escapeHTML } from '../shared/character-escaping';\nexport const vnode_diff = (container, jsxNode, vStartNode, scopedStyleIdPrefix) => {\n    let journal = container.$journal$;\n    /**\n     * Stack is used to keep track of the state of the traversal.\n     *\n     * We push current state into the stack before descending into the child, and we pop the state\n     * when we are done with the child.\n     */\n    const stack = [];\n    const asyncQueue = [];\n    ////////////////////////////////\n    //// Traverse state variables\n    ////////////////////////////////\n    let vParent = null;\n    /// Current node we compare against. (Think of it as a cursor.)\n    /// (Node can be null, if we are at the end of the list.)\n    let vCurrent = null;\n    /// When we insert new node we start it here so that we can descend into it.\n    /// NOTE: it can't be stored in `vCurrent` because `vNewCurrent` is in journal\n    /// and is not connected to the tree.\n    let vNewNode = null; // TODO: delete, because journal is on vNode, the above comment no longer applies\n    /// When elements have keys they can be consumed out of order and therefore we can't use nextSibling.\n    /// In such a case this array will contain the elements after the current location.\n    /// The array even indices will contains keys and odd indices the vNode.\n    let vSiblings = null; // See: `SiblingsArray`\n    let vSiblingsIdx = -1;\n    /// Current set of JSX children.\n    let jsxChildren = null;\n    // Current JSX child.\n    let jsxValue = null;\n    let jsxIdx = 0;\n    let jsxCount = 0;\n    // When we descend into children, we need to skip advance() because we just descended.\n    let shouldAdvance = true;\n    /**\n     * When we are rendering inside a projection we don't want to process child components. Child\n     * components will be processed only if the projection is re-projected with a `<Slot>`.\n     *\n     * Example: <Parent> <div> <Child/> </div> </Parent>\n     *\n     * In the above example, the `Child` component will not be processed because it is inside a\n     * projection. Only if the `<Parent>` projects its content with `<Slot>` will the `Child`\n     * component be processed.\n     */\n    // let inContentProjection = false;\n    ////////////////////////////////\n    diff(jsxNode, vStartNode);\n    return drainAsyncQueue();\n    //////////////////////////////////////////////\n    //////////////////////////////////////////////\n    //////////////////////////////////////////////\n    function diff(jsxNode, vStartNode) {\n        assertFalse(vnode_isVNode(jsxNode), 'JSXNode should not be a VNode');\n        assertTrue(vnode_isVNode(vStartNode), 'vStartNode should be a VNode');\n        vParent = vStartNode;\n        vNewNode = null;\n        vCurrent = vnode_getFirstChild(vStartNode);\n        stackPush(jsxNode, true);\n        while (stack.length) {\n            while (jsxIdx < jsxCount) {\n                assertFalse(vParent === vCurrent, \"Parent and current can't be the same\");\n                if (typeof jsxValue === 'string') {\n                    expectText(jsxValue);\n                }\n                else if (typeof jsxValue === 'number') {\n                    expectText(String(jsxValue));\n                }\n                else if (jsxValue && typeof jsxValue === 'object') {\n                    if (Array.isArray(jsxValue)) {\n                        descend(jsxValue, false);\n                    }\n                    else if (isSignal(jsxValue)) {\n                        expectVirtual(VirtualType.DerivedSignal, null);\n                        descend(trackSignal(jsxValue, [\n                            SubscriptionType.TEXT_MUTABLE,\n                            vCurrent || vNewNode, // This should be host, but not sure why\n                            jsxValue,\n                            vCurrent || vNewNode,\n                        ]), true);\n                    }\n                    else if (isPromise(jsxValue)) {\n                        expectVirtual(VirtualType.Awaited, null);\n                        asyncQueue.push(jsxValue, vNewNode || vCurrent);\n                    }\n                    else if (isJSXNode(jsxValue)) {\n                        const type = jsxValue.type;\n                        if (typeof type === 'string') {\n                            expectNoMoreTextNodes();\n                            expectElement(jsxValue, type);\n                            descend(jsxValue.children, true);\n                        }\n                        else if (typeof type === 'function') {\n                            if (type === Fragment) {\n                                expectNoMoreTextNodes();\n                                expectVirtual(VirtualType.Fragment, jsxValue.key);\n                                descend(jsxValue.children, true);\n                            }\n                            else if (type === Slot) {\n                                expectNoMoreTextNodes();\n                                if (!expectSlot()) {\n                                    // nothing to project, so try to render the Slot default content.\n                                    descend(jsxValue.children, true);\n                                }\n                            }\n                            else if (type === Projection) {\n                                expectProjection();\n                                descend(jsxValue.children, true);\n                            }\n                            else if (type === SSRComment) {\n                                expectNoMore();\n                            }\n                            else if (type === SSRRaw) {\n                                expectNoMore();\n                            }\n                            else {\n                                // Must be a component\n                                expectNoMoreTextNodes();\n                                expectComponent(type);\n                            }\n                        }\n                    }\n                }\n                else if (jsxValue === SkipRender) {\n                    // do nothing, we are skipping this node\n                    journal = [];\n                }\n                else {\n                    expectText('');\n                }\n                advance();\n            }\n            expectNoMore();\n            ascend();\n        }\n    }\n    function advance() {\n        if (!shouldAdvance) {\n            shouldAdvance = true;\n            return;\n        }\n        jsxIdx++;\n        if (jsxIdx < jsxCount) {\n            jsxValue = jsxChildren[jsxIdx];\n        }\n        else if (stack[stack.length - 1] === false) {\n            // this was special `descendVNode === false` so pop and try again\n            return ascend();\n        }\n        if (vNewNode !== null) {\n            // We have a new Node.\n            // This means that the `vCurrent` was deemed not useful and we inserted in front of it.\n            // This means that the next node we should look at is the `vCurrent` so just clear the\n            // vNewNode  and try again.\n            vNewNode = null;\n        }\n        else {\n            advanceToNextSibling();\n        }\n    }\n    /**\n     * Advance the `vCurrent` to the next sibling.\n     *\n     * Normally this is just `vCurrent = vnode_getNextSibling(vCurrent)`. However, this gets\n     * complicated if `retrieveChildWithKey` was called, because then we are consuming nodes out of\n     * order and can't rely on `vnode_getNextSibling` and instead we need to go by `vSiblings`.\n     */\n    function peekNextSibling() {\n        if (vSiblings !== null) {\n            // We came across a key, and we moved nodes around. This means we can no longer use\n            // `vnode_getNextSibling` to look at next node and instead we have to go by `vSiblings`.\n            const idx = vSiblingsIdx + SiblingsArray.NextVNode;\n            return idx < vSiblings.length ? vSiblings[idx] : null;\n        }\n        else {\n            // If we don't have a `vNewNode`, than that means we just reconciled the current node.\n            // So advance it.\n            return vCurrent ? vnode_getNextSibling(vCurrent) : null;\n        }\n    }\n    /**\n     * Advance the `vCurrent` to the next sibling.\n     *\n     * Normally this is just `vCurrent = vnode_getNextSibling(vCurrent)`. However, this gets\n     * complicated if `retrieveChildWithKey` was called, because then we are consuming nodes out of\n     * order and can't rely on `vnode_getNextSibling` and instead we need to go by `vSiblings`.\n     */\n    function advanceToNextSibling() {\n        vCurrent = peekNextSibling();\n        if (vSiblings !== null) {\n            vSiblingsIdx += SiblingsArray.Size; // advance;\n        }\n    }\n    /**\n     * @param children\n     * @param descendVNode - If true we are descending into vNode; This is set to false if we come\n     *   across an array in jsx, and we need to descend into the array without actually descending\n     *   into the vNode.\n     *\n     *   Example:\n     *\n     *   ```\n     *   <>\n     *   before\n     *   {[1,2].map((i) => <span>{i}</span>)}\n     *   after\n     *   </>\n     * ```\n     *\n     *   In the above example all nodes are on same level so we don't `descendVNode` even thought there\n     *   is an array produced by the `map` function.\n     */\n    function descend(children, descendVNode) {\n        if (children == null) {\n            expectNoChildren();\n            return;\n        }\n        stackPush(children, descendVNode);\n        if (descendVNode) {\n            assertDefined(vCurrent || vNewNode, 'Expecting vCurrent to be defined.');\n            vSiblings = null;\n            vSiblingsIdx = -1;\n            vParent = vNewNode || vCurrent;\n            vCurrent = vnode_getFirstChild(vParent);\n            vNewNode = null;\n        }\n        shouldAdvance = false;\n    }\n    function ascend() {\n        const descendVNode = stack.pop(); // boolean: descendVNode\n        if (descendVNode) {\n            vSiblingsIdx = stack.pop();\n            vSiblings = stack.pop();\n            vNewNode = stack.pop();\n            vCurrent = stack.pop();\n            vParent = stack.pop();\n        }\n        jsxValue = stack.pop();\n        jsxCount = stack.pop();\n        jsxIdx = stack.pop();\n        jsxChildren = stack.pop();\n        advance();\n    }\n    function stackPush(children, descendVNode) {\n        stack.push(jsxChildren, jsxIdx, jsxCount, jsxValue);\n        if (descendVNode) {\n            stack.push(vParent, vCurrent, vNewNode, vSiblings, vSiblingsIdx);\n        }\n        stack.push(descendVNode);\n        if (Array.isArray(children)) {\n            jsxIdx = 0;\n            jsxCount = children.length;\n            jsxChildren = children;\n            jsxValue = jsxCount > 0 ? children[0] : null;\n        }\n        else if (children === undefined) {\n            // no children\n            jsxIdx = 0;\n            jsxValue = null;\n            jsxChildren = null;\n            jsxCount = 0;\n        }\n        else {\n            jsxIdx = 0;\n            jsxValue = children;\n            jsxChildren = null;\n            jsxCount = 1;\n        }\n    }\n    function getInsertBefore() {\n        if (vNewNode) {\n            return vCurrent;\n        }\n        else if (vSiblings !== null) {\n            const nextIdx = vSiblingsIdx + SiblingsArray.NextVNode;\n            return nextIdx < vSiblings.length ? vSiblings[nextIdx] : null;\n        }\n        else {\n            return peekNextSibling();\n        }\n    }\n    /////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////\n    function descendContentToProject(children, host) {\n        if (!Array.isArray(children)) {\n            children = [children];\n        }\n        if (children.length) {\n            const createProjectionJSXNode = (slotName) => {\n                return new JSXNodeImpl(Projection, EMPTY_OBJ, null, [], 0, slotName);\n            };\n            const projections = [];\n            if (host) {\n                // we need to create empty projections for all the slots to remove unused slots content\n                for (let i = vnode_getPropStartIndex(host); i < host.length; i = i + 2) {\n                    const prop = host[i];\n                    if (isSlotProp(prop)) {\n                        const slotName = prop;\n                        projections.push(slotName);\n                        projections.push(createProjectionJSXNode(slotName));\n                    }\n                }\n            }\n            /// STEP 1: Bucketize the children based on the projection name.\n            for (let i = 0; i < children.length; i++) {\n                const child = children[i];\n                const slotName = String((isJSXNode(child) && child.props[QSlot]) || QDefaultSlot);\n                const idx = mapApp_findIndx(projections, slotName, 0);\n                let jsxBucket;\n                if (idx >= 0) {\n                    jsxBucket = projections[idx + 1];\n                }\n                else {\n                    projections.splice(~idx, 0, slotName, (jsxBucket = createProjectionJSXNode(slotName)));\n                }\n                const removeProjection = child === false;\n                if (!removeProjection) {\n                    jsxBucket.children.push(child);\n                }\n            }\n            /// STEP 2: remove the names\n            for (let i = projections.length - 2; i >= 0; i = i - 2) {\n                projections.splice(i, 1);\n            }\n            descend(projections, true);\n        }\n    }\n    function expectProjection() {\n        const slotName = jsxValue.key;\n        // console.log('expectProjection', JSON.stringify(slotName));\n        vCurrent = vnode_getProp(vParent, // The parent is the component and it should have our portal.\n        slotName, (id) => vnode_locate(container.rootVNode, id));\n        if (vCurrent == null) {\n            vNewNode = vnode_newVirtual();\n            // you may be tempted to add the projection into the current parent, but\n            // that is wrong. We don't yet know if the projection will be projected, so\n            // we should leave it unattached.\n            // vNewNode[VNodeProps.parent] = vParent;\n            isDev && vnode_setProp(vNewNode, DEBUG_TYPE, VirtualType.Projection);\n            isDev && vnode_setProp(vNewNode, 'q:code', 'expectProjection');\n            vnode_setProp(vNewNode, QSlot, slotName);\n            vnode_setProp(vNewNode, QSlotParent, vParent);\n            vnode_setProp(vParent, slotName, vNewNode);\n        }\n    }\n    function expectSlot() {\n        const vHost = vnode_getProjectionParentComponent(vParent, container.rootVNode);\n        const slotNameKey = getSlotNameKey(vHost);\n        // console.log('expectSlot', JSON.stringify(slotNameKey));\n        const vProjectedNode = vHost\n            ? vnode_getProp(vHost, slotNameKey, \n            // for slots this id is vnode ref id\n            null // Projections should have been resolved through container.ensureProjectionResolved\n            //(id) => vnode_locate(container.rootVNode, id)\n            )\n            : null;\n        // console.log('   ', String(vHost), String(vProjectedNode));\n        if (vProjectedNode == null) {\n            // Nothing to project, so render content of the slot.\n            vnode_insertBefore(journal, vParent, (vNewNode = vnode_newVirtual()), vCurrent && getInsertBefore());\n            vnode_setProp(vNewNode, QSlot, slotNameKey);\n            vHost && vnode_setProp(vHost, slotNameKey, vNewNode);\n            isDev && vnode_setProp(vNewNode, DEBUG_TYPE, VirtualType.Projection);\n            isDev && vnode_setProp(vNewNode, 'q:code', 'expectSlot' + count++);\n            return false;\n        }\n        else if (vProjectedNode === vCurrent) {\n            // All is good.\n            // console.log('  NOOP', String(vCurrent));\n        }\n        else {\n            // move from q:template to the target node\n            vnode_insertBefore(journal, vParent, (vNewNode = vProjectedNode), vCurrent && getInsertBefore());\n            vnode_setProp(vNewNode, QSlot, slotNameKey);\n            vHost && vnode_setProp(vHost, slotNameKey, vNewNode);\n            isDev && vnode_setProp(vNewNode, DEBUG_TYPE, VirtualType.Projection);\n            isDev && vnode_setProp(vNewNode, 'q:code', 'expectSlot' + count++);\n        }\n        return true;\n    }\n    function getSlotNameKey(vHost) {\n        const constProps = jsxValue.constProps;\n        if (constProps && typeof constProps == 'object' && 'name' in constProps) {\n            const constValue = constProps.name;\n            if (constValue instanceof SignalDerived) {\n                return trackSignal(constValue, [SubscriptionType.HOST, vHost]);\n            }\n        }\n        return jsxValue.props.name || QDefaultSlot;\n    }\n    function drainAsyncQueue() {\n        while (asyncQueue.length) {\n            const jsxNode = asyncQueue.shift();\n            const vHostNode = asyncQueue.shift();\n            if (isPromise(jsxNode)) {\n                return jsxNode.then((jsxNode) => {\n                    diff(jsxNode, vHostNode);\n                    return drainAsyncQueue();\n                });\n            }\n            else {\n                diff(jsxNode, vHostNode);\n            }\n        }\n    }\n    function expectNoChildren() {\n        const vFirstChild = vCurrent && vnode_getFirstChild(vCurrent);\n        if (vFirstChild !== null) {\n            let vChild = vFirstChild;\n            while (vChild) {\n                cleanup(container, vChild);\n                vChild = vnode_getNextSibling(vChild);\n            }\n            vnode_truncate(journal, vCurrent, vFirstChild);\n        }\n    }\n    /** Expect no more nodes - Any nodes which are still at cursor, need to be removed. */\n    function expectNoMore() {\n        assertFalse(vParent === vCurrent, \"Parent and current can't be the same\");\n        if (vCurrent !== null) {\n            while (vCurrent) {\n                const toRemove = vCurrent;\n                advanceToNextSibling();\n                cleanup(container, toRemove);\n                if (vParent === vnode_getParent(toRemove)) {\n                    // If we are diffing projection than the parent is not the parent of the node.\n                    // If that is the case we don't want to remove the node from the parent.\n                    vnode_remove(journal, vParent, toRemove, true);\n                }\n            }\n        }\n    }\n    function expectNoMoreTextNodes() {\n        while (vCurrent !== null && vnode_isTextVNode(vCurrent)) {\n            cleanup(container, vCurrent);\n            const toRemove = vCurrent;\n            advanceToNextSibling();\n            vnode_remove(journal, vParent, toRemove, true);\n        }\n    }\n    /**\n     * Returns whether `qDispatchEvent` needs patching. This is true when one of the `jsx` argument's\n     * const props has the name of an event.\n     *\n     * @returns {boolean}\n     */\n    function createNewElement(jsx, elementName) {\n        const element = createElementWithNamespace(elementName);\n        const { constProps } = jsx;\n        let needsQDispatchEventPatch = false;\n        if (constProps) {\n            // Const props are, well, constant, they will never change!\n            // For this reason we can cheat and write them directly into the DOM.\n            // We never tell the vNode about them saving us time and memory.\n            for (const key in constProps) {\n                let value = constProps[key];\n                if (isJsxPropertyAnEventName(key)) {\n                    // So for event handlers we must add them to the vNode so that qwikloader can look them up\n                    // But we need to mark them so that they don't get pulled into the diff.\n                    const eventName = getEventNameFromJsxProp(key);\n                    const scope = getEventNameScopeFromJsxProp(key);\n                    vnode_setProp(vNewNode, HANDLER_PREFIX + ':' + scope + ':' + eventName, value);\n                    if (eventName) {\n                        registerQwikLoaderEvent(eventName);\n                    }\n                    needsQDispatchEventPatch = true;\n                    continue;\n                }\n                if (key === 'ref') {\n                    if (isSignal(value)) {\n                        value.value = element;\n                        continue;\n                    }\n                    else if (typeof value === 'function') {\n                        value(element);\n                        continue;\n                    }\n                }\n                if (isSignal(value)) {\n                    value = trackSignal(value, [\n                        SubscriptionType.PROP_IMMUTABLE,\n                        vNewNode,\n                        value,\n                        vNewNode,\n                        key,\n                        scopedStyleIdPrefix || undefined,\n                    ]);\n                }\n                if (key === dangerouslySetInnerHTML) {\n                    element.innerHTML = value;\n                    element.setAttribute(QContainerAttr, QContainerValue.HTML);\n                    continue;\n                }\n                if (elementName === 'textarea' && key === 'value') {\n                    if (typeof value !== 'string') {\n                        if (isDev) {\n                            throw new Error('The value of the textarea must be a string');\n                        }\n                        continue;\n                    }\n                    element.value = escapeHTML(value);\n                    continue;\n                }\n                value = serializeAttribute(key, value, scopedStyleIdPrefix);\n                if (value != null) {\n                    element.setAttribute(key, String(value));\n                }\n            }\n        }\n        const key = jsx.key;\n        if (key) {\n            element.setAttribute(ELEMENT_KEY, key);\n            vnode_setProp(vNewNode, ELEMENT_KEY, key);\n        }\n        // append class attribute if styleScopedId exists and there is no class attribute\n        const classAttributeExists = hasClassAttr(jsx.varProps) || (jsx.constProps && hasClassAttr(jsx.constProps));\n        if (!classAttributeExists && scopedStyleIdPrefix) {\n            element.setAttribute('class', scopedStyleIdPrefix);\n        }\n        vnode_insertBefore(journal, vParent, vNewNode, vCurrent);\n        return needsQDispatchEventPatch;\n    }\n    function createElementWithNamespace(elementName) {\n        const domParentVNode = vnode_getDomParentVNode(vParent);\n        const { elementNamespace, elementNamespaceFlag } = getNewElementNamespaceData(domParentVNode, elementName);\n        const element = container.document.createElementNS(elementNamespace, elementName);\n        vNewNode = vnode_newElement(element, elementName);\n        vNewNode[VNodeProps.flags] |= elementNamespaceFlag;\n        return element;\n    }\n    function expectElement(jsx, elementName) {\n        const isSameElementName = vCurrent && vnode_isElementVNode(vCurrent) && elementName === vnode_getElementName(vCurrent);\n        const jsxKey = jsx.key;\n        let needsQDispatchEventPatch = false;\n        if (!isSameElementName || jsxKey !== getKey(vCurrent)) {\n            // So we have a key and it does not match the current node.\n            // We need to do a forward search to find it.\n            // The complication is that once we start taking nodes out of order we can't use `vnode_getNextSibling`\n            vNewNode = retrieveChildWithKey(elementName, jsxKey);\n            if (vNewNode === null) {\n                // No existing node with key exists, just create a new one.\n                needsQDispatchEventPatch = createNewElement(jsx, elementName);\n            }\n            else {\n                // Existing keyed node\n                vnode_insertBefore(journal, vParent, vNewNode, vCurrent);\n            }\n        }\n        // reconcile attributes\n        const jsxAttrs = [];\n        const props = jsx.varProps;\n        for (const key in props) {\n            let value = props[key];\n            value = serializeAttribute(key, value, scopedStyleIdPrefix);\n            if (value != null) {\n                mapArray_set(jsxAttrs, key, value, 0);\n            }\n        }\n        if (jsxKey !== null) {\n            mapArray_set(jsxAttrs, ELEMENT_KEY, jsxKey, 0);\n        }\n        const vNode = (vNewNode || vCurrent);\n        needsQDispatchEventPatch = setBulkProps(vNode, jsxAttrs) || needsQDispatchEventPatch;\n        if (needsQDispatchEventPatch) {\n            // Event handler needs to be patched onto the element.\n            const element = vnode_getNode(vNode);\n            if (!element.qDispatchEvent) {\n                element.qDispatchEvent = (event, scope) => {\n                    const eventName = event.type;\n                    const eventProp = ':' + scope.substring(1) + ':' + eventName;\n                    const qrls = [\n                        vnode_getProp(vNode, eventProp, null),\n                        vnode_getProp(vNode, HANDLER_PREFIX + eventProp, null),\n                    ];\n                    let returnValue = false;\n                    qrls.flat(2).forEach((qrl) => {\n                        if (qrl) {\n                            const value = qrl(event, element);\n                            returnValue = returnValue || value === true;\n                        }\n                    });\n                    return returnValue;\n                };\n            }\n        }\n    }\n    /** @param tag Returns true if `qDispatchEvent` needs patching */\n    function setBulkProps(vnode, srcAttrs) {\n        vnode_ensureElementInflated(vnode);\n        const dstAttrs = vnode;\n        let srcIdx = 0;\n        const srcLength = srcAttrs.length;\n        let dstIdx = ElementVNodeProps.PROPS_OFFSET;\n        let dstLength = dstAttrs.length;\n        let srcKey = srcIdx < srcLength ? srcAttrs[srcIdx++] : null;\n        let dstKey = dstIdx < dstLength ? dstAttrs[dstIdx++] : null;\n        let patchEventDispatch = false;\n        const record = (key, value) => {\n            if (key.startsWith(':')) {\n                vnode_setProp(vnode, key, value);\n                return;\n            }\n            if (key === 'ref') {\n                const element = vnode_getNode(vnode);\n                if (isSignal(value)) {\n                    value.value = element;\n                    return;\n                }\n                else if (typeof value === 'function') {\n                    value(element);\n                    return;\n                }\n            }\n            vnode_setAttr(journal, vnode, key, value);\n            if (value === null) {\n                // if we set `null` than attribute was removed and we need to shorten the dstLength\n                dstLength = dstAttrs.length;\n            }\n        };\n        const recordJsxEvent = (key, value) => {\n            const eventName = getEventNameFromJsxProp(key);\n            if (eventName) {\n                const scope = getEventNameScopeFromJsxProp(key);\n                record(':' + scope + ':' + eventName, value);\n            }\n            // add an event attr with empty value for qwikloader element selector.\n            // We don't need value here. For ssr this value is a QRL,\n            // but for CSR value should be just empty\n            const htmlEvent = convertEventNameFromJsxPropToHtmlAttr(key);\n            if (htmlEvent) {\n                record(htmlEvent, '');\n            }\n            // register an event for qwik loader\n            if (eventName) {\n                registerQwikLoaderEvent(eventName);\n            }\n        };\n        while (srcKey !== null || dstKey !== null) {\n            if (dstKey?.startsWith(HANDLER_PREFIX) || dstKey == ELEMENT_KEY) {\n                // These are a special keys which we use to mark the event handlers as immutable or\n                // element key we need to ignore them.\n                dstIdx++; // skip the destination value, we don't care about it.\n                dstKey = dstIdx < dstLength ? dstAttrs[dstIdx++] : null;\n            }\n            else if (srcKey == null) {\n                // Source has more keys, so we need to remove them from destination\n                if (dstKey && isHtmlAttributeAnEventName(dstKey)) {\n                    patchEventDispatch = true;\n                    dstIdx++;\n                }\n                else {\n                    record(dstKey, null);\n                    dstIdx--;\n                }\n                dstKey = dstIdx < dstLength ? dstAttrs[dstIdx++] : null;\n            }\n            else if (dstKey == null) {\n                // Destination has more keys, so we need to insert them from source.\n                const isEvent = isJsxPropertyAnEventName(srcKey);\n                if (isEvent) {\n                    // Special handling for events\n                    patchEventDispatch = true;\n                    recordJsxEvent(srcKey, srcAttrs[srcIdx]);\n                }\n                else {\n                    record(srcKey, srcAttrs[srcIdx]);\n                }\n                srcIdx++;\n                srcKey = srcIdx < srcLength ? srcAttrs[srcIdx++] : null;\n            }\n            else if (srcKey == dstKey) {\n                const srcValue = srcAttrs[srcIdx++];\n                const dstValue = dstAttrs[dstIdx++];\n                if (srcValue !== dstValue) {\n                    record(dstKey, srcValue);\n                }\n                srcKey = srcIdx < srcLength ? srcAttrs[srcIdx++] : null;\n                dstKey = dstIdx < dstLength ? dstAttrs[dstIdx++] : null;\n            }\n            else if (srcKey < dstKey) {\n                // Destination is missing the key, so we need to insert it.\n                if (isJsxPropertyAnEventName(srcKey)) {\n                    // Special handling for events\n                    patchEventDispatch = true;\n                    recordJsxEvent(srcKey, srcAttrs[srcIdx]);\n                }\n                else {\n                    record(srcKey, srcAttrs[srcIdx]);\n                }\n                srcIdx++;\n                // advance srcValue\n                srcKey = srcIdx < srcLength ? srcAttrs[srcIdx++] : null;\n                // we need to increment dstIdx too, because we added destination key and value to the VNode\n                // and dstAttrs is a reference to the VNode\n                dstIdx++;\n                dstKey = dstIdx < dstLength ? dstAttrs[dstIdx++] : null;\n            }\n            else {\n                // Source is missing the key, so we need to remove it from destination.\n                if (isHtmlAttributeAnEventName(dstKey)) {\n                    patchEventDispatch = true;\n                    dstIdx++;\n                }\n                else {\n                    record(dstKey, null);\n                    dstIdx--;\n                }\n                dstKey = dstIdx < dstLength ? dstAttrs[dstIdx++] : null;\n            }\n        }\n        return patchEventDispatch;\n    }\n    function registerQwikLoaderEvent(eventName) {\n        const window = container.document.defaultView;\n        if (window) {\n            (window.qwikevents || (window.qwikevents = [])).push(eventName);\n        }\n    }\n    /**\n     * Retrieve the child with the given key.\n     *\n     * By retrieving the child with the given key we are effectively removing it from the list of\n     * future elements. This means that we can't just use `vnode_getNextSibling` to find the next\n     * instead we have to keep track of the elements we have already seen.\n     *\n     * We call this materializing the elements.\n     *\n     * `vSiblingsIdx`:\n     *\n     * - -1: Not materialized\n     * - Positive number - the index of the next element in the `vSiblings` array.\n     *\n     * By retrieving the child with the given key we are effectively removing it from the list (hence\n     * we need to splice the `vSiblings` array).\n     *\n     * @param key\n     * @returns Array where: (see: `SiblingsArray`)\n     *\n     *   - Idx%3 == 0 nodeName\n     *   - Idx%3 == 1 key\n     *   - Idx%3 == 2 vNode\n     */\n    function retrieveChildWithKey(nodeName, key) {\n        let vNodeWithKey = null;\n        if (vSiblingsIdx === -1) {\n            // it is not materialized; so materialize it.\n            vSiblings = [];\n            vSiblingsIdx = 0;\n            let vNode = vCurrent;\n            while (vNode) {\n                const name = vnode_isElementVNode(vNode) ? vnode_getElementName(vNode) : null;\n                const vKey = getKey(vNode) || getComponentHash(vNode, container.$getObjectById$);\n                if (vNodeWithKey === null && vKey == key && name == nodeName) {\n                    vNodeWithKey = vNode;\n                }\n                else {\n                    // we only add the elements which we did not find yet.\n                    vSiblings.push(name, vKey, vNode);\n                }\n                vNode = vnode_getNextSibling(vNode);\n            }\n        }\n        else {\n            for (let idx = vSiblingsIdx; idx < vSiblings.length; idx += SiblingsArray.Size) {\n                const name = vSiblings[idx + SiblingsArray.Name];\n                const vKey = vSiblings[idx + SiblingsArray.Key];\n                if (vKey === key && name === nodeName) {\n                    vNodeWithKey = vSiblings[idx + SiblingsArray.VNode];\n                    // remove the node from the siblings array\n                    vSiblings?.splice(idx, SiblingsArray.Size);\n                    break;\n                }\n            }\n        }\n        return vNodeWithKey;\n    }\n    function expectVirtual(type, jsxKey) {\n        if (vCurrent &&\n            vnode_isVirtualVNode(vCurrent) &&\n            vnode_getProp(vCurrent, ELEMENT_KEY, null) === jsxKey) {\n            // All is good.\n            return;\n        }\n        else if (jsxKey !== null) {\n            // We have a key find it\n            vNewNode = retrieveChildWithKey(null, jsxKey);\n            if (vNewNode != null) {\n                // We found it, move it up.\n                vnode_insertBefore(journal, vParent, (vNewNode = vnode_newVirtual()), vCurrent && getInsertBefore());\n                return;\n            }\n        }\n        // Did not find it, insert a new one.\n        vnode_insertBefore(journal, vParent, (vNewNode = vnode_newVirtual()), vCurrent && getInsertBefore());\n        vnode_setProp(vNewNode, ELEMENT_KEY, jsxKey);\n        isDev && vnode_setProp((vNewNode || vCurrent), DEBUG_TYPE, type);\n    }\n    function expectComponent(component) {\n        const componentMeta = component[SERIALIZABLE_STATE];\n        let host = (vNewNode || vCurrent);\n        if (componentMeta) {\n            const jsxProps = jsxValue.props;\n            // QComponent\n            let shouldRender = false;\n            const [componentQRL] = componentMeta;\n            const componentHash = componentQRL.$hash$;\n            const vNodeComponentHash = getComponentHash(host, container.$getObjectById$);\n            const lookupKey = jsxValue.key || componentHash;\n            const vNodeLookupKey = getKey(host) || vNodeComponentHash;\n            const lookupKeysAreEqual = lookupKey === vNodeLookupKey;\n            const hashesAreEqual = componentHash === vNodeComponentHash;\n            if (!lookupKeysAreEqual) {\n                // See if we already have this component later on.\n                vNewNode = retrieveChildWithKey(null, lookupKey);\n                if (vNewNode) {\n                    // We found the component, move it up.\n                    vnode_insertBefore(journal, vParent, vNewNode, vCurrent);\n                }\n                else {\n                    // We did not find the component, create it.\n                    insertNewComponent(host, componentQRL, jsxProps);\n                }\n                host = vNewNode;\n                shouldRender = true;\n            }\n            else if (!hashesAreEqual) {\n                insertNewComponent(host, componentQRL, jsxProps);\n                if (vNewNode) {\n                    if (host) {\n                        // TODO(varixo): not sure why we need to copy flags here.\n                        vNewNode[VNodeProps.flags] = host[VNodeProps.flags];\n                    }\n                    host = vNewNode;\n                    shouldRender = true;\n                }\n            }\n            if (host) {\n                const vNodeProps = vnode_getProp(host, ELEMENT_PROPS, container.$getObjectById$);\n                shouldRender = shouldRender || propsDiffer(jsxProps, vNodeProps);\n                if (shouldRender) {\n                    container.$scheduler$(ChoreType.COMPONENT, host, componentQRL, jsxProps);\n                }\n            }\n            jsxValue.children != null && descendContentToProject(jsxValue.children, host);\n        }\n        else {\n            // Inline Component\n            vnode_insertBefore(journal, vParent, (vNewNode = vnode_newVirtual()), vCurrent && getInsertBefore());\n            isDev && vnode_setProp(vNewNode, DEBUG_TYPE, VirtualType.InlineComponent);\n            vnode_setProp(vNewNode, ELEMENT_PROPS, jsxValue.propsC);\n            host = vNewNode;\n            let component$Host = host;\n            // Find the closest component host which has `OnRender` prop.\n            while (component$Host &&\n                (vnode_isVirtualVNode(component$Host)\n                    ? vnode_getProp(component$Host, OnRenderProp, null) === null\n                    : true)) {\n                component$Host = vnode_getParent(component$Host);\n            }\n            const jsxOutput = executeComponent2(container, host, (component$Host || container.rootVNode), component, jsxValue.propsC);\n            asyncQueue.push(jsxOutput, host);\n        }\n    }\n    function insertNewComponent(host, componentQRL, jsxProps) {\n        vnode_insertBefore(journal, vParent, (vNewNode = vnode_newVirtual()), vCurrent && getInsertBefore());\n        isDev && vnode_setProp(vNewNode, DEBUG_TYPE, VirtualType.Component);\n        container.setHostProp(vNewNode, OnRenderProp, componentQRL);\n        container.setHostProp(vNewNode, ELEMENT_PROPS, jsxProps);\n        container.setHostProp(vNewNode, ELEMENT_KEY, jsxValue.key);\n        // rewrite slot props to the new node\n        if (host) {\n            for (let i = vnode_getPropStartIndex(host); i < host.length; i = i + 2) {\n                const prop = host[i];\n                if (isSlotProp(prop)) {\n                    const value = host[i + 1];\n                    container.setHostProp(vNewNode, prop, value);\n                }\n            }\n        }\n    }\n    function expectText(text) {\n        if (vCurrent !== null) {\n            const type = vnode_getType(vCurrent);\n            if (type === 3 /* Text */) {\n                if (text !== vnode_getText(vCurrent)) {\n                    vnode_setText(journal, vCurrent, text);\n                    return;\n                }\n                return;\n            }\n        }\n        vnode_insertBefore(journal, vParent, (vNewNode = vnode_newText(container.document.createTextNode(text), text)), vCurrent);\n    }\n};\nexport const isQStyleVNode = (vNode) => {\n    return (vnode_isElementVNode(vNode) &&\n        vnode_getElementName(vNode) === 'style' &&\n        vnode_getAttr(vNode, QStyle) !== null);\n};\n/**\n * Retrieve the key from the VNode.\n *\n * @param vNode - VNode to retrieve the key from\n * @returns Key\n */\nfunction getKey(vNode) {\n    if (vNode == null) {\n        return null;\n    }\n    return vnode_getProp(vNode, ELEMENT_KEY, null);\n}\n/**\n * Retrieve the component hash from the VNode.\n *\n * @param vNode - VNode to retrieve the key from\n * @param getObject - Function to retrieve the object by id for QComponent QRL\n * @returns Hash\n */\nfunction getComponentHash(vNode, getObject) {\n    if (vNode == null) {\n        return null;\n    }\n    const qrl = vnode_getProp(vNode, OnRenderProp, getObject);\n    return qrl ? qrl.$hash$ : null;\n}\n/**\n * Marker class for JSX projection.\n *\n * Assume you have component like so\n *\n * ```\n * <SomeComponent>\n *   some-text\n *   <span q:slot=\"name\">some more text</span>\n *   more-text\n * </SomeComponent>\n * ```\n *\n * Before the `<SomeCompetent/>` is processed its children are transformed into:\n *\n * ```\n *   <Projection q:slot=\"\">\n *     some-text\n *     more-text\n *   </Projection>\n *   <Projection q:slot=\"name\">\n *     <span q:slot=\"name\">some more text</span>\n *   </Projection>\n * ```\n */\nfunction Projection() { }\nfunction propsDiffer(src, dst) {\n    if (!src || !dst) {\n        return true;\n    }\n    let srcKeys = Object.keys(src);\n    let dstKeys = Object.keys(dst);\n    if (srcKeys.length !== dstKeys.length) {\n        return true;\n    }\n    srcKeys = srcKeys.sort();\n    dstKeys = dstKeys.sort();\n    for (let idx = 0; idx < srcKeys.length; idx++) {\n        const srcKey = srcKeys[idx];\n        const dstKey = dstKeys[idx];\n        if (srcKey !== dstKey || src[srcKey] !== dst[dstKey]) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * If vnode is removed, it is necessary to release all subscriptions associated with it.\n *\n * This function will traverse the vnode tree in depth-first order and release all subscriptions.\n *\n * The function takes into account:\n *\n * - Projection nodes by not recursing into them.\n * - Component nodes by recursing into the component content nodes (which may be projected).\n */\nexport function cleanup(container, vNode) {\n    let vCursor = vNode;\n    // Depth first traversal\n    if (vnode_isTextVNode(vNode)) {\n        // Text nodes don't have subscriptions or children;\n        return;\n    }\n    let vParent = null;\n    do {\n        const type = vCursor[VNodeProps.flags];\n        if (type & VNodeFlags.ELEMENT_OR_VIRTUAL_MASK) {\n            // Only elements and virtual nodes need to be traversed for children\n            if (type & VNodeFlags.Virtual) {\n                // Only virtual nodes have subscriptions\n                container.$subsManager$.$clearSub$(vCursor);\n                const seq = container.getHostProp(vCursor, ELEMENT_SEQ);\n                if (seq) {\n                    for (let i = 0; i < seq.length; i++) {\n                        const obj = seq[i];\n                        if (isTask(obj)) {\n                            const task = obj;\n                            container.$subsManager$.$clearSub$(task);\n                            if (obj.$flags$ & TaskFlags.VISIBLE_TASK) {\n                                container.$scheduler$(ChoreType.CLEANUP_VISIBLE, obj);\n                            }\n                            else {\n                                cleanupTask(task);\n                            }\n                        }\n                    }\n                }\n            }\n            const isComponent = type & VNodeFlags.Virtual &&\n                vnode_getProp(vCursor, OnRenderProp, null) !== null;\n            if (isComponent) {\n                // SPECIAL CASE: If we are a component, we need to descend into the projected content and release the content.\n                const attrs = vCursor;\n                for (let i = VirtualVNodeProps.PROPS_OFFSET; i < attrs.length; i = i + 2) {\n                    const key = attrs[i];\n                    if (!isParentSlotProp(key) && isSlotProp(key)) {\n                        const value = attrs[i + 1];\n                        if (value) {\n                            attrs[i + 1] = null; // prevent infinite loop\n                            const projection = typeof value === 'string'\n                                ? vnode_locate(container.rootVNode, value)\n                                : value;\n                            let projectionChild = vnode_getFirstChild(projection);\n                            while (projectionChild) {\n                                cleanup(container, projectionChild);\n                                projectionChild = vnode_getNextSibling(projectionChild);\n                            }\n                            cleanupStaleUnclaimedProjection(container.$journal$, projection);\n                        }\n                    }\n                }\n            }\n            const isSlot = type & VNodeFlags.Virtual && vnode_getProp(vCursor, QSlot, null) !== null;\n            // Descend into children\n            if (!isSlot) {\n                // Only if it is not a projection\n                const vFirstChild = vnode_getFirstChild(vCursor);\n                if (vFirstChild) {\n                    vCursor = vFirstChild;\n                    continue;\n                }\n            }\n            else if (vCursor === vNode) {\n                /**\n                 * If it is a projection and we are at the root, then we should only walk the children to\n                 * materialize the projection content. This is because we could have references in the vnode\n                 * refs map which need to be materialized before cleanup.\n                 */\n                const vFirstChild = vnode_getFirstChild(vCursor);\n                if (vFirstChild) {\n                    vnode_walkVNode(vFirstChild);\n                    return;\n                }\n            }\n        }\n        // Out of children\n        if (vCursor === vNode) {\n            // we are where we started, this means that vNode has no children, so we are done.\n            return;\n        }\n        // Out of children, go to next sibling\n        const vNextSibling = vnode_getNextSibling(vCursor);\n        if (vNextSibling) {\n            vCursor = vNextSibling;\n            continue;\n        }\n        // Out of siblings, go to parent\n        vParent = vnode_getParent(vCursor);\n        while (vParent) {\n            if (vParent === vNode) {\n                // We are back where we started, we are done.\n                return;\n            }\n            const vNextParentSibling = vnode_getNextSibling(vParent);\n            if (vNextParentSibling) {\n                vCursor = vNextParentSibling;\n                break;\n            }\n            vParent = vnode_getParent(vParent);\n        }\n        if (vParent == null) {\n            // We are done.\n            return;\n        }\n    } while (true);\n}\nfunction cleanupStaleUnclaimedProjection(journal, projection) {\n    // we are removing a node where the projection would go after slot render.\n    // This is not needed, so we need to cleanup still unclaimed projection\n    const projectionParent = vnode_getParent(projection);\n    if (projectionParent) {\n        const projectionParentType = projectionParent[VNodeProps.flags];\n        if (projectionParentType & VNodeFlags.Element &&\n            vnode_getElementName(projectionParent) === QTemplate) {\n            // if parent is the q:template element then projection is still unclaimed - remove it\n            vnode_remove(journal, projectionParent, projection, true);\n        }\n    }\n}\n/**\n * This marks the property as immutable. It is needed for the QRLs so that QwikLoader can get a hold\n * of them. This character must be `:` so that the `vnode_getAttr` can ignore them.\n */\nconst HANDLER_PREFIX = ':';\nlet count = 0;\nvar SiblingsArray;\n(function (SiblingsArray) {\n    SiblingsArray[SiblingsArray[\"Name\"] = 0] = \"Name\";\n    SiblingsArray[SiblingsArray[\"Key\"] = 1] = \"Key\";\n    SiblingsArray[SiblingsArray[\"VNode\"] = 2] = \"VNode\";\n    SiblingsArray[SiblingsArray[\"Size\"] = 3] = \"Size\";\n    SiblingsArray[SiblingsArray[\"NextVNode\"] = 5] = \"NextVNode\";\n})(SiblingsArray || (SiblingsArray = {}));\n//# sourceMappingURL=data:application/json;base64,","/**\n * Scheduler is responsible for running application code in predictable order.\n *\n * ## What is a Chore?\n *\n * A Chore is a unit of work that needs to be done. It can be:\n *\n * - Task / Resource\n * - Visible Task\n * - Component\n * - Computed\n * - Node Diff\n *\n * ## Order of execution\n *\n * - Parent component chores should run before child component chores.\n * - Visible Tasks should run after journal flush (visible tasks often read DOM layout.)\n *\n * ## Example\n *\n * ```typescript\n * const Child = component$(() => {\n *   useTask$(() => {\n *     console.log('Child task');\n *   });\n *   useVisibleTask$(() => {\n *     console.log('Child visible-task');\n *   });\n *   console.log('Child render');\n *   return <div>Child</div>;\n * });\n *\n * const Parent = component$(() => {\n *   const count = useSignal(0);\n *   useTask$(() => {\n *     console.log('Parent task', count.value);\n *   });\n *   useVisibleTask$(() => {\n *     console.log('Parent visible-task', count.value);\n *     count.value++;\n *   });\n *   console.log('Parent render', count.value);\n *   return <Child/>;\n * });\n * ```\n *\n * ## In the above example, the order of execution is:\n *\n * 1. Parent task 0\n * 2. Parent render 0\n * 3. Child task 0\n * 4. Child render 0\n * 5. Journal flush\n * 6. Parent visible-task 0\n * 7. Parent render 1\n * 8. Journal flush\n * 9. Child visible-task\n *\n * If at any point a new chore is scheduled it will insert itself into the correct order.\n *\n * ## Implementation\n *\n * Chores are kept in a sorted array. When a new chore is scheduled it is inserted into the correct\n * location. Processing of the chores always starts from the beginning of the array. This ensures\n * that parent chores are processed before child chores.\n *\n * ## Sorting\n *\n * Chores are sorted in three levels:\n *\n * - Macro: beforeJournalFlush, journalFlush, afterJournalFlush\n * - Component: depth first order of components\n * - Micro: order of chores within a component.\n *\n * Example of sorting:\n *\n * - Tasks are beforeJournalFlush, than depth first on component and finally in declaration order\n *   within component.\n * - Visible Tasks are sorted afterJournalFlush, than depth first on component and finally in\n *   declaration order within component.\n */\nimport { assertEqual } from '../../error/assert';\nimport { Task, TaskFlags, cleanupTask, runComputed2, runResource, runSubscriber2, } from '../../use/use-task';\nimport { logWarn } from '../../util/log';\nimport { isPromise, maybeThen, maybeThenPassError, safeCall } from '../../util/promises';\nimport { isDomContainer } from '../client/dom-container';\nimport { vnode_documentPosition, vnode_isVNode } from '../client/vnode';\nimport { vnode_diff } from '../client/vnode-diff';\nimport { executeComponent2 } from './component-execution';\n// Turn this on to get debug output of what the scheduler is doing.\nconst DEBUG = false;\nexport var ChoreType;\n(function (ChoreType) {\n    /// MASKS defining three levels of sorting\n    ChoreType[ChoreType[\"MACRO\"] = 56] = \"MACRO\";\n    /* order of elements (not encoded here) */\n    ChoreType[ChoreType[\"MICRO\"] = 7] = \"MICRO\";\n    ChoreType[ChoreType[\"COMPUTED\"] = 1] = \"COMPUTED\";\n    ChoreType[ChoreType[\"RESOURCE\"] = 2] = \"RESOURCE\";\n    ChoreType[ChoreType[\"TASK\"] = 3] = \"TASK\";\n    ChoreType[ChoreType[\"NODE_DIFF\"] = 4] = \"NODE_DIFF\";\n    ChoreType[ChoreType[\"COMPONENT_SSR\"] = 5] = \"COMPONENT_SSR\";\n    ChoreType[ChoreType[\"COMPONENT\"] = 6] = \"COMPONENT\";\n    ChoreType[ChoreType[\"WAIT_FOR_COMPONENTS\"] = 8] = \"WAIT_FOR_COMPONENTS\";\n    ChoreType[ChoreType[\"JOURNAL_FLUSH\"] = 24] = \"JOURNAL_FLUSH\";\n    ChoreType[ChoreType[\"VISIBLE\"] = 32] = \"VISIBLE\";\n    ChoreType[ChoreType[\"CLEANUP_VISIBLE\"] = 40] = \"CLEANUP_VISIBLE\";\n    ChoreType[ChoreType[\"WAIT_FOR_ALL\"] = 63] = \"WAIT_FOR_ALL\";\n})(ChoreType || (ChoreType = {}));\nexport const createScheduler = (container, scheduleDrain, journalFlush) => {\n    const choreQueue = [];\n    let currentChore = null;\n    let journalFlushScheduled = false;\n    return schedule;\n    ///// IMPLEMENTATION /////\n    function schedule(type, hostOrTask = null, targetOrQrl = null, payload = null) {\n        const runLater = type !== ChoreType.WAIT_FOR_ALL &&\n            type !== ChoreType.WAIT_FOR_COMPONENTS &&\n            type !== ChoreType.COMPONENT_SSR;\n        const isTask = type === ChoreType.TASK ||\n            type === ChoreType.VISIBLE ||\n            type === ChoreType.COMPUTED ||\n            type === ChoreType.RESOURCE ||\n            type === ChoreType.CLEANUP_VISIBLE;\n        if (isTask) {\n            hostOrTask.$flags$ |= TaskFlags.DIRTY;\n        }\n        let chore = {\n            $type$: type,\n            $idx$: isTask ? hostOrTask.$index$ : 0,\n            $host$: isTask ? hostOrTask.$el$ : hostOrTask,\n            $target$: targetOrQrl,\n            $payload$: isTask ? hostOrTask : payload,\n            $resolve$: null,\n            $promise$: null,\n            $returnValue$: null,\n        };\n        chore.$promise$ = new Promise((resolve) => (chore.$resolve$ = resolve));\n        DEBUG && debugTrace('schedule', chore, currentChore, choreQueue);\n        chore = sortedInsert(choreQueue, chore);\n        if (!journalFlushScheduled && runLater) {\n            // If we are not currently draining, we need to schedule a drain.\n            journalFlushScheduled = true;\n            schedule(ChoreType.JOURNAL_FLUSH);\n            scheduleDrain();\n        }\n        if (runLater) {\n            return chore.$promise$;\n        }\n        else {\n            return drainUpTo(chore);\n        }\n    }\n    /**\n     * Execute all of the chores up to and including the given chore.\n     *\n     * @param runUptoChore\n     */\n    function drainUpTo(runUptoChore) {\n        if (currentChore) {\n            // Already running chore\n            return runUptoChore.$promise$;\n        }\n        while (choreQueue.length) {\n            const nextChore = choreQueue.shift();\n            const comp = choreComparator(nextChore, runUptoChore, false);\n            if (comp === null) {\n                continue;\n            }\n            if (comp > 0) {\n                // we have processed all of the chores up to the given chore.\n                break;\n            }\n            const returnValue = executeChore(nextChore);\n            if (isPromise(returnValue)) {\n                return returnValue.then(() => drainUpTo(runUptoChore));\n            }\n        }\n        return runUptoChore.$returnValue$;\n    }\n    function executeChore(chore) {\n        const host = chore.$host$;\n        DEBUG && debugTrace('execute', chore, currentChore, choreQueue);\n        assertEqual(currentChore, null, 'Chore already running.');\n        currentChore = chore;\n        let returnValue = null;\n        switch (chore.$type$) {\n            case ChoreType.JOURNAL_FLUSH:\n                returnValue = journalFlush();\n                journalFlushScheduled = false;\n                break;\n            case ChoreType.COMPONENT:\n            case ChoreType.COMPONENT_SSR:\n                returnValue = safeCall(() => executeComponent2(container, host, host, chore.$target$, chore.$payload$), (jsx) => {\n                    return chore.$type$ === ChoreType.COMPONENT\n                        ? maybeThen(container.processJsx(host, jsx), () => jsx)\n                        : jsx;\n                }, (err) => container.handleError(err, host));\n                break;\n            case ChoreType.COMPUTED:\n                returnValue = runComputed2(chore.$payload$, container, host);\n                break;\n            case ChoreType.RESOURCE:\n                // Don't await the return value of the resource, because async resources should not be awaited.\n                // The reason for this is that we should be able to update for example a node with loading\n                // text. If we await the resource, the loading text will not be displayed until the resource\n                // is loaded.\n                const result = runResource(chore.$payload$, container, host);\n                returnValue = isDomContainer(container) ? null : result;\n                break;\n            case ChoreType.TASK:\n            case ChoreType.VISIBLE:\n                returnValue = runSubscriber2(chore.$payload$, container, host);\n                break;\n            case ChoreType.CLEANUP_VISIBLE:\n                const task = chore.$payload$;\n                cleanupTask(task);\n                break;\n            case ChoreType.NODE_DIFF: {\n                const parentVirtualNode = chore.$target$;\n                const jsx = chore.$payload$;\n                returnValue = vnode_diff(container, jsx, parentVirtualNode, null);\n                break;\n            }\n        }\n        return maybeThenPassError(returnValue, (value) => {\n            DEBUG && debugTrace('execute.DONE', null, currentChore, choreQueue);\n            currentChore?.$resolve$?.(value);\n            currentChore = null;\n            return (chore.$returnValue$ = value);\n        });\n    }\n};\nconst toNumber = (value) => {\n    return typeof value === 'number' ? value : -1;\n};\n/**\n * When a derived signal is update we need to run vnode_diff. However the signal can update multiple\n * times during component execution. For this reason it is necessary for us to update the schedule\n * work with the latest result of the signal.\n */\nconst choreUpdate = (existing, newChore) => {\n    if (existing.$type$ === ChoreType.NODE_DIFF) {\n        existing.$payload$ = newChore.$payload$;\n    }\n};\nfunction choreComparator(a, b, shouldThrowOnHostMismatch) {\n    const macroTypeDiff = (a.$type$ & ChoreType.MACRO) - (b.$type$ & ChoreType.MACRO);\n    if (macroTypeDiff !== 0) {\n        return macroTypeDiff;\n    }\n    // JOURNAL_FLUSH does not have a host or $idx$, so we can't compare it.\n    if (a.$type$ !== ChoreType.JOURNAL_FLUSH) {\n        const aHost = a.$host$;\n        const bHost = b.$host$;\n        if (aHost !== bHost) {\n            if (vnode_isVNode(aHost) && vnode_isVNode(bHost)) {\n                // we are running on the client.\n                const hostDiff = vnode_documentPosition(aHost, bHost);\n                if (hostDiff !== 0) {\n                    return hostDiff;\n                }\n            }\n            else {\n                // we are running on the server.\n                // On server we can't schedule task for a different host!\n                // Server is SSR, and therefore scheduling for anything but the current host\n                // implies that things need to be re-run nad that is not supported because of streaming.\n                const errorMessage = 'SERVER: during HTML streaming, it is not possible to cause a re-run of tasks on a different host';\n                if (shouldThrowOnHostMismatch) {\n                    throw new Error(errorMessage);\n                }\n                logWarn(errorMessage);\n                return null;\n            }\n        }\n        const microTypeDiff = (a.$type$ & ChoreType.MICRO) - (b.$type$ & ChoreType.MICRO);\n        if (microTypeDiff !== 0) {\n            return microTypeDiff;\n        }\n        const idxDiff = toNumber(a.$idx$) - toNumber(b.$idx$);\n        if (idxDiff !== 0) {\n            return idxDiff;\n        }\n    }\n    return 0;\n}\nexport const intraHostPredicate = (a, b) => {\n    const idxDiff = toNumber(a.$idx$) - toNumber(b.$idx$);\n    if (idxDiff !== 0) {\n        return idxDiff;\n    }\n    const typeDiff = a.$type$ - b.$type$;\n    if (typeDiff !== 0) {\n        return typeDiff;\n    }\n    if (a.$payload$ !== b.$payload$) {\n        return 0;\n    }\n    if (a.$payload$ instanceof Task && b.$payload$ instanceof Task) {\n        const aHash = a.$payload$.$qrl$.$hash$;\n        const bHash = b.$payload$.$qrl$.$hash$;\n        return aHash === bHash ? 0 : aHash < bHash ? -1 : 1;\n    }\n    return 0;\n};\nfunction sortedFindIndex(sortedArray, value) {\n    /// We need to ensure that the `queue` is sorted by priority.\n    /// 1. Find a place where to insert into.\n    let bottom = 0;\n    let top = sortedArray.length;\n    while (bottom < top) {\n        const middle = bottom + ((top - bottom) >> 1);\n        const midChore = sortedArray[middle];\n        const comp = choreComparator(value, midChore, true);\n        if (comp < 0) {\n            top = middle;\n        }\n        else if (comp > 0) {\n            bottom = middle + 1;\n        }\n        else {\n            // We already have the host in the queue.\n            return middle;\n        }\n    }\n    return ~bottom;\n}\nfunction sortedInsert(sortedArray, value) {\n    /// We need to ensure that the `queue` is sorted by priority.\n    /// 1. Find a place where to insert into.\n    const idx = sortedFindIndex(sortedArray, value);\n    if (idx < 0) {\n        /// 2. Insert the chore into the queue.\n        sortedArray.splice(~idx, 0, value);\n        return value;\n    }\n    const existing = sortedArray[idx];\n    choreUpdate(existing, value);\n    return existing;\n}\nfunction debugChoreToString(chore) {\n    const type = {\n        [ChoreType.COMPUTED]: 'COMPUTED',\n        [ChoreType.RESOURCE]: 'RESOURCE',\n        [ChoreType.TASK]: 'TASK',\n        [ChoreType.NODE_DIFF]: 'NODE_DIFF',\n        [ChoreType.COMPONENT]: 'COMPONENT',\n        [ChoreType.COMPONENT_SSR]: 'COMPONENT_SSR',\n        [ChoreType.JOURNAL_FLUSH]: 'JOURNAL_FLUSH',\n        [ChoreType.VISIBLE]: 'VISIBLE',\n        [ChoreType.WAIT_FOR_ALL]: 'WAIT_FOR_ALL',\n        [ChoreType.WAIT_FOR_COMPONENTS]: 'WAIT_FOR_COMPONENTS',\n    }[chore.$type$] || 'UNKNOWN: ' + chore.$type$;\n    const host = String(chore.$host$).replaceAll(/\\n.*/gim, '');\n    return `Chore(${type} ${host} ${chore.$idx$})`;\n}\nfunction debugTrace(action, arg, currentChore, queue) {\n    const lines = ['Scheduler: ' + action];\n    if (arg) {\n        lines.push('    arg: ' +\n            ('$type$' in arg ? debugChoreToString(arg) : String(arg).replaceAll(/\\n.*/gim, '')));\n    }\n    if (currentChore) {\n        lines.push('running: ' + debugChoreToString(currentChore));\n    }\n    if (queue) {\n        queue.forEach((chore, idx) => {\n            lines.push((idx == 0 ? '  queue: ' : '         ') + debugChoreToString(chore));\n        });\n    }\n    // eslint-disable-next-line no-console\n    console.log(lines.join('\\n  ') + '\\n');\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGVyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3YyL3NoYXJlZC9zY2hlZHVsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBZ0ZHO0FBRUgsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBSWpELE9BQU8sRUFDTCxJQUFJLEVBQ0osU0FBUyxFQUNULFdBQVcsRUFDWCxZQUFZLEVBQ1osV0FBVyxFQUNYLGNBQWMsR0FHZixNQUFNLG9CQUFvQixDQUFDO0FBQzVCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6QyxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxrQkFBa0IsRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV6RixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFekQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUcxRCxtRUFBbUU7QUFDbkUsTUFBTSxLQUFLLEdBQVksS0FBSyxDQUFDO0FBRTdCLE1BQU0sQ0FBTixJQUFrQixTQWlCakI7QUFqQkQsV0FBa0IsU0FBUztJQUN6QiwwQ0FBMEM7SUFDMUMsNENBQXlDLENBQUE7SUFDekMsMENBQTBDO0lBQzFDLDJDQUF5QyxDQUFBO0lBRXpDLGlEQUF5QyxDQUFBO0lBQ3pDLGlEQUF5QyxDQUFBO0lBQ3pDLHlDQUF5QyxDQUFBO0lBQ3pDLG1EQUF5QyxDQUFBO0lBQ3pDLDJEQUF5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QUMsR0FBRyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2pGLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNELHNDQUFzQztJQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDekMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU2NoZWR1bGVyIGlzIHJlc3BvbnNpYmxlIGZvciBydW5uaW5nIGFwcGxpY2F0aW9uIGNvZGUgaW4gcHJlZGljdGFibGUgb3JkZXIuXG4gKlxuICogIyMgV2hhdCBpcyBhIENob3JlP1xuICpcbiAqIEEgQ2hvcmUgaXMgYSB1bml0IG9mIHdvcmsgdGhhdCBuZWVkcyB0byBiZSBkb25lLiBJdCBjYW4gYmU6XG4gKlxuICogLSBUYXNrIC8gUmVzb3VyY2VcbiAqIC0gVmlzaWJsZSBUYXNrXG4gKiAtIENvbXBvbmVudFxuICogLSBDb21wdXRlZFxuICogLSBOb2RlIERpZmZcbiAqXG4gKiAjIyBPcmRlciBvZiBleGVjdXRpb25cbiAqXG4gKiAtIFBhcmVudCBjb21wb25lbnQgY2hvcmVzIHNob3VsZCBydW4gYmVmb3JlIGNoaWxkIGNvbXBvbmVudCBjaG9yZXMuXG4gKiAtIFZpc2libGUgVGFza3Mgc2hvdWxkIHJ1biBhZnRlciBqb3VybmFsIGZsdXNoICh2aXNpYmxlIHRhc2tzIG9mdGVuIHJlYWQgRE9NIGxheW91dC4pXG4gKlxuICogIyMgRXhhbXBsZVxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnN0IENoaWxkID0gY29tcG9uZW50JCgoKSA9PiB7XG4gKiAgIHVzZVRhc2skKCgpID0+IHtcbiAqICAgICBjb25zb2xlLmxvZygnQ2hpbGQgdGFzaycpO1xuICogICB9KTtcbiAqICAgdXNlVmlzaWJsZVRhc2skKCgpID0+IHtcbiAqICAgICBjb25zb2xlLmxvZygnQ2hpbGQgdmlzaWJsZS10YXNrJyk7XG4gKiAgIH0pO1xuICogICBjb25zb2xlLmxvZygnQ2hpbGQgcmVuZGVyJyk7XG4gKiAgIHJldHVybiA8ZGl2PkNoaWxkPC9kaXY+O1xuICogfSk7XG4gKlxuICogY29uc3QgUGFyZW50ID0gY29tcG9uZW50JCgoKSA9PiB7XG4gKiAgIGNvbnN0IGNvdW50ID0gdXNlU2lnbmFsKDApO1xuICogICB1c2VUYXNrJCgoKSA9PiB7XG4gKiAgICAgY29uc29sZS5sb2coJ1BhcmVudCB0YXNrJywgY291bnQudmFsdWUpO1xuICogICB9KTtcbiAqICAgdXNlVmlzaWJsZVRhc2skKCgpID0+IHtcbiAqICAgICBjb25zb2xlLmxvZygnUGFyZW50IHZpc2libGUtdGFzaycsIGNvdW50LnZhbHVlKTtcbiAqICAgICBjb3VudC52YWx1ZSsrO1xuICogICB9KTtcbiAqICAgY29uc29sZS5sb2coJ1BhcmVudCByZW5kZXInLCBjb3VudC52YWx1ZSk7XG4gKiAgIHJldHVybiA8Q2hpbGQvPjtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogIyMgSW4gdGhlIGFib3ZlIGV4YW1wbGUsIHRoZSBvcmRlciBvZiBleGVjdXRpb24gaXM6XG4gKlxuICogMS4gUGFyZW50IHRhc2sgMFxuICogMi4gUGFyZW50IHJlbmRlciAwXG4gKiAzLiBDaGlsZCB0YXNrIDBcbiAqIDQuIENoaWxkIHJlbmRlciAwXG4gKiA1LiBKb3VybmFsIGZsdXNoXG4gKiA2LiBQYXJlbnQgdmlzaWJsZS10YXNrIDBcbiAqIDcuIFBhcmVudCByZW5kZXIgMVxuICogOC4gSm91cm5hbCBmbHVzaFxuICogOS4gQ2hpbGQgdmlzaWJsZS10YXNrXG4gKlxuICogSWYgYXQgYW55IHBvaW50IGEgbmV3IGNob3JlIGlzIHNjaGVkdWxlZCBpdCB3aWxsIGluc2VydCBpdHNlbGYgaW50byB0aGUgY29ycmVjdCBvcmRlci5cbiAqXG4gKiAjIyBJbXBsZW1lbnRhdGlvblxuICpcbiAqIENob3JlcyBhcmUga2VwdCBpbiBhIHNvcnRlZCBhcnJheS4gV2hlbiBhIG5ldyBjaG9yZSBpcyBzY2hlZHVsZWQgaXQgaXMgaW5zZXJ0ZWQgaW50byB0aGUgY29ycmVjdFxuICogbG9jYXRpb24uIFByb2Nlc3Npbmcgb2YgdGhlIGNob3JlcyBhbHdheXMgc3RhcnRzIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXkuIFRoaXMgZW5zdXJlc1xuICogdGhhdCBwYXJlbnQgY2hvcmVzIGFyZSBwcm9jZXNzZWQgYmVmb3JlIGNoaWxkIGNob3Jlcy5cbiAqXG4gKiAjIyBTb3J0aW5nXG4gKlxuICogQ2hvcmVzIGFyZSBzb3J0ZWQgaW4gdGhyZWUgbGV2ZWxzOlxuICpcbiAqIC0gTWFjcm86IGJlZm9yZUpvdXJuYWxGbHVzaCwgam91cm5hbEZsdXNoLCBhZnRlckpvdXJuYWxGbHVzaFxuICogLSBDb21wb25lbnQ6IGRlcHRoIGZpcnN0IG9yZGVyIG9mIGNvbXBvbmVudHNcbiAqIC0gTWljcm86IG9yZGVyIG9mIGNob3JlcyB3aXRoaW4gYSBjb21wb25lbnQuXG4gKlxuICogRXhhbXBsZSBvZiBzb3J0aW5nOlxuICpcbiAqIC0gVGFza3MgYXJlIGJlZm9yZUpvdXJuYWxGbHVzaCwgdGhhbiBkZXB0aCBmaXJzdCBvbiBjb21wb25lbnQgYW5kIGZpbmFsbHkgaW4gZGVjbGFyYXRpb24gb3JkZXJcbiAqICAgd2l0aGluIGNvbXBvbmVudC5cbiAqIC0gVmlzaWJsZSBUYXNrcyBhcmUgc29ydGVkIGFmdGVySm91cm5hbEZsdXNoLCB0aGFuIGRlcHRoIGZpcnN0IG9uIGNvbXBvbmVudCBhbmQgZmluYWxseSBpblxuICogICBkZWNsYXJhdGlvbiBvcmRlciB3aXRoaW4gY29tcG9uZW50LlxuICovXG5cbmltcG9ydCB7IGFzc2VydEVxdWFsIH0gZnJvbSAnLi4vLi4vZXJyb3IvYXNzZXJ0JztcbmltcG9ydCB0eXBlIHsgUVJMSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9xcmwvcXJsLWNsYXNzJztcbmltcG9ydCB0eXBlIHsgUVJMIH0gZnJvbSAnLi4vLi4vcXJsL3FybC5wdWJsaWMnO1xuaW1wb3J0IHR5cGUgeyBKU1hPdXRwdXQgfSBmcm9tICcuLi8uLi9yZW5kZXIvanN4L3R5cGVzL2pzeC1ub2RlJztcbmltcG9ydCB7XG4gIFRhc2ssXG4gIFRhc2tGbGFncyxcbiAgY2xlYW51cFRhc2ssXG4gIHJ1bkNvbXB1dGVkMixcbiAgcnVuUmVzb3VyY2UsXG4gIHJ1blN1YnNjcmliZXIyLFxuICB0eXBlIFJlc291cmNlRGVzY3JpcHRvcixcbiAgdHlwZSBUYXNrRm4sXG59IGZyb20gJy4uLy4uL3VzZS91c2UtdGFzayc7XG5pbXBvcnQgeyBsb2dXYXJuIH0gZnJvbSAnLi4vLi4vdXRpbC9sb2cnO1xuaW1wb3J0IHsgaXNQcm9taXNlLCBtYXliZVRoZW4sIG1heWJlVGhlblBhc3NFcnJvciwgc2FmZUNhbGwgfSBmcm9tICcuLi8uLi91dGlsL3Byb21pc2VzJztcbmltcG9ydCB0eXBlIHsgVmFsdWVPclByb21pc2UgfSBmcm9tICcuLi8uLi91dGlsL3R5cGVzJztcbmltcG9ydCB7IGlzRG9tQ29udGFpbmVyIH0gZnJvbSAnLi4vY2xpZW50L2RvbS1jb250YWluZXInO1xuaW1wb3J0IHR5cGUgeyBWaXJ0dWFsVk5vZGUgfSBmcm9tICcuLi9jbGllbnQvdHlwZXMnO1xuaW1wb3J0IHsgdm5vZGVfZG9jdW1lbnRQb3NpdGlvbiwgdm5vZGVfaXNWTm9kZSB9IGZyb20gJy4uL2NsaWVudC92bm9kZSc7XG5pbXBvcnQgeyB2bm9kZV9kaWZmIH0gZnJvbSAnLi4vY2xpZW50L3Zub2RlLWRpZmYnO1xuaW1wb3J0IHsgZXhlY3V0ZUNvbXBvbmVudDIgfSBmcm9tICcuL2NvbXBvbmVudC1leGVjdXRpb24nO1xuaW1wb3J0IHR5cGUgeyBDb250YWluZXIyLCBIb3N0RWxlbWVudCwgZml4TWVBbnkgfSBmcm9tICcuL3R5cGVzJztcblxuLy8gVHVybiB0aGlzIG9uIHRvIGdldCBkZWJ1ZyBvdXRwdXQgb2Ygd2hhdCB0aGUgc2NoZWR1bGVyIGlzIGRvaW5nLlxuY29uc3QgREVCVUc6IGJvb2xlYW4gPSBmYWxzZTtcblxuZXhwb3J0IGNvbnN0IGVudW0gQ2hvcmVUeXBlIHtcbiAgLy8vIE1BU0tTIGRlZmluaW5nIHRocmVlIGxldmVscyBvZiBzb3J0aW5nXG4gIE1BQ1JPIC8qICoqKioqKioqKioqKioqKioqICovID0gMGIxMTFfMDAwLFxuICAvKiBvcmRlciBvZiBlbGVtZW50cyAobm90IGVuY29kZWQgaGVyZSkgKi9cbiAgTUlDUk8gLyogKioqKioqKioqKioqKioqKiogKi8gPSAwYjAwMF8xMTEsXG5cbiAgQ09NUFVURUQgLyogKioqKioqKioqKioqKiogKi8gPSAwYjAwMF8wMDEsXG4gIFJFU09VUkNFIC8qICoqKioqKioqKioqKioqICovID0gMGIwMDBfMDEwLFxuICBUQVNLIC8qICoqKioqKioqKioqKioqKioqKiAqLyA9IDBiMDAwXzAxMSxcbiAgTk9ERV9ESUZGIC8qICoqKioqKioqKioqKiogKi8gPSAwYjAwMF8xMDAsXG4gIENPTVBPTkVOVF9TU1IgLyogKioqKioqKioqICovID0gMGIwMDBfMTAxLFxuICBDT01QT05FTlQgLyogKioqKioqKioqKioqKiAqLyA9IDBiMDAwXzExMCxcbiAgV0FJVF9GT1JfQ09NUE9ORU5UUyAvKiAqKiogKi8gPSAwYjAwMV8wMDAsXG4gIEpPVVJOQUxfRkxVU0ggLyogKioqKioqKioqICovID0gMGIwMTFfMDAwLFxuICBWSVNJQkxFIC8qICoqKioqKioqKioqKioqKiAqLyA9IDBiMTAwXzAwMCxcbiAgQ0xFQU5VUF9WSVNJQkxFIC8qICoqKioqKiogKi8gPSAwYjEwMV8wMDAsXG4gIFdBSVRfRk9SX0FMTCAvKiAqKioqKioqKioqICovID0gMGIxMTFfMTExLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENob3JlIHtcbiAgJHR5cGUkOiBDaG9yZVR5cGU7XG4gICRpZHgkOiBudW1iZXIgfCBzdHJpbmc7XG4gICRob3N0JDogSG9zdEVsZW1lbnQ7XG4gICR0YXJnZXQkOiBIb3N0RWxlbWVudCB8IFFSTEludGVybmFsPCguLi5hcmdzOiB1bmtub3duW10pID0+IHVua25vd24+IHwgbnVsbDtcbiAgJHBheWxvYWQkOiB1bmtub3duO1xuICAkcmVzb2x2ZSQ6ICh2YWx1ZTogYW55KSA9PiB2b2lkO1xuICAkcHJvbWlzZSQ6IFByb21pc2U8YW55PjtcbiAgJHJldHVyblZhbHVlJDogYW55O1xufVxuXG5leHBvcnQgdHlwZSBTY2hlZHVsZXIgPSBSZXR1cm5UeXBlPHR5cGVvZiBjcmVhdGVTY2hlZHVsZXI+O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlU2NoZWR1bGVyID0gKFxuICBjb250YWluZXI6IENvbnRhaW5lcjIsXG4gIHNjaGVkdWxlRHJhaW46ICgpID0+IHZvaWQsXG4gIGpvdXJuYWxGbHVzaDogKCkgPT4gdm9pZFxuKSA9PiB7XG4gIGNvbnN0IGNob3JlUXVldWU6IENob3JlW10gPSBbXTtcblxuICBsZXQgY3VycmVudENob3JlOiBDaG9yZSB8IG51bGwgPSBudWxsO1xuICBsZXQgam91cm5hbEZsdXNoU2NoZWR1bGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgcmV0dXJuIHNjaGVkdWxlO1xuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgZnVuY3Rpb24gc2NoZWR1bGUodHlwZTogQ2hvcmVUeXBlLkpPVVJOQUxfRkxVU0gpOiBWYWx1ZU9yUHJvbWlzZTx2b2lkPjtcbiAgZnVuY3Rpb24gc2NoZWR1bGUodHlwZTogQ2hvcmVUeXBlLldBSVRfRk9SX0FMTCk6IFZhbHVlT3JQcm9taXNlPHZvaWQ+O1xuICBmdW5jdGlvbiBzY2hlZHVsZSh0eXBlOiBDaG9yZVR5cGUuV0FJVF9GT1JfQ09NUE9ORU5UUyk6IFZhbHVlT3JQcm9taXNlPHZvaWQ+O1xuICAvKipcbiAgICogU2NoZWR1bGUgcmVuZGVyaW5nIG9mIGEgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0gdHlwZVxuICAgKiBAcGFyYW0gaG9zdCAtIEhvc3QgZWxlbWVudCB3aGVyZSB0aGUgY29tcG9uZW50IGlzIGJlaW5nIHJlbmRlcmVkLlxuICAgKiBAcGFyYW0gcXJsIC0gUVJMIG9mIHRoZSBjb21wb25lbnQgdG8gcmVuZGVyLlxuICAgKiBAcGFyYW0gcHJvcHMtIFByb3BzIHRvIHBhc3MgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogQHBhcmFtIHdhaXRGb3JDaG9yZT8gPSBmYWxzZVxuICAgKi9cbiAgZnVuY3Rpb24gc2NoZWR1bGUoXG4gICAgdHlwZTogQ2hvcmVUeXBlLlRBU0sgfCBDaG9yZVR5cGUuVklTSUJMRSB8IENob3JlVHlwZS5SRVNPVVJDRSB8IENob3JlVHlwZS5DT01QVVRFRCxcbiAgICB0YXNrOiBUYXNrXG4gICk6IFZhbHVlT3JQcm9taXNlPHZvaWQ+O1xuICBmdW5jdGlvbiBzY2hlZHVsZShcbiAgICB0eXBlOiBDaG9yZVR5cGUuQ09NUE9ORU5ULFxuICAgIGhvc3Q6IEhvc3RFbGVtZW50LFxuICAgIHFybDogUVJMPCguLi5hcmdzOiBhbnlbXSkgPT4gYW55PixcbiAgICBwcm9wczogYW55XG4gICk6IFZhbHVlT3JQcm9taXNlPEpTWE91dHB1dD47XG4gIGZ1bmN0aW9uIHNjaGVkdWxlKFxuICAgIHR5cGU6IENob3JlVHlwZS5DT01QT05FTlRfU1NSLFxuICAgIGhvc3Q6IEhvc3RFbGVtZW50LFxuICAgIHFybDogUVJMPCguLi5hcmdzOiBhbnlbXSkgPT4gYW55PixcbiAgICBwcm9wczogYW55XG4gICk6IFZhbHVlT3JQcm9taXNlPEpTWE91dHB1dD47XG4gIGZ1bmN0aW9uIHNjaGVkdWxlKFxuICAgIHR5cGU6IENob3JlVHlwZS5OT0RFX0RJRkYsXG4gICAgaG9zdDogSG9zdEVsZW1lbnQsXG4gICAgdGFyZ2V0OiBIb3N0RWxlbWVudCxcbiAgICB2YWx1ZTogSlNYT3V0cHV0XG4gICk6IFZhbHVlT3JQcm9taXNlPHZvaWQ+O1xuICBmdW5jdGlvbiBzY2hlZHVsZSh0eXBlOiBDaG9yZVR5cGUuQ0xFQU5VUF9WSVNJQkxFLCB0YXNrOiBUYXNrKTogVmFsdWVPclByb21pc2U8SlNYT3V0cHV0PjtcbiAgLy8vLy8gSU1QTEVNRU5UQVRJT04gLy8vLy9cbiAgZnVuY3Rpb24gc2NoZWR1bGUoXG4gICAgdHlwZTogQ2hvcmVUeXBlLFxuICAgIGhvc3RPclRhc2s6IEhvc3RFbGVtZW50IHwgVGFzayA9IG51bGwhLFxuICAgIHRhcmdldE9yUXJsOiBIb3N0RWxlbWVudCB8IFFSTDwoLi4uYXJnczogYW55W10pID0+IGFueT4gfCBudWxsID0gbnVsbCxcbiAgICBwYXlsb2FkOiBhbnkgPSBudWxsXG4gICk6IFZhbHVlT3JQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IHJ1bkxhdGVyOiBib29sZWFuID1cbiAgICAgIHR5cGUgIT09IENob3JlVHlwZS5XQUlUX0ZPUl9BTEwgJiZcbiAgICAgIHR5cGUgIT09IENob3JlVHlwZS5XQUlUX0ZPUl9DT01QT05FTlRTICYmXG4gICAgICB0eXBlICE9PSBDaG9yZVR5cGUuQ09NUE9ORU5UX1NTUjtcbiAgICBjb25zdCBpc1Rhc2sgPVxuICAgICAgdHlwZSA9PT0gQ2hvcmVUeXBlLlRBU0sgfHxcbiAgICAgIHR5cGUgPT09IENob3JlVHlwZS5WSVNJQkxFIHx8XG4gICAgICB0eXBlID09PSBDaG9yZVR5cGUuQ09NUFVURUQgfHxcbiAgICAgIHR5cGUgPT09IENob3JlVHlwZS5SRVNPVVJDRSB8fFxuICAgICAgdHlwZSA9PT0gQ2hvcmVUeXBlLkNMRUFOVVBfVklTSUJMRTtcbiAgICBpZiAoaXNUYXNrKSB7XG4gICAgICAoaG9zdE9yVGFzayBhcyBUYXNrKS4kZmxhZ3MkIHw9IFRhc2tGbGFncy5ESVJUWTtcbiAgICB9XG4gICAgbGV0IGNob3JlOiBDaG9yZSA9IHtcbiAgICAgICR0eXBlJDogdHlwZSxcbiAgICAgICRpZHgkOiBpc1Rhc2sgPyAoaG9zdE9yVGFzayBhcyBUYXNrKS4kaW5kZXgkIDogMCxcbiAgICAgICRob3N0JDogaXNUYXNrID8gKChob3N0T3JUYXNrIGFzIFRhc2spLiRlbCQgYXMgZml4TWVBbnkpIDogKGhvc3RPclRhc2sgYXMgSG9zdEVsZW1lbnQpLFxuICAgICAgJHRhcmdldCQ6IHRhcmdldE9yUXJsIGFzIGFueSxcbiAgICAgICRwYXlsb2FkJDogaXNUYXNrID8gaG9zdE9yVGFzayA6IHBheWxvYWQsXG4gICAgICAkcmVzb2x2ZSQ6IG51bGwhLFxuICAgICAgJHByb21pc2UkOiBudWxsISxcbiAgICAgICRyZXR1cm5WYWx1ZSQ6IG51bGwsXG4gICAgfTtcbiAgICBjaG9yZS4kcHJvbWlzZSQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gKGNob3JlLiRyZXNvbHZlJCA9IHJlc29sdmUpKTtcbiAgICBERUJVRyAmJiBkZWJ1Z1RyYWNlKCdzY2hlZHVsZScsIGNob3JlLCBjdXJyZW50Q2hvcmUsIGNob3JlUXVldWUpO1xuICAgIGNob3JlID0gc29ydGVkSW5zZXJ0KGNob3JlUXVldWUsIGNob3JlKTtcbiAgICBpZiAoIWpvdXJuYWxGbHVzaFNjaGVkdWxlZCAmJiBydW5MYXRlcikge1xuICAgICAgLy8gSWYgd2UgYXJlIG5vdCBjdXJyZW50bHkgZHJhaW5pbmcsIHdlIG5lZWQgdG8gc2NoZWR1bGUgYSBkcmFpbi5cbiAgICAgIGpvdXJuYWxGbHVzaFNjaGVkdWxlZCA9IHRydWU7XG4gICAgICBzY2hlZHVsZShDaG9yZVR5cGUuSk9VUk5BTF9GTFVTSCk7XG4gICAgICBzY2hlZHVsZURyYWluKCk7XG4gICAgfVxuICAgIGlmIChydW5MYXRlcikge1xuICAgICAgcmV0dXJuIGNob3JlLiRwcm9taXNlJDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRyYWluVXBUbyhjaG9yZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgYWxsIG9mIHRoZSBjaG9yZXMgdXAgdG8gYW5kIGluY2x1ZGluZyB0aGUgZ2l2ZW4gY2hvcmUuXG4gICAqXG4gICAqIEBwYXJhbSBydW5VcHRvQ2hvcmVcbiAgICovXG4gIGZ1bmN0aW9uIGRyYWluVXBUbyhydW5VcHRvQ2hvcmU6IENob3JlKTogVmFsdWVPclByb21pc2U8dW5rbm93bj4ge1xuICAgIGlmIChjdXJyZW50Q2hvcmUpIHtcbiAgICAgIC8vIEFscmVhZHkgcnVubmluZyBjaG9yZVxuICAgICAgcmV0dXJuIHJ1blVwdG9DaG9yZS4kcHJvbWlzZSQ7XG4gICAgfVxuICAgIHdoaWxlIChjaG9yZVF1ZXVlLmxlbmd0aCkge1xuICAgICAgY29uc3QgbmV4dENob3JlID0gY2hvcmVRdWV1ZS5zaGlmdCgpITtcbiAgICAgIGNvbnN0IGNvbXAgPSBjaG9yZUNvbXBhcmF0b3IobmV4dENob3JlLCBydW5VcHRvQ2hvcmUsIGZhbHNlKTtcbiAgICAgIGlmIChjb21wID09PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKGNvbXAgPiAwKSB7XG4gICAgICAgIC8vIHdlIGhhdmUgcHJvY2Vzc2VkIGFsbCBvZiB0aGUgY2hvcmVzIHVwIHRvIHRoZSBnaXZlbiBjaG9yZS5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjb25zdCByZXR1cm5WYWx1ZSA9IGV4ZWN1dGVDaG9yZShuZXh0Q2hvcmUpO1xuICAgICAgaWYgKGlzUHJvbWlzZShyZXR1cm5WYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlLnRoZW4oKCkgPT4gZHJhaW5VcFRvKHJ1blVwdG9DaG9yZSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcnVuVXB0b0Nob3JlLiRyZXR1cm5WYWx1ZSQ7XG4gIH1cblxuICBmdW5jdGlvbiBleGVjdXRlQ2hvcmUoY2hvcmU6IENob3JlKTogVmFsdWVPclByb21pc2U8YW55PiB7XG4gICAgY29uc3QgaG9zdCA9IGNob3JlLiRob3N0JDtcbiAgICBERUJVRyAmJiBkZWJ1Z1RyYWNlKCdleGVjdXRlJywgY2hvcmUsIGN1cnJlbnRDaG9yZSwgY2hvcmVRdWV1ZSk7XG4gICAgYXNzZXJ0RXF1YWwoY3VycmVudENob3JlLCBudWxsLCAnQ2hvcmUgYWxyZWFkeSBydW5uaW5nLicpO1xuICAgIGN1cnJlbnRDaG9yZSA9IGNob3JlO1xuICAgIGxldCByZXR1cm5WYWx1ZTogVmFsdWVPclByb21pc2U8dW5rbm93bj4gfCB1bmtub3duID0gbnVsbDtcbiAgICBzd2l0Y2ggKGNob3JlLiR0eXBlJCkge1xuICAgICAgY2FzZSBDaG9yZVR5cGUuSk9VUk5BTF9GTFVTSDpcbiAgICAgICAgcmV0dXJuVmFsdWUgPSBqb3VybmFsRmx1c2goKTtcbiAgICAgICAgam91cm5hbEZsdXNoU2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDaG9yZVR5cGUuQ09NUE9ORU5UOlxuICAgICAgY2FzZSBDaG9yZVR5cGUuQ09NUE9ORU5UX1NTUjpcbiAgICAgICAgcmV0dXJuVmFsdWUgPSBzYWZlQ2FsbChcbiAgICAgICAgICAoKSA9PlxuICAgICAgICAgICAgZXhlY3V0ZUNvbXBvbmVudDIoXG4gICAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgICAgaG9zdCxcbiAgICAgICAgICAgICAgaG9zdCxcbiAgICAgICAgICAgICAgY2hvcmUuJHRhcmdldCQgYXMgZml4TWVBbnksXG4gICAgICAgICAgICAgIGNob3JlLiRwYXlsb2FkJCBhcyBmaXhNZUFueVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAoanN4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY2hvcmUuJHR5cGUkID09PSBDaG9yZVR5cGUuQ09NUE9ORU5UXG4gICAgICAgICAgICAgID8gbWF5YmVUaGVuKGNvbnRhaW5lci5wcm9jZXNzSnN4KGhvc3QsIGpzeCksICgpID0+IGpzeClcbiAgICAgICAgICAgICAgOiBqc3g7XG4gICAgICAgICAgfSxcbiAgICAgICAgICAoZXJyOiBhbnkpID0+IGNvbnRhaW5lci5oYW5kbGVFcnJvcihlcnIsIGhvc3QpXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDaG9yZVR5cGUuQ09NUFVURUQ6XG4gICAgICAgIHJldHVyblZhbHVlID0gcnVuQ29tcHV0ZWQyKGNob3JlLiRwYXlsb2FkJCBhcyBUYXNrPFRhc2tGbiwgVGFza0ZuPiwgY29udGFpbmVyLCBob3N0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIENob3JlVHlwZS5SRVNPVVJDRTpcbiAgICAgICAgLy8gRG9uJ3QgYXdhaXQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcmVzb3VyY2UsIGJlY2F1c2UgYXN5bmMgcmVzb3VyY2VzIHNob3VsZCBub3QgYmUgYXdhaXRlZC5cbiAgICAgICAgLy8gVGhlIHJlYXNvbiBmb3IgdGhpcyBpcyB0aGF0IHdlIHNob3VsZCBiZSBhYmxlIHRvIHVwZGF0ZSBmb3IgZXhhbXBsZSBhIG5vZGUgd2l0aCBsb2FkaW5nXG4gICAgICAgIC8vIHRleHQuIElmIHdlIGF3YWl0IHRoZSByZXNvdXJjZSwgdGhlIGxvYWRpbmcgdGV4dCB3aWxsIG5vdCBiZSBkaXNwbGF5ZWQgdW50aWwgdGhlIHJlc291cmNlXG4gICAgICAgIC8vIGlzIGxvYWRlZC5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcnVuUmVzb3VyY2UoY2hvcmUuJHBheWxvYWQkIGFzIFJlc291cmNlRGVzY3JpcHRvcjxUYXNrRm4+LCBjb250YWluZXIsIGhvc3QpO1xuICAgICAgICByZXR1cm5WYWx1ZSA9IGlzRG9tQ29udGFpbmVyKGNvbnRhaW5lcikgPyBudWxsIDogcmVzdWx0O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQ2hvcmVUeXBlLlRBU0s6XG4gICAgICBjYXNlIENob3JlVHlwZS5WSVNJQkxFOlxuICAgICAgICByZXR1cm5WYWx1ZSA9IHJ1blN1YnNjcmliZXIyKGNob3JlLiRwYXlsb2FkJCBhcyBUYXNrPFRhc2tGbiwgVGFza0ZuPiwgY29udGFpbmVyLCBob3N0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIENob3JlVHlwZS5DTEVBTlVQX1ZJU0lCTEU6XG4gICAgICAgIGNvbnN0IHRhc2sgPSBjaG9yZS4kcGF5bG9hZCQgYXMgVGFzazxUYXNrRm4sIFRhc2tGbj47XG4gICAgICAgIGNsZWFudXBUYXNrKHRhc2spO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQ2hvcmVUeXBlLk5PREVfRElGRjoge1xuICAgICAgICBjb25zdCBwYXJlbnRWaXJ0dWFsTm9kZSA9IGNob3JlLiR0YXJnZXQkIGFzIFZpcnR1YWxWTm9kZTtcbiAgICAgICAgY29uc3QganN4ID0gY2hvcmUuJHBheWxvYWQkIGFzIEpTWE91dHB1dDtcbiAgICAgICAgcmV0dXJuVmFsdWUgPSB2bm9kZV9kaWZmKGNvbnRhaW5lciBhcyBmaXhNZUFueSwganN4LCBwYXJlbnRWaXJ0dWFsTm9kZSwgbnVsbCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWF5YmVUaGVuUGFzc0Vycm9yKHJldHVyblZhbHVlLCAodmFsdWUpID0+IHtcbiAgICAgIERFQlVHICYmIGRlYnVnVHJhY2UoJ2V4ZWN1dGUuRE9ORScsIG51bGwsIGN1cnJlbnRDaG9yZSwgY2hvcmVRdWV1ZSk7XG4gICAgICBjdXJyZW50Q2hvcmU/LiRyZXNvbHZlJD8uKHZhbHVlKTtcbiAgICAgIGN1cnJlbnRDaG9yZSA9IG51bGw7XG4gICAgICByZXR1cm4gKGNob3JlLiRyZXR1cm5WYWx1ZSQgPSB2YWx1ZSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbmNvbnN0IHRvTnVtYmVyID0gKHZhbHVlOiBudW1iZXIgfCBzdHJpbmcpOiBudW1iZXIgPT4ge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyA/IHZhbHVlIDogLTE7XG59O1xuXG4vKipcbiAqIFdoZW4gYSBkZXJpdmVkIHNpZ25hbCBpcyB1cGRhdGUgd2UgbmVlZCB0byBydW4gdm5vZGVfZGlmZi4gSG93ZXZlciB0aGUgc2lnbmFsIGNhbiB1cGRhdGUgbXVsdGlwbGVcbiAqIHRpbWVzIGR1cmluZyBjb21wb25lbnQgZXhlY3V0aW9uLiBGb3IgdGhpcyByZWFzb24gaXQgaXMgbmVjZXNzYXJ5IGZvciB1cyB0byB1cGRhdGUgdGhlIHNjaGVkdWxlXG4gKiB3b3JrIHdpdGggdGhlIGxhdGVzdCByZXN1bHQgb2YgdGhlIHNpZ25hbC5cbiAqL1xuY29uc3QgY2hvcmVVcGRhdGUgPSAoZXhpc3Rpbmc6IENob3JlLCBuZXdDaG9yZTogQ2hvcmUpOiB2b2lkID0+IHtcbiAgaWYgKGV4aXN0aW5nLiR0eXBlJCA9PT0gQ2hvcmVUeXBlLk5PREVfRElGRikge1xuICAgIGV4aXN0aW5nLiRwYXlsb2FkJCA9IG5ld0Nob3JlLiRwYXlsb2FkJDtcbiAgfVxufTtcblxuZnVuY3Rpb24gY2hvcmVDb21wYXJhdG9yKGE6IENob3JlLCBiOiBDaG9yZSwgc2hvdWxkVGhyb3dPbkhvc3RNaXNtYXRjaDogdHJ1ZSk6IG51bWJlcjtcbmZ1bmN0aW9uIGNob3JlQ29tcGFyYXRvcihhOiBDaG9yZSwgYjogQ2hvcmUsIHNob3VsZFRocm93T25Ib3N0TWlzbWF0Y2g6IGZhbHNlKTogbnVtYmVyIHwgbnVsbDtcbmZ1bmN0aW9uIGNob3JlQ29tcGFyYXRvcihhOiBDaG9yZSwgYjogQ2hvcmUsIHNob3VsZFRocm93T25Ib3N0TWlzbWF0Y2g6IGJvb2xlYW4pOiBudW1iZXIgfCBudWxsIHtcbiAgY29uc3QgbWFjcm9UeXBlRGlmZiA9IChhLiR0eXBlJCAmIENob3JlVHlwZS5NQUNSTykgLSAoYi4kdHlwZSQgJiBDaG9yZVR5cGUuTUFDUk8pO1xuICBpZiAobWFjcm9UeXBlRGlmZiAhPT0gMCkge1xuICAgIHJldHVybiBtYWNyb1R5cGVEaWZmO1xuICB9XG5cbiAgLy8gSk9VUk5BTF9GTFVTSCBkb2VzIG5vdCBoYXZlIGEgaG9zdCBvciAkaWR4JCwgc28gd2UgY2FuJ3QgY29tcGFyZSBpdC5cbiAgaWYgKGEuJHR5cGUkICE9PSBDaG9yZVR5cGUuSk9VUk5BTF9GTFVTSCkge1xuICAgIGNvbnN0IGFIb3N0ID0gYS4kaG9zdCQ7XG4gICAgY29uc3QgYkhvc3QgPSBiLiRob3N0JDtcbiAgICBpZiAoYUhvc3QgIT09IGJIb3N0KSB7XG4gICAgICBpZiAodm5vZGVfaXNWTm9kZShhSG9zdCkgJiYgdm5vZGVfaXNWTm9kZShiSG9zdCkpIHtcbiAgICAgICAgLy8gd2UgYXJlIHJ1bm5pbmcgb24gdGhlIGNsaWVudC5cbiAgICAgICAgY29uc3QgaG9zdERpZmYgPSB2bm9kZV9kb2N1bWVudFBvc2l0aW9uKGFIb3N0LCBiSG9zdCk7XG4gICAgICAgIGlmIChob3N0RGlmZiAhPT0gMCkge1xuICAgICAgICAgIHJldHVybiBob3N0RGlmZjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gd2UgYXJlIHJ1bm5pbmcgb24gdGhlIHNlcnZlci5cbiAgICAgICAgLy8gT24gc2VydmVyIHdlIGNhbid0IHNjaGVkdWxlIHRhc2sgZm9yIGEgZGlmZmVyZW50IGhvc3QhXG4gICAgICAgIC8vIFNlcnZlciBpcyBTU1IsIGFuZCB0aGVyZWZvcmUgc2NoZWR1bGluZyBmb3IgYW55dGhpbmcgYnV0IHRoZSBjdXJyZW50IGhvc3RcbiAgICAgICAgLy8gaW1wbGllcyB0aGF0IHRoaW5ncyBuZWVkIHRvIGJlIHJlLXJ1biBuYWQgdGhhdCBpcyBub3Qgc3VwcG9ydGVkIGJlY2F1c2Ugb2Ygc3RyZWFtaW5nLlxuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPVxuICAgICAgICAgICdTRVJWRVI6IGR1cmluZyBIVE1MIHN0cmVhbWluZywgaXQgaXMgbm90IHBvc3NpYmxlIHRvIGNhdXNlIGEgcmUtcnVuIG9mIHRhc2tzIG9uIGEgZGlmZmVyZW50IGhvc3QnO1xuICAgICAgICBpZiAoc2hvdWxkVGhyb3dPbkhvc3RNaXNtYXRjaCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGxvZ1dhcm4oZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgbWljcm9UeXBlRGlmZiA9IChhLiR0eXBlJCAmIENob3JlVHlwZS5NSUNSTykgLSAoYi4kdHlwZSQgJiBDaG9yZVR5cGUuTUlDUk8pO1xuICAgIGlmIChtaWNyb1R5cGVEaWZmICE9PSAwKSB7XG4gICAgICByZXR1cm4gbWljcm9UeXBlRGlmZjtcbiAgICB9XG5cbiAgICBjb25zdCBpZHhEaWZmID0gdG9OdW1iZXIoYS4kaWR4JCkgLSB0b051bWJlcihiLiRpZHgkKTtcbiAgICBpZiAoaWR4RGlmZiAhPT0gMCkge1xuICAgICAgcmV0dXJuIGlkeERpZmY7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbmV4cG9ydCBjb25zdCBpbnRyYUhvc3RQcmVkaWNhdGUgPSAoYTogQ2hvcmUsIGI6IENob3JlKTogbnVtYmVyID0+IHtcbiAgY29uc3QgaWR4RGlmZiA9IHRvTnVtYmVyKGEuJGlkeCQpIC0gdG9OdW1iZXIoYi4kaWR4JCk7XG4gIGlmIChpZHhEaWZmICE9PSAwKSB7XG4gICAgcmV0dXJuIGlkeERpZmY7XG4gIH1cbiAgY29uc3QgdHlwZURpZmYgPSBhLiR0eXBlJCAtIGIuJHR5cGUkO1xuICBpZiAodHlwZURpZmYgIT09IDApIHtcbiAgICByZXR1cm4gdHlwZURpZmY7XG4gIH1cbiAgaWYgKGEuJHBheWxvYWQkICE9PSBiLiRwYXlsb2FkJCkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGlmIChhLiRwYXlsb2FkJCBpbnN0YW5jZW9mIFRhc2sgJiYgYi4kcGF5bG9hZCQgaW5zdGFuY2VvZiBUYXNrKSB7XG4gICAgY29uc3QgYUhhc2ggPSBhLiRwYXlsb2FkJC4kcXJsJC4kaGFzaCQ7XG4gICAgY29uc3QgYkhhc2ggPSBiLiRwYXlsb2FkJC4kcXJsJC4kaGFzaCQ7XG4gICAgcmV0dXJuIGFIYXNoID09PSBiSGFzaCA/IDAgOiBhSGFzaCA8IGJIYXNoID8gLTEgOiAxO1xuICB9XG4gIHJldHVybiAwO1xufTtcblxuZnVuY3Rpb24gc29ydGVkRmluZEluZGV4KHNvcnRlZEFycmF5OiBDaG9yZVtdLCB2YWx1ZTogQ2hvcmUpOiBudW1iZXIge1xuICAvLy8gV2UgbmVlZCB0byBlbnN1cmUgdGhhdCB0aGUgYHF1ZXVlYCBpcyBzb3J0ZWQgYnkgcHJpb3JpdHkuXG4gIC8vLyAxLiBGaW5kIGEgcGxhY2Ugd2hlcmUgdG8gaW5zZXJ0IGludG8uXG4gIGxldCBib3R0b20gPSAwO1xuICBsZXQgdG9wID0gc29ydGVkQXJyYXkubGVuZ3RoO1xuICB3aGlsZSAoYm90dG9tIDwgdG9wKSB7XG4gICAgY29uc3QgbWlkZGxlID0gYm90dG9tICsgKCh0b3AgLSBib3R0b20pID4+IDEpO1xuICAgIGNvbnN0IG1pZENob3JlID0gc29ydGVkQXJyYXlbbWlkZGxlXTtcbiAgICBjb25zdCBjb21wID0gY2hvcmVDb21wYXJhdG9yKHZhbHVlLCBtaWRDaG9yZSwgdHJ1ZSk7XG4gICAgaWYgKGNvbXAgPCAwKSB7XG4gICAgICB0b3AgPSBtaWRkbGU7XG4gICAgfSBlbHNlIGlmIChjb21wID4gMCkge1xuICAgICAgYm90dG9tID0gbWlkZGxlICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gV2UgYWxyZWFkeSBoYXZlIHRoZSBob3N0IGluIHRoZSBxdWV1ZS5cbiAgICAgIHJldHVybiBtaWRkbGU7XG4gICAgfVxuICB9XG4gIHJldHVybiB+Ym90dG9tO1xufVxuXG5mdW5jdGlvbiBzb3J0ZWRJbnNlcnQoc29ydGVkQXJyYXk6IENob3JlW10sIHZhbHVlOiBDaG9yZSk6IENob3JlIHtcbiAgLy8vIFdlIG5lZWQgdG8gZW5zdXJlIHRoYXQgdGhlIGBxdWV1ZWAgaXMgc29ydGVkIGJ5IHByaW9yaXR5LlxuICAvLy8gMS4gRmluZCBhIHBsYWNlIHdoZXJlIHRvIGluc2VydCBpbnRvLlxuICBjb25zdCBpZHggPSBzb3J0ZWRGaW5kSW5kZXgoc29ydGVkQXJyYXksIHZhbHVlKTtcbiAgaWYgKGlkeCA8IDApIHtcbiAgICAvLy8gMi4gSW5zZXJ0IHRoZSBjaG9yZSBpbnRvIHRoZSBxdWV1ZS5cbiAgICBzb3J0ZWRBcnJheS5zcGxpY2UofmlkeCwgMCwgdmFsdWUpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBjb25zdCBleGlzdGluZyA9IHNvcnRlZEFycmF5W2lkeF07XG4gIGNob3JlVXBkYXRlKGV4aXN0aW5nLCB2YWx1ZSk7XG4gIHJldHVybiBleGlzdGluZztcbn1cblxuZnVuY3Rpb24gZGVidWdDaG9yZVRvU3RyaW5nKGNob3JlOiBDaG9yZSk6IHN0cmluZyB7XG4gIGNvbnN0IHR5cGUgPVxuICAgIChcbiAgICAgIHtcbiAgICAgICAgW0Nob3JlVHlwZS5DT01QVVRFRF06ICdDT01QVVRFRCcsXG4gICAgICAgIFtDaG9yZVR5cGUuUkVTT1VSQ0VdOiAnUkVTT1VSQ0UnLFxuICAgICAgICBbQ2hvcmVUeXBlLlRBU0tdOiAnVEFTSycsXG4gICAgICAgIFtDaG9yZVR5cGUuTk9ERV9ESUZGXTogJ05PREVfRElGRicsXG4gICAgICAgIFtDaG9yZVR5cGUuQ09NUE9ORU5UXTogJ0NPTVBPTkVOVCcsXG4gICAgICAgIFtDaG9yZVR5cGUuQ09NUE9ORU5UX1NTUl06ICdDT01QT05FTlRfU1NSJyxcbiAgICAgICAgW0Nob3JlVHlwZS5KT1VSTkFMX0ZMVVNIXTogJ0pPVVJOQUxfRkxVU0gnLFxuICAgICAgICBbQ2hvcmVUeXBlLlZJU0lCTEVdOiAnVklTSUJMRScsXG4gICAgICAgIFtDaG9yZVR5cGUuV0FJVF9GT1JfQUxMXTogJ1dBSVRfRk9SX0FMTCcsXG4gICAgICAgIFtDaG9yZVR5cGUuV0FJVF9GT1JfQ09NUE9ORU5UU106ICdXQUlUX0ZPUl9DT01QT05FTlRTJyxcbiAgICAgIH0gYXMgYW55XG4gICAgKVtjaG9yZS4kdHlwZSRdIHx8ICdVTktOT1dOOiAnICsgY2hvcmUuJHR5cGUkO1xuICBjb25zdCBob3N0ID0gU3RyaW5nKGNob3JlLiRob3N0JCkucmVwbGFjZUFsbCgvXFxuLiovZ2ltLCAnJyk7XG4gIHJldHVybiBgQ2hvcmUoJHt0eXBlfSAke2hvc3R9ICR7Y2hvcmUuJGlkeCR9KWA7XG59XG5cbmZ1bmN0aW9uIGRlYnVnVHJhY2UoXG4gIGFjdGlvbjogc3RyaW5nLFxuICBhcmc/OiBhbnkgfCBudWxsLFxuICBjdXJyZW50Q2hvcmU/OiBDaG9yZSB8IG51bGwsXG4gIHF1ZXVlPzogQ2hvcmVbXVxuKSB7XG4gIGNvbnN0IGxpbmVzID0gWydTY2hlZHVsZXI6ICcgKyBhY3Rpb25dO1xuICBpZiAoYXJnKSB7XG4gICAgbGluZXMucHVzaChcbiAgICAgICcgICAgYXJnOiAnICtcbiAgICAgICAgKCckdHlwZSQnIGluIGFyZyA/IGRlYnVnQ2hvcmVUb1N0cmluZyhhcmcgYXMgQ2hvcmUpIDogU3RyaW5nKGFyZykucmVwbGFjZUFsbCgvXFxuLiovZ2ltLCAnJykpXG4gICAgKTtcbiAgfVxuICBpZiAoY3VycmVudENob3JlKSB7XG4gICAgbGluZXMucHVzaCgncnVubmluZzogJyArIGRlYnVnQ2hvcmVUb1N0cmluZyhjdXJyZW50Q2hvcmUpKTtcbiAgfVxuICBpZiAocXVldWUpIHtcbiAgICBxdWV1ZS5mb3JFYWNoKChjaG9yZSwgaWR4KSA9PiB7XG4gICAgICBsaW5lcy5wdXNoKChpZHggPT0gMCA/ICcgIHF1ZXVlOiAnIDogJyAgICAgICAgICcpICsgZGVidWdDaG9yZVRvU3RyaW5nKGNob3JlKSk7XG4gICAgfSk7XG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgY29uc29sZS5sb2cobGluZXMuam9pbignXFxuICAnKSArICdcXG4nKTtcbn1cbiJdfQ==","import { createSubscriptionManager, } from '../../state/common';\nimport { createSerializationContext } from './shared-serialization';\nimport { createScheduler } from './scheduler';\nimport { version } from '../../version';\nimport { trackSignal } from '../../use/use-core';\n/** @internal */\nexport class _SharedContainer {\n    constructor(scheduleDrain, journalFlush, serverData, locale) {\n        this.$currentUniqueId$ = 0;\n        this.$instanceHash$ = null;\n        this.$serverData$ = serverData;\n        this.$locale$ = locale;\n        this.$version$ = version;\n        this.$proxyMap$ = new WeakMap();\n        this.$getObjectById$ = (id) => {\n            throw Error('Not implemented');\n        };\n        this.$subsManager$ = createSubscriptionManager(this);\n        this.$scheduler$ = createScheduler(this, scheduleDrain, journalFlush);\n    }\n    trackSignalValue(signal, sub) {\n        return trackSignal(signal, sub);\n    }\n    serializationCtxFactory(NodeConstructor, symbolToChunkResolver, writer) {\n        return createSerializationContext(NodeConstructor, this.$proxyMap$, symbolToChunkResolver, this.setHostProp.bind(this), writer);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkLWNvbnRhaW5lci5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS92Mi9zaGFyZWQvc2hhcmVkLWNvbnRhaW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQ0wseUJBQXlCLEdBRzFCLE1BQU0sb0JBQW9CLENBQUM7QUFJNUIsT0FBTyxFQUFFLDBCQUEwQixFQUE2QixNQUFNLHdCQUF3QixDQUFDO0FBRS9GLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFOUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHakQsZ0JBQWdCO0FBQ2hCLE1BQU0sT0FBZ0IsZ0JBQWdCO0lBYXBDLFlBQ0UsYUFBeUIsRUFDekIsWUFBd0IsRUFDeEIsVUFBK0IsRUFDL0IsTUFBYztRQVBoQixzQkFBaUIsR0FBRyxDQUFDLENBQUM7UUFDdEIsbUJBQWMsR0FBa0IsSUFBSSxDQUFDO1FBUW5DLElBQUksQ0FBQyxZQUFZLEdBQUcsVUFBVSxDQUFDO1FBQy9CLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsRUFBbUIsRUFBRSxFQUFFO1lBQzdDLE1BQU0sS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDakMsQ0FBQyxDQUFDO1FBRUYsSUFBSSxDQUFDLGFBQWEsR0FBRyx5QkFBeUIsQ0FBQyxJQUFnQixDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLFdBQVcsR0FBRyxlQUFlLENBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsZ0JBQWdCLENBQUksTUFBYyxFQUFFLEdBQWU7UUFDakQsT0FBTyxXQUFXLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCx1QkFBdUIsQ0FDckIsZUFBaUUsRUFDakUscUJBQTRDLEVBQzVDLE1BQXFCO1FBRXJCLE9BQU8sMEJBQTBCLENBQy9CLGVBQWUsRUFDZixJQUFJLENBQUMsVUFBVSxFQUNmLHFCQUFxQixFQUNyQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFDM0IsTUFBTSxDQUNQLENBQUM7SUFDSixDQUFDO0NBZ0JGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBPYmpUb1Byb3h5TWFwIH0gZnJvbSAnLi4vLi4vY29udGFpbmVyL2NvbnRhaW5lcic7XG5pbXBvcnQgdHlwZSB7IEpTWE91dHB1dCB9IGZyb20gJy4uLy4uL3JlbmRlci9qc3gvdHlwZXMvanN4LW5vZGUnO1xuaW1wb3J0IHtcbiAgY3JlYXRlU3Vic2NyaXB0aW9uTWFuYWdlcixcbiAgdHlwZSBTdWJzY3JpYmVyLFxuICB0eXBlIFN1YnNjcmlwdGlvbk1hbmFnZXIsXG59IGZyb20gJy4uLy4uL3N0YXRlL2NvbW1vbic7XG5pbXBvcnQgdHlwZSB7IENvbnRleHRJZCB9IGZyb20gJy4uLy4uL3VzZS91c2UtY29udGV4dCc7XG5pbXBvcnQgdHlwZSB7IFZhbHVlT3JQcm9taXNlIH0gZnJvbSAnLi4vLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IFNjaGVkdWxlciB9IGZyb20gJy4vc2NoZWR1bGVyJztcbmltcG9ydCB7IGNyZWF0ZVNlcmlhbGl6YXRpb25Db250ZXh0LCB0eXBlIFNlcmlhbGl6YXRpb25Db250ZXh0IH0gZnJvbSAnLi9zaGFyZWQtc2VyaWFsaXphdGlvbic7XG5pbXBvcnQgdHlwZSB7IENvbnRhaW5lcjIsIGZpeE1lQW55LCBIb3N0RWxlbWVudCB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlU2NoZWR1bGVyIH0gZnJvbSAnLi9zY2hlZHVsZXInO1xuaW1wb3J0IHR5cGUgeyBTdHJlYW1Xcml0ZXIsIFN5bWJvbFRvQ2h1bmtSZXNvbHZlciB9IGZyb20gJy4uL3Nzci9zc3ItdHlwZXMnO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gJy4uLy4uL3ZlcnNpb24nO1xuaW1wb3J0IHsgdHJhY2tTaWduYWwgfSBmcm9tICcuLi8uLi91c2UvdXNlLWNvcmUnO1xuaW1wb3J0IHR5cGUgeyBTaWduYWwgfSBmcm9tICcuLi8uLi9zdGF0ZS9zaWduYWwnO1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgX1NoYXJlZENvbnRhaW5lciBpbXBsZW1lbnRzIENvbnRhaW5lcjIge1xuICByZWFkb25seSAkdmVyc2lvbiQ6IHN0cmluZztcbiAgcmVhZG9ubHkgJHNjaGVkdWxlciQ6IFNjaGVkdWxlcjtcbiAgcmVhZG9ubHkgJHN1YnNNYW5hZ2VyJDogU3Vic2NyaXB0aW9uTWFuYWdlcjtcbiAgcmVhZG9ubHkgJHByb3h5TWFwJDogT2JqVG9Qcm94eU1hcDtcbiAgLy8vIEN1cnJlbnQgbGFuZ3VhZ2UgbG9jYWxlXG4gIHJlYWRvbmx5ICRsb2NhbGUkOiBzdHJpbmc7XG4gIC8vLyBSZXRyaWV2ZSBPYmplY3QgZnJvbSBwYXVzZWQgc2VyaWFsaXplZCBzdGF0ZS5cbiAgcmVhZG9ubHkgJGdldE9iamVjdEJ5SWQkOiAoaWQ6IG51bWJlciB8IHN0cmluZykgPT4gYW55O1xuICAkc2VydmVyRGF0YSQ6IFJlY29yZDxzdHJpbmcsIGFueT47XG4gICRjdXJyZW50VW5pcXVlSWQkID0gMDtcbiAgJGluc3RhbmNlSGFzaCQ6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHNjaGVkdWxlRHJhaW46ICgpID0+IHZvaWQsXG4gICAgam91cm5hbEZsdXNoOiAoKSA9PiB2b2lkLFxuICAgIHNlcnZlckRhdGE6IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gICAgbG9jYWxlOiBzdHJpbmdcbiAgKSB7XG4gICAgdGhpcy4kc2VydmVyRGF0YSQgPSBzZXJ2ZXJEYXRhO1xuICAgIHRoaXMuJGxvY2FsZSQgPSBsb2NhbGU7XG4gICAgdGhpcy4kdmVyc2lvbiQgPSB2ZXJzaW9uO1xuICAgIHRoaXMuJHByb3h5TWFwJCA9IG5ldyBXZWFrTWFwKCk7XG4gICAgdGhpcy4kZ2V0T2JqZWN0QnlJZCQgPSAoaWQ6IG51bWJlciB8IHN0cmluZykgPT4ge1xuICAgICAgdGhyb3cgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH07XG5cbiAgICB0aGlzLiRzdWJzTWFuYWdlciQgPSBjcmVhdGVTdWJzY3JpcHRpb25NYW5hZ2VyKHRoaXMgYXMgZml4TWVBbnkpO1xuICAgIHRoaXMuJHNjaGVkdWxlciQgPSBjcmVhdGVTY2hlZHVsZXIodGhpcywgc2NoZWR1bGVEcmFpbiwgam91cm5hbEZsdXNoKTtcbiAgfVxuXG4gIHRyYWNrU2lnbmFsVmFsdWU8VD4oc2lnbmFsOiBTaWduYWwsIHN1YjogU3Vic2NyaWJlcik6IFQge1xuICAgIHJldHVybiB0cmFja1NpZ25hbChzaWduYWwsIHN1Yik7XG4gIH1cblxuICBzZXJpYWxpemF0aW9uQ3R4RmFjdG9yeShcbiAgICBOb2RlQ29uc3RydWN0b3I6IFNlcmlhbGl6YXRpb25Db250ZXh0WyckTm9kZUNvbnN0cnVjdG9yJCddIHwgbnVsbCxcbiAgICBzeW1ib2xUb0NodW5rUmVzb2x2ZXI6IFN5bWJvbFRvQ2h1bmtSZXNvbHZlcixcbiAgICB3cml0ZXI/OiBTdHJlYW1Xcml0ZXJcbiAgKTogU2VyaWFsaXphdGlvbkNvbnRleHQge1xuICAgIHJldHVybiBjcmVhdGVTZXJpYWxpemF0aW9uQ29udGV4dChcbiAgICAgIE5vZGVDb25zdHJ1Y3RvcixcbiAgICAgIHRoaXMuJHByb3h5TWFwJCxcbiAgICAgIHN5bWJvbFRvQ2h1bmtSZXNvbHZlcixcbiAgICAgIHRoaXMuc2V0SG9zdFByb3AuYmluZCh0aGlzKSxcbiAgICAgIHdyaXRlclxuICAgICk7XG4gIH1cblxuICBhYnN0cmFjdCBlbnN1cmVQcm9qZWN0aW9uUmVzb2x2ZWQoaG9zdDogSG9zdEVsZW1lbnQpOiB2b2lkO1xuICBhYnN0cmFjdCBwcm9jZXNzSnN4KGhvc3Q6IEhvc3RFbGVtZW50LCBqc3g6IEpTWE91dHB1dCk6IFZhbHVlT3JQcm9taXNlPHZvaWQ+O1xuICBhYnN0cmFjdCBoYW5kbGVFcnJvcihlcnI6IGFueSwgJGhvc3QkOiBIb3N0RWxlbWVudCk6IHZvaWQ7XG4gIGFic3RyYWN0IGdldFBhcmVudEhvc3QoaG9zdDogSG9zdEVsZW1lbnQpOiBIb3N0RWxlbWVudCB8IG51bGw7XG4gIGFic3RyYWN0IHNldENvbnRleHQ8VD4oaG9zdDogSG9zdEVsZW1lbnQsIGNvbnRleHQ6IENvbnRleHRJZDxUPiwgdmFsdWU6IFQpOiB2b2lkO1xuICBhYnN0cmFjdCByZXNvbHZlQ29udGV4dDxUPihob3N0OiBIb3N0RWxlbWVudCwgY29udGV4dElkOiBDb250ZXh0SWQ8VD4pOiBUIHwgdW5kZWZpbmVkO1xuICBhYnN0cmFjdCBzZXRIb3N0UHJvcDxUPihob3N0OiBIb3N0RWxlbWVudCwgbmFtZTogc3RyaW5nLCB2YWx1ZTogVCk6IHZvaWQ7XG4gIGFic3RyYWN0IGdldEhvc3RQcm9wPFQ+KGhvc3Q6IEhvc3RFbGVtZW50LCBuYW1lOiBzdHJpbmcpOiBUIHwgbnVsbDtcbiAgYWJzdHJhY3QgJGFwcGVuZFN0eWxlJChcbiAgICBjb250ZW50OiBzdHJpbmcsXG4gICAgc3R5bGVJZDogc3RyaW5nLFxuICAgIGhvc3Q6IEhvc3RFbGVtZW50LFxuICAgIHNjb3BlZDogYm9vbGVhblxuICApOiB2b2lkO1xufVxuIl19","// NOTE: we want to move this function to qwikloader, and therefore this function should not have any external dependencies\nimport { VNodeDataChar, VNodeDataSeparator } from '../shared/vnode-data-types';\n/**\n * Process the VNodeData script tags and store the VNodeData in the VNodeDataMap.\n *\n * The end result of this function is that each DOM element has the associated `VNodeData` attached\n * to it, to be used later `VNode` materialization. The \"attachment\" is done through the\n * `VNodeDataMap`.\n *\n * Run this function on startup to process the `<script type=\"qwik/vnode\">` tags. The data in the\n * tags needs to be parsed and attached to the DOM elements. (We do this through `VNodeDataMap`)\n * `VNodeDataMap` is then used to lazily materialize the VNodes.\n *\n * Only one invocation of this function is needed per document/browser session.\n *\n * Below is an example of the kinds of constructs which need to be handled when dealing with\n * VNodeData deserialization.\n *\n * ```\n * <html q:container=\"paused\">\n *   <body>\n *     <div q:container=\"paused\">\n *       <script type=\"qwik/vnode\">...</script>\n *     </div>\n *     <div q:container=\"html\">...</div>\n *     before\n *     <!--q:container=ABC-->\n *     ...\n *     <!--/q:container-->\n *     after\n *     <!--q:ignore=FOO-->\n *     ...\n *        <!--q:container-island=BAR-->\n *        <div>some interactive island</div>\n *        <!--/q:container-island-->\n *     ...\n *     <!--/q:ignore-->\n *     <textarea q:container=\"text\">...</textarea>\n *     <script type=\"qwik/vnode\">...</script>\n *   </body>\n * </html>\n * ```\n *\n * Each `qwik/vnode` script assumes that the elements are numbered in depth first order. For this\n * reason, whenever the `processVNodeData` comes across a `q:container` it must ignore its\n * children.\n *\n * IMPLEMENTATION:\n *\n * - Stack to keep track of the current `q:container` being processed.\n * - Attach all `qwik/vnode` scripts (not the data contain within them) to the `q:container` element.\n * - Walk the tree and process each `q:container` element.\n */\nexport function processVNodeData(document) {\n    const Q_CONTAINER = 'q:container';\n    const Q_CONTAINER_END = '/' + Q_CONTAINER;\n    const Q_PROPS_SEPARATOR = ':';\n    const Q_SHADOW_ROOT = 'q:shadowroot';\n    const Q_IGNORE = 'q:ignore';\n    const Q_IGNORE_END = '/' + Q_IGNORE;\n    const Q_CONTAINER_ISLAND = 'q:container-island';\n    const Q_CONTAINER_ISLAND_END = '/' + Q_CONTAINER_ISLAND;\n    const qDocument = document;\n    const vNodeDataMap = qDocument.qVNodeData || (qDocument.qVNodeData = new WeakMap());\n    const prototype = document.body;\n    const getter = (prototype, name) => {\n        let getter;\n        while (prototype && !(getter = Object.getOwnPropertyDescriptor(prototype, name)?.get)) {\n            prototype = Object.getPrototypeOf(prototype);\n        }\n        return (getter ||\n            function () {\n                return this[name];\n            });\n    };\n    const getAttribute = prototype.getAttribute;\n    const hasAttribute = prototype.hasAttribute;\n    const getNodeType = getter(prototype, 'nodeType');\n    // Process all of the `qwik/vnode` script tags by attaching them to the corresponding containers.\n    const attachVnodeDataAndRefs = (element) => {\n        Array.from(element.querySelectorAll('script[type=\"qwik/vnode\"]')).forEach((script) => {\n            script.setAttribute('type', 'x-qwik/vnode');\n            const qContainerElement = script.closest('[q\\\\:container]');\n            qContainerElement.qVnodeData = script.textContent;\n            qContainerElement.qVNodeRefs = new Map();\n        });\n        element.querySelectorAll('[q\\\\:shadowroot]').forEach((parent) => {\n            const shadowRoot = parent.shadowRoot;\n            shadowRoot && attachVnodeDataAndRefs(shadowRoot);\n        });\n    };\n    attachVnodeDataAndRefs(document);\n    ///////////////////////////////\n    // Functions to consume the tree.\n    ///////////////////////////////\n    let NodeType;\n    (function (NodeType) {\n        NodeType[NodeType[\"CONTAINER_MASK\"] = 1] = \"CONTAINER_MASK\";\n        NodeType[NodeType[\"ELEMENT\"] = 2] = \"ELEMENT\";\n        NodeType[NodeType[\"ELEMENT_CONTAINER\"] = 3] = \"ELEMENT_CONTAINER\";\n        NodeType[NodeType[\"ELEMENT_SHADOW_ROOT\"] = 6] = \"ELEMENT_SHADOW_ROOT\";\n        NodeType[NodeType[\"COMMENT_SKIP_START\"] = 5] = \"COMMENT_SKIP_START\";\n        NodeType[NodeType[\"COMMENT_SKIP_END\"] = 8] = \"COMMENT_SKIP_END\";\n        NodeType[NodeType[\"COMMENT_IGNORE_START\"] = 16] = \"COMMENT_IGNORE_START\";\n        NodeType[NodeType[\"COMMENT_IGNORE_END\"] = 32] = \"COMMENT_IGNORE_END\";\n        NodeType[NodeType[\"COMMENT_ISLAND_START\"] = 65] = \"COMMENT_ISLAND_START\";\n        NodeType[NodeType[\"COMMENT_ISLAND_END\"] = 128] = \"COMMENT_ISLAND_END\";\n        NodeType[NodeType[\"OTHER\"] = 0] = \"OTHER\";\n    })(NodeType || (NodeType = {}));\n    /**\n     * Looks up which type of node this is in a monomorphic way which should be faster.\n     *\n     * See: https://mhevery.github.io/perf-tests/DOM-megamorphic.html\n     */\n    const getFastNodeType = (node) => {\n        const nodeType = getNodeType.call(node);\n        if (nodeType === 1 /* Node.ELEMENT_NODE */) {\n            const qContainer = getAttribute.call(node, Q_CONTAINER);\n            if (qContainer === null) {\n                if (hasAttribute.call(node, Q_SHADOW_ROOT)) {\n                    return NodeType.ELEMENT_SHADOW_ROOT;\n                }\n                const isQElement = hasAttribute.call(node, Q_PROPS_SEPARATOR);\n                return isQElement ? NodeType.ELEMENT : NodeType.OTHER;\n            }\n            else {\n                return NodeType.ELEMENT_CONTAINER;\n            }\n        }\n        else if (nodeType === 8 /* Node.COMMENT_NODE */) {\n            const nodeValue = node.nodeValue || ''; // nodeValue is monomorphic so it does not need fast path\n            if (nodeValue.startsWith(Q_CONTAINER_ISLAND)) {\n                return NodeType.COMMENT_ISLAND_START;\n            }\n            else if (nodeValue.startsWith(Q_IGNORE)) {\n                return NodeType.COMMENT_IGNORE_START;\n            }\n            else if (nodeValue.startsWith(Q_CONTAINER)) {\n                return NodeType.COMMENT_SKIP_START;\n            }\n            else if (nodeValue.startsWith(Q_CONTAINER_ISLAND_END)) {\n                return NodeType.COMMENT_ISLAND_END;\n            }\n            else if (nodeValue.startsWith(Q_IGNORE_END)) {\n                return NodeType.COMMENT_IGNORE_END;\n            }\n            else if (nodeValue.startsWith(Q_CONTAINER_END)) {\n                return NodeType.COMMENT_SKIP_END;\n            }\n        }\n        return NodeType.OTHER;\n    };\n    const isSeparator = (ch) => \n    /* `!` */ VNodeDataSeparator.ADVANCE_1 <= ch && ch <= VNodeDataSeparator.ADVANCE_8192; /* `.` */\n    /**\n     * Given the `vData` string, `start` index, and `end` index, find the end of the VNodeData\n     * section.\n     */\n    const findVDataSectionEnd = (vData, start, end) => {\n        let depth = 0;\n        while (true) {\n            // look for the end of VNodeData\n            if (start < end) {\n                const ch = vData.charCodeAt(start);\n                if (depth === 0 && isSeparator(ch)) {\n                    break;\n                }\n                else {\n                    if (ch === VNodeDataChar.OPEN) {\n                        depth++;\n                    }\n                    else if (ch === VNodeDataChar.CLOSE) {\n                        depth--;\n                    }\n                    start++;\n                }\n            }\n            else {\n                break;\n            }\n        }\n        return start;\n    };\n    const nextSibling = (node) => {\n        // eslint-disable-next-line no-empty\n        while (node && (node = node.nextSibling) && getFastNodeType(node) === NodeType.OTHER) { }\n        return node;\n    };\n    const firstChild = (node) => {\n        // eslint-disable-next-line no-empty\n        while (node && (node = node.firstChild) && getFastNodeType(node) === NodeType.OTHER) { }\n        return node;\n    };\n    /**\n     * Process the container\n     *\n     * @param walker TreeWalker\n     * @param containerNode The root of container element\n     * @param exitNode The node which represents the last node and we should exit.\n     * @param qVNodeRefs Place to store the VNodeRefs\n     */\n    const walkContainer = (walker, containerNode, node, exitNode, vData, qVNodeRefs, prefix) => {\n        const vData_length = vData.length;\n        /// Stores the current element index as the TreeWalker traverses the DOM.\n        let elementIdx = 0;\n        /// Stores the current VNode index as derived from the VNodeData script tag.\n        let vNodeElementIndex = -1;\n        let vData_start = 0;\n        let vData_end = 0;\n        let ch = 0;\n        let needsToStoreRef = -1;\n        let nextNode = null;\n        /** Computes number of elements which need to be skipped to get to the next VNodeData section. */\n        const howManyElementsToSkip = () => {\n            let elementsToSkip = 0;\n            while (isSeparator((ch = vData.charCodeAt(vData_start)))) {\n                // Keep consuming the separators and incrementing the vNodeIndex\n                // console.log('ADVANCE', vNodeElementIndex, ch, ch - 33);\n                elementsToSkip += 1 << (ch - VNodeDataSeparator.ADVANCE_1);\n                vData_start++;\n                if (vData_start >= vData_length) {\n                    // we reached the end of the vNodeData stop.\n                    break;\n                }\n            }\n            return elementsToSkip;\n        };\n        do {\n            if (node === exitNode) {\n                return;\n            }\n            nextNode = null;\n            const nodeType = node == containerNode ? NodeType.ELEMENT : getFastNodeType(node);\n            if (nodeType === NodeType.ELEMENT_CONTAINER) {\n                // If we are in a container, we need to skip the children.\n                const container = node;\n                let cursor = node;\n                while (cursor && !(nextNode = nextSibling(cursor))) {\n                    cursor = cursor.parentNode;\n                }\n                // console.log('EXIT', nextNode?.outerHTML);\n                walkContainer(walker, container, node, nextNode, container.qVnodeData || '', container.qVNodeRefs, prefix + '  ');\n            }\n            else if (nodeType === NodeType.COMMENT_IGNORE_START) {\n                let islandNode = node;\n                do {\n                    islandNode = walker.nextNode();\n                    if (!islandNode) {\n                        throw new Error(`Island inside <!--${node?.nodeValue}--> not found!`);\n                    }\n                } while (getFastNodeType(islandNode) !== NodeType.COMMENT_ISLAND_START);\n                nextNode = null;\n            }\n            else if (nodeType === NodeType.COMMENT_ISLAND_END) {\n                nextNode = node;\n                do {\n                    nextNode = walker.nextNode();\n                    if (!nextNode) {\n                        throw new Error(`Ignore block not closed!`);\n                    }\n                } while (getFastNodeType(nextNode) !== NodeType.COMMENT_IGNORE_END);\n                nextNode = null;\n            }\n            else if (nodeType === NodeType.COMMENT_SKIP_START) {\n                // If we are in a container, we need to skip the children.\n                nextNode = node;\n                do {\n                    nextNode = nextSibling(nextNode);\n                    if (!nextNode) {\n                        throw new Error(`<!--${node?.nodeValue}--> not closed!`);\n                    }\n                } while (getFastNodeType(nextNode) !== NodeType.COMMENT_SKIP_END);\n                // console.log('EXIT', nextNode?.outerHTML);\n                walkContainer(walker, node, node, nextNode, '', null, prefix + '  ');\n            }\n            else if (nodeType === NodeType.ELEMENT_SHADOW_ROOT) {\n                // If we are in a shadow root, we need to get the shadow root element.\n                nextNode = nextSibling(node);\n                const shadowRootContainer = node;\n                const shadowRoot = shadowRootContainer?.shadowRoot;\n                if (shadowRoot) {\n                    walkContainer(\n                    // we need to create a new walker for the shadow root\n                    document.createTreeWalker(shadowRoot, 0x1 /* NodeFilter.SHOW_ELEMENT  */ | 0x80 /*  NodeFilter.SHOW_COMMENT */), null, firstChild(shadowRoot), null, '', null, prefix + '  ');\n                }\n            }\n            if ((nodeType & NodeType.ELEMENT) === NodeType.ELEMENT) {\n                if (vNodeElementIndex < elementIdx) {\n                    // VNodeData needs to catch up with the elementIdx\n                    if (vNodeElementIndex === -1) {\n                        vNodeElementIndex = 0;\n                    }\n                    vData_start = vData_end;\n                    if (vData_start < vData_length) {\n                        vNodeElementIndex += howManyElementsToSkip();\n                        const shouldStoreRef = ch === VNodeDataSeparator.REFERENCE;\n                        if (shouldStoreRef) {\n                            // if we need to store the ref handle it here.\n                            needsToStoreRef = vNodeElementIndex;\n                            vData_start++;\n                            if (vData_start < vData_length) {\n                                ch = vData.charCodeAt(vData_end);\n                            }\n                            else {\n                                // assume separator on end.\n                                ch = VNodeDataSeparator.ADVANCE_1;\n                            }\n                        }\n                        vData_end = findVDataSectionEnd(vData, vData_start, vData_length);\n                    }\n                    else {\n                        vNodeElementIndex = Number.MAX_SAFE_INTEGER;\n                    }\n                }\n                // console.log(\n                //   prefix,\n                //   'ELEMENT',\n                //   nodeType,\n                //   elementIdx,\n                //   vNodeElementIndex,\n                //   (node as any).outerHTML,\n                //   elementIdx === vNodeElementIndex ? vData.substring(vData_start, vData_end) : ''\n                // );\n                if (elementIdx === vNodeElementIndex) {\n                    if (needsToStoreRef === elementIdx) {\n                        qVNodeRefs.set(elementIdx, node);\n                    }\n                    const instructions = vData.substring(vData_start, vData_end);\n                    vNodeDataMap.set(node, instructions);\n                }\n                elementIdx++;\n            }\n        } while ((node = nextNode || walker.nextNode()));\n    };\n    // Walk the tree and process each `q:container` element.\n    const walker = document.createTreeWalker(document, 0x1 /* NodeFilter.SHOW_ELEMENT  */ | 0x80 /*  NodeFilter.SHOW_COMMENT */);\n    walkContainer(walker, null, walker.firstChild(), null, '', null, '');\n}\n//# sourceMappingURL=data:application/json;base64,","/** @file Public APIs for the SSR */\nimport { assertTrue } from '../../error/assert';\nimport { getPlatform } from '../../platform/platform';\nimport { ERROR_CONTEXT, isRecoverable } from '../../render/error-handling';\nimport { EMPTY_ARRAY } from '../../util/flyweight';\nimport { throwErrorAndStop } from '../../util/log';\nimport { ELEMENT_PROPS, ELEMENT_SEQ, ELEMENT_SEQ_IDX, getQFuncs, OnRenderProp, QBaseAttr, QContainerAttr, QContainerSelector, QCtxAttr, QInstanceAttr, QScopedStyle, QSlotParent, QStyle, QStyleSelector, USE_ON_LOCAL_SEQ_IDX, } from '../../util/markers';\nimport { maybeThen } from '../../util/promises';\nimport { isSlotProp } from '../../util/prop';\nimport { qDev } from '../../util/qdev';\nimport { ChoreType } from '../shared/scheduler';\nimport { addComponentStylePrefix, convertScopedStyleIdsToArray, convertStyleIdsToString, } from '../shared/scoped-styles';\nimport { _SharedContainer } from '../shared/shared-container';\nimport { inflateQRL, parseQRL, wrapDeserializerProxy } from '../shared/shared-serialization';\nimport {} from '../shared/types';\nimport { processVNodeData } from './process-vnode-data';\nimport { VNodeFlags, VNodeProps, } from './types';\nimport { VNodeJournalOpCode, mapArray_get, mapArray_set, vnode_applyJournal, vnode_getDOMChildNodes, vnode_getDomParent, vnode_getParent, vnode_getProp, vnode_getPropStartIndex, vnode_insertBefore, vnode_isVirtualVNode, vnode_locate, vnode_newElement, vnode_newUnMaterializedElement, vnode_setProp, } from './vnode';\nimport { vnode_diff } from './vnode-diff';\n/** @public */\nexport function getDomContainer(element) {\n    const qContainerElement = _getQContainerElement(element);\n    if (!qContainerElement) {\n        throwErrorAndStop('Unable to find q:container.');\n    }\n    return getDomContainerFromQContainerElement(qContainerElement);\n}\nexport function getDomContainerFromQContainerElement(qContainerElement) {\n    const qElement = qContainerElement;\n    let container = qElement.qContainer;\n    if (!container) {\n        container = new DomContainer(qElement);\n        const containerAttributes = {};\n        if (qElement) {\n            const attrs = qElement.attributes;\n            if (attrs) {\n                for (let index = 0; index < attrs.length; index++) {\n                    const attr = attrs[index];\n                    containerAttributes[attr.name] = attr.value;\n                }\n            }\n        }\n        container.$serverData$ = { containerAttributes };\n        qElement.qContainer = container;\n    }\n    return container;\n}\n/** @internal */\nexport function _getQContainerElement(element) {\n    const qContainerElement = Array.isArray(element)\n        ? vnode_getDomParent(element)\n        : element;\n    return qContainerElement.closest(QContainerSelector);\n}\nexport const isDomContainer = (container) => {\n    return container instanceof DomContainer;\n};\n/** @internal */\nexport class DomContainer extends _SharedContainer {\n    constructor(element) {\n        super(() => this.scheduleRender(), () => vnode_applyJournal(this.$journal$), {}, element.getAttribute('q:locale'));\n        this.renderDone = Promise.resolve();\n        this.rendering = false;\n        this.$proxyMap$ = new WeakMap();\n        this.$styleIds$ = null;\n        this.$vnodeLocate$ = (id) => vnode_locate(this.rootVNode, id);\n        this.$getObjectById$ = (id) => {\n            if (typeof id === 'string') {\n                id = parseFloat(id);\n            }\n            assertTrue(id < this.$rawStateData$.length, 'Invalid reference');\n            return this.stateData[id];\n        };\n        this.qContainer = element.getAttribute(QContainerAttr);\n        if (!this.qContainer) {\n            throw new Error(\"Element must have 'q:container' attribute.\");\n        }\n        this.$journal$ = [\n            // The first time we render we need to hoist the styles.\n            // (Meaning we need to move all styles from component inline to <head>)\n            // We bulk move all of the styles, because the expensive part is\n            // for the browser to recompute the styles, (not the actual DOM manipulation.)\n            // By moving all of them at once we can minimize the reflow.\n            VNodeJournalOpCode.HoistStyles,\n            element.ownerDocument,\n        ];\n        this.document = element.ownerDocument;\n        this.element = element;\n        this.qBase = element.getAttribute(QBaseAttr);\n        this.$instanceHash$ = element.getAttribute(QInstanceAttr);\n        // this.containerState = createContainerState(element, this.qBase);\n        this.qManifestHash = element.getAttribute('q:manifest-hash');\n        this.rootVNode = vnode_newUnMaterializedElement(this.element);\n        // These are here to initialize all properties at once for single class transition\n        this.$rawStateData$ = null;\n        this.stateData = null;\n        const document = this.element.ownerDocument;\n        if (!document.qVNodeData) {\n            processVNodeData(document);\n        }\n        this.$rawStateData$ = [];\n        this.stateData = [];\n        const qwikStates = element.querySelectorAll('script[type=\"qwik/state\"]');\n        if (qwikStates.length !== 0) {\n            const lastState = qwikStates[qwikStates.length - 1];\n            this.$rawStateData$ = JSON.parse(lastState.textContent);\n            this.stateData = wrapDeserializerProxy(this, this.$rawStateData$);\n        }\n        this.$qFuncs$ = getQFuncs(document, this.$instanceHash$) || EMPTY_ARRAY;\n    }\n    $setRawState$(id, vParent) {\n        this.stateData[id] = vParent;\n    }\n    parseQRL(qrl) {\n        return inflateQRL(this, parseQRL(qrl));\n    }\n    processJsx(host, jsx) {\n        // console.log('>>>> processJsx', String(host));\n        const styleScopedId = this.getHostProp(host, QScopedStyle);\n        return vnode_diff(this, jsx, host, addComponentStylePrefix(styleScopedId));\n    }\n    handleError(err, host) {\n        if (qDev) {\n            // Clean vdom\n            if (typeof document !== 'undefined') {\n                const vHost = host;\n                const errorDiv = document.createElement('errored-host');\n                if (err && err instanceof Error) {\n                    errorDiv.props = { error: err };\n                }\n                errorDiv.setAttribute('q:key', '_error_');\n                const journal = [];\n                vnode_getDOMChildNodes(journal, vHost).forEach((child) => errorDiv.appendChild(child));\n                const vErrorDiv = vnode_newElement(errorDiv, 'error-host');\n                vnode_insertBefore(journal, vHost, vErrorDiv, null);\n                vnode_applyJournal(journal);\n            }\n            if (err && err instanceof Error) {\n                if (!('hostElement' in err)) {\n                    err['hostElement'] = host;\n                }\n            }\n            if (!isRecoverable(err)) {\n                throw err;\n            }\n        }\n        const errorStore = this.resolveContext(host, ERROR_CONTEXT);\n        if (!errorStore) {\n            throw err;\n        }\n        errorStore.error = err;\n    }\n    setContext(host, context, value) {\n        let ctx = this.getHostProp(host, QCtxAttr);\n        if (!ctx) {\n            this.setHostProp(host, QCtxAttr, (ctx = []));\n        }\n        mapArray_set(ctx, context.id, value, 0);\n    }\n    resolveContext(host, contextId) {\n        while (host) {\n            const ctx = this.getHostProp(host, QCtxAttr);\n            if (ctx) {\n                const value = mapArray_get(ctx, contextId.id, 0);\n                if (value) {\n                    return value;\n                }\n            }\n            host = this.getParentHost(host);\n        }\n        return undefined;\n    }\n    getParentHost(host) {\n        let vNode = vnode_getParent(host);\n        while (vNode) {\n            if (vnode_isVirtualVNode(vNode)) {\n                if (vnode_getProp(vNode, OnRenderProp, null) !== null) {\n                    return vNode;\n                }\n                // If virtual node, than it could be a slot so we need to read its parent.\n                const parent = vnode_getProp(vNode, QSlotParent, this.$vnodeLocate$);\n                if (parent) {\n                    vNode = parent;\n                    continue;\n                }\n            }\n            vNode = vnode_getParent(vNode);\n        }\n        return null;\n    }\n    setHostProp(host, name, value) {\n        const vNode = host;\n        vnode_setProp(vNode, name, value);\n    }\n    getHostProp(host, name) {\n        const vNode = host;\n        let getObjectById = null;\n        switch (name) {\n            case ELEMENT_SEQ:\n            case ELEMENT_PROPS:\n            case OnRenderProp:\n            case QCtxAttr:\n                getObjectById = this.$getObjectById$;\n                break;\n            case ELEMENT_SEQ_IDX:\n            case USE_ON_LOCAL_SEQ_IDX:\n                getObjectById = parseInt;\n                break;\n        }\n        return vnode_getProp(vNode, name, getObjectById);\n    }\n    scheduleRender() {\n        // console.log('>>>> scheduleRender', !!this.rendering);\n        if (!this.rendering) {\n            this.rendering = true;\n            this.renderDone = getPlatform().nextTick(() => {\n                // console.log('>>>> scheduleRender nextTick', !!this.rendering);\n                return maybeThen(this.$scheduler$(ChoreType.WAIT_FOR_ALL), () => {\n                    // console.log('>>>> scheduleRender done', !!this.rendering);\n                    this.rendering = false;\n                });\n            });\n        }\n        return this.renderDone;\n    }\n    ensureProjectionResolved(vNode) {\n        if ((vNode[VNodeProps.flags] & VNodeFlags.Resolved) === 0) {\n            vNode[VNodeProps.flags] |= VNodeFlags.Resolved;\n            for (let i = vnode_getPropStartIndex(vNode); i < vNode.length; i = i + 2) {\n                const prop = vNode[i];\n                if (isSlotProp(prop)) {\n                    const value = vNode[i + 1];\n                    if (typeof value == 'string') {\n                        vNode[i + 1] = this.$vnodeLocate$(value);\n                    }\n                }\n            }\n        }\n    }\n    getSyncFn(id) {\n        const fn = this.$qFuncs$[id];\n        assertTrue(typeof fn === 'function', 'Invalid reference: ' + id);\n        return fn;\n    }\n    $appendStyle$(content, styleId, host, scoped) {\n        if (scoped) {\n            const scopedStyleIdsString = this.getHostProp(host, QScopedStyle);\n            const scopedStyleIds = new Set(convertScopedStyleIdsToArray(scopedStyleIdsString));\n            scopedStyleIds.add(styleId);\n            this.setHostProp(host, QScopedStyle, convertStyleIdsToString(scopedStyleIds));\n        }\n        if (this.$styleIds$ == null) {\n            this.$styleIds$ = new Set();\n            this.element.querySelectorAll(QStyleSelector).forEach((style) => {\n                this.$styleIds$.add(style.getAttribute(QStyle));\n            });\n        }\n        if (!this.$styleIds$.has(styleId)) {\n            this.$styleIds$.add(styleId);\n            const styleElement = this.document.createElement('style');\n            styleElement.setAttribute(QStyle, styleId);\n            styleElement.textContent = content;\n            this.$journal$.push(VNodeJournalOpCode.Insert, this.document.head, null, styleElement);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @file\n *\n *   VNode is a DOM like API for walking the DOM but it:\n *\n *   1. Encodes virtual nodes which don't exist in the DOM\n *   2. Can serialize as part of SSR and than deserialize on the client.\n *\n *   # Virtual\n *\n *   You can think of a Virtual node just like an additional `<div>` in that it groups related child\n *   nodes together. But unlike a `<div>` which has a real DOM node and hence implications for CSS,\n *   Virtual nodes have no DOM impact, they are invisible.\n *\n *   # Portal\n *\n *   Two Virtual nodes can be linked together to form a Portal. Portals are useful for projecting\n *   content or just rendering content in a different location in the tree, while maintaining a\n *   logical relationship.\n *\n *   Portals have:\n *\n *   - Portal Source: A Virtual node which can refer to one ore more Destination Portals by name.\n *   - Destination Portal: A Virtual node which acts as a destination but also has a pointer back to the\n *       Portal Source\n *\n *   ## Example:\n *\n *   Given this code:\n *\n *   ```typescript\n *   const Parent = component$(() => {\n *     return (\n *       <Child>\n *         Projection Content\n *         <span q:slot=\"secondary\">Secondary Content</span>\n *         <span q:slot=\"other\">Other Content</span>\n *       </Child>\n *     };\n *   });\n *\n *   const Child = component$(() => {\n *     return (\n *       <div>\n *         <Slot>Default Primary</Slot>\n *         <Slot name=\"secondary\">Default Secondary</Slot>\n *       </div>\n *     );\n *   });\n *\n *   render(<body><main><Parent/></main><body>);\n * ```\n *\n *   Will render like so:\n *\n *   ```html\n *   <body>\n *     <main>\n *       <Virtual Parent q:portal=\":3A;secondary:3B;other:5A\" q:id=\"2A\">\n *         <Virtual Child>\n *           <div>\n *             <Virtual Slot q:id=\"3A\" q:portal=\"^:2A;:3A\"> Projection Content </Virtual>\n *             <Virtual Slot q:id=\"3B\" q:portal=\"^:2A;:3B\">\n *               <span q:slot=\"secondary\">Secondary Content</span>\n *             </Virtual>\n *           </div>\n *         </Virtual>\n *       </Virtual>\n *     </main>\n *     <q:template>\n *       <Virtual q:portal=\"^:2A\" q:id=\"5A\">\n *         <span q:slot=\"other\">Other Content</span>\n *       </Virtual>\n *       <Virtual q:portal=\"^:2A\" q:id=\"3A\">\n *         Default Primary\n *       </Virtual>\n *       <Virtual q:portal=\"^:2A\" q:id=\"3B\">\n *         Default Secondary\n *       </Virtual>\n *     <q:template>\n *   </body>\n * ```\n *\n *   Explanation:\n *\n *   - `q:portal=\":3A;secondary:3B;other:5A\"`\n *\n *       - Name: ``; Ref: `3A` - Where the default content went.\n *       - Name: `secondary`; Ref: `3B` - Where the 'secondary' content went.\n *       - Name: `other`; Ref: `%A` - Where the `other` content went. (Notice in this case the content is\n *               left over and os it ends up en the `q:templates`. We can share one '<q:template>`\n *               for all left over content.)\n *   - `q:portal=\"^:2A;:3A\"`\n *\n *       - Name: `^`; Ref: `2A` - Special pointer to the parent portal\n *       - Name: ``; Ref: `3A` - Location of the default content in case there is nothing projected here.\n *\n *   ## Rendering\n *\n *   During SSR, the rendered can delay rendering the JSX nodes until correct portal comes up. The ID\n *   system is already can make lazy references to the Nodes.\n *\n *   Client side rendering does not need to deal with IDs or `<q:template>` as un-rendered vNodes do\n *   not need to be serialized into DOM, and can remain on heap.\n *\n *   ## Context\n *\n *   When looking up context it is possible to follow you real render parents or follow the portals.\n *   All information is encoded in the portals.\n *\n *   ## Slot Projection\n *\n *   The ultimate user of portals is Slot projection. But the vNode do not understand slots, rather\n *   they understand portal primitives which makes Slot implementation much simpler.\n *\n *   NOTE: The portals need to have IDs during serialization only. Once runtime takes over, there is\n *   no need to have IDs or to write overflow to the `<q:template>`\n */\nimport { isDev } from '@builder.io/qwik/build';\nimport { assertDefined, assertEqual, assertFalse, assertTrue } from '../../error/assert';\nimport { isQrl } from '../../qrl/qrl-class';\nimport { dangerouslySetInnerHTML } from '../../render/execute-component';\nimport { isText } from '../../util/element';\nimport { throwErrorAndStop } from '../../util/log';\nimport { ELEMENT_ID, ELEMENT_KEY, ELEMENT_PROPS, ELEMENT_SEQ, ELEMENT_SEQ_IDX, OnRenderProp, QContainerAttr, QContainerAttrEnd, QContainerIsland, QContainerIslandEnd, QCtxAttr, QIgnore, QIgnoreEnd, QScopedStyle, QSlot, QSlotParent, QSlotRef, QStyle, QStylesAllSelector, } from '../../util/markers';\nimport { isHtmlElement } from '../../util/types';\nimport { DEBUG_TYPE, QContainerValue, VirtualType, VirtualTypeName } from '../shared/types';\nimport { VNodeDataChar } from '../shared/vnode-data-types';\nimport { getDomContainer, _getQContainerElement } from './dom-container';\nimport { ElementVNodeProps, TextVNodeProps, VNodeFlags, VNodeFlagsIndex, VNodeProps, VirtualVNodeProps, } from './types';\nimport { vnode_getDomChildrenWithCorrectNamespacesToInsert, vnode_getElementNamespaceFlags, } from './vnode-namespace';\nimport { escapeHTML } from '../shared/character-escaping';\nimport { SignalImpl } from '../../state/signal';\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * Fundamental DOM operations are:\n *\n * - Insert new DOM element/text\n * - Remove DOM element/text\n * - Set DOM element attributes\n * - Set text node value\n */\nexport var VNodeJournalOpCode;\n(function (VNodeJournalOpCode) {\n    VNodeJournalOpCode[VNodeJournalOpCode[\"SetText\"] = 1] = \"SetText\";\n    VNodeJournalOpCode[VNodeJournalOpCode[\"SetAttribute\"] = 2] = \"SetAttribute\";\n    VNodeJournalOpCode[VNodeJournalOpCode[\"HoistStyles\"] = 3] = \"HoistStyles\";\n    VNodeJournalOpCode[VNodeJournalOpCode[\"Remove\"] = 4] = \"Remove\";\n    VNodeJournalOpCode[VNodeJournalOpCode[\"Insert\"] = 5] = \"Insert\";\n})(VNodeJournalOpCode || (VNodeJournalOpCode = {}));\n//////////////////////////////////////////////////////////////////////////////////////////////////////\nexport const vnode_newElement = (element, elementName) => {\n    assertEqual(fastNodeType(element), 1 /* ELEMENT_NODE */, 'Expecting element node.');\n    const vnode = VNodeArray.createElement(VNodeFlags.Element | VNodeFlags.Inflated | (-1 << VNodeFlagsIndex.shift), // Flag\n    null, null, null, null, null, element, elementName);\n    assertTrue(vnode_isElementVNode(vnode), 'Incorrect format of ElementVNode.');\n    assertFalse(vnode_isTextVNode(vnode), 'Incorrect format of ElementVNode.');\n    assertFalse(vnode_isVirtualVNode(vnode), 'Incorrect format of ElementVNode.');\n    return vnode;\n};\nexport const vnode_newUnMaterializedElement = (element) => {\n    assertEqual(fastNodeType(element), 1 /* ELEMENT_NODE */, 'Expecting element node.');\n    const vnode = VNodeArray.createElement(VNodeFlags.Element | (-1 << VNodeFlagsIndex.shift), // Flag\n    null, null, null, undefined, undefined, element, undefined);\n    assertTrue(vnode_isElementVNode(vnode), 'Incorrect format of ElementVNode.');\n    assertFalse(vnode_isTextVNode(vnode), 'Incorrect format of ElementVNode.');\n    assertFalse(vnode_isVirtualVNode(vnode), 'Incorrect format of ElementVNode.');\n    return vnode;\n};\nexport const vnode_newSharedText = (previousTextNode, sharedTextNode, textContent) => {\n    sharedTextNode &&\n        assertEqual(fastNodeType(sharedTextNode), 3 /* TEXT_NODE */, 'Expecting element node.');\n    const vnode = VNodeArray.createText(VNodeFlags.Text | (-1 << VNodeFlagsIndex.shift), // Flag\n    null, // Parent\n    previousTextNode, // Previous TextNode (usually first child)\n    null, // Next sibling\n    sharedTextNode, // SharedTextNode\n    textContent // Text Content\n    );\n    assertFalse(vnode_isElementVNode(vnode), 'Incorrect format of TextVNode.');\n    assertTrue(vnode_isTextVNode(vnode), 'Incorrect format of TextVNode.');\n    assertFalse(vnode_isVirtualVNode(vnode), 'Incorrect format of TextVNode.');\n    return vnode;\n};\nexport const vnode_newText = (textNode, textContent) => {\n    const vnode = VNodeArray.createText(VNodeFlags.Text | VNodeFlags.Inflated | (-1 << VNodeFlagsIndex.shift), // Flags\n    null, // Parent\n    null, // No previous sibling\n    null, // We may have a next sibling.\n    textNode, // TextNode\n    textContent // Text Content\n    );\n    assertEqual(fastNodeType(textNode), 3 /* TEXT_NODE */, 'Expecting element node.');\n    assertFalse(vnode_isElementVNode(vnode), 'Incorrect format of TextVNode.');\n    assertTrue(vnode_isTextVNode(vnode), 'Incorrect format of TextVNode.');\n    assertFalse(vnode_isVirtualVNode(vnode), 'Incorrect format of TextVNode.');\n    return vnode;\n};\nexport const vnode_newVirtual = () => {\n    const vnode = VNodeArray.createVirtual(VNodeFlags.Virtual | (-1 << VNodeFlagsIndex.shift), // Flags\n    null, null, null, null, null);\n    assertFalse(vnode_isElementVNode(vnode), 'Incorrect format of TextVNode.');\n    assertFalse(vnode_isTextVNode(vnode), 'Incorrect format of TextVNode.');\n    assertTrue(vnode_isVirtualVNode(vnode), 'Incorrect format of TextVNode.');\n    return vnode;\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////\nexport const vnode_isVNode = (vNode) => {\n    return vNode instanceof VNodeArray;\n    // if (Array.isArray(vNode) && vNode.length > 0) {\n    //   const flag = (vNode as VNode)[VNodeProps.flags];\n    //   return typeof flag === 'number' && (flag & VNodeFlags.TYPE_MASK) !== 0;\n    // }\n    // return false;\n};\nexport const vnode_isElementVNode = (vNode) => {\n    assertDefined(vNode, 'Missing vNode');\n    const flag = vNode[VNodeProps.flags];\n    return (flag & VNodeFlags.Element) === VNodeFlags.Element;\n};\nexport const vnode_isElementOrTextVNode = (vNode) => {\n    assertDefined(vNode, 'Missing vNode');\n    const flag = vNode[VNodeProps.flags];\n    return (flag & VNodeFlags.ELEMENT_OR_TEXT_MASK) !== 0;\n};\nexport const vnode_isElementOrVirtualVNode = (vNode) => {\n    assertDefined(vNode, 'Missing vNode');\n    const flag = vNode[VNodeProps.flags];\n    return (flag & VNodeFlags.ELEMENT_OR_VIRTUAL_MASK) !== 0;\n};\nexport const vnode_isMaterialized = (vNode) => {\n    assertDefined(vNode, 'Missing vNode');\n    const flag = vNode[VNodeProps.flags];\n    return ((flag & VNodeFlags.Element) === VNodeFlags.Element &&\n        vNode[ElementVNodeProps.firstChild] !== undefined &&\n        vNode[ElementVNodeProps.lastChild] !== undefined);\n};\nexport const vnode_isTextVNode = (vNode) => {\n    assertDefined(vNode, 'Missing vNode');\n    const flag = vNode[VNodeProps.flags];\n    return (flag & VNodeFlags.Text) === VNodeFlags.Text;\n};\nexport const vnode_isVirtualVNode = (vNode) => {\n    assertDefined(vNode, 'Missing vNode');\n    const flag = vNode[VNodeProps.flags];\n    return (flag & VNodeFlags.Virtual) === VNodeFlags.Virtual;\n};\nconst ensureTextVNode = (vNode) => {\n    assertTrue(vnode_isTextVNode(vNode), 'Expecting TextVNode was: ' + vnode_getNodeTypeName(vNode));\n    return vNode;\n};\nconst ensureElementOrVirtualVNode = (vNode) => {\n    assertDefined(vNode, 'Missing vNode');\n    assertTrue((vNode[VNodeProps.flags] & VNodeFlags.ELEMENT_OR_VIRTUAL_MASK) !== 0, 'Expecting ElementVNode or VirtualVNode was: ' + vnode_getNodeTypeName(vNode));\n};\nexport const ensureElementVNode = (vNode) => {\n    assertTrue(vnode_isElementVNode(vNode), 'Expecting ElementVNode was: ' + vnode_getNodeTypeName(vNode));\n    return vNode;\n};\nexport const vnode_getNodeTypeName = (vNode) => {\n    if (vNode) {\n        const flags = vNode[VNodeProps.flags];\n        switch (flags & VNodeFlags.TYPE_MASK) {\n            case VNodeFlags.Element:\n                return 'Element';\n            case VNodeFlags.Virtual:\n                return 'Virtual';\n            case VNodeFlags.Text:\n                return 'Text';\n        }\n    }\n    return '<unknown>';\n};\nexport const vnode_ensureElementInflated = (vnode) => {\n    const flags = vnode[VNodeProps.flags];\n    if ((flags & VNodeFlags.INFLATED_TYPE_MASK) === VNodeFlags.Element) {\n        const elementVNode = vnode;\n        elementVNode[VNodeProps.flags] ^= VNodeFlags.Inflated;\n        const element = elementVNode[ElementVNodeProps.element];\n        const attributes = element.attributes;\n        for (let idx = 0; idx < attributes.length; idx++) {\n            const attr = attributes[idx];\n            const key = attr.name;\n            if (key == ':' || !key) {\n                // SVG in Domino does not support ':' so it becomes an empty string.\n                // all attributes after the ':' are considered immutable, and so we ignore them.\n                break;\n            }\n            else if (key.startsWith(QContainerAttr)) {\n                if (attr.value === QContainerValue.HTML) {\n                    mapArray_set(elementVNode, dangerouslySetInnerHTML, element.innerHTML, ElementVNodeProps.PROPS_OFFSET);\n                }\n                else if (attr.value === QContainerValue.TEXT && 'value' in element) {\n                    mapArray_set(elementVNode, 'value', element.value, ElementVNodeProps.PROPS_OFFSET);\n                }\n            }\n            else if (!key.startsWith('on:')) {\n                const value = attr.value;\n                mapArray_set(elementVNode, key, value, ElementVNodeProps.PROPS_OFFSET);\n            }\n        }\n    }\n};\n/** Walks the VNode tree and materialize it using `vnode_getFirstChild`. */\nexport function vnode_walkVNode(vNode) {\n    let vCursor = vNode;\n    // Depth first traversal\n    if (vnode_isTextVNode(vNode)) {\n        // Text nodes don't have subscriptions or children;\n        return;\n    }\n    let vParent = null;\n    do {\n        const vFirstChild = vnode_getFirstChild(vCursor);\n        if (vFirstChild) {\n            vCursor = vFirstChild;\n            continue;\n        }\n        // Out of children\n        if (vCursor === vNode) {\n            // we are where we started, this means that vNode has no children, so we are done.\n            return;\n        }\n        // Out of children, go to next sibling\n        const vNextSibling = vnode_getNextSibling(vCursor);\n        if (vNextSibling) {\n            vCursor = vNextSibling;\n            continue;\n        }\n        // Out of siblings, go to parent\n        vParent = vnode_getParent(vCursor);\n        while (vParent) {\n            if (vParent === vNode) {\n                // We are back where we started, we are done.\n                return;\n            }\n            const vNextParentSibling = vnode_getNextSibling(vParent);\n            if (vNextParentSibling) {\n                vCursor = vNextParentSibling;\n                break;\n            }\n            vParent = vnode_getParent(vParent);\n        }\n        if (vParent == null) {\n            // We are done.\n            return;\n        }\n    } while (true);\n}\nexport function vnode_getDOMChildNodes(journal, root, isVNode = false, childNodes = []) {\n    if (vnode_isElementOrTextVNode(root)) {\n        if (vnode_isTextVNode(root)) {\n            /**\n             * If we are collecting text nodes, we need to ensure that they are inflated. If not inflated\n             * we would return a single text node which represents many actual text nodes, or removing a\n             * single text node would remove many text nodes.\n             */\n            vnode_ensureTextInflated(journal, root);\n        }\n        childNodes.push(isVNode ? root : vnode_getNode(root));\n        return childNodes;\n    }\n    let vNode = vnode_getFirstChild(root);\n    while (vNode) {\n        if (vnode_isElementVNode(vNode)) {\n            childNodes.push(isVNode ? vNode : vnode_getNode(vNode));\n        }\n        else if (vnode_isTextVNode(vNode)) {\n            /**\n             * If we are collecting text nodes, we need to ensure that they are inflated. If not inflated\n             * we would return a single text node which represents many actual text nodes, or removing a\n             * single text node would remove many text nodes.\n             */\n            vnode_ensureTextInflated(journal, vNode);\n            childNodes.push(isVNode ? vNode : vnode_getNode(vNode));\n        }\n        else {\n            isVNode\n                ? vnode_getDOMChildNodes(journal, vNode, true, childNodes)\n                : vnode_getDOMChildNodes(journal, vNode, false, childNodes);\n        }\n        vNode = vnode_getNextSibling(vNode);\n    }\n    return childNodes;\n}\n/**\n * Returns the previous/next sibling but from the point of view of the DOM.\n *\n * Given:\n *\n * ```\n * <div>\n *   <>a</>\n *   <>\n *     <></>\n *     <>b</>\n *     <></>\n *   </>\n *   <>c</>\n * </div>\n * ```\n *\n * Then:\n *\n * - Next: if we start at `a` the next DOM sibling is `b`, than `c`.\n * - Previous: if we start at `c` the next DOM sibling is `b`, than `a`.\n *\n * @param vNode - Starting node\n * @param nextDirection - Direction to search true=next, false=previous\n * @param descend - If true, than we will descend into the children first.\n * @returns\n */\nconst vnode_getDomSibling = (vNode, nextDirection, descend) => {\n    const childProp = nextDirection ? VirtualVNodeProps.firstChild : VirtualVNodeProps.lastChild;\n    const siblingProp = nextDirection ? VNodeProps.nextSibling : VNodeProps.previousSibling;\n    let cursor = vNode;\n    // first make sure we have a DOM node or no children.\n    while (descend && cursor && vnode_isVirtualVNode(cursor)) {\n        const child = cursor[childProp];\n        if (!child) {\n            break;\n        }\n        if (child[VNodeProps.flags] & VNodeFlags.ELEMENT_OR_TEXT_MASK) {\n            return child;\n        }\n        cursor = child;\n    }\n    while (cursor) {\n        // Look at the previous/next sibling.\n        let sibling = cursor[siblingProp];\n        if (sibling && sibling[VNodeProps.flags] & VNodeFlags.ELEMENT_OR_TEXT_MASK) {\n            // we found a previous/next DOM node, return it.\n            return sibling;\n        }\n        else if (!sibling) {\n            // If we don't have a sibling than walk up the tree until you find one.\n            let virtual = cursor[VNodeProps.parent];\n            if (virtual && !vnode_isVirtualVNode(virtual)) {\n                return null;\n            }\n            while (virtual && !(sibling = virtual[siblingProp])) {\n                virtual = virtual[VNodeProps.parent];\n                if (virtual && !vnode_isVirtualVNode(virtual)) {\n                    // the parent node is not virtual, so we are done here.\n                    return null;\n                }\n            }\n            if (!sibling) {\n                // If we did not find a sibling, than we are done.\n                return null;\n            }\n            if (vnode_isTextVNode(sibling) && virtual && vnode_isElementVNode(virtual)) {\n                // sibling to the real element is a text node, this is not a sibling\n                return null;\n            }\n        }\n        // At this point `sibling` is a next node to look at.\n        // Next step is to descend until we find a DOM done.\n        while (sibling) {\n            cursor = sibling;\n            if (cursor[VNodeProps.flags] & VNodeFlags.ELEMENT_OR_TEXT_MASK && vnode_getNode(cursor)) {\n                // we have to check that we actually have a node, because it could be a text node which is\n                // zero length and which does not have a representation in the DOM.\n                return cursor;\n            }\n            sibling = cursor[childProp];\n        }\n        // If we are here we did not find anything and we need to go up the tree again.\n    }\n    return null;\n};\nconst vnode_ensureInflatedIfText = (journal, vNode) => {\n    if (vnode_isTextVNode(vNode)) {\n        vnode_ensureTextInflated(journal, vNode);\n    }\n};\nconst vnode_ensureTextInflated = (journal, vnode) => {\n    const textVNode = ensureTextVNode(vnode);\n    const flags = textVNode[VNodeProps.flags];\n    if ((flags & VNodeFlags.Inflated) === 0) {\n        const parentNode = vnode_getDomParent(vnode);\n        const sharedTextNode = textVNode[TextVNodeProps.node];\n        const doc = parentNode.ownerDocument;\n        // Walk the previous siblings and inflate them.\n        let cursor = vnode_getDomSibling(vnode, false, true);\n        // If text node is 0 length, than there is no text node.\n        // In that case we use the next node as a reference, in which\n        // case we know that the next node MUST be either NULL or an Element.\n        const insertBeforeNode = sharedTextNode ||\n            (vnode_getDomSibling(vnode, true, true)?.[ElementVNodeProps.element] || null);\n        let lastPreviousTextNode = insertBeforeNode;\n        while (cursor && vnode_isTextVNode(cursor)) {\n            if ((cursor[VNodeProps.flags] & VNodeFlags.Inflated) === 0) {\n                const textNode = doc.createTextNode(cursor[TextVNodeProps.text]);\n                journal.push(VNodeJournalOpCode.Insert, parentNode, lastPreviousTextNode, textNode);\n                lastPreviousTextNode = textNode;\n                cursor[TextVNodeProps.node] = textNode;\n                cursor[VNodeProps.flags] |= VNodeFlags.Inflated;\n            }\n            cursor = vnode_getDomSibling(cursor, false, true);\n        }\n        // Walk the next siblings and inflate them.\n        cursor = vnode;\n        while (cursor && vnode_isTextVNode(cursor)) {\n            const next = vnode_getDomSibling(cursor, true, true);\n            const isLastNode = next ? !vnode_isTextVNode(next) : true;\n            if ((cursor[VNodeProps.flags] & VNodeFlags.Inflated) === 0) {\n                if (isLastNode && sharedTextNode) {\n                    journal.push(VNodeJournalOpCode.SetText, sharedTextNode, cursor[TextVNodeProps.text]);\n                }\n                else {\n                    const textNode = doc.createTextNode(cursor[TextVNodeProps.text]);\n                    journal.push(VNodeJournalOpCode.Insert, parentNode, insertBeforeNode, textNode);\n                    cursor[TextVNodeProps.node] = textNode;\n                }\n                cursor[VNodeProps.flags] |= VNodeFlags.Inflated;\n            }\n            cursor = next;\n        }\n    }\n};\nexport const vnode_locate = (rootVNode, id) => {\n    ensureElementVNode(rootVNode);\n    let vNode = rootVNode;\n    const containerElement = rootVNode[ElementVNodeProps.element];\n    const { qVNodeRefs } = containerElement;\n    let elementOffset = -1;\n    let refElement;\n    if (typeof id === 'string') {\n        assertDefined(qVNodeRefs, 'Missing qVNodeRefs.');\n        elementOffset = parseInt(id);\n        refElement = qVNodeRefs.get(elementOffset);\n    }\n    else {\n        refElement = id;\n    }\n    assertDefined(refElement, 'Missing refElement.');\n    if (!vnode_isVNode(refElement)) {\n        assertTrue(containerElement.contains(refElement), `Couldn't find the element inside the container while locating the VNode.`);\n        // We need to find the vnode.\n        let parent = refElement;\n        const elementPath = [refElement];\n        while (parent && parent !== containerElement) {\n            parent = parent.parentElement;\n            elementPath.push(parent);\n        }\n        // Start at rootVNode and follow the `elementPath` to find the vnode.\n        for (let i = elementPath.length - 2; i >= 0; i--) {\n            vNode = vnode_getVNodeForChildNode(vNode, elementPath[i]);\n        }\n        elementOffset != -1 && qVNodeRefs.set(elementOffset, vNode);\n    }\n    else {\n        vNode = refElement;\n    }\n    if (typeof id === 'string') {\n        // process virtual node search.\n        const idLength = id.length;\n        let idx = indexOfAlphanumeric(id, idLength);\n        let childIdx = 0;\n        while (idx < idLength) {\n            const ch = id.charCodeAt(idx);\n            childIdx *= 26 /* a-z */;\n            if (ch >= 97 /* a */) {\n                // is lowercase\n                childIdx += ch - 97 /* a */;\n            }\n            else {\n                // is uppercase\n                childIdx += ch - 65 /* A */;\n                vNode = vnode_getChildWithIdx(vNode, childIdx);\n                childIdx = 0;\n            }\n            idx++;\n        }\n    }\n    return vNode;\n};\nconst vnode_getChildWithIdx = (vNode, childIdx) => {\n    let child = vnode_getFirstChild(vNode);\n    assertDefined(child, 'Missing child.');\n    while (child[VNodeProps.flags] >>> VNodeFlagsIndex.shift !== childIdx) {\n        child = vnode_getNextSibling(child);\n        assertDefined(child, 'Missing child.');\n    }\n    return child;\n};\nconst vNodeStack = [];\nexport const vnode_getVNodeForChildNode = (vNode, childElement) => {\n    ensureElementVNode(vNode);\n    let child = vnode_getFirstChild(vNode);\n    assertDefined(child, 'Missing child.');\n    // console.log(\n    //   'SEARCHING',\n    //   child[VNodeProps.flags],\n    //   child[VNodeProps.node]?.outerHTML,\n    //   childNode.outerHTML\n    // );\n    while (child && child[ElementVNodeProps.element] !== childElement) {\n        // console.log('CHILD', child[VNodeProps.node]?.outerHTML, childNode.outerHTML);\n        if (vnode_isVirtualVNode(child)) {\n            const next = vnode_getNextSibling(child);\n            const firstChild = vnode_getFirstChild(child);\n            if (firstChild) {\n                next && vNodeStack.push(next);\n                child = firstChild;\n            }\n            else {\n                child = next || (vNodeStack.length ? vNodeStack.pop() : null);\n            }\n        }\n        else {\n            const next = vnode_getNextSibling(child);\n            if (next) {\n                child = next;\n            }\n            else {\n                child = next || vNodeStack.pop();\n            }\n        }\n        assertDefined(child, 'Missing child.');\n    }\n    while (vNodeStack.length) {\n        vNodeStack.pop();\n    }\n    ensureElementVNode(child);\n    assertEqual(child[ElementVNodeProps.element], childElement, 'Child not found.');\n    // console.log('FOUND', child[VNodeProps.node]?.outerHTML);\n    return child;\n};\nconst indexOfAlphanumeric = (id, length) => {\n    let idx = 0;\n    while (idx < length) {\n        if (id.charCodeAt(idx) <= 57 /* 9 */) {\n            idx++;\n        }\n        else {\n            return idx;\n        }\n    }\n    return length;\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////\nexport const vnode_journalToString = (journal) => {\n    const lines = ['JOURNAL:'];\n    let idx = 0;\n    const length = journal.length;\n    function stringify(...args) {\n        lines.push('  ' +\n            args\n                .map((arg) => {\n                if (typeof arg === 'string') {\n                    return arg;\n                }\n                else if (arg && isHtmlElement(arg)) {\n                    const html = arg.outerHTML;\n                    const idx = html.indexOf('>');\n                    return '\\n    ' + (idx > 0 ? html.substring(0, idx + 1) : html);\n                }\n                else if (arg && isText(arg)) {\n                    return JSON.stringify(arg.nodeValue);\n                }\n                else {\n                    return String(arg);\n                }\n            })\n                .join(' '));\n    }\n    while (idx < length) {\n        const op = journal[idx++];\n        switch (op) {\n            case VNodeJournalOpCode.SetText:\n                stringify('SetText', journal[idx++], journal[idx++]);\n                break;\n            case VNodeJournalOpCode.SetAttribute:\n                stringify('SetAttribute', journal[idx++], journal[idx++], journal[idx++]);\n                break;\n            case VNodeJournalOpCode.HoistStyles:\n                stringify('HoistStyles');\n                break;\n            case VNodeJournalOpCode.Remove:\n                stringify('Remove', journal[idx++]);\n                let nodeToRemove;\n                while (idx < length && typeof (nodeToRemove = journal[idx]) !== 'number') {\n                    stringify('  ', nodeToRemove);\n                    idx++;\n                }\n                break;\n            case VNodeJournalOpCode.Insert:\n                stringify('Insert', journal[idx++], journal[idx++]);\n                let newChild;\n                while (idx < length && typeof (newChild = journal[idx]) !== 'number') {\n                    stringify('  ', newChild);\n                    idx++;\n                }\n                break;\n        }\n    }\n    lines.push('END JOURNAL');\n    return lines.join('\\n');\n};\nconst parseBoolean = (value) => {\n    if (value === 'false') {\n        return false;\n    }\n    return Boolean(value);\n};\nconst isBooleanAttr = (element, key) => {\n    const isBoolean = key == 'allowfullscreen' ||\n        key == 'async' ||\n        key == 'autofocus' ||\n        key == 'autoplay' ||\n        key == 'checked' ||\n        key == 'controls' ||\n        key == 'default' ||\n        key == 'defer' ||\n        key == 'disabled' ||\n        key == 'formnovalidate' ||\n        key == 'inert' ||\n        key == 'ismap' ||\n        key == 'itemscope' ||\n        key == 'loop' ||\n        key == 'multiple' ||\n        key == 'muted' ||\n        key == 'nomodule' ||\n        key == 'novalidate' ||\n        key == 'open' ||\n        key == 'playsinline' ||\n        key == 'readonly' ||\n        key == 'required' ||\n        key == 'reversed' ||\n        key == 'selected';\n    return isBoolean && key in element;\n};\nexport const vnode_applyJournal = (journal) => {\n    // console.log('APPLY JOURNAL', vnode_journalToString(journal));\n    let idx = 0;\n    const length = journal.length;\n    while (idx < length) {\n        const op = journal[idx++];\n        switch (op) {\n            case VNodeJournalOpCode.SetText:\n                const text = journal[idx++];\n                text.nodeValue = journal[idx++];\n                break;\n            case VNodeJournalOpCode.SetAttribute:\n                const element = journal[idx++];\n                let key = journal[idx++];\n                if (key === 'className') {\n                    key = 'class';\n                }\n                const value = journal[idx++];\n                if (isBooleanAttr(element, key)) {\n                    element[key] = parseBoolean(value);\n                }\n                else if (key === 'value' && key in element) {\n                    element.value = escapeHTML(String(value));\n                }\n                else if (key === dangerouslySetInnerHTML) {\n                    element.innerHTML = value;\n                }\n                else {\n                    if (value == null || value === false) {\n                        element.removeAttribute(key);\n                    }\n                    else {\n                        element.setAttribute(key, String(value));\n                    }\n                }\n                break;\n            case VNodeJournalOpCode.HoistStyles:\n                const document = journal[idx++];\n                const head = document.head;\n                const styles = document.querySelectorAll(QStylesAllSelector);\n                for (let i = 0; i < styles.length; i++) {\n                    head.appendChild(styles[i]);\n                }\n                break;\n            case VNodeJournalOpCode.Remove:\n                const removeParent = journal[idx++];\n                let nodeToRemove;\n                while (idx < length && typeof (nodeToRemove = journal[idx]) !== 'number') {\n                    removeParent.removeChild(nodeToRemove);\n                    idx++;\n                }\n                break;\n            case VNodeJournalOpCode.Insert:\n                const insertParent = journal[idx++];\n                const insertBefore = journal[idx++];\n                let newChild;\n                while (idx < length && typeof (newChild = journal[idx]) !== 'number') {\n                    insertParent.insertBefore(newChild, insertBefore);\n                    idx++;\n                }\n                break;\n        }\n    }\n    journal.length = 0;\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////\nexport const mapApp_findIndx = (elementVNode, key, start) => {\n    assertTrue(start % 2 === 0, 'Expecting even number.');\n    let bottom = start >> 1;\n    let top = (elementVNode.length - 2) >> 1;\n    while (bottom <= top) {\n        const mid = bottom + ((top - bottom) >> 1);\n        const midKey = elementVNode[mid << 1];\n        if (midKey === key) {\n            return mid << 1;\n        }\n        if (midKey < key) {\n            bottom = mid + 1;\n        }\n        else {\n            top = mid - 1;\n        }\n    }\n    return (bottom << 1) ^ -1;\n};\nexport const mapArray_set = (elementVNode, key, value, start) => {\n    const indx = mapApp_findIndx(elementVNode, key, start);\n    if (indx >= 0) {\n        if (value == null) {\n            elementVNode.splice(indx, 2);\n        }\n        else {\n            elementVNode[indx + 1] = value;\n        }\n    }\n    else if (value != null) {\n        elementVNode.splice(indx ^ -1, 0, key, value);\n    }\n};\nexport const mapApp_remove = (elementVNode, key, start) => {\n    const indx = mapApp_findIndx(elementVNode, key, start);\n    let value = null;\n    if (indx >= 0) {\n        value = elementVNode[indx + 1];\n        elementVNode.splice(indx, 2);\n        return value;\n    }\n    return value;\n};\nexport const mapArray_get = (elementVNode, key, start) => {\n    const indx = mapApp_findIndx(elementVNode, key, start);\n    if (indx >= 0) {\n        return elementVNode[indx + 1];\n    }\n    else {\n        return null;\n    }\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////\nexport const vnode_insertBefore = (journal, parent, newChild, insertBefore) => {\n    ensureElementOrVirtualVNode(parent);\n    if (vnode_isElementVNode(parent)) {\n        ensureMaterialized(parent);\n    }\n    let adjustedInsertBefore = null;\n    if (insertBefore == null) {\n        if (vnode_isVirtualVNode(parent)) {\n            // If `insertBefore` is null, than we need to insert at the end of the list.\n            // Well, not quite. If the parent is a virtual node, our \"last node\" is not the same\n            // as the DOM \"last node\". So in that case we need to look for the \"next node\" from\n            // our parent.\n            adjustedInsertBefore = vnode_getDomSibling(parent, true, false);\n        }\n    }\n    else if (vnode_isVirtualVNode(insertBefore)) {\n        // If the `insertBefore` is virtual, than we need to descend into the virtual and find e actual\n        adjustedInsertBefore = vnode_getDomSibling(insertBefore, true, true);\n    }\n    else {\n        adjustedInsertBefore = insertBefore;\n    }\n    adjustedInsertBefore && vnode_ensureInflatedIfText(journal, adjustedInsertBefore);\n    // If `insertBefore` is null, than we need to insert at the end of the list.\n    // Well, not quite. If the parent is a virtual node, our \"last node\" is not the same\n    // as the DOM \"last node\". So in that case we need to look for the \"next node\" from\n    // our parent.\n    // const shouldWeUseParentVirtual = insertBefore == null && vnode_isVirtualVNode(parent);\n    // const insertBeforeNode = shouldWeUseParentVirtual\n    //   ? vnode_getDomSibling(parent, true)\n    //   : insertBefore;\n    const domParentVNode = vnode_getDomParentVNode(parent);\n    const parentNode = domParentVNode && domParentVNode[ElementVNodeProps.element];\n    if (parentNode) {\n        const domChildren = vnode_getDomChildrenWithCorrectNamespacesToInsert(journal, domParentVNode, newChild);\n        domChildren.length &&\n            journal.push(VNodeJournalOpCode.Insert, parentNode, vnode_getNode(adjustedInsertBefore), ...domChildren);\n    }\n    // ensure that the previous node is unlinked.\n    const newChildCurrentParent = newChild[VNodeProps.parent];\n    if (newChildCurrentParent &&\n        (newChild[VNodeProps.previousSibling] ||\n            newChild[VNodeProps.nextSibling] ||\n            (vnode_isElementVNode(newChildCurrentParent) && newChildCurrentParent !== parent))) {\n        vnode_remove(journal, newChildCurrentParent, newChild, false);\n    }\n    // link newChild into the previous/next list\n    const vNext = insertBefore;\n    const vPrevious = vNext\n        ? vNext[VNodeProps.previousSibling]\n        : parent[ElementVNodeProps.lastChild];\n    if (vNext) {\n        vNext[VNodeProps.previousSibling] = newChild;\n    }\n    else {\n        parent[ElementVNodeProps.lastChild] = newChild;\n    }\n    if (vPrevious) {\n        vPrevious[VNodeProps.nextSibling] = newChild;\n    }\n    else {\n        parent[ElementVNodeProps.firstChild] = newChild;\n    }\n    newChild[VNodeProps.previousSibling] = vPrevious;\n    newChild[VNodeProps.nextSibling] = vNext;\n    newChild[VNodeProps.parent] = parent;\n};\nexport const vnode_getDomParent = (vnode) => {\n    vnode = vnode_getDomParentVNode(vnode);\n    return (vnode && vnode[ElementVNodeProps.element]);\n};\nexport const vnode_getDomParentVNode = (vnode) => {\n    while (vnode && !vnode_isElementVNode(vnode)) {\n        vnode = vnode[VNodeProps.parent];\n    }\n    return vnode;\n};\nexport const vnode_remove = (journal, vParent, vToRemove, removeDOM) => {\n    assertEqual(vParent, vnode_getParent(vToRemove), 'Parent mismatch.');\n    if (vnode_isTextVNode(vToRemove)) {\n        vnode_ensureTextInflated(journal, vToRemove);\n    }\n    const vPrevious = vToRemove[VNodeProps.previousSibling];\n    const vNext = vToRemove[VNodeProps.nextSibling];\n    if (vPrevious) {\n        vPrevious[VNodeProps.nextSibling] = vNext;\n    }\n    else {\n        vParent[ElementVNodeProps.firstChild] = vNext;\n    }\n    if (vNext) {\n        vNext[VNodeProps.previousSibling] = vPrevious;\n    }\n    else {\n        vParent[ElementVNodeProps.lastChild] = vPrevious;\n    }\n    vToRemove[VNodeProps.previousSibling] = null;\n    vToRemove[VNodeProps.nextSibling] = null;\n    if (removeDOM) {\n        const domParent = vnode_getDomParent(vParent);\n        const isInnerHTMLParent = vnode_getAttr(vParent, dangerouslySetInnerHTML);\n        if (isInnerHTMLParent) {\n            // ignore children, as they are inserted via innerHTML\n            return;\n        }\n        const children = vnode_getDOMChildNodes(journal, vToRemove);\n        domParent && children.length && journal.push(VNodeJournalOpCode.Remove, domParent, ...children);\n    }\n};\nexport const vnode_queryDomNodes = (vNode, selector, cb) => {\n    if (vnode_isElementVNode(vNode)) {\n        const element = vnode_getNode(vNode);\n        if (element.matches(selector)) {\n            cb(element);\n        }\n        else {\n            element.querySelectorAll(selector).forEach(cb);\n        }\n    }\n    else {\n        let child = vnode_getFirstChild(vNode);\n        while (child) {\n            vnode_queryDomNodes(child, selector, cb);\n            child = vnode_getNextSibling(child);\n        }\n    }\n};\nexport const vnode_truncate = (journal, vParent, vDelete) => {\n    assertDefined(vDelete, 'Missing vDelete.');\n    const parent = vnode_getDomParent(vParent);\n    const children = vnode_getDOMChildNodes(journal, vDelete);\n    parent && children.length && journal.push(VNodeJournalOpCode.Remove, parent, ...children);\n    const vPrevious = vDelete[VNodeProps.previousSibling];\n    if (vPrevious) {\n        vPrevious[VNodeProps.nextSibling] = null;\n    }\n    else {\n        vParent[ElementVNodeProps.firstChild] = null;\n    }\n    vParent[ElementVNodeProps.lastChild] = vPrevious;\n};\nexport const vnode_isChildOf = (vParent, vChild) => {\n    let vNode = vChild;\n    while (vNode) {\n        if (vNode === vParent) {\n            return true;\n        }\n        vNode = vnode_getParent(vNode);\n    }\n    return false;\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////\nexport const vnode_getElementName = (vnode) => {\n    const elementVNode = ensureElementVNode(vnode);\n    let elementName = elementVNode[ElementVNodeProps.elementName];\n    if (elementName === undefined) {\n        elementName = elementVNode[ElementVNodeProps.elementName] =\n            elementVNode[ElementVNodeProps.element].nodeName.toLowerCase();\n        elementVNode[VNodeProps.flags] |= vnode_getElementNamespaceFlags(elementName);\n    }\n    return elementName;\n};\nexport const vnode_getText = (vnode) => {\n    const textVNode = ensureTextVNode(vnode);\n    let text = textVNode[TextVNodeProps.text];\n    if (text === undefined) {\n        text = textVNode[TextVNodeProps.text] = textVNode[TextVNodeProps.node].nodeValue;\n    }\n    return text;\n};\nexport const vnode_setText = (journal, textVNode, text) => {\n    vnode_ensureTextInflated(journal, textVNode);\n    const textNode = textVNode[TextVNodeProps.node];\n    journal.push(VNodeJournalOpCode.SetText, textNode, (textVNode[TextVNodeProps.text] = text));\n};\nexport const vnode_getFirstChild = (vnode) => {\n    if (vnode_isTextVNode(vnode)) {\n        return null;\n    }\n    let vFirstChild = vnode[ElementVNodeProps.firstChild];\n    if (vFirstChild === undefined) {\n        vFirstChild = ensureMaterialized(vnode);\n    }\n    return vFirstChild;\n};\nexport const vnode_materialize = (vNode) => {\n    const element = vNode[ElementVNodeProps.element];\n    const firstChild = fastFirstChild(element);\n    const vNodeData = element.ownerDocument?.qVNodeData?.get(element);\n    const vFirstChild = vNodeData\n        ? materializeFromVNodeData(vNode, vNodeData, element, firstChild)\n        : materializeFromDOM(vNode, firstChild);\n    return vFirstChild;\n};\nconst ensureMaterialized = (vnode) => {\n    const vParent = ensureElementVNode(vnode);\n    let vFirstChild = vParent[ElementVNodeProps.firstChild];\n    if (vFirstChild === undefined) {\n        // need to materialize the vNode.\n        const element = vParent[ElementVNodeProps.element];\n        if (vParent[VNodeProps.parent] && shouldIgnoreChildren(element)) {\n            // We have a container with html value, must ignore the content.\n            vFirstChild =\n                vParent[ElementVNodeProps.firstChild] =\n                    vParent[ElementVNodeProps.lastChild] =\n                        null;\n        }\n        else {\n            vFirstChild = vnode_materialize(vParent);\n        }\n    }\n    assertTrue(vParent[ElementVNodeProps.firstChild] !== undefined, 'Did not materialize.');\n    assertTrue(vParent[ElementVNodeProps.lastChild] !== undefined, 'Did not materialize.');\n    return vFirstChild;\n};\nlet _fastHasAttribute = null;\nexport const shouldIgnoreChildren = (node) => {\n    if (!_fastHasAttribute) {\n        _fastHasAttribute = node.hasAttribute;\n    }\n    return _fastHasAttribute.call(node, QContainerAttr);\n};\nlet _fastNodeType = null;\nconst fastNodeType = (node) => {\n    if (!_fastNodeType) {\n        _fastNodeType = fastGetter(node, 'nodeType');\n    }\n    return _fastNodeType.call(node);\n};\nconst fastIsTextOrElement = (node) => {\n    const type = fastNodeType(node);\n    return type === /* Node.TEXT_NODE */ 3 || type === /* Node.ELEMENT_NODE */ 1;\n};\nlet _fastNextSibling = null;\nexport const fastNextSibling = (node) => {\n    if (!_fastNextSibling) {\n        _fastNextSibling = fastGetter(node, 'nextSibling');\n    }\n    if (!_fastFirstChild) {\n        _fastFirstChild = fastGetter(node, 'firstChild');\n    }\n    while (node) {\n        node = _fastNextSibling.call(node);\n        if (node !== null) {\n            const type = fastNodeType(node);\n            if (type === /* Node.TEXT_NODE */ 3 || type === /* Node.ELEMENT_NODE */ 1) {\n                break;\n            }\n            else if (type === /* Node.COMMENT_NODE */ 8) {\n                const nodeValue = node.nodeValue;\n                if (nodeValue?.startsWith(QIgnore)) {\n                    return getNodeAfterCommentNode(node, QContainerIsland, _fastNextSibling, _fastFirstChild);\n                }\n                else if (node.nodeValue?.startsWith(QContainerIslandEnd)) {\n                    return getNodeAfterCommentNode(node, QIgnoreEnd, _fastNextSibling, _fastFirstChild);\n                }\n                else if (nodeValue?.startsWith(QContainerAttr)) {\n                    while (node && (node = _fastNextSibling.call(node))) {\n                        if (fastNodeType(node) === /* Node.COMMENT_NODE */ 8 &&\n                            node.nodeValue?.startsWith(QContainerAttrEnd)) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return node;\n};\nfunction getNodeAfterCommentNode(node, commentValue, nextSibling, firstChild) {\n    while (node) {\n        if (node.nodeValue?.startsWith(commentValue)) {\n            node = nextSibling.call(node) || null;\n            return node;\n        }\n        let nextNode = firstChild.call(node);\n        if (!nextNode) {\n            nextNode = nextSibling.call(node);\n        }\n        if (!nextNode) {\n            nextNode = fastParentNode(node);\n            if (nextNode) {\n                nextNode = nextSibling.call(nextNode);\n            }\n        }\n        node = nextNode;\n    }\n    return null;\n}\nlet _fastParentNode = null;\nconst fastParentNode = (node) => {\n    if (!_fastParentNode) {\n        _fastParentNode = fastGetter(node, 'parentNode');\n    }\n    return _fastParentNode.call(node);\n};\nlet _fastFirstChild = null;\nconst fastFirstChild = (node) => {\n    if (!_fastFirstChild) {\n        _fastFirstChild = fastGetter(node, 'firstChild');\n    }\n    node = node && _fastFirstChild.call(node);\n    while (node && !fastIsTextOrElement(node)) {\n        node = fastNextSibling(node);\n    }\n    return node;\n};\nconst fastGetter = (prototype, name) => {\n    let getter;\n    while (prototype && !(getter = Object.getOwnPropertyDescriptor(prototype, name)?.get)) {\n        prototype = Object.getPrototypeOf(prototype);\n    }\n    return (getter ||\n        function () {\n            return this[name];\n        });\n};\nconst isQStyleElement = (node) => {\n    return (isElement(node) &&\n        node.nodeName === 'STYLE' &&\n        (node.hasAttribute(QScopedStyle) || node.hasAttribute(QStyle)));\n};\nconst materializeFromDOM = (vParent, firstChild) => {\n    let vFirstChild = null;\n    // materialize from DOM\n    let child = firstChild;\n    while (isQStyleElement(child)) {\n        // skip over style elements, as those need to be moved to the head.\n        // VNode pretends that `<style q:style q:sstyle>` elements do not exist.\n        child = fastNextSibling(child);\n    }\n    let vChild = null;\n    while (child) {\n        const nodeType = fastNodeType(child);\n        let vNextChild = null;\n        if (nodeType === /* Node.TEXT_NODE */ 3) {\n            vNextChild = vnode_newText(child, child.textContent ?? undefined);\n        }\n        else if (nodeType === /* Node.ELEMENT_NODE */ 1) {\n            vNextChild = vnode_newUnMaterializedElement(child);\n        }\n        if (vNextChild) {\n            vNextChild[VNodeProps.parent] = vParent;\n            vChild && (vChild[VNodeProps.nextSibling] = vNextChild);\n            vNextChild[VNodeProps.previousSibling] = vChild;\n            vChild = vNextChild;\n        }\n        if (!vFirstChild) {\n            vParent[ElementVNodeProps.firstChild] = vFirstChild = vChild;\n        }\n        child = fastNextSibling(child);\n    }\n    vParent[ElementVNodeProps.lastChild] = vChild || null;\n    vParent[ElementVNodeProps.firstChild] = vFirstChild;\n    return vFirstChild;\n};\nexport const vnode_getNextSibling = (vnode) => {\n    return vnode[VNodeProps.nextSibling];\n};\nexport const vnode_getPreviousSibling = (vnode) => {\n    return vnode[VNodeProps.previousSibling];\n};\nexport const vnode_getAttrKeys = (vnode) => {\n    const type = vnode[VNodeProps.flags];\n    if ((type & VNodeFlags.ELEMENT_OR_VIRTUAL_MASK) !== 0) {\n        vnode_ensureElementInflated(vnode);\n        const keys = [];\n        for (let i = vnode_getPropStartIndex(vnode); i < vnode.length; i = i + 2) {\n            const key = vnode[i];\n            if (!key.startsWith(':')) {\n                keys.push(key);\n            }\n        }\n        return keys;\n    }\n    return [];\n};\nexport const vnode_setAttr = (journal, vnode, key, value) => {\n    const type = vnode[VNodeProps.flags];\n    if ((type & VNodeFlags.ELEMENT_OR_VIRTUAL_MASK) !== 0) {\n        vnode_ensureElementInflated(vnode);\n        const idx = mapApp_findIndx(vnode, key, vnode_getPropStartIndex(vnode));\n        if (idx >= 0) {\n            if (vnode[idx + 1] != value && (type & VNodeFlags.Element) !== 0) {\n                // Values are different, update DOM\n                const element = vnode[ElementVNodeProps.element];\n                journal && journal.push(VNodeJournalOpCode.SetAttribute, element, key, value);\n            }\n            if (value == null) {\n                vnode.splice(idx, 2);\n            }\n            else {\n                vnode[idx + 1] = value;\n            }\n        }\n        else if (value != null) {\n            vnode.splice(idx ^ -1, 0, key, value);\n            if ((type & VNodeFlags.Element) !== 0) {\n                // New value, update DOM\n                const element = vnode[ElementVNodeProps.element];\n                journal && journal.push(VNodeJournalOpCode.SetAttribute, element, key, value);\n            }\n        }\n    }\n};\nexport const vnode_getAttr = (vnode, key) => {\n    const type = vnode[VNodeProps.flags];\n    if ((type & VNodeFlags.ELEMENT_OR_VIRTUAL_MASK) !== 0) {\n        vnode_ensureElementInflated(vnode);\n        return mapArray_get(vnode, key, vnode_getPropStartIndex(vnode));\n    }\n    return null;\n};\nexport const vnode_getProp = (vnode, key, getObject) => {\n    const type = vnode[VNodeProps.flags];\n    if ((type & VNodeFlags.ELEMENT_OR_VIRTUAL_MASK) !== 0) {\n        type & VNodeFlags.Element && vnode_ensureElementInflated(vnode);\n        const idx = mapApp_findIndx(vnode, key, vnode_getPropStartIndex(vnode));\n        if (idx >= 0) {\n            let value = vnode[idx + 1];\n            if (typeof value === 'string' && getObject) {\n                vnode[idx + 1] = value = getObject(value);\n            }\n            return value;\n        }\n    }\n    return null;\n};\nexport const vnode_setProp = (vnode, key, value) => {\n    ensureElementOrVirtualVNode(vnode);\n    const idx = mapApp_findIndx(vnode, key, vnode_getPropStartIndex(vnode));\n    if (idx >= 0) {\n        vnode[idx + 1] = value;\n    }\n    else if (value != null) {\n        vnode.splice(idx ^ -1, 0, key, value);\n    }\n};\nexport const vnode_getPropStartIndex = (vnode) => {\n    const type = vnode[VNodeProps.flags] & VNodeFlags.TYPE_MASK;\n    if (type === VNodeFlags.Element) {\n        return ElementVNodeProps.PROPS_OFFSET;\n    }\n    else if (type === VNodeFlags.Virtual) {\n        return VirtualVNodeProps.PROPS_OFFSET;\n    }\n    throw throwErrorAndStop('Invalid vnode type.');\n};\nexport const vnode_propsToRecord = (vnode) => {\n    const props = {};\n    if (!vnode_isTextVNode(vnode)) {\n        for (let i = vnode_getPropStartIndex(vnode); i < vnode.length;) {\n            const key = vnode[i++];\n            const value = vnode[i++];\n            props[key] = value;\n        }\n    }\n    return props;\n};\nexport const vnode_getParent = (vnode) => {\n    return vnode[VNodeProps.parent] || null;\n};\nexport const vnode_getNode = (vnode) => {\n    if (vnode === null || vnode_isVirtualVNode(vnode)) {\n        return null;\n    }\n    if (vnode_isElementVNode(vnode)) {\n        return vnode[ElementVNodeProps.element];\n    }\n    assertTrue(vnode_isTextVNode(vnode), 'Expecting Text Node.');\n    return vnode[TextVNodeProps.node];\n};\nexport function vnode_toString(depth = 10, offset = '', materialize = false) {\n    let vnode = this;\n    if (depth === 0) {\n        return '...';\n    }\n    if (vnode === null) {\n        return 'null';\n    }\n    if (vnode === undefined) {\n        return 'undefined';\n    }\n    const strings = [];\n    do {\n        if (vnode_isTextVNode(vnode)) {\n            strings.push(stringify(vnode_getText(vnode)));\n        }\n        else if (vnode_isVirtualVNode(vnode)) {\n            const idx = vnode[VNodeProps.flags] >>> VNodeFlagsIndex.shift;\n            const attrs = ['[' + String(idx) + ']'];\n            vnode_getAttrKeys(vnode).forEach((key) => {\n                if (key !== DEBUG_TYPE) {\n                    const value = vnode_getAttr(vnode, key);\n                    attrs.push(' ' + key + '=' + stringify(value));\n                }\n            });\n            const name = VirtualTypeName[vnode_getAttr(vnode, DEBUG_TYPE) || VirtualType.Virtual] ||\n                VirtualTypeName[VirtualType.Virtual];\n            strings.push('<' + name + attrs.join('') + '>');\n            const child = vnode_getFirstChild(vnode);\n            child && strings.push('  ' + vnode_toString.call(child, depth - 1, offset + '  ', true));\n            strings.push('</' + name + '>');\n        }\n        else if (vnode_isElementVNode(vnode)) {\n            const tag = vnode_getElementName(vnode);\n            const attrs = [];\n            const keys = vnode_getAttrKeys(vnode);\n            keys.forEach((key) => {\n                const value = vnode_getAttr(vnode, key);\n                attrs.push(' ' + key + '=' + stringify(value));\n            });\n            const node = vnode_getNode(vnode);\n            if (node) {\n                const vnodeData = node.ownerDocument.qVNodeData?.get(node);\n                if (vnodeData) {\n                    attrs.push(' q:vnodeData=' + stringify(vnodeData));\n                }\n            }\n            const domAttrs = node.attributes;\n            for (let i = 0; i < domAttrs.length; i++) {\n                const attr = domAttrs[i];\n                if (keys.indexOf(attr.name) === -1) {\n                    attrs.push(' ' + attr.name + (attr.value ? '=' + stringify(attr.value) : ''));\n                }\n            }\n            strings.push('<' + tag + attrs.join('') + '>');\n            if (vnode_isMaterialized(vnode) || materialize) {\n                const child = vnode_getFirstChild(vnode);\n                child && strings.push('  ' + vnode_toString.call(child, depth - 1, offset + '  ', true));\n            }\n            else {\n                strings.push('  <!-- not materialized --!>');\n            }\n            strings.push('</' + tag + '>');\n        }\n        vnode = vnode_getNextSibling(vnode) || null;\n    } while (vnode);\n    return strings.join('\\n' + offset);\n}\nconst isNumber = (ch) => /* `0` */ 48 <= ch && ch <= 57; /* `9` */\nconst isLowercase = (ch) => /* `a` */ 97 <= ch && ch <= 122; /* `z` */\nconst stack = [];\nfunction materializeFromVNodeData(vParent, vData, element, child) {\n    let idx = 0;\n    let nextToConsumeIdx = 0;\n    let vFirst = null;\n    let vLast = null;\n    let previousTextNode = null;\n    let ch = 0;\n    let peekCh = 0;\n    const peek = () => {\n        if (peekCh !== 0) {\n            return peekCh;\n        }\n        else {\n            return (peekCh = nextToConsumeIdx < vData.length ? vData.charCodeAt(nextToConsumeIdx) : 0);\n        }\n    };\n    const consume = () => {\n        ch = peek();\n        peekCh = 0;\n        nextToConsumeIdx++;\n        return ch;\n    };\n    const addVNode = (node) => {\n        node[VNodeProps.flags] =\n            (node[VNodeProps.flags] & VNodeFlagsIndex.negated_mask) | (idx << VNodeFlagsIndex.shift);\n        idx++;\n        vLast && (vLast[VNodeProps.nextSibling] = node);\n        node[VNodeProps.previousSibling] = vLast;\n        node[VNodeProps.parent] = vParent;\n        if (!vFirst) {\n            vParent[ElementVNodeProps.firstChild] = vFirst = node;\n        }\n        vLast = node;\n    };\n    const consumeValue = () => {\n        consume();\n        const start = nextToConsumeIdx;\n        while ((peek() <= 58 /* `:` */ && peekCh !== 0) ||\n            peekCh === 95 /* `_` */ ||\n            (peekCh >= 65 /* `A` */ && peekCh <= 90) /* `Z` */ ||\n            (peekCh >= 97 /* `a` */ && peekCh <= 122) /* `z` */) {\n            consume();\n        }\n        return vData.substring(start, nextToConsumeIdx);\n    };\n    let textIdx = 0;\n    let combinedText = null;\n    let container = null;\n    // console.log(\n    //   'processVNodeData',\n    //   vNodeData,\n    //   (child?.parentNode as HTMLElement | undefined)?.outerHTML\n    // );\n    while (peek() !== 0) {\n        if (isNumber(peek())) {\n            // Element counts get encoded as numbers.\n            while (!isElement(child)) {\n                child = fastNextSibling(child);\n                if (!child) {\n                    throwErrorAndStop('Materialize error: missing element: ' + vData + ' ' + peek() + ' ' + nextToConsumeIdx);\n                }\n            }\n            // We pretend that style element's don't exist as they can get moved out.\n            while (isQStyleElement(child)) {\n                // skip over style elements, as those need to be moved to the head\n                // and are not included in the counts.\n                child = fastNextSibling(child);\n            }\n            combinedText = null;\n            previousTextNode = null;\n            let value = 0;\n            while (isNumber(peek())) {\n                value *= 10;\n                value += consume() - 48; /* `0` */\n            }\n            while (value--) {\n                addVNode(vnode_newUnMaterializedElement(child));\n                child = fastNextSibling(child);\n            }\n            // collect the elements;\n        }\n        else if (peek() === VNodeDataChar.SCOPED_STYLE) {\n            vnode_setAttr(null, vParent, QScopedStyle, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.RENDER_FN) {\n            vnode_setAttr(null, vParent, OnRenderProp, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.ID) {\n            if (!container) {\n                container = getDomContainer(element);\n            }\n            const id = consumeValue();\n            container.$setRawState$(parseInt(id), vParent);\n            isDev && vnode_setAttr(null, vParent, ELEMENT_ID, id);\n        }\n        else if (peek() === VNodeDataChar.PROPS) {\n            vnode_setAttr(null, vParent, ELEMENT_PROPS, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.SLOT_REF) {\n            vnode_setAttr(null, vParent, QSlotRef, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.KEY) {\n            vnode_setAttr(null, vParent, ELEMENT_KEY, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.SEQ) {\n            vnode_setAttr(null, vParent, ELEMENT_SEQ, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.SEQ_IDX) {\n            vnode_setAttr(null, vParent, ELEMENT_SEQ_IDX, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.CONTEXT) {\n            vnode_setAttr(null, vParent, QCtxAttr, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.OPEN) {\n            consume();\n            addVNode(vnode_newVirtual());\n            stack.push(vParent, vFirst, vLast, previousTextNode, idx);\n            idx = 0;\n            vParent = vLast;\n            vFirst = vLast = null;\n        }\n        else if (peek() === VNodeDataChar.SEPARATOR) {\n            const key = consumeValue();\n            const value = consumeValue();\n            vnode_setAttr(null, vParent, key, value);\n        }\n        else if (peek() === VNodeDataChar.CLOSE) {\n            consume();\n            vParent[ElementVNodeProps.lastChild] = vLast;\n            idx = stack.pop();\n            previousTextNode = stack.pop();\n            vLast = stack.pop();\n            vFirst = stack.pop();\n            vParent = stack.pop();\n        }\n        else if (peek() === VNodeDataChar.SLOT) {\n            vnode_setAttr(null, vParent, QSlot, consumeValue());\n        }\n        else {\n            const textNode = child && fastNodeType(child) === /* Node.TEXT_NODE */ 3 ? child : null;\n            // must be alphanumeric\n            if (combinedText === null) {\n                combinedText = textNode ? textNode.nodeValue : null;\n                textIdx = 0;\n            }\n            let length = 0;\n            while (isLowercase(peek())) {\n                length += consume() - 97; /* `a` */\n                length *= 26;\n            }\n            length += consume() - 65; /* `A` */\n            const text = combinedText === null ? '' : combinedText.substring(textIdx, textIdx + length);\n            addVNode((previousTextNode = vnode_newSharedText(previousTextNode, textNode, text)));\n            textIdx += length;\n            // Text nodes get encoded as alphanumeric characters.\n        }\n    }\n    vParent[ElementVNodeProps.lastChild] = vLast;\n    return vFirst;\n}\nexport const vnode_getType = (vnode) => {\n    const type = vnode[VNodeProps.flags];\n    if (type & VNodeFlags.Element) {\n        return 1 /* Element */;\n    }\n    else if (type & VNodeFlags.Virtual) {\n        return 11 /* Virtual */;\n    }\n    else if (type & VNodeFlags.Text) {\n        return 3 /* Text */;\n    }\n    throw throwErrorAndStop('Unknown vnode type: ' + type);\n};\nconst isElement = (node) => node && typeof node == 'object' && fastNodeType(node) === /** Node.ELEMENT_NODE* */ 1;\n/// These global variables are used to avoid creating new arrays for each call to `vnode_getPathToClosestDomNode`.\nconst aPath = [];\nconst bPath = [];\nexport const vnode_documentPosition = (a, b) => {\n    if (a === b) {\n        return 0;\n    }\n    let aDepth = -1;\n    let bDepth = -1;\n    while (a) {\n        a = (aPath[++aDepth] = a)[VNodeProps.parent];\n    }\n    while (b) {\n        b = (bPath[++bDepth] = b)[VNodeProps.parent];\n    }\n    while (aDepth >= 0 && bDepth >= 0) {\n        a = aPath[aDepth];\n        b = bPath[bDepth];\n        if (a === b) {\n            // if the nodes are the same, we need to check the next level.\n            aDepth--;\n            bDepth--;\n        }\n        else {\n            // We found a difference so we need to scan nodes at this level.\n            let cursor = b;\n            do {\n                cursor = vnode_getNextSibling(cursor);\n                if (cursor === a) {\n                    return 1;\n                }\n            } while (cursor);\n            cursor = b;\n            do {\n                cursor = vnode_getPreviousSibling(cursor);\n                if (cursor === a) {\n                    return -1;\n                }\n            } while (cursor);\n            // The node is not in the list of siblings, that means it must be disconnected.\n            return 1;\n        }\n    }\n    return aDepth < bDepth ? -1 : 1;\n};\n/**\n * Use this method to find the parent component for projection.\n *\n * Normally the parent component is just the first component which we encounter while traversing the\n * parents.\n *\n * However, if during traversal we encounter a projection, than we have to follow the projection,\n * and nod weth the projection component is further away (it is the parent's parent of the\n * projection's)\n *\n * So in general we have to go up as many parent components as there are projections nestings.\n *\n * - No projection nesting first parent component.\n * - One projection nesting, second parent component (parent's parent).\n * - Three projection nesting, third parent component (parent's parent's parent).\n * - And so on.\n *\n * @param vHost\n * @param getObjectById\n * @returns\n */\nexport const vnode_getProjectionParentComponent = (vHost, rootVNode) => {\n    let projectionDepth = 1;\n    while (projectionDepth--) {\n        while (vHost &&\n            (vnode_isVirtualVNode(vHost) ? vnode_getProp(vHost, OnRenderProp, null) === null : true)) {\n            const qSlotParentProp = vnode_getProp(vHost, QSlotParent, null);\n            const qSlotParent = qSlotParentProp &&\n                (typeof qSlotParentProp === 'string'\n                    ? vnode_locate(rootVNode, qSlotParentProp)\n                    : qSlotParentProp);\n            const vProjectionParent = vnode_isVirtualVNode(vHost) && qSlotParent;\n            if (vProjectionParent) {\n                // We found a projection, so we need to go up one more level.\n                projectionDepth++;\n            }\n            vHost = vProjectionParent || vnode_getParent(vHost);\n        }\n        if (projectionDepth > 0) {\n            vHost = vnode_getParent(vHost);\n        }\n    }\n    return vHost;\n};\nconst stringifyPath = [];\nconst stringify = (value) => {\n    stringifyPath.push(value);\n    try {\n        if (value === null) {\n            return 'null';\n        }\n        else if (value === undefined) {\n            return 'undefined';\n        }\n        else if (typeof value === 'string') {\n            return '\"' + value + '\"';\n        }\n        else if (typeof value === 'function') {\n            if (isQrl(value)) {\n                return '\"' + (value.$chunk$ || '') + '#' + value.$hash$ + '\"';\n            }\n            else {\n                return '\"' + value.name + '()\"';\n            }\n        }\n        else if (vnode_isVNode(value)) {\n            if (stringifyPath.indexOf(value) !== -1) {\n                return '*';\n            }\n            else {\n                return '\"' + String(value).replaceAll(/\\n\\s*/gm, '') + '\"';\n            }\n        }\n        else if (Array.isArray(value)) {\n            return '[' + value.map(stringify).join(', ') + ']';\n        }\n        if (value instanceof SignalImpl) {\n            return stringify(value.value);\n        }\n        else {\n            if (value.toString) {\n                return String(value);\n            }\n            else {\n                return JSON.stringify(value);\n            }\n        }\n    }\n    finally {\n        stringifyPath.pop();\n    }\n};\nconst VNodeArray = class VNode extends Array {\n    static createElement(flags, parent, previousSibling, nextSibling, firstChild, lastChild, element, elementName) {\n        const vnode = new VNode(flags, parent, previousSibling, nextSibling);\n        vnode.push(firstChild, lastChild, element, elementName);\n        return vnode;\n    }\n    static createText(flags, parent, previousSibling, nextSibling, textNode, text) {\n        const vnode = new VNode(flags, parent, previousSibling, nextSibling);\n        vnode.push(textNode, text);\n        return vnode;\n    }\n    static createVirtual(flags, parent, previousSibling, nextSibling, firstChild, lastChild) {\n        const vnode = new VNode(flags, parent, previousSibling, nextSibling);\n        vnode.push(firstChild, lastChild);\n        return vnode;\n    }\n    constructor(flags, parent, previousSibling, nextSibling) {\n        super();\n        this.push(flags, parent, previousSibling, nextSibling);\n        if (isDev) {\n            this.toString = vnode_toString;\n        }\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined } from '../error/assert';\nimport { QScopedStyle, RenderEvent } from '../util/markers';\nimport { maybeThen, promiseAllLazy, safeCall } from '../util/promises';\nimport { newInvokeContext } from '../use/use-core';\nimport { isArray, isFunction, isString } from '../util/types';\nimport { intToStr } from '../container/container';\nimport { fromCamelToKebabCase } from '../util/case';\nimport { qError, QError_stringifyClassOrStyle } from '../error/error';\nimport { seal } from '../util/qdev';\nimport { SkipRender } from './jsx/utils.public';\nimport { handleError } from './error-handling';\nimport { HOST_FLAG_DIRTY, HOST_FLAG_MOUNTED } from '../state/context';\nimport { isSignal, SignalUnassignedException } from '../state/signal';\nimport { isJSXNode } from './jsx/jsx-runtime';\nimport { isUnitlessNumber } from '../util/unitless_number';\nimport { isServerPlatform } from '../platform/platform';\nimport { executeSSRTasks } from './dom/notify-render';\nimport { logWarn } from '../util/log';\nimport { SubscriptionType } from '../state/common';\nimport {} from '../../server/qwik-types';\nimport { vnode_getProp, vnode_isVNode } from '../v2/client/vnode';\nimport { isClassAttr } from '../v2/shared/scoped-styles';\nimport { isPreventDefault } from '../v2/shared/event-names';\nexport const executeComponent = (rCtx, elCtx, attempt) => {\n    elCtx.$flags$ &= ~HOST_FLAG_DIRTY;\n    elCtx.$flags$ |= HOST_FLAG_MOUNTED;\n    elCtx.$slots$ = [];\n    elCtx.li.length = 0;\n    const hostElement = elCtx.$element$;\n    const componentQRL = elCtx.$componentQrl$;\n    const props = elCtx.$props$;\n    const iCtx = newInvokeContext(rCtx.$static$.$locale$, hostElement, undefined, RenderEvent);\n    const waitOn = (iCtx.$waitOn$ = []);\n    assertDefined(componentQRL, `render: host element to render must have a $renderQrl$:`, elCtx);\n    assertDefined(props, `render: host element to render must have defined props`, elCtx);\n    // Set component context\n    const newCtx = pushRenderContext(rCtx);\n    newCtx.$cmpCtx$ = elCtx;\n    newCtx.$slotCtx$ = undefined;\n    // Invoke render hook\n    iCtx.$subscriber$ = [SubscriptionType.HOST, hostElement];\n    iCtx.$renderCtx$ = rCtx;\n    // Resolve render function\n    componentQRL.$setContainer$(rCtx.$static$.$containerState$.$containerEl$);\n    const componentFn = componentQRL.getFn(iCtx);\n    return safeCall(() => componentFn(props), (jsxNode) => {\n        return maybeThen(isServerPlatform()\n            ? maybeThen(promiseAllLazy(waitOn), () => \n            // Run dirty tasks before SSR output is generated.\n            maybeThen(executeSSRTasks(rCtx.$static$.$containerState$, rCtx), () => promiseAllLazy(waitOn)))\n            : promiseAllLazy(waitOn), () => {\n            if (elCtx.$flags$ & HOST_FLAG_DIRTY) {\n                if (attempt && attempt > 100) {\n                    logWarn(`Infinite loop detected. Element: ${elCtx.$componentQrl$?.$symbol$}`);\n                }\n                else {\n                    return executeComponent(rCtx, elCtx, attempt ? attempt + 1 : 1);\n                }\n            }\n            return {\n                node: jsxNode,\n                rCtx: newCtx,\n            };\n        });\n    }, (err) => {\n        if (err === SignalUnassignedException) {\n            if (attempt && attempt > 100) {\n                logWarn(`Infinite loop detected. Element: ${elCtx.$componentQrl$?.$symbol$}`);\n            }\n            else {\n                return maybeThen(promiseAllLazy(waitOn), () => {\n                    return executeComponent(rCtx, elCtx, attempt ? attempt + 1 : 1);\n                });\n            }\n        }\n        handleError(err, hostElement, rCtx.$static$.$containerState$);\n        return {\n            node: SkipRender,\n            rCtx: newCtx,\n        };\n    });\n};\nexport const createRenderContext = (doc, containerState) => {\n    const ctx = {\n        $static$: {\n            $doc$: doc,\n            $locale$: containerState.$serverData$.locale,\n            $containerState$: containerState,\n            $hostElements$: new Set(),\n            $operations$: [],\n            $postOperations$: [],\n            $roots$: [],\n            $addSlots$: [],\n            $rmSlots$: [],\n            $visited$: [],\n        },\n        $cmpCtx$: null,\n        $slotCtx$: undefined,\n    };\n    seal(ctx);\n    seal(ctx.$static$);\n    return ctx;\n};\nexport const pushRenderContext = (ctx) => {\n    const newCtx = {\n        $static$: ctx.$static$,\n        $cmpCtx$: ctx.$cmpCtx$,\n        $slotCtx$: ctx.$slotCtx$,\n    };\n    return newCtx;\n};\nexport const serializeClassWithHost = (obj, hostCtx) => {\n    if (hostCtx?.$scopeIds$?.length) {\n        return hostCtx.$scopeIds$.join(' ') + ' ' + serializeClass(obj);\n    }\n    return serializeClass(obj);\n};\nexport const serializeClassWithHost2 = (obj, host) => {\n    if (host) {\n        const scopedStyleIdsString = vnode_isVNode(host)\n            ? vnode_getProp(host, QScopedStyle, null)\n            : host.getProp(QScopedStyle);\n        if (scopedStyleIdsString && scopedStyleIdsString.length) {\n            return scopedStyleIdsString + ' ' + serializeClass(obj);\n        }\n    }\n    return serializeClass(obj);\n};\nexport const serializeClass = (obj) => {\n    if (!obj) {\n        return '';\n    }\n    if (isString(obj)) {\n        return obj.trim();\n    }\n    const classes = [];\n    if (isArray(obj)) {\n        for (const o of obj) {\n            const classList = serializeClass(o);\n            if (classList) {\n                classes.push(classList);\n            }\n        }\n    }\n    else {\n        for (const [key, value] of Object.entries(obj)) {\n            if (value) {\n                classes.push(key.trim());\n            }\n        }\n    }\n    return classes.join(' ');\n};\nexport const stringifyStyle = (obj) => {\n    if (obj == null) {\n        return '';\n    }\n    if (typeof obj == 'object') {\n        if (isArray(obj)) {\n            throw qError(QError_stringifyClassOrStyle, obj, 'style');\n        }\n        else {\n            const chunks = [];\n            for (const key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    const value = obj[key];\n                    if (value != null) {\n                        if (key.startsWith('--')) {\n                            chunks.push(key + ':' + value);\n                        }\n                        else {\n                            chunks.push(fromCamelToKebabCase(key) + ':' + setValueForStyle(key, value));\n                        }\n                    }\n                }\n            }\n            return chunks.join(';');\n        }\n    }\n    return String(obj);\n};\nexport const serializeBooleanOrNumberAttribute = (value) => {\n    return value != null ? String(value) : null;\n};\nexport function serializeAttribute(key, value, styleScopedId) {\n    if (isClassAttr(key)) {\n        const serializedClass = serializeClass(value);\n        value = styleScopedId\n            ? styleScopedId + (serializedClass.length ? ' ' + serializedClass : serializedClass)\n            : serializedClass;\n    }\n    else if (key === 'style') {\n        value = stringifyStyle(value);\n    }\n    else if (isEnumeratedBooleanAttribute(key) || typeof value === 'number') {\n        // aria attrs, tabindex etc.\n        value = serializeBooleanOrNumberAttribute(value);\n    }\n    else if (value === false || value == null) {\n        value = null;\n    }\n    else if (value === true && isPreventDefault(key)) {\n        value = '';\n    }\n    return value;\n}\nfunction isEnumeratedBooleanAttribute(key) {\n    return isAriaAttribute(key) || ['spellcheck', 'draggable', 'contenteditable'].includes(key);\n}\nconst setValueForStyle = (styleName, value) => {\n    if (typeof value === 'number' && value !== 0 && !isUnitlessNumber(styleName)) {\n        return value + 'px';\n    }\n    return value;\n};\nexport const getNextIndex = (ctx) => {\n    return intToStr(ctx.$static$.$containerState$.$elementIndex$++);\n};\nexport const getNextUniqueIndex = (container) => {\n    return intToStr(container.$currentUniqueId$++);\n};\nexport const setQId = (rCtx, elCtx) => {\n    const id = getNextIndex(rCtx);\n    elCtx.$id$ = id;\n};\nexport const jsxToString = (data) => {\n    if (isSignal(data)) {\n        return jsxToString(data.value);\n    }\n    return data == null || typeof data === 'boolean' ? '' : String(data);\n};\nexport function isAriaAttribute(prop) {\n    return prop.startsWith('aria-');\n}\nexport const shouldWrapFunctional = (res, node) => {\n    if (node.key) {\n        return !isJSXNode(res) || (!isFunction(res.type) && res.key != node.key);\n    }\n    return false;\n};\nexport const static_listeners = 1 << 0;\nexport const static_subtree = 1 << 1;\nexport const dangerouslySetInnerHTML = 'dangerouslySetInnerHTML';\n//# sourceMappingURL=data:application/json;base64,","var _a;\nimport { createContainerState, getEventName, setRef, } from '../../container/container';\nimport { PREVENT_DEFAULT, groupListeners, isOnProp, setEvent, } from '../../state/listeners';\nimport { logError, logWarn } from '../../util/log';\nimport { ELEMENT_ID, OnRenderProp, QScopedStyle, QSlot, QSlotS, QStyle } from '../../util/markers';\nimport { isPromise, maybeThen } from '../../util/promises';\nimport { newInvokeContext, invoke, trackSignal } from '../../use/use-core';\nimport { Virtual, _jsxSorted, createJSXError, isJSXNode } from '../jsx/jsx-runtime';\nimport { isArray, isFunction, isString } from '../../util/types';\nimport { version } from '../../version';\nimport { createRenderContext, dangerouslySetInnerHTML, executeComponent, getNextIndex, isAriaAttribute, jsxToString, pushRenderContext, serializeClass, shouldWrapFunctional, static_subtree, stringifyStyle, } from '../execute-component';\nimport { InternalSSRStream, SSRRaw } from '../jsx/utils.public';\nimport { assertDefined } from '../../error/assert';\nimport { serializeSStyle } from '../../style/qrl-styles';\nimport { qDev, qInspector, seal } from '../../util/qdev';\nimport { qError, QError_canNotRenderHTML } from '../../error/error';\nimport { isSignal } from '../../state/signal';\nimport { serializeQRLs } from '../../qrl/qrl';\nimport { EMPTY_OBJ } from '../../util/flyweight';\nimport { createContext, HOST_FLAG_DIRTY, HOST_FLAG_NEED_ATTACH_LISTENER, HOST_FLAG_DYNAMIC, } from '../../state/context';\nimport { createPropsState, createProxy } from '../../state/store';\nimport { Q_CTX, _CONST_PROPS } from '../../state/constants';\nimport { SubscriptionType } from '../../state/common';\nconst FLUSH_COMMENT = '<!--qkssr-f-->';\nconst IS_HEAD = 1 << 0;\nconst IS_HTML = 1 << 2;\nconst IS_TEXT = 1 << 3;\nconst IS_INVISIBLE = 1 << 4;\nconst IS_PHASING = 1 << 5;\nconst IS_ANCHOR = 1 << 6;\nconst IS_BUTTON = 1 << 7;\nconst IS_TABLE = 1 << 8;\nconst IS_PHRASING_CONTAINER = 1 << 9;\nconst IS_IMMUTABLE = 1 << 10;\nclass MockElement {\n    constructor(nodeType) {\n        this.nodeType = nodeType;\n        this[_a] = null;\n        seal(this);\n    }\n}\n_a = Q_CTX;\nconst createDocument = () => {\n    return new MockElement(9);\n};\n/** @internal */\nexport const _renderSSR = async (node, opts) => {\n    const root = opts.containerTagName;\n    const containerEl = createMockQContext(1).$element$;\n    const containerState = createContainerState(containerEl, opts.base ?? '/');\n    containerState.$serverData$.locale = opts.serverData?.locale;\n    const doc = createDocument();\n    const rCtx = createRenderContext(doc, containerState);\n    const headNodes = opts.beforeContent ?? [];\n    if (qDev) {\n        if (root in phasingContent ||\n            root in emptyElements ||\n            root in tableContent ||\n            root in startPhasingContent ||\n            root in invisibleElements) {\n            throw new Error(`The \"containerTagName\" can not be \"${root}\". Please choose a different tag name like: \"div\", \"html\", \"custom-container\".`);\n        }\n    }\n    const ssrCtx = {\n        $static$: {\n            $contexts$: [],\n            $headNodes$: root === 'html' ? headNodes : [],\n            $locale$: opts.serverData?.locale,\n            $textNodes$: new Map(),\n        },\n        $projectedChildren$: undefined,\n        $projectedCtxs$: undefined,\n        $invocationContext$: undefined,\n    };\n    seal(ssrCtx);\n    const locale = opts.serverData?.locale;\n    const containerAttributes = opts.containerAttributes;\n    const qRender = containerAttributes['q:render'];\n    containerAttributes['q:container'] = 'paused';\n    containerAttributes['q:version'] = version ?? 'dev';\n    containerAttributes['q:render'] = (qRender ? qRender + '-' : '') + (qDev ? 'ssr-dev' : 'ssr');\n    containerAttributes['q:base'] = opts.base || '';\n    containerAttributes['q:locale'] = locale;\n    containerAttributes['q:manifest-hash'] = opts.manifestHash;\n    containerAttributes['q:instance'] = hash();\n    const children = root === 'html' ? [node] : [headNodes, node];\n    if (root !== 'html') {\n        containerAttributes.class =\n            'qc📦' + (containerAttributes.class ? ' ' + containerAttributes.class : '');\n    }\n    if (opts.serverData) {\n        containerState.$serverData$ = opts.serverData;\n    }\n    const rootNode = _jsxSorted(root, EMPTY_OBJ, containerAttributes, children, HOST_FLAG_DIRTY | HOST_FLAG_NEED_ATTACH_LISTENER, null);\n    containerState.$hostsRendering$ = new Set();\n    await Promise.resolve().then(() => renderRoot(rootNode, rCtx, ssrCtx, opts.stream, containerState, opts));\n};\nconst hash = () => Math.random().toString(36).slice(2);\nconst renderRoot = async (node, rCtx, ssrCtx, stream, containerState, opts) => {\n    const beforeClose = opts.beforeClose;\n    await renderNode(node, rCtx, ssrCtx, stream, 0, beforeClose\n        ? (stream) => {\n            const result = beforeClose(ssrCtx.$static$.$contexts$, containerState, false, ssrCtx.$static$.$textNodes$);\n            return processData(result, rCtx, ssrCtx, stream, 0, undefined);\n        }\n        : undefined);\n    if (qDev) {\n        if (ssrCtx.$static$.$headNodes$.length > 0) {\n            logError('Missing <head>. Global styles could not be rendered. Please render a <head> element at the root of the app');\n        }\n    }\n    return rCtx;\n};\nconst renderGenerator = async (node, rCtx, ssrCtx, stream, flags) => {\n    stream.write(FLUSH_COMMENT);\n    const generator = node.props.children;\n    let value;\n    if (isFunction(generator)) {\n        const v = generator({\n            write(chunk) {\n                stream.write(chunk);\n                stream.write(FLUSH_COMMENT);\n            },\n        });\n        if (isPromise(v)) {\n            return v;\n        }\n        value = v;\n    }\n    else {\n        value = generator;\n    }\n    for await (const chunk of value) {\n        await processData(chunk, rCtx, ssrCtx, stream, flags, undefined);\n        stream.write(FLUSH_COMMENT);\n    }\n};\nconst renderNodeVirtual = (node, elCtx, extraNodes, rCtx, ssrCtx, stream, flags, beforeClose) => {\n    const props = node.props;\n    const renderQrl = props[OnRenderProp];\n    if (renderQrl) {\n        elCtx.$componentQrl$ = renderQrl;\n        return renderSSRComponent(rCtx, ssrCtx, stream, elCtx, node, flags, beforeClose);\n    }\n    let virtualComment = '<!--qv' + renderVirtualAttributes(props);\n    const isSlot = QSlotS in props;\n    const key = node.key != null ? String(node.key) : null;\n    if (isSlot) {\n        assertDefined(rCtx.$cmpCtx$?.$id$, 'hostId must be defined for a slot');\n        virtualComment += ' q:sref=' + rCtx.$cmpCtx$.$id$;\n    }\n    if (key != null) {\n        virtualComment += ' q:key=' + key;\n    }\n    virtualComment += '-->';\n    stream.write(virtualComment);\n    const html = node.props[dangerouslySetInnerHTML];\n    if (html) {\n        stream.write(html);\n        stream.write(CLOSE_VIRTUAL);\n        return;\n    }\n    if (extraNodes) {\n        for (const node of extraNodes) {\n            // We trust that the attributes are strings\n            renderNodeElementSync(node.type, node.props, stream);\n        }\n    }\n    const promise = walkChildren(node.children, rCtx, ssrCtx, stream, flags);\n    return maybeThen(promise, () => {\n        // Fast path\n        if (!isSlot && !beforeClose) {\n            stream.write(CLOSE_VIRTUAL);\n            return;\n        }\n        let promise;\n        if (isSlot) {\n            assertDefined(key, 'key must be defined for a slot');\n            const content = ssrCtx.$projectedChildren$?.[key];\n            if (content) {\n                const [rCtx, sCtx] = ssrCtx.$projectedCtxs$;\n                const newSlotRctx = pushRenderContext(rCtx);\n                newSlotRctx.$slotCtx$ = elCtx;\n                ssrCtx.$projectedChildren$[key] = undefined;\n                promise = processData(content, newSlotRctx, sCtx, stream, flags);\n            }\n        }\n        // Inject before close\n        if (beforeClose) {\n            promise = maybeThen(promise, () => beforeClose(stream));\n        }\n        return maybeThen(promise, () => {\n            stream.write(CLOSE_VIRTUAL);\n        });\n    });\n};\nconst CLOSE_VIRTUAL = `<!--/qv-->`;\nconst renderAttributes = (attributes) => {\n    let text = '';\n    for (const prop in attributes) {\n        if (prop === dangerouslySetInnerHTML) {\n            continue;\n        }\n        const value = attributes[prop];\n        if (value != null) {\n            text += ' ' + (value === '' ? prop : prop + '=\"' + value + '\"');\n        }\n    }\n    return text;\n};\nconst renderVirtualAttributes = (attributes) => {\n    let text = '';\n    for (const prop in attributes) {\n        if (prop === 'children' || prop === dangerouslySetInnerHTML) {\n            continue;\n        }\n        const value = attributes[prop];\n        if (value != null) {\n            text += ' ' + (value === '' ? prop : prop + '=' + value + '');\n        }\n    }\n    return text;\n};\nconst renderNodeElementSync = (tagName, attributes, stream) => {\n    stream.write('<' + tagName + renderAttributes(attributes) + '>');\n    const empty = !!emptyElements[tagName];\n    if (empty) {\n        return;\n    }\n    // Render innerHTML\n    const innerHTML = attributes[dangerouslySetInnerHTML];\n    if (innerHTML != null) {\n        stream.write(innerHTML);\n    }\n    stream.write(`</${tagName}>`);\n};\n/** Render a component$ */\nconst renderSSRComponent = (rCtx, ssrCtx, stream, elCtx, node, flags, beforeClose) => {\n    const props = node.props;\n    setComponentProps(rCtx, elCtx, props.props);\n    return maybeThen(executeComponent(rCtx, elCtx), (res) => {\n        const hostElement = elCtx.$element$;\n        const newRCtx = res.rCtx;\n        const iCtx = newInvokeContext(ssrCtx.$static$.$locale$, hostElement, undefined);\n        iCtx.$subscriber$ = [SubscriptionType.HOST, hostElement];\n        iCtx.$renderCtx$ = newRCtx;\n        const newSSrContext = {\n            $static$: ssrCtx.$static$,\n            $projectedChildren$: splitProjectedChildren(node.children, ssrCtx),\n            $projectedCtxs$: [rCtx, ssrCtx],\n            $invocationContext$: iCtx,\n        };\n        const extraNodes = [];\n        if (elCtx.$appendStyles$) {\n            const isHTML = !!(flags & IS_HTML);\n            const array = isHTML ? ssrCtx.$static$.$headNodes$ : extraNodes;\n            for (const style of elCtx.$appendStyles$) {\n                array.push(_jsxSorted('style', {\n                    [dangerouslySetInnerHTML]: style.content,\n                    hidden: '',\n                    [QStyle]: style.styleId,\n                }, null, null, 0, null));\n            }\n        }\n        const newID = getNextIndex(rCtx);\n        const scopeId = elCtx.$scopeIds$ ? serializeSStyle(elCtx.$scopeIds$) : undefined;\n        const processedNode = _jsxSorted(node.type, {\n            [ELEMENT_ID]: newID,\n            [QScopedStyle]: scopeId,\n        }, null, res.node, 0, node.key);\n        elCtx.$id$ = newID;\n        ssrCtx.$static$.$contexts$.push(elCtx);\n        return renderNodeVirtual(processedNode, elCtx, extraNodes, newRCtx, newSSrContext, stream, flags, (stream) => {\n            if (elCtx.$flags$ & HOST_FLAG_NEED_ATTACH_LISTENER) {\n                const placeholderCtx = createMockQContext(1);\n                const listeners = placeholderCtx.li;\n                listeners.push(...elCtx.li);\n                elCtx.$flags$ &= ~HOST_FLAG_NEED_ATTACH_LISTENER;\n                placeholderCtx.$id$ = getNextIndex(rCtx);\n                const attributes = {\n                    type: 'placeholder',\n                    hidden: '',\n                    'q:id': placeholderCtx.$id$,\n                };\n                ssrCtx.$static$.$contexts$.push(placeholderCtx);\n                const groups = groupListeners(listeners);\n                for (const listener of groups) {\n                    const eventName = normalizeInvisibleEvents(listener[0]);\n                    attributes[eventName] = serializeQRLs(listener[1], rCtx.$static$.$containerState$, placeholderCtx);\n                    registerQwikEvent(eventName, rCtx.$static$.$containerState$);\n                }\n                renderNodeElementSync('script', attributes, stream);\n            }\n            const projectedChildren = newSSrContext.$projectedChildren$;\n            let missingSlotsDone;\n            if (projectedChildren) {\n                const nodes = Object.keys(projectedChildren).map((slotName) => {\n                    const content = projectedChildren[slotName];\n                    // projectedChildren[slotName] = undefined;\n                    if (content) {\n                        return _jsxSorted('q:template', { [QSlot]: slotName || true, hidden: true, 'aria-hidden': 'true' }, null, content, 0, null);\n                    }\n                });\n                const [_rCtx, sCtx] = newSSrContext.$projectedCtxs$;\n                const newSlotRctx = pushRenderContext(_rCtx);\n                newSlotRctx.$slotCtx$ = elCtx;\n                missingSlotsDone = processData(nodes, newSlotRctx, sCtx, stream, 0, undefined);\n            }\n            return beforeClose\n                ? maybeThen(missingSlotsDone, () => beforeClose(stream))\n                : missingSlotsDone;\n        });\n    });\n};\nconst splitProjectedChildren = (children, ssrCtx) => {\n    const flatChildren = flatVirtualChildren(children, ssrCtx);\n    if (flatChildren === null) {\n        return undefined;\n    }\n    const slotMap = {};\n    for (const child of flatChildren) {\n        let slotName = '';\n        if (isJSXNode(child)) {\n            slotName = child.props[QSlot] || '';\n        }\n        (slotMap[slotName] || (slotMap[slotName] = [])).push(child);\n    }\n    return slotMap;\n};\nconst createMockQContext = (nodeType) => {\n    const elm = new MockElement(nodeType);\n    return createContext(elm);\n};\nconst renderNode = (node, rCtx, ssrCtx, stream, flags, beforeClose) => {\n    const tagName = node.type;\n    const hostCtx = rCtx.$cmpCtx$;\n    if (typeof tagName === 'string') {\n        const key = node.key;\n        const props = node.props;\n        const immutable = node.constProps;\n        const elCtx = createMockQContext(1);\n        const elm = elCtx.$element$;\n        const isHead = tagName === 'head';\n        let openingElement = '<' + tagName;\n        let useSignal = false;\n        let hasRef = false;\n        let classStr = '';\n        let htmlStr = null;\n        const handleProp = (rawProp, value, isImmutable) => {\n            if (rawProp === 'ref') {\n                if (value !== undefined) {\n                    setRef(value, elm);\n                    hasRef = true;\n                }\n                return;\n            }\n            if (rawProp === 'children') {\n                // Already passed to the JSXNode\n                return;\n            }\n            if (isOnProp(rawProp)) {\n                setEvent(elCtx.li, rawProp, value, undefined);\n                return;\n            }\n            if (isSignal(value)) {\n                assertDefined(hostCtx, 'Signals can not be used outside the root');\n                if (isImmutable) {\n                    value = trackSignal(value, [\n                        SubscriptionType.PROP_IMMUTABLE,\n                        elm,\n                        value,\n                        hostCtx.$element$,\n                        rawProp,\n                        undefined,\n                    ]);\n                }\n                else {\n                    value = trackSignal(value, [\n                        SubscriptionType.PROP_MUTABLE,\n                        hostCtx.$element$,\n                        value,\n                        elm,\n                        rawProp,\n                        undefined,\n                    ]);\n                }\n                useSignal = true;\n            }\n            if (rawProp === dangerouslySetInnerHTML) {\n                htmlStr = value;\n                return;\n            }\n            if (rawProp.startsWith(PREVENT_DEFAULT)) {\n                registerQwikEvent(rawProp.slice(PREVENT_DEFAULT.length), rCtx.$static$.$containerState$);\n            }\n            let attrValue;\n            const prop = rawProp === 'htmlFor' ? 'for' : rawProp;\n            if (prop === 'class' || prop === 'className') {\n                classStr = serializeClass(value);\n            }\n            else if (prop === 'style') {\n                attrValue = stringifyStyle(value);\n            }\n            else if (isAriaAttribute(prop) || prop === 'draggable' || prop === 'spellcheck') {\n                attrValue = value != null ? String(value) : null;\n                value = attrValue;\n            }\n            else if (value === false || value == null) {\n                attrValue = null;\n            }\n            else {\n                attrValue = String(value);\n            }\n            if (attrValue != null) {\n                if (prop === 'value' && tagName === 'textarea') {\n                    htmlStr = escapeHtml(attrValue);\n                }\n                else if (isSSRUnsafeAttr(prop)) {\n                    if (qDev) {\n                        logError('Attribute value is unsafe for SSR');\n                    }\n                }\n                else {\n                    openingElement +=\n                        ' ' + (value === true ? prop : prop + '=\"' + escapeHtml(attrValue) + '\"');\n                }\n            }\n        };\n        for (const prop in props) {\n            handleProp(prop, props[prop], false);\n        }\n        if (immutable) {\n            for (const prop in immutable) {\n                handleProp(prop, props[prop], true);\n            }\n        }\n        const listeners = elCtx.li;\n        if (hostCtx) {\n            if (qDev) {\n                if (tagName === 'html') {\n                    throw qError(QError_canNotRenderHTML);\n                }\n            }\n            if (hostCtx.$scopeIds$?.length) {\n                const extra = hostCtx.$scopeIds$.join(' ');\n                classStr = classStr ? `${extra} ${classStr}` : extra;\n            }\n            if (hostCtx.$flags$ & HOST_FLAG_NEED_ATTACH_LISTENER) {\n                listeners.push(...hostCtx.li);\n                hostCtx.$flags$ &= ~HOST_FLAG_NEED_ATTACH_LISTENER;\n            }\n        }\n        // Reset HOST flags\n        if (qDev) {\n            if (flags & IS_PHASING && !(flags & IS_PHRASING_CONTAINER)) {\n                if (!(tagName in phasingContent)) {\n                    throw createJSXError(`<${tagName}> can not be rendered because one of its ancestor is a <p> or a <pre>.\\n\nThis goes against the HTML spec: https://html.spec.whatwg.org/multipage/dom.html#phrasing-content-2`, node);\n                }\n            }\n            if (tagName === 'table') {\n                flags |= IS_TABLE;\n            }\n            else {\n                if (flags & IS_TABLE && !(tagName in tableContent)) {\n                    throw createJSXError(`The <table> element requires that its direct children to be '<tbody>', '<thead>', '<tfoot>' or '<caption>' instead, '<${tagName}>' was rendered.`, node);\n                }\n                flags &= ~IS_TABLE;\n            }\n            if (tagName === 'button') {\n                if (flags & IS_BUTTON) {\n                    throw createJSXError(`<${tagName}> can not be rendered because one of its ancestor is already a <button>.\\n\nThis goes against the HTML spec: https://html.spec.whatwg.org/multipage/dom.html#interactive-content`, node);\n                }\n                else {\n                    flags |= IS_BUTTON;\n                }\n            }\n            if (tagName === 'a') {\n                if (flags & IS_ANCHOR) {\n                    throw createJSXError(`<${tagName}> can not be rendered because one of its ancestor is already a <a>.\\n\nThis goes against the HTML spec: https://html.spec.whatwg.org/multipage/dom.html#interactive-content`, node);\n                }\n                else {\n                    flags |= IS_ANCHOR;\n                }\n            }\n            if (tagName === 'svg' || tagName === 'math') {\n                // These types of elements are considered phrasing content, but contain children that aren't phrasing content.\n                flags |= IS_PHRASING_CONTAINER;\n            }\n            if (flags & IS_HEAD) {\n                if (!(tagName in headContent)) {\n                    throw createJSXError(`<${tagName}> can not be rendered because it's not a valid children of the <head> element. https://html.spec.whatwg.org/multipage/dom.html#metadata-content`, node);\n                }\n            }\n            if (flags & IS_HTML) {\n                if (!(tagName in htmlContent)) {\n                    throw createJSXError(`<${tagName}> can not be rendered because it's not a valid direct children of the <html> element, only <head> and <body> are allowed.`, node);\n                }\n            }\n            else if (tagName in htmlContent) {\n                throw createJSXError(`<${tagName}> can not be rendered because its parent is not a <html> element. Make sure the 'containerTagName' is set to 'html' in entry.ssr.tsx`, node);\n            }\n            if (tagName in startPhasingContent) {\n                flags |= IS_PHASING;\n            }\n        }\n        if (isHead) {\n            flags |= IS_HEAD;\n        }\n        if (tagName in invisibleElements) {\n            flags |= IS_INVISIBLE;\n        }\n        if (tagName in textOnlyElements) {\n            flags |= IS_TEXT;\n        }\n        if (classStr) {\n            openingElement += ' class=\"' + escapeHtml(classStr) + '\"';\n        }\n        if (listeners.length > 0) {\n            const groups = groupListeners(listeners);\n            const isInvisible = (flags & IS_INVISIBLE) !== 0;\n            for (const listener of groups) {\n                const eventName = isInvisible ? normalizeInvisibleEvents(listener[0]) : listener[0];\n                openingElement +=\n                    ' ' +\n                        eventName +\n                        '=\"' +\n                        serializeQRLs(listener[1], rCtx.$static$.$containerState$, elCtx) +\n                        '\"';\n                registerQwikEvent(eventName, rCtx.$static$.$containerState$);\n            }\n        }\n        if (key != null) {\n            openingElement += ' q:key=\"' + escapeHtml(key) + '\"';\n        }\n        if (hasRef || useSignal || listeners.length > 0) {\n            if (hasRef || useSignal || listenersNeedId(listeners)) {\n                const newID = getNextIndex(rCtx);\n                openingElement += ' q:id=\"' + newID + '\"';\n                elCtx.$id$ = newID;\n            }\n            ssrCtx.$static$.$contexts$.push(elCtx);\n        }\n        if (flags & IS_HEAD) {\n            openingElement += ' q:head';\n        }\n        if (qDev && qInspector && node.dev && !(flags & IS_HEAD)) {\n            const sanitizedFileName = node?.dev?.fileName?.replace(/\\\\/g, '/');\n            if (sanitizedFileName && !/data-qwik-inspector/.test(openingElement)) {\n                openingElement += ` data-qwik-inspector=\"${escapeHtml(`${sanitizedFileName}:${node.dev.lineNumber}:${node.dev.columnNumber}`)}\"`;\n            }\n        }\n        openingElement += '>';\n        stream.write(openingElement);\n        if (tagName in emptyElements) {\n            return;\n        }\n        if (htmlStr != null) {\n            stream.write(String(htmlStr));\n            stream.write(`</${tagName}>`);\n            return;\n        }\n        if (tagName === 'html') {\n            flags |= IS_HTML;\n        }\n        else {\n            flags &= ~IS_HTML;\n        }\n        if (node.flags & static_subtree) {\n            flags |= IS_IMMUTABLE;\n        }\n        const promise = processData(node.children, rCtx, ssrCtx, stream, flags);\n        return maybeThen(promise, () => {\n            // If head inject base styles\n            if (isHead) {\n                for (const node of ssrCtx.$static$.$headNodes$) {\n                    renderNodeElementSync(node.type, node.props, stream);\n                }\n                ssrCtx.$static$.$headNodes$.length = 0;\n            }\n            // Fast path\n            if (!beforeClose) {\n                stream.write(`</${tagName}>`);\n                return;\n            }\n            // Inject before close\n            return maybeThen(beforeClose(stream), () => {\n                stream.write(`</${tagName}>`);\n            });\n        });\n    }\n    if (tagName === Virtual) {\n        const elCtx = createMockQContext(111);\n        if (rCtx.$slotCtx$) {\n            elCtx.$parentCtx$ = rCtx.$slotCtx$;\n            elCtx.$realParentCtx$ = rCtx.$cmpCtx$;\n        }\n        else {\n            elCtx.$parentCtx$ = rCtx.$cmpCtx$;\n        }\n        if (hostCtx && hostCtx.$flags$ & HOST_FLAG_DYNAMIC) {\n            addDynamicSlot(hostCtx, elCtx);\n        }\n        return renderNodeVirtual(node, elCtx, undefined, rCtx, ssrCtx, stream, flags, beforeClose);\n    }\n    if (tagName === SSRRaw) {\n        stream.write(node.props.data);\n        return;\n    }\n    if (tagName === InternalSSRStream) {\n        return renderGenerator(node, rCtx, ssrCtx, stream, flags);\n    }\n    // Inline component\n    const res = invoke(ssrCtx.$invocationContext$, tagName, node.props, node.key, node.flags, node.dev);\n    if (!shouldWrapFunctional(res, node)) {\n        return processData(res, rCtx, ssrCtx, stream, flags, beforeClose);\n    }\n    return renderNode(_jsxSorted(Virtual, EMPTY_OBJ, null, res, 0, node.key), rCtx, ssrCtx, stream, flags, beforeClose);\n};\n/** Embed metadata while rendering the tree, to be used when resuming */\nconst processData = (node, rCtx, ssrCtx, stream, flags, beforeClose) => {\n    if (node == null || typeof node === 'boolean') {\n        return;\n    }\n    if (isString(node) || typeof node === 'number') {\n        stream.write(escapeHtml(String(node)));\n    }\n    else if (isJSXNode(node)) {\n        return renderNode(node, rCtx, ssrCtx, stream, flags, beforeClose);\n    }\n    else if (isArray(node)) {\n        return walkChildren(node, rCtx, ssrCtx, stream, flags);\n    }\n    else if (isSignal(node)) {\n        const insideText = flags & IS_TEXT;\n        const hostEl = rCtx.$cmpCtx$?.$element$;\n        let value;\n        if (hostEl) {\n            if (!insideText) {\n                const id = getNextIndex(rCtx);\n                const subs = flags & IS_IMMUTABLE\n                    ? [\n                        SubscriptionType.TEXT_IMMUTABLE,\n                        ('#' + id),\n                        node,\n                        ('#' + id),\n                    ]\n                    : [SubscriptionType.TEXT_MUTABLE, hostEl, node, ('#' + id)];\n                value = trackSignal(node, subs);\n                if (isString(value)) {\n                    const str = jsxToString(value);\n                    ssrCtx.$static$.$textNodes$.set(str, id);\n                }\n                stream.write(`<!--t=${id}-->`);\n                processData(value, rCtx, ssrCtx, stream, flags, beforeClose);\n                stream.write(`<!---->`);\n                return;\n            }\n            else {\n                value = invoke(ssrCtx.$invocationContext$, () => node.value);\n            }\n        }\n        stream.write(escapeHtml(jsxToString(value)));\n        return;\n    }\n    else if (isPromise(node)) {\n        stream.write(FLUSH_COMMENT);\n        return node.then((node) => processData(node, rCtx, ssrCtx, stream, flags, beforeClose));\n    }\n    else {\n        logWarn('A unsupported value was passed to the JSX, skipping render. Value:', node);\n        return;\n    }\n};\nconst walkChildren = (children, rCtx, ssrContext, stream, flags) => {\n    if (children == null) {\n        return;\n    }\n    if (!isArray(children)) {\n        return processData(children, rCtx, ssrContext, stream, flags);\n    }\n    const len = children.length;\n    if (len === 1) {\n        return processData(children[0], rCtx, ssrContext, stream, flags);\n    }\n    if (len === 0) {\n        return;\n    }\n    let currentIndex = 0;\n    const buffers = [];\n    return children.reduce((prevPromise, child, index) => {\n        const buffer = [];\n        buffers.push(buffer);\n        const localStream = prevPromise\n            ? {\n                write(chunk) {\n                    if (currentIndex === index) {\n                        stream.write(chunk);\n                    }\n                    else {\n                        buffer.push(chunk);\n                    }\n                },\n            }\n            : stream;\n        const rendered = processData(child, rCtx, ssrContext, localStream, flags);\n        if (prevPromise || isPromise(rendered)) {\n            const next = () => {\n                currentIndex++;\n                if (buffers.length > currentIndex) {\n                    buffers[currentIndex].forEach((chunk) => stream.write(chunk));\n                }\n            };\n            if (isPromise(rendered)) {\n                if (prevPromise) {\n                    return Promise.all([rendered, prevPromise]).then(next);\n                }\n                else {\n                    return rendered.then(next);\n                }\n            }\n            return prevPromise.then(next);\n        }\n        else {\n            currentIndex++;\n            return undefined;\n        }\n    }, undefined);\n};\nconst flatVirtualChildren = (children, ssrCtx) => {\n    if (children == null) {\n        return null;\n    }\n    const result = _flatVirtualChildren(children, ssrCtx);\n    const nodes = isArray(result) ? result : [result];\n    if (nodes.length === 0) {\n        return null;\n    }\n    return nodes;\n};\nconst _flatVirtualChildren = (children, ssrCtx) => {\n    if (children == null) {\n        return null;\n    }\n    if (isArray(children)) {\n        return children.flatMap((c) => _flatVirtualChildren(c, ssrCtx));\n    }\n    else if (isJSXNode(children) &&\n        isFunction(children.type) &&\n        children.type !== SSRRaw &&\n        children.type !== InternalSSRStream &&\n        children.type !== Virtual) {\n        const res = invoke(ssrCtx.$invocationContext$, children.type, children.props, children.key, children.flags);\n        return flatVirtualChildren(res, ssrCtx);\n    }\n    return children;\n};\nconst setComponentProps = (rCtx, elCtx, expectProps) => {\n    const keys = Object.keys(expectProps);\n    const target = createPropsState();\n    elCtx.$props$ = createProxy(target, rCtx.$static$.$containerState$);\n    if (keys.length === 0) {\n        return;\n    }\n    const immutableMeta = (target[_CONST_PROPS] =\n        expectProps[_CONST_PROPS] ?? EMPTY_OBJ);\n    for (const prop of keys) {\n        if (prop === 'children' || prop === QSlot) {\n            continue;\n        }\n        if (isSignal(immutableMeta[prop])) {\n            target['_IMMUTABLE_PREFIX' + prop] = immutableMeta[prop];\n        }\n        else {\n            target[prop] = expectProps[prop];\n        }\n    }\n};\nconst invisibleElements = {\n    head: true,\n    style: true,\n    script: true,\n    link: true,\n    meta: true,\n};\nconst textOnlyElements = {\n    title: true,\n    style: true,\n    script: true,\n    noframes: true,\n    textarea: true,\n};\nconst emptyElements = {\n    area: true,\n    base: true,\n    basefont: true,\n    bgsound: true,\n    br: true,\n    col: true,\n    embed: true,\n    frame: true,\n    hr: true,\n    img: true,\n    input: true,\n    keygen: true,\n    link: true,\n    meta: true,\n    param: true,\n    source: true,\n    track: true,\n    wbr: true,\n};\nconst startPhasingContent = {\n    p: true,\n    pre: true,\n};\nconst htmlContent = {\n    head: true,\n    body: true,\n};\nconst tableContent = {\n    tbody: true,\n    thead: true,\n    tfoot: true,\n    caption: true,\n    colgroup: true,\n};\nconst headContent = {\n    meta: true,\n    title: true,\n    link: true,\n    style: true,\n    script: true,\n    noscript: true,\n    template: true,\n    base: true,\n};\nconst phasingContent = {\n    a: true,\n    abbr: true,\n    area: true,\n    audio: true,\n    b: true,\n    bdi: true,\n    bdo: true,\n    br: true,\n    button: true,\n    canvas: true,\n    cite: true,\n    code: true,\n    command: true,\n    data: true,\n    datalist: true,\n    del: true,\n    dfn: true,\n    em: true,\n    embed: true,\n    i: true,\n    iframe: true,\n    img: true,\n    input: true,\n    ins: true,\n    itemprop: true,\n    kbd: true,\n    keygen: true,\n    label: true,\n    link: true,\n    map: true,\n    mark: true,\n    math: true,\n    meta: true,\n    meter: true,\n    noscript: true,\n    object: true,\n    option: true,\n    output: true,\n    picture: true,\n    progress: true,\n    q: true,\n    ruby: true,\n    s: true,\n    samp: true,\n    script: true,\n    select: true,\n    slot: true,\n    small: true,\n    span: true,\n    strong: true,\n    sub: true,\n    sup: true,\n    svg: true,\n    template: true,\n    textarea: true,\n    time: true,\n    u: true,\n    var: true,\n    video: true,\n    wbr: true,\n};\nconst ESCAPE_HTML = /[&<>'\"]/g;\nexport const registerQwikEvent = (prop, containerState) => {\n    containerState.$events$.add(getEventName(prop));\n};\nconst escapeHtml = (s) => {\n    return s.replace(ESCAPE_HTML, (c) => {\n        switch (c) {\n            case '&':\n                return '&amp;';\n            case '<':\n                return '&lt;';\n            case '>':\n                return '&gt;';\n            case '\"':\n                return '&quot;';\n            case \"'\":\n                return '&#39;';\n            default:\n                return '';\n        }\n    });\n};\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\nconst unsafeAttrCharRE = /[>/=\"'\\u0009\\u000a\\u000c\\u0020]/; // eslint-disable-line no-control-regex\nexport const isSSRUnsafeAttr = (name) => {\n    return unsafeAttrCharRE.test(name);\n};\nconst listenersNeedId = (listeners) => {\n    return listeners.some((l) => l[1].$captureRef$ && l[1].$captureRef$.length > 0);\n};\nconst addDynamicSlot = (hostCtx, elCtx) => {\n    const dynamicSlots = (hostCtx.$dynamicSlots$ || (hostCtx.$dynamicSlots$ = []));\n    if (!dynamicSlots.includes(elCtx)) {\n        dynamicSlots.push(elCtx);\n    }\n};\nconst normalizeInvisibleEvents = (eventName) => {\n    return eventName === 'on:qvisible' ? 'on-document:qinit' : eventName;\n};\n//# sourceMappingURL=data:application/json;base64,","import {} from '../../component/component.public';\nimport { SERIALIZABLE_STATE } from '../../container/serializers';\nimport { ELEMENT_KEY, ELEMENT_PROPS, OnRenderProp } from '../../util/markers';\nimport {} from './ssr-types';\nimport { executeComponent2 } from '../shared/component-execution';\nimport { ChoreType } from '../shared/scheduler';\nexport const applyInlineComponent = (ssr, component$Host, component, jsx) => {\n    const host = ssr.getLastNode();\n    return executeComponent2(ssr, host, component$Host, component, jsx.propsC);\n};\nexport const applyQwikComponentBody = (ssr, jsx, component) => {\n    const host = ssr.getLastNode();\n    const [componentQrl] = component[SERIALIZABLE_STATE];\n    const srcProps = jsx.props;\n    const scheduler = ssr.$scheduler$;\n    host.setProp(OnRenderProp, componentQrl);\n    host.setProp(ELEMENT_PROPS, srcProps);\n    if (jsx.key !== null) {\n        host.setProp(ELEMENT_KEY, jsx.key);\n    }\n    return scheduler(ChoreType.COMPONENT_SSR, host, componentQrl, srcProps);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3NyLXJlbmRlci1jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdjIvc3NyL3Nzci1yZW5kZXItY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBbUMsTUFBTSxrQ0FBa0MsQ0FBQztBQUNuRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUVqRSxPQUFPLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM5RSxPQUFPLEVBQW9DLE1BQU0sYUFBYSxDQUFDO0FBQy9ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUloRCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUNsQyxHQUFpQixFQUNqQixjQUF3QixFQUN4QixTQUEwQixFQUMxQixHQUFZLEVBQ1osRUFBRTtJQUNGLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMvQixPQUFPLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0UsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsQ0FDcEMsR0FBaUIsRUFDakIsR0FBWSxFQUNaLFNBQW9CLEVBQ08sRUFBRTtJQUM3QixNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDL0IsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFJLFNBQWlCLENBQUMsa0JBQWtCLENBQW1DLENBQUM7SUFDaEcsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztJQUMzQixNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDO0lBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLElBQUksR0FBRyxDQUFDLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUNELE9BQU8sU0FBUyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztBQUMxRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEpTWE5vZGUgfSBmcm9tICdAYnVpbGRlci5pby9xd2lrJztcbmltcG9ydCB7IHR5cGUgQ29tcG9uZW50LCB0eXBlIE9uUmVuZGVyRm4gfSBmcm9tICcuLi8uLi9jb21wb25lbnQvY29tcG9uZW50LnB1YmxpYyc7XG5pbXBvcnQgeyBTRVJJQUxJWkFCTEVfU1RBVEUgfSBmcm9tICcuLi8uLi9jb250YWluZXIvc2VyaWFsaXplcnMnO1xuaW1wb3J0IHR5cGUgeyBRUkxJbnRlcm5hbCB9IGZyb20gJy4uLy4uL3FybC9xcmwtY2xhc3MnO1xuaW1wb3J0IHsgRUxFTUVOVF9LRVksIEVMRU1FTlRfUFJPUFMsIE9uUmVuZGVyUHJvcCB9IGZyb20gJy4uLy4uL3V0aWwvbWFya2Vycyc7XG5pbXBvcnQgeyB0eXBlIElTc3JOb2RlLCB0eXBlIFNTUkNvbnRhaW5lciB9IGZyb20gJy4vc3NyLXR5cGVzJztcbmltcG9ydCB7IGV4ZWN1dGVDb21wb25lbnQyIH0gZnJvbSAnLi4vc2hhcmVkL2NvbXBvbmVudC1leGVjdXRpb24nO1xuaW1wb3J0IHsgQ2hvcmVUeXBlIH0gZnJvbSAnLi4vc2hhcmVkL3NjaGVkdWxlcic7XG5pbXBvcnQgdHlwZSB7IFZhbHVlT3JQcm9taXNlIH0gZnJvbSAnLi4vLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IEpTWE91dHB1dCB9IGZyb20gJy4uLy4uL3JlbmRlci9qc3gvdHlwZXMvanN4LW5vZGUnO1xuXG5leHBvcnQgY29uc3QgYXBwbHlJbmxpbmVDb21wb25lbnQgPSAoXG4gIHNzcjogU1NSQ29udGFpbmVyLFxuICBjb21wb25lbnQkSG9zdDogSVNzck5vZGUsXG4gIGNvbXBvbmVudDogT25SZW5kZXJGbjxhbnk+LFxuICBqc3g6IEpTWE5vZGVcbikgPT4ge1xuICBjb25zdCBob3N0ID0gc3NyLmdldExhc3ROb2RlKCk7XG4gIHJldHVybiBleGVjdXRlQ29tcG9uZW50Mihzc3IsIGhvc3QsIGNvbXBvbmVudCRIb3N0LCBjb21wb25lbnQsIGpzeC5wcm9wc0MpO1xufTtcblxuZXhwb3J0IGNvbnN0IGFwcGx5UXdpa0NvbXBvbmVudEJvZHkgPSAoXG4gIHNzcjogU1NSQ29udGFpbmVyLFxuICBqc3g6IEpTWE5vZGUsXG4gIGNvbXBvbmVudDogQ29tcG9uZW50XG4pOiBWYWx1ZU9yUHJvbWlzZTxKU1hPdXRwdXQ+ID0+IHtcbiAgY29uc3QgaG9zdCA9IHNzci5nZXRMYXN0Tm9kZSgpO1xuICBjb25zdCBbY29tcG9uZW50UXJsXSA9IChjb21wb25lbnQgYXMgYW55KVtTRVJJQUxJWkFCTEVfU1RBVEVdIGFzIFtRUkxJbnRlcm5hbDxPblJlbmRlckZuPGFueT4+XTtcbiAgY29uc3Qgc3JjUHJvcHMgPSBqc3gucHJvcHM7XG4gIGNvbnN0IHNjaGVkdWxlciA9IHNzci4kc2NoZWR1bGVyJDtcbiAgaG9zdC5zZXRQcm9wKE9uUmVuZGVyUHJvcCwgY29tcG9uZW50UXJsKTtcbiAgaG9zdC5zZXRQcm9wKEVMRU1FTlRfUFJPUFMsIHNyY1Byb3BzKTtcbiAgaWYgKGpzeC5rZXkgIT09IG51bGwpIHtcbiAgICBob3N0LnNldFByb3AoRUxFTUVOVF9LRVksIGpzeC5rZXkpO1xuICB9XG4gIHJldHVybiBzY2hlZHVsZXIoQ2hvcmVUeXBlLkNPTVBPTkVOVF9TU1IsIGhvc3QsIGNvbXBvbmVudFFybCwgc3JjUHJvcHMpO1xufTtcbiJdfQ==","export function isAsyncGenerator(value) {\n    return !!value[Symbol.asyncIterator];\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXN5bmMtZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvYXN5bmMtZ2VuZXJhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxLQUFhO0lBQzVDLE9BQU8sQ0FBQyxDQUFFLEtBQXdCLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzNELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaXNBc3luY0dlbmVyYXRvcih2YWx1ZTogb2JqZWN0KTogdmFsdWUgaXMgQXN5bmNHZW5lcmF0b3Ige1xuICByZXR1cm4gISEodmFsdWUgYXMgQXN5bmNHZW5lcmF0b3IpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXTtcbn1cbiJdfQ==","import { isDev } from '@builder.io/qwik/build';\nimport { isQwikComponent } from '../../component/component.public';\nimport { isQrl } from '../../qrl/qrl-class';\nimport { serializeAttribute } from '../../render/execute-component';\nimport { Fragment } from '../../render/jsx/jsx-runtime';\nimport { Slot } from '../../render/jsx/slot.public';\nimport { SubscriptionType } from '../../state/common';\nimport { SignalDerived, isSignal } from '../../state/signal';\nimport { trackSignal } from '../../use/use-core';\nimport { EMPTY_ARRAY } from '../../util/flyweight';\nimport { throwErrorAndStop } from '../../util/log';\nimport { ELEMENT_KEY, FLUSH_COMMENT, QDefaultSlot, QScopedStyle, QSlot } from '../../util/markers';\nimport { isPromise } from '../../util/promises';\nimport { isFunction } from '../../util/types';\nimport { convertEventNameFromJsxPropToHtmlAttr, getEventNameFromJsxProp, isJsxPropertyAnEventName, isPreventDefault, } from '../shared/event-names';\nimport { addComponentStylePrefix, hasClassAttr, isClassAttr } from '../shared/scoped-styles';\nimport { qrlToString } from '../shared/shared-serialization';\nimport { DEBUG_TYPE, VirtualType } from '../shared/types';\nimport { applyInlineComponent, applyQwikComponentBody } from './ssr-render-component';\nimport { SSRComment, SSRRaw, SSRStream, } from '../../render/jsx/utils.public';\nimport { isAsyncGenerator } from '../../util/async-generator';\nimport { qInspector } from '../../util/qdev';\nclass SetScopedStyle {\n    constructor($scopedStyle$) {\n        this.$scopedStyle$ = $scopedStyle$;\n    }\n}\n/** @internal */\nexport function _walkJSX(ssr, value, allowPromises, currentStyleScoped) {\n    const stack = [value];\n    let resolveDrain;\n    let rejectDrain;\n    const drained = allowPromises &&\n        new Promise((res, rej) => {\n            resolveDrain = res;\n            rejectDrain = rej;\n        });\n    const enqueue = (value) => stack.push(value);\n    const resolveValue = (value) => {\n        stack.push(value);\n        drain();\n    };\n    const drain = () => {\n        while (stack.length) {\n            const value = stack.pop();\n            if (value instanceof SetScopedStyle) {\n                currentStyleScoped = value.$scopedStyle$;\n                continue;\n            }\n            else if (typeof value === 'function') {\n                if (value === Promise) {\n                    if (!allowPromises) {\n                        return throwErrorAndStop('Promises not expected here.');\n                    }\n                    stack.pop().then(resolveValue, rejectDrain);\n                    return;\n                }\n                const waitOn = value.apply(ssr);\n                if (waitOn) {\n                    if (!allowPromises) {\n                        return throwErrorAndStop('Promises not expected here.');\n                    }\n                    waitOn.then(drain, rejectDrain);\n                    return;\n                }\n                continue;\n            }\n            processJSXNode(ssr, enqueue, value, currentStyleScoped);\n        }\n        if (stack.length === 0 && allowPromises) {\n            resolveDrain();\n        }\n    };\n    drain();\n    return drained;\n}\nfunction processJSXNode(ssr, enqueue, value, styleScoped) {\n    // console.log('processJSXNode', value);\n    if (value === null || value === undefined) {\n        ssr.textNode('');\n    }\n    else if (typeof value === 'boolean') {\n        ssr.textNode('');\n    }\n    else if (typeof value === 'number') {\n        ssr.textNode(String(value));\n    }\n    else if (typeof value === 'string') {\n        ssr.textNode(value);\n    }\n    else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n            for (let i = value.length - 1; i >= 0; i--) {\n                enqueue(value[i]);\n            }\n        }\n        else if (isSignal(value)) {\n            ssr.openFragment(isDev ? [DEBUG_TYPE, VirtualType.DerivedSignal] : EMPTY_ARRAY);\n            const signalNode = ssr.getLastNode();\n            // TODO(mhevery): It is unclear to me why we need to serialize host for SignalDerived.\n            // const host = ssr.getComponentFrame(0)!.componentNode as fixMeAny;\n            const host = signalNode;\n            enqueue(ssr.closeFragment);\n            enqueue(trackSignal(value, [SubscriptionType.TEXT_MUTABLE, host, value, signalNode]));\n        }\n        else if (isPromise(value)) {\n            ssr.openFragment(isDev ? [DEBUG_TYPE, VirtualType.Awaited] : EMPTY_ARRAY);\n            enqueue(ssr.closeFragment);\n            enqueue(value);\n            enqueue(Promise);\n            enqueue(() => ssr.commentNode(FLUSH_COMMENT));\n        }\n        else if (isAsyncGenerator(value)) {\n            enqueue(async () => {\n                for await (const chunk of value) {\n                    await _walkJSX(ssr, chunk, true, styleScoped);\n                    ssr.commentNode(FLUSH_COMMENT);\n                }\n            });\n        }\n        else {\n            const jsx = value;\n            const type = jsx.type;\n            // Below, JSXChildren allows functions and regexes, but we assume the dev only uses those as appropriate.\n            if (typeof type === 'string') {\n                // append class attribute if styleScopedId exists and there is no class attribute\n                const classAttributeExists = hasClassAttr(jsx.varProps) || (jsx.constProps && hasClassAttr(jsx.constProps));\n                if (!classAttributeExists && styleScoped) {\n                    if (!jsx.constProps) {\n                        jsx.constProps = {};\n                    }\n                    jsx.constProps['class'] = '';\n                }\n                appendQwikInspectorAttribute(jsx);\n                const innerHTML = ssr.openElement(type, varPropsToSsrAttrs(jsx.varProps, jsx.constProps, ssr.serializationCtx, styleScoped, jsx.key), constPropsToSsrAttrs(jsx.constProps, jsx.varProps, ssr.serializationCtx, styleScoped));\n                if (innerHTML) {\n                    ssr.htmlNode(innerHTML);\n                }\n                enqueue(ssr.closeElement);\n                if (type === 'head') {\n                    enqueue(ssr.additionalHeadNodes);\n                    enqueue(ssr.emitQwikLoaderAtTopIfNeeded);\n                }\n                else if (type === 'body') {\n                    enqueue(ssr.additionalBodyNodes);\n                }\n                const children = jsx.children;\n                children != null && enqueue(children);\n            }\n            else if (isFunction(type)) {\n                if (type === Fragment) {\n                    let attrs = jsx.key != null ? [ELEMENT_KEY, jsx.key] : EMPTY_ARRAY;\n                    if (isDev) {\n                        attrs = [DEBUG_TYPE, VirtualType.Fragment, ...attrs]; // Add debug info.\n                    }\n                    ssr.openFragment(attrs);\n                    enqueue(ssr.closeFragment);\n                    // In theory we could get functions or regexes, but we assume all is well\n                    const children = jsx.children;\n                    children != null && enqueue(children);\n                }\n                else if (type === Slot) {\n                    const componentFrame = ssr.getNearestComponentFrame() || ssr.unclaimedProjectionComponentFrameQueue.shift();\n                    const projectionAttrs = isDev ? [DEBUG_TYPE, VirtualType.Projection] : [];\n                    if (componentFrame) {\n                        const compId = componentFrame.componentNode.id || '';\n                        projectionAttrs.push(':', compId);\n                        ssr.openProjection(projectionAttrs);\n                        const host = componentFrame.componentNode;\n                        const node = ssr.getLastNode();\n                        const slotName = getSlotName(host, jsx);\n                        projectionAttrs.push(QSlot, slotName);\n                        enqueue(new SetScopedStyle(styleScoped));\n                        enqueue(ssr.closeProjection);\n                        const slotDefaultChildren = (jsx.children || null);\n                        const slotChildren = componentFrame.consumeChildrenForSlot(node, slotName) || slotDefaultChildren;\n                        if (slotDefaultChildren && slotChildren !== slotDefaultChildren) {\n                            ssr.addUnclaimedProjection(componentFrame, QDefaultSlot, slotDefaultChildren);\n                        }\n                        enqueue(slotChildren);\n                        enqueue(new SetScopedStyle(componentFrame.childrenScopedStyle));\n                    }\n                    else {\n                        // Even thought we are not projecting we still need to leave a marker for the slot.\n                        ssr.openFragment(isDev ? [DEBUG_TYPE, VirtualType.Projection] : EMPTY_ARRAY);\n                        ssr.closeFragment();\n                    }\n                }\n                else if (type === SSRComment) {\n                    ssr.commentNode(jsx.props.data || '');\n                }\n                else if (type === SSRStream) {\n                    ssr.commentNode(FLUSH_COMMENT);\n                    const generator = jsx.children;\n                    let value;\n                    if (isFunction(generator)) {\n                        value = generator({\n                            async write(chunk) {\n                                await _walkJSX(ssr, chunk, true, styleScoped);\n                                ssr.commentNode(FLUSH_COMMENT);\n                            },\n                        });\n                    }\n                    else {\n                        value = generator;\n                    }\n                    enqueue(value);\n                    isPromise(value) && enqueue(Promise);\n                }\n                else if (type === SSRRaw) {\n                    ssr.htmlNode(jsx.props.data);\n                }\n                else if (isQwikComponent(type)) {\n                    // prod: use new instance of an array for props, we always modify props for a component\n                    ssr.openComponent(isDev ? [DEBUG_TYPE, VirtualType.Component] : []);\n                    const host = ssr.getLastNode();\n                    ssr.getComponentFrame(0).distributeChildrenIntoSlots(jsx.children, styleScoped);\n                    const jsxOutput = applyQwikComponentBody(ssr, jsx, type);\n                    const compStyleComponentId = addComponentStylePrefix(host.getProp(QScopedStyle));\n                    enqueue(new SetScopedStyle(styleScoped));\n                    enqueue(ssr.closeComponent);\n                    enqueue(jsxOutput);\n                    isPromise(jsxOutput) && enqueue(Promise);\n                    enqueue(new SetScopedStyle(compStyleComponentId));\n                }\n                else {\n                    ssr.openFragment(isDev ? [DEBUG_TYPE, VirtualType.InlineComponent] : EMPTY_ARRAY);\n                    enqueue(ssr.closeFragment);\n                    const component = ssr.getComponentFrame(0);\n                    const jsxOutput = applyInlineComponent(ssr, component && component.componentNode, type, jsx);\n                    enqueue(jsxOutput);\n                    isPromise(jsxOutput) && enqueue(Promise);\n                }\n            }\n        }\n    }\n}\nexport function varPropsToSsrAttrs(varProps, constProps, serializationCtx, styleScopedId, key) {\n    return toSsrAttrs(varProps, constProps, serializationCtx, true, styleScopedId, key);\n}\nexport function constPropsToSsrAttrs(constProps, varProps, serializationCtx, styleScopedId) {\n    return toSsrAttrs(constProps, varProps, serializationCtx, false, styleScopedId);\n}\nexport function toSsrAttrs(record, anotherRecord, serializationCtx, pushMergedEventProps, styleScopedId, key) {\n    if (record == null) {\n        return null;\n    }\n    const ssrAttrs = [];\n    for (const key in record) {\n        let value = record[key];\n        if (isJsxPropertyAnEventName(key)) {\n            if (anotherRecord) {\n                /**\n                 * If we have two sources of the same event like this:\n                 *\n                 * ```tsx\n                 * const Counter = component$((props: { initial: number }) => {\n                 *  const count = useSignal(props.initial);\n                 *  useOnWindow(\n                 *    'dblclick',\n                 *    $(() => count.value++)\n                 *  );\n                 *  return <button window:onDblClick$={() => count.value++}>Count: {count.value}!</button>;\n                 * });\n                 * ```\n                 *\n                 * Then we can end with the const and var props with the same (doubled) event. We process\n                 * the const and var props separately, so:\n                 *\n                 * - For the var props we need to merge them into the one value (array)\n                 * - For the const props we need to just skip, because we will handle this in the var props\n                 */\n                const anotherValue = getEventProp(anotherRecord, key);\n                if (anotherValue) {\n                    if (pushMergedEventProps) {\n                        // merge values from the const props with the var props\n                        value = getMergedEventPropValues(value, anotherValue);\n                    }\n                    else {\n                        continue;\n                    }\n                }\n            }\n            const eventValue = setEvent(serializationCtx, key, value);\n            if (eventValue) {\n                ssrAttrs.push(convertEventNameFromJsxPropToHtmlAttr(key), eventValue);\n            }\n            continue;\n        }\n        if (isSignal(value)) {\n            // write signal as is. We will track this signal inside `writeAttrs`\n            if (isClassAttr(key)) {\n                // additionally append styleScopedId for class attr\n                ssrAttrs.push(key, [value, styleScopedId]);\n            }\n            else {\n                ssrAttrs.push(key, value);\n            }\n            continue;\n        }\n        if (isPreventDefault(key)) {\n            addPreventDefaultEventToSerializationContext(serializationCtx, key);\n        }\n        value = serializeAttribute(key, value, styleScopedId);\n        ssrAttrs.push(key, value);\n    }\n    if (key != null) {\n        ssrAttrs.push(ELEMENT_KEY, key);\n    }\n    return ssrAttrs;\n}\nfunction getMergedEventPropValues(value, anotherValue) {\n    let mergedValue = value;\n    // merge values from the const props with the var props\n    if (Array.isArray(value) && Array.isArray(anotherValue)) {\n        // both values are arrays\n        mergedValue = value.concat(anotherValue);\n    }\n    else if (Array.isArray(mergedValue)) {\n        // only first value is array\n        mergedValue.push(anotherValue);\n    }\n    else if (Array.isArray(anotherValue)) {\n        // only second value is array\n        mergedValue = anotherValue;\n        mergedValue.push(value);\n    }\n    else {\n        // none of these values are array\n        mergedValue = [value, anotherValue];\n    }\n    return mergedValue;\n}\nfunction getEventProp(record, propKey) {\n    const eventProp = propKey.toLowerCase();\n    for (const prop in record) {\n        if (prop.toLowerCase() === eventProp) {\n            return record[prop];\n        }\n    }\n    return null;\n}\nfunction setEvent(serializationCtx, key, rawValue) {\n    let value = null;\n    const qrls = rawValue;\n    const appendToValue = (valueToAppend) => {\n        value = (value == null ? '' : value + '\\n') + valueToAppend;\n    };\n    if (Array.isArray(qrls)) {\n        for (let i = 0; i <= qrls.length; i++) {\n            const qrl = qrls[i];\n            if (isQrl(qrl)) {\n                appendToValue(qrlToString(serializationCtx, qrl));\n                addQwikEventToSerializationContext(serializationCtx, key, qrl);\n            }\n            else if (qrl != null) {\n                // nested arrays etc.\n                const nestedValue = setEvent(serializationCtx, key, qrl);\n                if (nestedValue) {\n                    appendToValue(nestedValue);\n                }\n            }\n        }\n    }\n    else if (isQrl(qrls)) {\n        value = qrlToString(serializationCtx, qrls);\n        addQwikEventToSerializationContext(serializationCtx, key, qrls);\n    }\n    return value;\n}\nfunction addQwikEventToSerializationContext(serializationCtx, key, qrl) {\n    const eventName = getEventNameFromJsxProp(key);\n    if (eventName) {\n        serializationCtx.$eventNames$.add(eventName);\n        serializationCtx.$eventQrls$.add(qrl);\n    }\n}\nfunction addPreventDefaultEventToSerializationContext(serializationCtx, key) {\n    // skip first 15 chars, this is length of the `preventdefault:`\n    const eventName = key.substring(15);\n    if (eventName) {\n        serializationCtx.$eventNames$.add(eventName);\n    }\n}\nfunction getSlotName(host, jsx) {\n    const constProps = jsx.constProps;\n    if (constProps && typeof constProps == 'object' && 'name' in constProps) {\n        const constValue = constProps.name;\n        if (constValue instanceof SignalDerived) {\n            return trackSignal(constValue, [SubscriptionType.HOST, host]);\n        }\n    }\n    return jsx.props.name || QDefaultSlot;\n}\nfunction appendQwikInspectorAttribute(jsx) {\n    if (isDev && qInspector && jsx.dev && jsx.type !== 'head') {\n        const sanitizedFileName = jsx.dev.fileName?.replace(/\\\\/g, '/');\n        const qwikInspectorAttr = 'data-qwik-inspector';\n        if (sanitizedFileName && !(qwikInspectorAttr in jsx.props)) {\n            if (!jsx.constProps) {\n                jsx.constProps = {};\n            }\n            jsx.constProps[qwikInspectorAttr] =\n                `${sanitizedFileName}:${jsx.dev.lineNumber}:${jsx.dev.columnNumber}`;\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined } from '../error/assert';\nimport { SignalDerived } from '../state/signal';\nimport { qSerialize } from '../util/qdev';\n/** @internal */\nexport const _fnSignal = (fn, args, fnStr) => {\n    return new SignalDerived(fn, args, fnStr);\n};\nexport const serializeDerivedSignalFunc = (signal) => {\n    const fnBody = qSerialize ? signal.$funcStr$ : 'null';\n    assertDefined(fnBody, 'If qSerialize is true then fnStr must be provided.');\n    let args = '';\n    for (let i = 0; i < signal.$args$.length; i++) {\n        args += `p${i},`;\n    }\n    return `(${args})=>(${fnBody})`;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5saW5lZC1mbi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9xcmwvaW5saW5lZC1mbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMsZ0JBQWdCO0FBQ2hCLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUN2QixFQUFLLEVBQ0wsSUFBbUIsRUFDbkIsS0FBYyxFQUNkLEVBQUU7SUFDRixPQUFPLElBQUksYUFBYSxDQUErQixFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzFFLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLENBQUMsTUFBcUIsRUFBRSxFQUFFO0lBQ2xFLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3RELGFBQWEsQ0FBQyxNQUFNLEVBQUUsb0RBQW9ELENBQUMsQ0FBQztJQUM1RSxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7SUFDZCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUM5QyxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNuQixDQUFDO0lBQ0QsT0FBTyxJQUFJLElBQUksT0FBTyxNQUFNLEdBQUcsQ0FBQztBQUNsQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnREZWZpbmVkIH0gZnJvbSAnLi4vZXJyb3IvYXNzZXJ0JztcbmltcG9ydCB7IFNpZ25hbERlcml2ZWQgfSBmcm9tICcuLi9zdGF0ZS9zaWduYWwnO1xuaW1wb3J0IHsgcVNlcmlhbGl6ZSB9IGZyb20gJy4uL3V0aWwvcWRldic7XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBfZm5TaWduYWwgPSA8VCBleHRlbmRzICguLi5hcmdzOiBhbnkpID0+IGFueT4oXG4gIGZuOiBULFxuICBhcmdzOiBQYXJhbWV0ZXJzPFQ+LFxuICBmblN0cj86IHN0cmluZ1xuKSA9PiB7XG4gIHJldHVybiBuZXcgU2lnbmFsRGVyaXZlZDxSZXR1cm5UeXBlPFQ+LCBQYXJhbWV0ZXJzPFQ+PihmbiwgYXJncywgZm5TdHIpO1xufTtcblxuZXhwb3J0IGNvbnN0IHNlcmlhbGl6ZURlcml2ZWRTaWduYWxGdW5jID0gKHNpZ25hbDogU2lnbmFsRGVyaXZlZCkgPT4ge1xuICBjb25zdCBmbkJvZHkgPSBxU2VyaWFsaXplID8gc2lnbmFsLiRmdW5jU3RyJCA6ICdudWxsJztcbiAgYXNzZXJ0RGVmaW5lZChmbkJvZHksICdJZiBxU2VyaWFsaXplIGlzIHRydWUgdGhlbiBmblN0ciBtdXN0IGJlIHByb3ZpZGVkLicpO1xuICBsZXQgYXJncyA9ICcnO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNpZ25hbC4kYXJncyQubGVuZ3RoOyBpKyspIHtcbiAgICBhcmdzICs9IGBwJHtpfSxgO1xuICB9XG4gIHJldHVybiBgKCR7YXJnc30pPT4oJHtmbkJvZHl9KWA7XG59O1xuIl19","/** @file Shared types */\n/** @internal */\nexport function isStringifiable(value) {\n    return (value === null ||\n        typeof value === 'string' ||\n        typeof value === 'number' ||\n        typeof value === 'boolean');\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkLXR5cGVzLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3YyL3NoYXJlZC10eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx5QkFBeUI7QUFLekIsZ0JBQWdCO0FBQ2hCLE1BQU0sVUFBVSxlQUFlLENBQUMsS0FBYztJQUM1QyxPQUFPLENBQ0wsS0FBSyxLQUFLLElBQUk7UUFDZCxPQUFPLEtBQUssS0FBSyxRQUFRO1FBQ3pCLE9BQU8sS0FBSyxLQUFLLFFBQVE7UUFDekIsT0FBTyxLQUFLLEtBQUssU0FBUyxDQUMzQixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAZmlsZSBTaGFyZWQgdHlwZXMgKi9cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IHR5cGUgU3RyaW5naWZpYWJsZSA9IHN0cmluZyB8IGJvb2xlYW4gfCBudW1iZXIgfCBudWxsO1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpbmdpZmlhYmxlKHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgU3RyaW5naWZpYWJsZSB7XG4gIHJldHVybiAoXG4gICAgdmFsdWUgPT09IG51bGwgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gICk7XG59XG4iXX0=","import { isBrowser } from '@builder.io/qwik/build';\nimport { isQwikComponent } from '../../component/component.public';\nimport { _CONST_PROPS } from '../../internal';\nimport { isQrl } from '../../qrl/qrl-class';\nimport { verifySerializable } from '../../state/common';\nimport { _VAR_PROPS } from '../../state/constants';\nimport { isSignal, SignalDerived } from '../../state/signal';\nimport { invoke, untrack } from '../../use/use-core';\nimport { EMPTY_OBJ } from '../../util/flyweight';\nimport { logError, logOnceWarn, logWarn } from '../../util/log';\nimport { ELEMENT_ID, OnRenderProp, QScopedStyle, QSlot, QSlotS } from '../../util/markers';\nimport { isPromise } from '../../util/promises';\nimport { qDev, qRuntimeQrl, seal } from '../../util/qdev';\nimport { isArray, isFunction, isObject, isString } from '../../util/types';\nimport { static_subtree } from '../execute-component';\nimport { SkipRender } from './utils.public';\n/**\n * Create a JSXNode with the properties fully split into variable and constant parts, and children\n * separated out. Furthermore, the varProps must be a sorted object, that is, the keys must be\n * sorted in ascending utf-8 value order.\n *\n * The constant parts are expected to be the same on every render, and are not checked for changes.\n * This means that they are constant scalars or refs. When the ref is a signal or a store, it can\n * still update the attribute on the vnode.\n *\n * @param type - The JSX type\n * @param varProps - The properties of the tag, sorted, excluding children, excluding any constProps\n * @param constProps - The properties of the tag that are known to be constant references and don't\n *   need checking for changes on re-render\n * @param children - JSX children. Any `children` in the props objects are ignored.\n * @internal\n */\nexport const _jsxSorted = (type, varProps, constProps, children, flags, key, dev) => {\n    const processed = key == null ? null : String(key);\n    const node = new JSXNodeImpl(type, varProps || {}, constProps || null, children, flags, processed);\n    if (qDev && dev) {\n        node.dev = {\n            stack: new Error().stack,\n            ...dev,\n        };\n    }\n    validateJSXNode(node);\n    seal(node);\n    return node;\n};\n/**\n * Create a JSXNode, with the properties split into variable and constant parts, but the variable\n * parts could include keys from constProps, as well as `key` and `children`.\n *\n * The constant parts are expected to be the same on every render, and are not checked for changes.\n * This means that they are constant scalars or refs. When the ref is a signal or a store, it can\n * still update the attribute on the vnode.\n *\n * If `children` is defined, any `children` in the props will be ignored.\n *\n * @param type - The tag type\n * @param varProps - The properties of the tag that could change, including children\n * @param constProps - The properties of the tag that are known to be static and don't need checking\n *   for changes on re-render\n * @internal\n */\nexport const _jsxSplit = (type, varProps, constProps, children, flags, key, dev) => {\n    let sortedProps;\n    if (varProps) {\n        // filter and sort\n        sortedProps = Object.fromEntries(untrack(() => Object.entries(varProps))\n            .filter((entry) => {\n            const attr = entry[0];\n            if (attr === 'children') {\n                // side-effect!\n                children ?? (children = entry[1]);\n                return false;\n            }\n            else if (attr === 'key') {\n                key = entry[1];\n                return false;\n            }\n            return (!constProps ||\n                !(attr in constProps) ||\n                // special case for event handlers, they merge\n                /^on[A-Z].*\\$$/.test(attr));\n        })\n            // sort for fast compare in vNodes\n            // keys can never be the same so we don't check for that\n            .sort(([a], [b]) => (a < b ? -1 : 1)));\n    }\n    else {\n        sortedProps = typeof type === 'string' ? EMPTY_OBJ : {};\n    }\n    if (constProps && 'children' in constProps) {\n        children = constProps.children;\n        constProps.children = undefined;\n    }\n    return _jsxSorted(type, sortedProps, constProps, children, flags, key, dev);\n};\n/** @internal @deprecated v1 compat */\nexport const _jsxC = (type, mutable, _flags, key) => jsx(type, mutable, key);\n/** @internal @deprecated v1 compat */\nexport const _jsxS = (type, mutable, immutable, _flags, key) => jsx(type, { ...immutable, ...mutable }, key);\n/** @internal @deprecated v1 compat */\nexport const _jsxQ = (type, mutable, immutable, children, _flags, key) => jsx(type, { ...immutable, ...mutable, children }, key);\n/**\n * @public\n * Used by the JSX transpilers to create a JSXNode.\n * Note that the optimizer will not use this, instead using _jsxSplit and _jsxSorted directly.\n */\nexport const jsx = (type, props, key) => {\n    return _jsxSplit(type, props, null, null, 0, key || null);\n};\n/**\n * The legacy transform, used in special cases like `<div {...props} key=\"key\" />`. Note that the\n * children are spread arguments, instead of a prop like in jsx() calls.\n *\n * Also note that this disables optimizations.\n *\n * @public\n */\nexport function h(type, props, ...children) {\n    return _jsxSplit(type, props, null, children, 0, null);\n}\nexport const SKIP_RENDER_TYPE = ':skipRender';\nexport const isPropsProxy = (obj) => {\n    return obj && obj[_VAR_PROPS] !== undefined;\n};\nexport class JSXNodeImpl {\n    constructor(type, varProps, constProps, children, flags, key = null) {\n        this.type = type;\n        this.varProps = varProps;\n        this.constProps = constProps;\n        this.children = children;\n        this.flags = flags;\n        this.key = key;\n        this._proxy = null;\n        if (qDev) {\n            if (typeof varProps !== 'object') {\n                throw new Error(`JSXNodeImpl: varProps must be objects: ` + JSON.stringify(varProps));\n            }\n            if (typeof constProps !== 'object') {\n                throw new Error(`JSXNodeImpl: constProps must be objects: ` + JSON.stringify(constProps));\n            }\n        }\n    }\n    get props() {\n        // We use a proxy to merge the constProps if they exist and to evaluate derived signals\n        if (!this._proxy) {\n            this._proxy = createPropsProxy(this.varProps, this.constProps, undefined);\n        }\n        return this._proxy;\n    }\n    get propsC() {\n        // We use a proxy to merge the constProps if they exist and to evaluate derived signals\n        if (!this._proxy) {\n            this._proxy = createPropsProxy(this.varProps, this.constProps, this.children);\n        }\n        return this._proxy;\n    }\n}\n/** @private */\nexport const Virtual = (props) => props.children;\n/** @public */\nexport const RenderOnce = (props, key) => {\n    return new JSXNodeImpl(Virtual, EMPTY_OBJ, null, props.children, static_subtree, key);\n};\nconst validateJSXNode = (node) => {\n    if (qDev) {\n        const { type, varProps, constProps, children } = node;\n        invoke(undefined, () => {\n            const isQwikC = isQwikComponent(type);\n            if (!isString(type) && !isFunction(type)) {\n                throw new Error(`The <Type> of the JSX element must be either a string or a function. Instead, it's a \"${typeof type}\": ${String(type)}.`);\n            }\n            if (children) {\n                const flatChildren = isArray(children) ? children.flat() : [children];\n                if (isString(type) || isQwikC) {\n                    flatChildren.forEach((child) => {\n                        if (!isValidJSXChild(child)) {\n                            const typeObj = typeof child;\n                            let explanation = '';\n                            if (typeObj === 'object') {\n                                if (child?.constructor) {\n                                    explanation = `it's an instance of \"${child?.constructor.name}\".`;\n                                }\n                                else {\n                                    explanation = `it's a object literal: ${printObjectLiteral(child)} `;\n                                }\n                            }\n                            else if (typeObj === 'function') {\n                                explanation += `it's a function named \"${child.name}\".`;\n                            }\n                            else {\n                                explanation = `it's a \"${typeObj}\": ${String(child)}.`;\n                            }\n                            throw new Error(`One of the children of <${type}> is not an accepted value. JSX children must be either: string, boolean, number, <element>, Array, undefined/null, or a Promise/Signal. Instead, ${explanation}\\n`);\n                        }\n                    });\n                }\n                if (isBrowser) {\n                    if (isFunction(type) || constProps) {\n                        const keys = {};\n                        flatChildren.forEach((child) => {\n                            if (isJSXNode(child) && child.key != null) {\n                                const key = String(child.type) + ':' + child.key;\n                                if (keys[key]) {\n                                    const err = createJSXError(`Multiple JSX sibling nodes with the same key.\\nThis is likely caused by missing a custom key in a for loop`, child);\n                                    if (err) {\n                                        if (isString(child.type)) {\n                                            logOnceWarn(err);\n                                        }\n                                        else {\n                                            logOnceWarn(err);\n                                        }\n                                    }\n                                }\n                                else {\n                                    keys[key] = true;\n                                }\n                            }\n                        });\n                    }\n                }\n            }\n            const allProps = [\n                ...(varProps ? Object.entries(varProps) : []),\n                ...(constProps ? Object.entries(constProps) : []),\n            ];\n            if (!qRuntimeQrl) {\n                for (const [prop, value] of allProps) {\n                    if (prop.endsWith('$') && value) {\n                        if (!isQrl(value) && !Array.isArray(value)) {\n                            throw new Error(`The value passed in ${prop}={...}> must be a QRL, instead you passed a \"${typeof value}\". Make sure your ${typeof value} is wrapped with $(...), so it can be serialized. Like this:\\n$(${String(value)})`);\n                        }\n                    }\n                    if (prop !== 'children' && isQwikC && value) {\n                        verifySerializable(value, `The value of the JSX attribute \"${prop}\" can not be serialized`);\n                    }\n                }\n            }\n            if (isString(type)) {\n                const hasSetInnerHTML = allProps.some((a) => a[0] === 'dangerouslySetInnerHTML');\n                if (hasSetInnerHTML && children && (Array.isArray(children) ? children.length > 0 : true)) {\n                    const err = createJSXError(`The JSX element <${type}> can not have both 'dangerouslySetInnerHTML' and children.`, node);\n                    logError(err);\n                }\n                // if (allProps.some((a) => a[0] === 'children')) {\n                //   throw new Error(`The JSX element <${type}> can not have both 'children' as a property.`);\n                // }\n                if (type === 'style') {\n                    if (children) {\n                        logOnceWarn(`jsx: Using <style>{content}</style> will escape the content, effectively breaking the CSS.\nIn order to disable content escaping use '<style dangerouslySetInnerHTML={content}/>'\n\nHowever, if the use case is to inject component styleContent, use 'useStyles$()' instead, it will be a lot more efficient.\nSee https://qwik.dev/docs/components/styles/#usestyles for more information.`);\n                    }\n                }\n                if (type === 'script') {\n                    if (children) {\n                        logOnceWarn(`jsx: Using <script>{content}</script> will escape the content, effectively breaking the inlined JS.\nIn order to disable content escaping use '<script dangerouslySetInnerHTML={content}/>'`);\n                    }\n                }\n            }\n        });\n    }\n};\nconst printObjectLiteral = (obj) => {\n    return `{ ${Object.keys(obj)\n        .map((key) => `\"${key}\"`)\n        .join(', ')} }`;\n};\n/** @internal */\nexport const isJSXNode = (n) => {\n    if (qDev) {\n        if (n instanceof JSXNodeImpl) {\n            return true;\n        }\n        if (isObject(n) && 'key' in n && 'props' in n && 'type' in n) {\n            logWarn(`Duplicate implementations of \"JSXNode\" found`);\n            return true;\n        }\n        return false;\n    }\n    else {\n        return n instanceof JSXNodeImpl;\n    }\n};\nexport const isValidJSXChild = (node) => {\n    if (!node) {\n        return true;\n    }\n    else if (node === SkipRender) {\n        return true;\n    }\n    else if (isString(node) || typeof node === 'number' || typeof node === 'boolean') {\n        return true;\n    }\n    else if (isJSXNode(node)) {\n        return true;\n    }\n    else if (isArray(node)) {\n        return node.every(isValidJSXChild);\n    }\n    if (isSignal(node)) {\n        return isValidJSXChild(node.value);\n    }\n    else if (isPromise(node)) {\n        return true;\n    }\n    return false;\n};\n/** @public */\nexport const Fragment = (props) => props.children;\n/** @public */\nexport const jsxDEV = (type, props, key, _isStatic, opts, _ctx) => {\n    const processed = key == null ? null : String(key);\n    const children = untrack(() => {\n        const c = props.children;\n        if (typeof type === 'string') {\n            delete props.children;\n        }\n        return c;\n    });\n    if (isString(type)) {\n        if ('className' in props) {\n            props.class = props.className;\n            delete props.className;\n            if (qDev) {\n                logOnceWarn('jsx: `className` is deprecated. Use `class` instead.');\n            }\n        }\n    }\n    const node = new JSXNodeImpl(type, props, null, children, 0, processed);\n    node.dev = {\n        stack: new Error().stack,\n        ...opts,\n    };\n    validateJSXNode(node);\n    seal(node);\n    return node;\n};\nexport const createJSXError = (message, node) => {\n    const error = new Error(message);\n    if (!node.dev) {\n        return error;\n    }\n    error.stack = `JSXError: ${message}\\n${filterStack(node.dev.stack, 1)}`;\n    return error;\n};\nconst filterStack = (stack, offset = 0) => {\n    return stack.split('\\n').slice(offset).join('\\n');\n};\nexport function createPropsProxy(varProps, constProps, children) {\n    return new Proxy({}, new PropsProxyHandler(varProps, constProps, children));\n}\nclass PropsProxyHandler {\n    constructor($varProps$, $constProps$, $children$) {\n        this.$varProps$ = $varProps$;\n        this.$constProps$ = $constProps$;\n        this.$children$ = $children$;\n    }\n    get(_, prop) {\n        // escape hatch to get the separated props from a component\n        if (prop === _CONST_PROPS) {\n            return this.$constProps$;\n        }\n        if (prop === _VAR_PROPS) {\n            return this.$varProps$;\n        }\n        if (this.$children$ !== undefined && prop === 'children') {\n            return this.$children$;\n        }\n        const value = this.$constProps$ && prop in this.$constProps$\n            ? this.$constProps$[prop]\n            : this.$varProps$[prop];\n        // a proxied value that the optimizer made\n        return value instanceof SignalDerived ? value.value : value;\n    }\n    set(_, prop, value) {\n        if (prop === _CONST_PROPS) {\n            this.$constProps$ = value;\n            return true;\n        }\n        if (prop === _VAR_PROPS) {\n            this.$varProps$ = value;\n            return true;\n        }\n        if (this.$constProps$ && prop in this.$constProps$) {\n            this.$constProps$[prop] = value;\n        }\n        else {\n            this.$varProps$[prop] = value;\n        }\n        return true;\n    }\n    deleteProperty(_, prop) {\n        if (typeof prop !== 'string') {\n            return false;\n        }\n        let didDelete = delete this.$varProps$[prop];\n        if (this.$constProps$) {\n            didDelete = delete this.$constProps$[prop] || didDelete;\n        }\n        return didDelete;\n    }\n    has(_, prop) {\n        const hasProp = (prop === 'children' && this.$children$ !== undefined) ||\n            prop === _CONST_PROPS ||\n            prop === _VAR_PROPS ||\n            prop in this.$varProps$ ||\n            (this.$constProps$ ? prop in this.$constProps$ : false);\n        return hasProp;\n    }\n    getOwnPropertyDescriptor(target, p) {\n        const value = p === 'children' && this.$children$ !== undefined\n            ? this.$children$\n            : this.$constProps$ && p in this.$constProps$\n                ? this.$constProps$[p]\n                : this.$varProps$[p];\n        return {\n            configurable: true,\n            enumerable: true,\n            value: value,\n        };\n    }\n    ownKeys() {\n        const out = Object.keys(this.$varProps$);\n        if (this.$children$ !== undefined) {\n            out.push('children');\n        }\n        if (this.$constProps$) {\n            for (const key in this.$constProps$) {\n                if (out.indexOf(key) === -1) {\n                    out.push(key);\n                }\n            }\n        }\n        return out;\n    }\n}\nexport { jsx as jsxs };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianN4LXJ1bnRpbWUuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2pzeC9qc3gtcnVudGltZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFbkQsT0FBTyxFQUFFLGVBQWUsRUFBbUIsTUFBTSxrQ0FBa0MsQ0FBQztBQUNwRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLEtBQUssRUFBb0IsTUFBTSxxQkFBcUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzNGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDM0UsT0FBTyxFQUFFLGNBQWMsRUFB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J0BidWlsZGVyLmlvL3F3aWsvYnVpbGQnO1xuaW1wb3J0IHR5cGUgeyBKc3hDaGlsZCB9IGZyb20gJ3R5cGVzY3JpcHQnO1xuaW1wb3J0IHsgaXNRd2lrQ29tcG9uZW50LCB0eXBlIE9uUmVuZGVyRm4gfSBmcm9tICcuLi8uLi9jb21wb25lbnQvY29tcG9uZW50LnB1YmxpYyc7XG5pbXBvcnQgeyBfQ09OU1RfUFJPUFMgfSBmcm9tICcuLi8uLi9pbnRlcm5hbCc7XG5pbXBvcnQgeyBpc1FybCwgdHlwZSBRUkxJbnRlcm5hbCB9IGZyb20gJy4uLy4uL3FybC9xcmwtY2xhc3MnO1xuaW1wb3J0IHsgdmVyaWZ5U2VyaWFsaXphYmxlIH0gZnJvbSAnLi4vLi4vc3RhdGUvY29tbW9uJztcbmltcG9ydCB7IF9WQVJfUFJPUFMgfSBmcm9tICcuLi8uLi9zdGF0ZS9jb25zdGFudHMnO1xuaW1wb3J0IHsgaXNTaWduYWwsIFNpZ25hbERlcml2ZWQgfSBmcm9tICcuLi8uLi9zdGF0ZS9zaWduYWwnO1xuaW1wb3J0IHsgaW52b2tlLCB1bnRyYWNrIH0gZnJvbSAnLi4vLi4vdXNlL3VzZS1jb3JlJztcbmltcG9ydCB7IEVNUFRZX09CSiB9IGZyb20gJy4uLy4uL3V0aWwvZmx5d2VpZ2h0JztcbmltcG9ydCB7IGxvZ0Vycm9yLCBsb2dPbmNlV2FybiwgbG9nV2FybiB9IGZyb20gJy4uLy4uL3V0aWwvbG9nJztcbmltcG9ydCB7IEVMRU1FTlRfSUQsIE9uUmVuZGVyUHJvcCwgUVNjb3BlZFN0eWxlLCBRU2xvdCwgUVNsb3RTIH0gZnJvbSAnLi4vLi4vdXRpbC9tYXJrZXJzJztcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4uLy4uL3V0aWwvcHJvbWlzZXMnO1xuaW1wb3J0IHsgcURldiwgcVJ1bnRpbWVRcmwsIHNlYWwgfSBmcm9tICcuLi8uLi91dGlsL3FkZXYnO1xuaW1wb3J0IHsgaXNBcnJheSwgaXNGdW5jdGlvbiwgaXNPYmplY3QsIGlzU3RyaW5nIH0gZnJvbSAnLi4vLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgeyBzdGF0aWNfc3VidHJlZSB9IGZyb20gJy4uL2V4ZWN1dGUtY29tcG9uZW50JztcbmltcG9ydCB0eXBlIHsgRGV2SlNYLCBGdW5jdGlvbkNvbXBvbmVudCwgSlNYTm9kZSB9IGZyb20gJy4vdHlwZXMvanN4LW5vZGUnO1xuaW1wb3J0IHR5cGUgeyBRd2lrSlNYIH0gZnJvbSAnLi90eXBlcy9qc3gtcXdpayc7XG5pbXBvcnQgdHlwZSB7IEpTWENoaWxkcmVuIH0gZnJvbSAnLi90eXBlcy9qc3gtcXdpay1hdHRyaWJ1dGVzJztcbmltcG9ydCB7IFNraXBSZW5kZXIgfSBmcm9tICcuL3V0aWxzLnB1YmxpYyc7XG5cbmV4cG9ydCB0eXBlIFByb3BzID0gUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG5cbi8qKlxuICogQ3JlYXRlIGEgSlNYTm9kZSB3aXRoIHRoZSBwcm9wZXJ0aWVzIGZ1bGx5IHNwbGl0IGludG8gdmFyaWFibGUgYW5kIGNvbnN0YW50IHBhcnRzLCBhbmQgY2hpbGRyZW5cbiAqIHNlcGFyYXRlZCBvdXQuIEZ1cnRoZXJtb3JlLCB0aGUgdmFyUHJvcHMgbXVzdCBiZSBhIHNvcnRlZCBvYmplY3QsIHRoYXQgaXMsIHRoZSBrZXlzIG11c3QgYmVcbiAqIHNvcnRlZCBpbiBhc2NlbmRpbmcgdXRmLTggdmFsdWUgb3JkZXIuXG4gKlxuICogVGhlIGNvbnN0YW50IHBhcnRzIGFyZSBleHBlY3RlZCB0byBiZSB0aGUgc2FtZSBvbiBldmVyeSByZW5kZXIsIGFuZCBhcmUgbm90IGNoZWNrZWQgZm9yIGNoYW5nZXMuXG4gKiBUaGlzIG1lYW5zIHRoYXQgdGhleSBhcmUgY29uc3RhbnQgc2NhbGFycyBvciByZWZzLiBXaGVuIHRoZSByZWYgaXMgYSBzaWduYWwgb3IgYSBzdG9yZSwgaXQgY2FuXG4gKiBzdGlsbCB1cGRhdGUgdGhlIGF0dHJpYnV0ZSBvbiB0aGUgdm5vZGUuXG4gKlxuICogQHBhcmFtIHR5cGUgLSBUaGUgSlNYIHR5cGVcbiAqIEBwYXJhbSB2YXJQcm9wcyAtIFRoZSBwcm9wZXJ0aWVzIG9mIHRoZSB0YWcsIHNvcnRlZCwgZXhjbHVkaW5nIGNoaWxkcmVuLCBleGNsdWRpbmcgYW55IGNvbnN0UHJvcHNcbiAqIEBwYXJhbSBjb25zdFByb3BzIC0gVGhlIHByb3BlcnRpZXMgb2YgdGhlIHRhZyB0aGF0IGFyZSBrbm93biB0byBiZSBjb25zdGFudCByZWZlcmVuY2VzIGFuZCBkb24ndFxuICogICBuZWVkIGNoZWNraW5nIGZvciBjaGFuZ2VzIG9uIHJlLXJlbmRlclxuICogQHBhcmFtIGNoaWxkcmVuIC0gSlNYIGNoaWxkcmVuLiBBbnkgYGNoaWxkcmVuYCBpbiB0aGUgcHJvcHMgb2JqZWN0cyBhcmUgaWdub3JlZC5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgX2pzeFNvcnRlZCA9IDxUPihcbiAgdHlwZTogVCxcbiAgdmFyUHJvcHM6IFByb3BzIHwgbnVsbCxcbiAgY29uc3RQcm9wczogUHJvcHMgfCBudWxsLFxuICBjaGlsZHJlbjogSlNYQ2hpbGRyZW4gfCBudWxsLFxuICBmbGFnczogbnVtYmVyLFxuICBrZXk6IHN0cmluZyB8IG51bWJlciB8IG51bGwgfCB1bmRlZmluZWQsXG4gIGRldj86IERldkpTWFxuKTogSlNYTm9kZTxUPiA9PiB7XG4gIGNvbnN0IHByb2Nlc3NlZCA9IGtleSA9PSBudWxsID8gbnVsbCA6IFN0cmluZyhrZXkpO1xuICBjb25zdCBub2RlID0gbmV3IEpTWE5vZGVJbXBsKFxuICAgIHR5cGUsXG4gICAgdmFyUHJvcHMgfHwge30sXG4gICAgY29uc3RQcm9wcyB8fCBudWxsLFxuICAgIGNoaWxkcmVuLFxuICAgIGZsYWdzLFxuICAgIHByb2Nlc3NlZFxuICApO1xuICBpZiAocURldiAmJiBkZXYpIHtcbiAgICBub2RlLmRldiA9IHtcbiAgICAgIHN0YWNrOiBuZXcgRXJyb3IoKS5zdGFjayxcbiAgICAgIC4uLmRldixcbiAgICB9O1xuICB9XG4gIHZhbGlkYXRlSlNYTm9kZShub2RlKTtcbiAgc2VhbChub2RlKTtcbiAgcmV0dXJuIG5vZGU7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIEpTWE5vZGUsIHdpdGggdGhlIHByb3BlcnRpZXMgc3BsaXQgaW50byB2YXJpYWJsZSBhbmQgY29uc3RhbnQgcGFydHMsIGJ1dCB0aGUgdmFyaWFibGVcbiAqIHBhcnRzIGNvdWxkIGluY2x1ZGUga2V5cyBmcm9tIGNvbnN0UHJvcHMsIGFzIHdlbGwgYXMgYGtleWAgYW5kIGBjaGlsZHJlbmAuXG4gKlxuICogVGhlIGNvbnN0YW50IHBhcnRzIGFyZSBleHBlY3RlZCB0byBiZSB0aGUgc2FtZSBvbiBldmVyeSByZW5kZXIsIGFuZCBhcmUgbm90IGNoZWNrZWQgZm9yIGNoYW5nZXMuXG4gKiBUaGlzIG1lYW5zIHRoYXQgdGhleSBhcmUgY29uc3RhbnQgc2NhbGFycyBvciByZWZzLiBXaGVuIHRoZSByZWYgaXMgYSBzaWduYWwgb3IgYSBzdG9yZSwgaXQgY2FuXG4gKiBzdGlsbCB1cGRhdGUgdGhlIGF0dHJpYnV0ZSBvbiB0aGUgdm5vZGUuXG4gKlxuICogSWYgYGNoaWxkcmVuYCBpcyBkZWZpbmVkLCBhbnkgYGNoaWxkcmVuYCBpbiB0aGUgcHJvcHMgd2lsbCBiZSBpZ25vcmVkLlxuICpcbiAqIEBwYXJhbSB0eXBlIC0gVGhlIHRhZyB0eXBlXG4gKiBAcGFyYW0gdmFyUHJvcHMgLSBUaGUgcHJvcGVydGllcyBvZiB0aGUgdGFnIHRoYXQgY291bGQgY2hhbmdlLCBpbmNsdWRpbmcgY2hpbGRyZW5cbiAqIEBwYXJhbSBjb25zdFByb3BzIC0gVGhlIHByb3BlcnRpZXMgb2YgdGhlIHRhZyB0aGF0IGFyZSBrbm93biB0byBiZSBzdGF0aWMgYW5kIGRvbid0IG5lZWQgY2hlY2tpbmdcbiAqICAgZm9yIGNoYW5nZXMgb24gcmUtcmVuZGVyXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IF9qc3hTcGxpdCA9IDxUIGV4dGVuZHMgc3RyaW5nIHwgRnVuY3Rpb25Db21wb25lbnQ8YW55Pj4oXG4gIHR5cGU6IFQsXG4gIHZhclByb3BzOiBQcm9wcyB8IG51bGwsXG4gIGNvbnN0UHJvcHM6IFByb3BzIHwgbnVsbCxcbiAgY2hpbGRyZW46IEpTWENoaWxkcmVuIHwgbnVsbCB8IHVuZGVmaW5lZCxcbiAgZmxhZ3M6IG51bWJlcixcbiAga2V5OiBzdHJpbmcgfCBudW1iZXIgfCBudWxsLFxuICBkZXY/OiBEZXZKU1hcbik6IEpTWE5vZGU8VD4gPT4ge1xuICBsZXQgc29ydGVkUHJvcHM7XG4gIGlmICh2YXJQcm9wcykge1xuICAgIC8vIGZpbHRlciBhbmQgc29ydFxuICAgIHNvcnRlZFByb3BzID0gT2JqZWN0LmZyb21FbnRyaWVzKFxuICAgICAgdW50cmFjaygoKSA9PiBPYmplY3QuZW50cmllcyh2YXJQcm9wcyEpKVxuICAgICAgICAuZmlsdGVyKChlbnRyeSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGF0dHIgPSBlbnRyeVswXTtcbiAgICAgICAgICBpZiAoYXR0ciA9PT0gJ2NoaWxkcmVuJykge1xuICAgICAgICAgICAgLy8gc2lkZS1lZmZlY3QhXG4gICAgICAgICAgICBjaGlsZHJlbiA/Pz0gZW50cnlbMV0gYXMgSlNYQ2hpbGRyZW47XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIGlmIChhdHRyID09PSAna2V5Jykge1xuICAgICAgICAgICAga2V5ID0gZW50cnlbMV0gYXMgc3RyaW5nO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgIWNvbnN0UHJvcHMgfHxcbiAgICAgICAgICAgICEoYXR0ciBpbiBjb25zdFByb3BzKSB8fFxuICAgICAgICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciBldmVudCBoYW5kbGVycywgdGhleSBtZXJnZVxuICAgICAgICAgICAgL15vbltBLVpdLipcXCQkLy50ZXN0KGF0dHIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSlcbiAgICAgICAgLy8gc29ydCBmb3IgZmFzdCBjb21wYXJlIGluIHZOb2Rlc1xuICAgICAgICAvLyBrZXlzIGNhbiBuZXZlciBiZSB0aGUgc2FtZSBzbyB3ZSBkb24ndCBjaGVjayBmb3IgdGhhdFxuICAgICAgICAuc29ydCgoW2FdLCBbYl0pID0+IChhIDwgYiA/IC0xIDogMSkpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBzb3J0ZWRQcm9wcyA9IHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyA/IEVNUFRZX09CSiA6IHt9O1xuICB9XG4gIGlmIChjb25zdFByb3BzICYmICdjaGlsZHJlbicgaW4gY29uc3RQcm9wcykge1xuICAgIGNoaWxkcmVuID0gY29uc3RQcm9wcy5jaGlsZHJlbiBhcyBKU1hDaGlsZHJlbjtcbiAgICBjb25zdFByb3BzLmNoaWxkcmVuID0gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiBfanN4U29ydGVkKHR5cGUsIHNvcnRlZFByb3BzLCBjb25zdFByb3BzLCBjaGlsZHJlbiwgZmxhZ3MsIGtleSwgZGV2KTtcbn07XG5cbi8qKiBAaW50ZXJuYWwgQGRlcHJlY2F0ZWQgdjEgY29tcGF0ICovXG5leHBvcnQgY29uc3QgX2pzeEMgPSAodHlwZTogYW55LCBtdXRhYmxlOiBhbnksIF9mbGFnczogYW55LCBrZXk6IGFueSkgPT4ganN4KHR5cGUsIG11dGFibGUsIGtleSk7XG4vKiogQGludGVybmFsIEBkZXByZWNhdGVkIHYxIGNvbXBhdCAqL1xuZXhwb3J0IGNvbnN0IF9qc3hTID0gKHR5cGU6IGFueSwgbXV0YWJsZTogYW55LCBpbW11dGFibGU6IGFueSwgX2ZsYWdzOiBhbnksIGtleTogYW55KSA9PlxuICBqc3godHlwZSwgeyAuLi5pbW11dGFibGUsIC4uLm11dGFibGUgfSwga2V5KTtcbi8qKiBAaW50ZXJuYWwgQGRlcHJlY2F0ZWQgdjEgY29tcGF0ICovXG5leHBvcnQgY29uc3QgX2pzeFEgPSAoXG4gIHR5cGU6IGFueSxcbiAgbXV0YWJsZTogYW55LFxuICBpbW11dGFibGU6IGFueSxcbiAgY2hpbGRyZW46IGFueSxcbiAgX2ZsYWdzOiBhbnksXG4gIGtleTogYW55XG4pID0+IGpzeCh0eXBlLCB7IC4uLmltbXV0YWJsZSwgLi4ubXV0YWJsZSwgY2hpbGRyZW4gfSwga2V5KTtcblxuLyoqXG4gKiBAcHVibGljXG4gKiBVc2VkIGJ5IHRoZSBKU1ggdHJhbnNwaWxlcnMgdG8gY3JlYXRlIGEgSlNYTm9kZS5cbiAqIE5vdGUgdGhhdCB0aGUgb3B0aW1pemVyIHdpbGwgbm90IHVzZSB0aGlzLCBpbnN0ZWFkIHVzaW5nIF9qc3hTcGxpdCBhbmQgX2pzeFNvcnRlZCBkaXJlY3RseS5cbiAqL1xuZXhwb3J0IGNvbnN0IGpzeCA9IDxUIGV4dGVuZHMgc3RyaW5nIHwgRnVuY3Rpb25Db21wb25lbnQ8YW55Pj4oXG4gIHR5cGU6IFQsXG4gIHByb3BzOiBUIGV4dGVuZHMgRnVuY3Rpb25Db21wb25lbnQ8aW5mZXIgUFJPUFM+ID8gUFJPUFMgOiBQcm9wcyxcbiAga2V5Pzogc3RyaW5nIHwgbnVtYmVyIHwgbnVsbFxuKTogSlNYTm9kZTxUPiA9PiB7XG4gIHJldHVybiBfanN4U3BsaXQodHlwZSwgcHJvcHMsIG51bGwsIG51bGwsIDAsIGtleSB8fCBudWxsKTtcbn07XG5cbi8qKlxuICogVGhlIGxlZ2FjeSB0cmFuc2Zvcm0sIHVzZWQgaW4gc3BlY2lhbCBjYXNlcyBsaWtlIGA8ZGl2IHsuLi5wcm9wc30ga2V5PVwia2V5XCIgLz5gLiBOb3RlIHRoYXQgdGhlXG4gKiBjaGlsZHJlbiBhcmUgc3ByZWFkIGFyZ3VtZW50cywgaW5zdGVhZCBvZiBhIHByb3AgbGlrZSBpbiBqc3goKSBjYWxscy5cbiAqXG4gKiBBbHNvIG5vdGUgdGhhdCB0aGlzIGRpc2FibGVzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gaDxUWVBFIGV4dGVuZHMgc3RyaW5nIHwgRnVuY3Rpb25Db21wb25lbnQ8UFJPUFM+LCBQUk9QUyBleHRlbmRzIHt9ID0ge30+KFxuICB0eXBlOiBUWVBFLFxuICBwcm9wcz86IFBST1BTIHwgbnVsbCxcbiAgLi4uY2hpbGRyZW46IGFueVtdXG4pOiBKU1hOb2RlPFRZUEU+IHtcbiAgcmV0dXJuIF9qc3hTcGxpdCh0eXBlLCBwcm9wcyEsIG51bGwsIGNoaWxkcmVuLCAwLCBudWxsKTtcbn1cblxuZXhwb3J0IGNvbnN0IFNLSVBfUkVOREVSX1RZUEUgPSAnOnNraXBSZW5kZXInO1xuXG5leHBvcnQgY29uc3QgaXNQcm9wc1Byb3h5ID0gKFxuICBvYmo6IGFueVxuKTogb2JqIGlzIHsgW19WQVJfUFJPUFNdOiBQcm9wczsgW19DT05TVF9QUk9QU106IFByb3BzIHwgbnVsbCB9ID0+IHtcbiAgcmV0dXJuIG9iaiAmJiBvYmpbX1ZBUl9QUk9QU10gIT09IHVuZGVmaW5lZDtcbn07XG5cbmV4cG9ydCBjbGFzcyBKU1hOb2RlSW1wbDxUPiBpbXBsZW1lbnRzIEpTWE5vZGU8VD4ge1xuICBkZXY/OiBEZXZKU1g7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyB0eXBlOiBULFxuICAgIHB1YmxpYyB2YXJQcm9wczogUHJvcHMsXG4gICAgcHVibGljIGNvbnN0UHJvcHM6IFByb3BzIHwgbnVsbCxcbiAgICBwdWJsaWMgY2hpbGRyZW46IEpTWENoaWxkcmVuLFxuICAgIHB1YmxpYyBmbGFnczogbnVtYmVyLFxuICAgIHB1YmxpYyBrZXk6IHN0cmluZyB8IG51bGwgPSBudWxsXG4gICkge1xuICAgIGlmIChxRGV2KSB7XG4gICAgICBpZiAodHlwZW9mIHZhclByb3BzICE9PSAnb2JqZWN0Jykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEpTWE5vZGVJbXBsOiB2YXJQcm9wcyBtdXN0IGJlIG9iamVjdHM6IGAgKyBKU09OLnN0cmluZ2lmeSh2YXJQcm9wcykpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBjb25zdFByb3BzICE9PSAnb2JqZWN0Jykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEpTWE5vZGVJbXBsOiBjb25zdFByb3BzIG11c3QgYmUgb2JqZWN0czogYCArIEpTT04uc3RyaW5naWZ5KGNvbnN0UHJvcHMpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9wcm94eTogUHJvcHMgfCBudWxsID0gbnVsbDtcbiAgZ2V0IHByb3BzKCk6IFQgZXh0ZW5kcyBGdW5jdGlvbkNvbXBvbmVudDxpbmZlciBQUk9QUz4gPyBQUk9QUyA6IFByb3BzIHtcbiAgICAvLyBXZSB1c2UgYSBwcm94eSB0byBtZXJnZSB0aGUgY29uc3RQcm9wcyBpZiB0aGV5IGV4aXN0IGFuZCB0byBldmFsdWF0ZSBkZXJpdmVkIHNpZ25hbHNcbiAgICBpZiAoIXRoaXMuX3Byb3h5KSB7XG4gICAgICB0aGlzLl9wcm94eSA9IGNyZWF0ZVByb3BzUHJveHkodGhpcy52YXJQcm9wcywgdGhpcy5jb25zdFByb3BzLCB1bmRlZmluZWQpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcHJveHkgYXMgdHlwZW9mIHRoaXMucHJvcHM7XG4gIH1cbiAgZ2V0IHByb3BzQygpOiBUIGV4dGVuZHMgRnVuY3Rpb25Db21wb25lbnQ8aW5mZXIgUFJPUFM+ID8gUFJPUFMgOiBQcm9wcyB7XG4gICAgLy8gV2UgdXNlIGEgcHJveHkgdG8gbWVyZ2UgdGhlIGNvbnN0UHJvcHMgaWYgdGhleSBleGlzdCBhbmQgdG8gZXZhbHVhdGUgZGVyaXZlZCBzaWduYWxzXG4gICAgaWYgKCF0aGlzLl9wcm94eSkge1xuICAgICAgdGhpcy5fcHJveHkgPSBjcmVhdGVQcm9wc1Byb3h5KHRoaXMudmFyUHJvcHMsIHRoaXMuY29uc3RQcm9wcywgdGhpcy5jaGlsZHJlbik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9wcm94eSBhcyB0eXBlb2YgdGhpcy5wcm9wcztcbiAgfVxufVxuXG4vKiogQHByaXZhdGUgKi9cbmV4cG9ydCBjb25zdCBWaXJ0dWFsOiBGdW5jdGlvbkNvbXBvbmVudDx7XG4gIGNoaWxkcmVuPzogSlNYQ2hpbGRyZW47XG4gIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPzogc3RyaW5nO1xuICBbT25SZW5kZXJQcm9wXT86IFFSTEludGVybmFsPE9uUmVuZGVyRm48YW55Pj47XG4gIFtRU2xvdF0/OiBzdHJpbmc7XG4gIFtRU2xvdFNdPzogc3RyaW5nO1xuICBwcm9wcz86IFByb3BzO1xuICBbUVNjb3BlZFN0eWxlXT86IHN0cmluZztcbiAgW0VMRU1FTlRfSURdPzogc3RyaW5nO1xufT4gPSAocHJvcHM6IGFueSkgPT4gcHJvcHMuY2hpbGRyZW47XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgUmVuZGVyT25jZTogRnVuY3Rpb25Db21wb25lbnQ8e1xuICBjaGlsZHJlbj86IHVua25vd247XG4gIGtleT86IHN0cmluZyB8IG51bWJlciB8IG51bGwgfCB1bmRlZmluZWQ7XG59PiA9IChwcm9wczogYW55LCBrZXkpID0+IHtcbiAgcmV0dXJuIG5ldyBKU1hOb2RlSW1wbChWaXJ0dWFsLCBFTVBUWV9PQkosIG51bGwsIHByb3BzLmNoaWxkcmVuLCBzdGF0aWNfc3VidHJlZSwga2V5KTtcbn07XG5cbmNvbnN0IHZhbGlkYXRlSlNYTm9kZSA9IChub2RlOiBKU1hOb2RlPGFueT4pID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBjb25zdCB7IHR5cGUsIHZhclByb3BzLCBjb25zdFByb3BzLCBjaGlsZHJlbiB9ID0gbm9kZTtcbiAgICBpbnZva2UodW5kZWZpbmVkLCAoKSA9PiB7XG4gICAgICBjb25zdCBpc1F3aWtDID0gaXNRd2lrQ29tcG9uZW50KHR5cGUpO1xuICAgICAgaWYgKCFpc1N0cmluZyh0eXBlKSAmJiAhaXNGdW5jdGlvbih0eXBlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFRoZSA8VHlwZT4gb2YgdGhlIEpTWCBlbGVtZW50IG11c3QgYmUgZWl0aGVyIGEgc3RyaW5nIG9yIGEgZnVuY3Rpb24uIEluc3RlYWQsIGl0J3MgYSBcIiR7dHlwZW9mIHR5cGV9XCI6ICR7U3RyaW5nKFxuICAgICAgICAgICAgdHlwZVxuICAgICAgICAgICl9LmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgICBjb25zdCBmbGF0Q2hpbGRyZW4gPSBpc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuLmZsYXQoKSA6IFtjaGlsZHJlbl07XG4gICAgICAgIGlmIChpc1N0cmluZyh0eXBlKSB8fCBpc1F3aWtDKSB7XG4gICAgICAgICAgZmxhdENoaWxkcmVuLmZvckVhY2goKGNoaWxkOiB1bmtub3duKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWlzVmFsaWRKU1hDaGlsZChjaGlsZCkpIHtcbiAgICAgICAgICAgICAgY29uc3QgdHlwZU9iaiA9IHR5cGVvZiBjaGlsZDtcbiAgICAgICAgICAgICAgbGV0IGV4cGxhbmF0aW9uID0gJyc7XG4gICAgICAgICAgICAgIGlmICh0eXBlT2JqID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZD8uY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgIGV4cGxhbmF0aW9uID0gYGl0J3MgYW4gaW5zdGFuY2Ugb2YgXCIke2NoaWxkPy5jb25zdHJ1Y3Rvci5uYW1lfVwiLmA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGV4cGxhbmF0aW9uID0gYGl0J3MgYSBvYmplY3QgbGl0ZXJhbDogJHtwcmludE9iamVjdExpdGVyYWwoY2hpbGQgYXMge30pfSBgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlT2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgZXhwbGFuYXRpb24gKz0gYGl0J3MgYSBmdW5jdGlvbiBuYW1lZCBcIiR7KGNoaWxkIGFzIEZ1bmN0aW9uKS5uYW1lfVwiLmA7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXhwbGFuYXRpb24gPSBgaXQncyBhIFwiJHt0eXBlT2JqfVwiOiAke1N0cmluZyhjaGlsZCl9LmA7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgYE9uZSBvZiB0aGUgY2hpbGRyZW4gb2YgPCR7dHlwZX0+IGlzIG5vdCBhbiBhY2NlcHRlZCB2YWx1ZS4gSlNYIGNoaWxkcmVuIG11c3QgYmUgZWl0aGVyOiBzdHJpbmcsIGJvb2xlYW4sIG51bWJlciwgPGVsZW1lbnQ+LCBBcnJheSwgdW5kZWZpbmVkL251bGwsIG9yIGEgUHJvbWlzZS9TaWduYWwuIEluc3RlYWQsICR7ZXhwbGFuYXRpb259XFxuYFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Jyb3dzZXIpIHtcbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbih0eXBlKSB8fCBjb25zdFByb3BzKSB7XG4gICAgICAgICAgICBjb25zdCBrZXlzOiBSZWNvcmQ8c3RyaW5nLCBib29sZWFuPiA9IHt9O1xuICAgICAgICAgICAgZmxhdENoaWxkcmVuLmZvckVhY2goKGNoaWxkOiB1bmtub3duKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChpc0pTWE5vZGUoY2hpbGQpICYmIGNoaWxkLmtleSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gU3RyaW5nKGNoaWxkLnR5cGUpICsgJzonICsgY2hpbGQua2V5O1xuICAgICAgICAgICAgICAgIGlmIChrZXlzW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGVyciA9IGNyZWF0ZUpTWEVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgTXVsdGlwbGUgSlNYIHNpYmxpbmcgbm9kZXMgd2l0aCB0aGUgc2FtZSBrZXkuXFxuVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IG1pc3NpbmcgYSBjdXN0b20ga2V5IGluIGEgZm9yIGxvb3BgLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZFxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzU3RyaW5nKGNoaWxkLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgbG9nT25jZVdhcm4oZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBsb2dPbmNlV2FybihlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGtleXNba2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgYWxsUHJvcHMgPSBbXG4gICAgICAgIC4uLih2YXJQcm9wcyA/IE9iamVjdC5lbnRyaWVzKHZhclByb3BzKSA6IFtdKSxcbiAgICAgICAgLi4uKGNvbnN0UHJvcHMgPyBPYmplY3QuZW50cmllcyhjb25zdFByb3BzKSA6IFtdKSxcbiAgICAgIF07XG4gICAgICBpZiAoIXFSdW50aW1lUXJsKSB7XG4gICAgICAgIGZvciAoY29uc3QgW3Byb3AsIHZhbHVlXSBvZiBhbGxQcm9wcykge1xuICAgICAgICAgIGlmIChwcm9wLmVuZHNXaXRoKCckJykgJiYgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghaXNRcmwodmFsdWUpICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgYFRoZSB2YWx1ZSBwYXNzZWQgaW4gJHtwcm9wfT17Li4ufT4gbXVzdCBiZSBhIFFSTCwgaW5zdGVhZCB5b3UgcGFzc2VkIGEgXCIke3R5cGVvZiB2YWx1ZX1cIi4gTWFrZSBzdXJlIHlvdXIgJHt0eXBlb2YgdmFsdWV9IGlzIHdyYXBwZWQgd2l0aCAkKC4uLiksIHNvIGl0IGNhbiBiZSBzZXJpYWxpemVkLiBMaWtlIHRoaXM6XFxuJCgke1N0cmluZyhcbiAgICAgICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICAgICAgKX0pYFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJvcCAhPT0gJ2NoaWxkcmVuJyAmJiBpc1F3aWtDICYmIHZhbHVlKSB7XG4gICAgICAgICAgICB2ZXJpZnlTZXJpYWxpemFibGUoXG4gICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICBgVGhlIHZhbHVlIG9mIHRoZSBKU1ggYXR0cmlidXRlIFwiJHtwcm9wfVwiIGNhbiBub3QgYmUgc2VyaWFsaXplZGBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNTdHJpbmcodHlwZSkpIHtcbiAgICAgICAgY29uc3QgaGFzU2V0SW5uZXJIVE1MID0gYWxsUHJvcHMuc29tZSgoYSkgPT4gYVswXSA9PT0gJ2Rhbmdlcm91c2x5U2V0SW5uZXJIVE1MJyk7XG4gICAgICAgIGlmIChoYXNTZXRJbm5lckhUTUwgJiYgY2hpbGRyZW4gJiYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pID8gY2hpbGRyZW4ubGVuZ3RoID4gMCA6IHRydWUpKSB7XG4gICAgICAgICAgY29uc3QgZXJyID0gY3JlYXRlSlNYRXJyb3IoXG4gICAgICAgICAgICBgVGhlIEpTWCBlbGVtZW50IDwke3R5cGV9PiBjYW4gbm90IGhhdmUgYm90aCAnZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwnIGFuZCBjaGlsZHJlbi5gLFxuICAgICAgICAgICAgbm9kZVxuICAgICAgICAgICk7XG4gICAgICAgICAgbG9nRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiAoYWxsUHJvcHMuc29tZSgoYSkgPT4gYVswXSA9PT0gJ2NoaWxkcmVuJykpIHtcbiAgICAgICAgLy8gICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBKU1ggZWxlbWVudCA8JHt0eXBlfT4gY2FuIG5vdCBoYXZlIGJvdGggJ2NoaWxkcmVuJyBhcyBhIHByb3BlcnR5LmApO1xuICAgICAgICAvLyB9XG4gICAgICAgIGlmICh0eXBlID09PSAnc3R5bGUnKSB7XG4gICAgICAgICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAgICAgICBsb2dPbmNlV2FybihganN4OiBVc2luZyA8c3R5bGU+e2NvbnRlbnR9PC9zdHlsZT4gd2lsbCBlc2NhcGUgdGhlIGNvbnRlbnQsIGVmZmVjdGl2ZWx5IGJyZWFraW5nIHRoZSBDU1MuXG5JbiBvcmRlciB0byBkaXNhYmxlIGNvbnRlbnQgZXNjYXBpbmcgdXNlICc8c3R5bGUgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e2NvbnRlbnR9Lz4nXG5cbkhvd2V2ZXIsIGlmIHRoZSB1c2UgY2FzZSBpcyB0byBpbmplY3QgY29tcG9uZW50IHN0eWxlQ29udGVudCwgdXNlICd1c2VTdHlsZXMkKCknIGluc3RlYWQsIGl0IHdpbGwgYmUgYSBsb3QgbW9yZSBlZmZpY2llbnQuXG5TZWUgaHR0cHM6Ly9xd2lrLmRldi9kb2NzL2NvbXBvbmVudHMvc3R5bGVzLyN1c2VzdHlsZXMgZm9yIG1vcmUgaW5mb3JtYXRpb24uYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnc2NyaXB0Jykge1xuICAgICAgICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgICAgICAgbG9nT25jZVdhcm4oYGpzeDogVXNpbmcgPHNjcmlwdD57Y29udGVudH08L3NjcmlwdD4gd2lsbCBlc2NhcGUgdGhlIGNvbnRlbnQsIGVmZmVjdGl2ZWx5IGJyZWFraW5nIHRoZSBpbmxpbmVkIEpTLlxuSW4gb3JkZXIgdG8gZGlzYWJsZSBjb250ZW50IGVzY2FwaW5nIHVzZSAnPHNjcmlwdCBkYW5nZXJvdXNseVNldElubmVySFRNTD17Y29udGVudH0vPidgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcblxuY29uc3QgcHJpbnRPYmplY3RMaXRlcmFsID0gKG9iajogUHJvcHMpID0+IHtcbiAgcmV0dXJuIGB7ICR7T2JqZWN0LmtleXMob2JqKVxuICAgIC5tYXAoKGtleSkgPT4gYFwiJHtrZXl9XCJgKVxuICAgIC5qb2luKCcsICcpfSB9YDtcbn07XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBpc0pTWE5vZGUgPSA8VD4objogdW5rbm93bik6IG4gaXMgSlNYTm9kZTxUPiA9PiB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKG4gaW5zdGFuY2VvZiBKU1hOb2RlSW1wbCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChpc09iamVjdChuKSAmJiAna2V5JyBpbiBuICYmICdwcm9wcycgaW4gbiAmJiAndHlwZScgaW4gbikge1xuICAgICAgbG9nV2FybihgRHVwbGljYXRlIGltcGxlbWVudGF0aW9ucyBvZiBcIkpTWE5vZGVcIiBmb3VuZGApO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbiBpbnN0YW5jZW9mIEpTWE5vZGVJbXBsO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgaXNWYWxpZEpTWENoaWxkID0gKG5vZGU6IHVua25vd24pOiBub2RlIGlzIEpzeENoaWxkID0+IHtcbiAgaWYgKCFub2RlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAobm9kZSA9PT0gU2tpcFJlbmRlcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzU3RyaW5nKG5vZGUpIHx8IHR5cGVvZiBub2RlID09PSAnbnVtYmVyJyB8fCB0eXBlb2Ygbm9kZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNKU1hOb2RlKG5vZGUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNBcnJheShub2RlKSkge1xuICAgIHJldHVybiBub2RlLmV2ZXJ5KGlzVmFsaWRKU1hDaGlsZCk7XG4gIH1cbiAgaWYgKGlzU2lnbmFsKG5vZGUpKSB7XG4gICAgcmV0dXJuIGlzVmFsaWRKU1hDaGlsZChub2RlLnZhbHVlKTtcbiAgfSBlbHNlIGlmIChpc1Byb21pc2Uobm9kZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGNvbnN0IEZyYWdtZW50OiBGdW5jdGlvbkNvbXBvbmVudDx7IGNoaWxkcmVuPzogYW55OyBrZXk/OiBzdHJpbmcgfCBudW1iZXIgfCBudWxsIH0+ID0gKFxuICBwcm9wc1xuKSA9PiBwcm9wcy5jaGlsZHJlbjtcblxuaW50ZXJmYWNlIEpzeERldk9wdHMge1xuICBmaWxlTmFtZTogc3RyaW5nO1xuICBsaW5lTnVtYmVyOiBudW1iZXI7XG4gIGNvbHVtbk51bWJlcjogbnVtYmVyO1xufVxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGNvbnN0IGpzeERFViA9IDxUIGV4dGVuZHMgc3RyaW5nIHwgRnVuY3Rpb25Db21wb25lbnQ8UHJvcHM+PihcbiAgdHlwZTogVCxcbiAgcHJvcHM6IFQgZXh0ZW5kcyBGdW5jdGlvbkNvbXBvbmVudDxpbmZlciBQUk9QUz4gPyBQUk9QUyA6IFByb3BzLFxuICBrZXk6IHN0cmluZyB8IG51bWJlciB8IG51bGwgfCB1bmRlZmluZWQsXG4gIF9pc1N0YXRpYzogYm9vbGVhbixcbiAgb3B0czogSnN4RGV2T3B0cyxcbiAgX2N0eDogdW5rbm93blxuKTogSlNYTm9kZTxUPiA9PiB7XG4gIGNvbnN0IHByb2Nlc3NlZCA9IGtleSA9PSBudWxsID8gbnVsbCA6IFN0cmluZyhrZXkpO1xuICBjb25zdCBjaGlsZHJlbiA9IHVudHJhY2soKCkgPT4ge1xuICAgIGNvbnN0IGMgPSBwcm9wcy5jaGlsZHJlbjtcbiAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBkZWxldGUgcHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICAgIHJldHVybiBjO1xuICB9KSBhcyBKU1hDaGlsZHJlbjtcbiAgaWYgKGlzU3RyaW5nKHR5cGUpKSB7XG4gICAgaWYgKCdjbGFzc05hbWUnIGluIHByb3BzKSB7XG4gICAgICAocHJvcHMgYXMgYW55KS5jbGFzcyA9IHByb3BzLmNsYXNzTmFtZTtcbiAgICAgIGRlbGV0ZSBwcm9wcy5jbGFzc05hbWU7XG4gICAgICBpZiAocURldikge1xuICAgICAgICBsb2dPbmNlV2FybignanN4OiBgY2xhc3NOYW1lYCBpcyBkZXByZWNhdGVkLiBVc2UgYGNsYXNzYCBpbnN0ZWFkLicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb25zdCBub2RlID0gbmV3IEpTWE5vZGVJbXBsPFQ+KHR5cGUsIHByb3BzLCBudWxsLCBjaGlsZHJlbiwgMCwgcHJvY2Vzc2VkKTtcbiAgbm9kZS5kZXYgPSB7XG4gICAgc3RhY2s6IG5ldyBFcnJvcigpLnN0YWNrLFxuICAgIC4uLm9wdHMsXG4gIH07XG4gIHZhbGlkYXRlSlNYTm9kZShub2RlKTtcbiAgc2VhbChub2RlKTtcbiAgcmV0dXJuIG5vZGU7XG59O1xuXG5leHBvcnQgdHlwZSB7IFF3aWtKU1ggYXMgSlNYIH07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVKU1hFcnJvciA9IChtZXNzYWdlOiBzdHJpbmcsIG5vZGU6IEpTWE5vZGUpID0+IHtcbiAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIGlmICghbm9kZS5kZXYpIHtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH1cbiAgZXJyb3Iuc3RhY2sgPSBgSlNYRXJyb3I6ICR7bWVzc2FnZX1cXG4ke2ZpbHRlclN0YWNrKG5vZGUuZGV2LnN0YWNrISwgMSl9YDtcbiAgcmV0dXJuIGVycm9yO1xufTtcblxuY29uc3QgZmlsdGVyU3RhY2sgPSAoc3RhY2s6IHN0cmluZywgb2Zmc2V0OiBudW1iZXIgPSAwKSA9PiB7XG4gIHJldHVybiBzdGFjay5zcGxpdCgnXFxuJykuc2xpY2Uob2Zmc2V0KS5qb2luKCdcXG4nKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm9wc1Byb3h5KFxuICB2YXJQcm9wczogUHJvcHMsXG4gIGNvbnN0UHJvcHM6IFByb3BzIHwgbnVsbCxcbiAgY2hpbGRyZW4/OiBKU1hDaGlsZHJlbiB8IHVuZGVmaW5lZFxuKTogUHJvcHMge1xuICByZXR1cm4gbmV3IFByb3h5PGFueT4oe30sIG5ldyBQcm9wc1Byb3h5SGFuZGxlcih2YXJQcm9wcywgY29uc3RQcm9wcywgY2hpbGRyZW4pKTtcbn1cblxuY2xhc3MgUHJvcHNQcm94eUhhbmRsZXIgaW1wbGVtZW50cyBQcm94eUhhbmRsZXI8YW55PiB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgJHZhclByb3BzJDogUHJvcHMsXG4gICAgcHJpdmF0ZSAkY29uc3RQcm9wcyQ6IFByb3BzIHwgbnVsbCxcbiAgICBwcml2YXRlICRjaGlsZHJlbiQ6IEpTWENoaWxkcmVuIHwgdW5kZWZpbmVkXG4gICkge31cbiAgZ2V0KF86IGFueSwgcHJvcDogc3RyaW5nIHwgc3ltYm9sKSB7XG4gICAgLy8gZXNjYXBlIGhhdGNoIHRvIGdldCB0aGUgc2VwYXJhdGVkIHByb3BzIGZyb20gYSBjb21wb25lbnRcbiAgICBpZiAocHJvcCA9PT0gX0NPTlNUX1BST1BTKSB7XG4gICAgICByZXR1cm4gdGhpcy4kY29uc3RQcm9wcyQ7XG4gICAgfVxuICAgIGlmIChwcm9wID09PSBfVkFSX1BST1BTKSB7XG4gICAgICByZXR1cm4gdGhpcy4kdmFyUHJvcHMkO1xuICAgIH1cbiAgICBpZiAodGhpcy4kY2hpbGRyZW4kICE9PSB1bmRlZmluZWQgJiYgcHJvcCA9PT0gJ2NoaWxkcmVuJykge1xuICAgICAgcmV0dXJuIHRoaXMuJGNoaWxkcmVuJDtcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPVxuICAgICAgdGhpcy4kY29uc3RQcm9wcyQgJiYgcHJvcCBpbiB0aGlzLiRjb25zdFByb3BzJFxuICAgICAgICA/IHRoaXMuJGNvbnN0UHJvcHMkW3Byb3AgYXMgc3RyaW5nXVxuICAgICAgICA6IHRoaXMuJHZhclByb3BzJFtwcm9wIGFzIHN0cmluZ107XG4gICAgLy8gYSBwcm94aWVkIHZhbHVlIHRoYXQgdGhlIG9wdGltaXplciBtYWRlXG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgU2lnbmFsRGVyaXZlZCA/IHZhbHVlLnZhbHVlIDogdmFsdWU7XG4gIH1cbiAgc2V0KF86IGFueSwgcHJvcDogc3RyaW5nIHwgc3ltYm9sLCB2YWx1ZTogYW55KSB7XG4gICAgaWYgKHByb3AgPT09IF9DT05TVF9QUk9QUykge1xuICAgICAgdGhpcy4kY29uc3RQcm9wcyQgPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAocHJvcCA9PT0gX1ZBUl9QUk9QUykge1xuICAgICAgdGhpcy4kdmFyUHJvcHMkID0gdmFsdWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuJGNvbnN0UHJvcHMkICYmIHByb3AgaW4gdGhpcy4kY29uc3RQcm9wcyQpIHtcbiAgICAgIHRoaXMuJGNvbnN0UHJvcHMkW3Byb3AgYXMgc3RyaW5nXSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiR2YXJQcm9wcyRbcHJvcCBhcyBzdHJpbmddID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGRlbGV0ZVByb3BlcnR5KF86IGFueSwgcHJvcDogc3RyaW5nIHwgc3ltYm9sKSB7XG4gICAgaWYgKHR5cGVvZiBwcm9wICE9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBsZXQgZGlkRGVsZXRlID0gZGVsZXRlIHRoaXMuJHZhclByb3BzJFtwcm9wXTtcbiAgICBpZiAodGhpcy4kY29uc3RQcm9wcyQpIHtcbiAgICAgIGRpZERlbGV0ZSA9IGRlbGV0ZSB0aGlzLiRjb25zdFByb3BzJFtwcm9wIGFzIHN0cmluZ10gfHwgZGlkRGVsZXRlO1xuICAgIH1cbiAgICByZXR1cm4gZGlkRGVsZXRlO1xuICB9XG4gIGhhcyhfOiBhbnksIHByb3A6IHN0cmluZyB8IHN5bWJvbCkge1xuICAgIGNvbnN0IGhhc1Byb3AgPVxuICAgICAgKHByb3AgPT09ICdjaGlsZHJlbicgJiYgdGhpcy4kY2hpbGRyZW4kICE9PSB1bmRlZmluZWQpIHx8XG4gICAgICBwcm9wID09PSBfQ09OU1RfUFJPUFMgfHxcbiAgICAgIHByb3AgPT09IF9WQVJfUFJPUFMgfHxcbiAgICAgIHByb3AgaW4gdGhpcy4kdmFyUHJvcHMkIHx8XG4gICAgICAodGhpcy4kY29uc3RQcm9wcyQgPyBwcm9wIGluIHRoaXMuJGNvbnN0UHJvcHMkIDogZmFsc2UpO1xuICAgIHJldHVybiBoYXNQcm9wO1xuICB9XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQ6IGFueSwgcDogc3RyaW5nIHwgc3ltYm9sKTogUHJvcGVydHlEZXNjcmlwdG9yIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCB2YWx1ZSA9XG4gICAgICBwID09PSAnY2hpbGRyZW4nICYmIHRoaXMuJGNoaWxkcmVuJCAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gdGhpcy4kY2hpbGRyZW4kXG4gICAgICAgIDogdGhpcy4kY29uc3RQcm9wcyQgJiYgcCBpbiB0aGlzLiRjb25zdFByb3BzJFxuICAgICAgICAgID8gdGhpcy4kY29uc3RQcm9wcyRbcCBhcyBzdHJpbmddXG4gICAgICAgICAgOiB0aGlzLiR2YXJQcm9wcyRbcCBhcyBzdHJpbmddO1xuICAgIHJldHVybiB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgIH07XG4gIH1cbiAgb3duS2V5cygpIHtcbiAgICBjb25zdCBvdXQgPSBPYmplY3Qua2V5cyh0aGlzLiR2YXJQcm9wcyQpO1xuICAgIGlmICh0aGlzLiRjaGlsZHJlbiQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgb3V0LnB1c2goJ2NoaWxkcmVuJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLiRjb25zdFByb3BzJCkge1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy4kY29uc3RQcm9wcyQpIHtcbiAgICAgICAgaWYgKG91dC5pbmRleE9mKGtleSkgPT09IC0xKSB7XG4gICAgICAgICAgb3V0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9XG59XG5cbmV4cG9ydCB7IGpzeCBhcyBqc3hzIH07XG4iXX0=","import { isDev } from '../../../build/index.dev';\nimport { componentQrl, isQwikComponent } from '../../component/component.public';\nimport { SERIALIZABLE_STATE } from '../../container/serializers';\nimport { assertDefined, assertTrue } from '../../error/assert';\nimport { createQRL, isQrl, isSyncQrl, } from '../../qrl/qrl-class';\nimport { Fragment, JSXNodeImpl, createPropsProxy, isJSXNode, isPropsProxy, } from '../../render/jsx/jsx-runtime';\nimport {} from '../../render/jsx/types/jsx-node';\nimport { Slot } from '../../render/jsx/slot.public';\nimport { SubscriptionProp, createSubscriptionManager, fastSkipSerialize, getProxyFlags, getProxyTarget, getSubscriptionManager, unwrapProxy, } from '../../state/common';\nimport { QObjectManagerSymbol, _CONST_PROPS, _VAR_PROPS } from '../../state/constants';\nimport { SignalDerived, SignalImpl, SignalWrapper, isSignal, } from '../../state/signal';\nimport { getOrCreateProxy, isStore } from '../../state/store';\nimport { Task } from '../../use/use-task';\nimport { throwErrorAndStop } from '../../util/log';\nimport { isPromise } from '../../util/promises';\nimport { isSerializableObject } from '../../util/types';\nimport {} from '../client/dom-container';\nimport { vnode_getNode, vnode_isVNode, vnode_locate } from '../client/vnode';\nimport { ELEMENT_ID } from '../../util/markers';\nimport { getPlatform } from '../../platform/platform';\nimport { isElement, isNode } from '../../util/element';\nconst deserializedProxyMap = new WeakMap();\nexport const unwrapDeserializerProxy = (value) => {\n    const unwrapped = typeof value === 'object' &&\n        value !== null &&\n        value[SERIALIZER_PROXY_UNWRAP];\n    return unwrapped ? unwrapped : value;\n};\nexport const isDeserializerProxy = (value) => {\n    return typeof value === 'object' && value !== null && SERIALIZER_PROXY_UNWRAP in value;\n};\nexport const SERIALIZER_PROXY_UNWRAP = Symbol('UNWRAP');\nexport const wrapDeserializerProxy = (container, value) => {\n    if (typeof value === 'object' && // Must be an object\n        value !== null && // which is not null\n        isObjectLiteral(value) && // and is object literal (not URL, Data, etc.)\n        !vnode_isVNode(value) // and is not a VNode or Slot\n    ) {\n        if (isDeserializerProxy(value)) {\n            // already wrapped\n            return value;\n        }\n        else {\n            let proxy = deserializedProxyMap.get(value);\n            if (!proxy) {\n                proxy = new Proxy(value, new DeserializationHandler(container));\n                deserializedProxyMap.set(value, proxy);\n            }\n            return proxy;\n        }\n    }\n    return value;\n};\nclass DeserializationHandler {\n    constructor($container$) {\n        this.$container$ = $container$;\n    }\n    get(target, property, receiver) {\n        if (property === SERIALIZER_PROXY_UNWRAP) {\n            return target;\n        }\n        if (getProxyTarget(target) !== undefined) {\n            /**\n             * If we modify string value by for example `+=` operator, we need to get the old value first.\n             * If the target is a store proxy, we need to unwrap it and get the real object. This is\n             * because if we try to get the value, we will get deserialized value which is not what we\n             * want in case of string.\n             *\n             * For strings we always assume that they are not deserialized (cached), so we need to get the\n             * real value. The reason is that if we have a string which starts with a serialization\n             * constant character, we need to have the SerializationConstant.String_CHAR prefix character.\n             * Otherwise the system will try to deserialize the value again.\n             */\n            const unwrapped = unwrapDeserializerProxy(unwrapProxy(target));\n            const unwrappedPropValue = Reflect.get(unwrapped, property, receiver);\n            if (typeof unwrappedPropValue === 'string' &&\n                unwrappedPropValue.length >= 1 &&\n                unwrappedPropValue.charCodeAt(0) === SerializationConstant.String_VALUE) {\n                return allocate(unwrappedPropValue);\n            }\n        }\n        let propValue = Reflect.get(target, property, receiver);\n        let typeCode;\n        if (typeof propValue === 'string' &&\n            propValue.length >= 1 &&\n            (typeCode = propValue.charCodeAt(0)) < SerializationConstant.LAST_VALUE) {\n            const container = this.$container$;\n            // It is a value which needs to be deserialized.\n            const serializedValue = propValue;\n            if (typeCode === SerializationConstant.REFERENCE_VALUE) {\n                // Special case of Reference, we don't go through allocation/inflation\n                propValue = unwrapDeserializerProxy(container.$getObjectById$(parseInt(propValue.substring(1))));\n            }\n            else if (typeCode === SerializationConstant.VNode_VALUE) {\n                // Special case of VNode, we go directly to VNode to retrieve the element.\n                propValue =\n                    propValue === SerializationConstant.VNode_CHAR\n                        ? container.element.ownerDocument\n                        : vnode_locate(container.rootVNode, propValue.substring(1));\n            }\n            else if (typeCode === SerializationConstant.Store_VALUE) {\n                // Special case of Store.\n                // Stores are proxies, Proxies need to get their target eagerly. So we can't use inflate()\n                // because that would not allow us to get a hold of the target.\n                const target = container.$getObjectById$(propValue.substring(1));\n                propValue = getOrCreateProxy(target, container);\n            }\n            else if (typeCode === SerializationConstant.DerivedSignal_VALUE && !Array.isArray(target)) {\n                // Special case of derived signal. We need to create a [_CONST_PROPS] property.\n                return wrapDeserializerProxy(container, upgradePropsWithDerivedSignal(container, target, property));\n            }\n            else {\n                propValue = allocate(propValue);\n            }\n            if (typeof propValue !== 'string' ||\n                (propValue.length > 0 && propValue.charCodeAt(0) >= SerializationConstant.LAST_VALUE)) {\n                /**\n                 * So we want to cache the value so that we don't have to deserialize it again AND so that\n                 * deserialized object identity does not change.\n                 *\n                 * Unfortunately, there is a corner case! The deserialized value might be a string which\n                 * looks like a serialized value, so in that rare case we will not cache the value. But it\n                 * is OK because even thought the identity of string may change on deserialization, the\n                 * value string equality will not change.\n                 */\n                Reflect.set(target, property, propValue, receiver);\n                /** After we set the value we can now inflate the value if needed. */\n                if (typeCode >= SerializationConstant.Error_VALUE) {\n                    inflate(container, propValue, serializedValue);\n                }\n            }\n        }\n        propValue = wrapDeserializerProxy(this.$container$, propValue);\n        return propValue;\n    }\n    set(target, property, newValue, receiver) {\n        /**\n         * If we are setting a value which is a string and starts with a special character, we need to\n         * prefix it with a SerializationConstant character to indicate that it is a string.\n         *\n         * Without this later (when getting the value) we would try to deserialize the value incorrectly\n         * due to the special character at the start.\n         */\n        if (typeof newValue === 'string' &&\n            newValue.length >= 1 &&\n            newValue.charCodeAt(0) < SerializationConstant.LAST_VALUE) {\n            return Reflect.set(target, property, SerializationConstant.String_CHAR + newValue, receiver);\n        }\n        return Reflect.set(target, property, newValue, receiver);\n    }\n    has(target, property) {\n        if (property === SERIALIZER_PROXY_UNWRAP) {\n            return true;\n        }\n        return Object.prototype.hasOwnProperty.call(target, property);\n    }\n}\n/**\n * Convert an object (which is a component prop) to have derived signals (_CONST_PROPS).\n *\n * Input:\n *\n * ```\n * {\n *   \"prop1\": \"DerivedSignal: ..\",\n *   \"prop2\": \"DerivedSignal: ..\"\n * }\n * ```\n *\n * Becomes\n *\n * ```\n * {\n *   get prop1 {\n *     return this[_CONST_PROPS].prop1.value;\n *   },\n *   get prop2 {\n *     return this[_CONST_PROPS].prop2.value;\n *   },\n *   prop2: 'DerivedSignal: ..',\n *   [_CONST_PROPS]: {\n *     prop1: _fnSignal(p0=>p0.value, [prop1], 'p0.value'),\n *     prop2: _fnSignal(p0=>p0.value, [prop1], 'p0.value')\n *   }\n * }\n * ```\n */\nfunction upgradePropsWithDerivedSignal(container, target, property) {\n    const immutable = {};\n    for (const key in target) {\n        if (Object.prototype.hasOwnProperty.call(target, key)) {\n            const value = target[key];\n            if (typeof value === 'string' &&\n                value.charCodeAt(0) === SerializationConstant.DerivedSignal_VALUE) {\n                const derivedSignal = (immutable[key] = allocate(value));\n                Object.defineProperty(target, key, {\n                    get() {\n                        return derivedSignal.value;\n                    },\n                    enumerable: true,\n                });\n                inflate(container, derivedSignal, value);\n            }\n        }\n    }\n    target[_CONST_PROPS] = immutable;\n    return target[property];\n}\nconst restStack = [];\nlet rest = null;\nlet restIdx;\nconst restInt = () => {\n    return parseInt(restString());\n};\nconst restString = () => {\n    const start = restIdx;\n    const length = rest.length;\n    let depth = 0;\n    let ch;\n    do {\n        if (restIdx < length) {\n            ch = rest.charCodeAt(restIdx++);\n            if (ch === 91 /* [ */) {\n                depth++;\n            }\n            else if (ch === 93 /* ] */) {\n                depth--;\n            }\n        }\n        else {\n            restIdx = length + 1;\n            break;\n        }\n    } while (depth > 0 || ch !== 32 /* space */);\n    return rest.substring(start, restIdx - 1);\n};\nconst inflate = (container, target, needsInflationData) => {\n    restStack.push(rest, restIdx);\n    rest = needsInflationData;\n    restIdx = 1;\n    switch (needsInflationData.charCodeAt(0)) {\n        case SerializationConstant.QRL_VALUE:\n            inflateQRL(container, target);\n            break;\n        case SerializationConstant.Task_VALUE:\n            const task = target;\n            task.$flags$ = restInt();\n            task.$index$ = restInt();\n            task.$el$ = container.$getObjectById$(restInt());\n            task.$qrl$ = inflateQRL(container, parseQRL(restString()));\n            const taskState = restString();\n            task.$state$ = taskState\n                ? container.$getObjectById$(taskState)\n                : undefined;\n            break;\n        case SerializationConstant.Resource_VALUE:\n            throw new Error('Not implemented');\n        case SerializationConstant.Component_VALUE:\n            inflateQRL(container, target[SERIALIZABLE_STATE][0]);\n            break;\n        case SerializationConstant.DerivedSignal_VALUE:\n            const derivedSignal = target;\n            derivedSignal.$func$ = container.getSyncFn(restInt());\n            const args = (derivedSignal.$args$ = []);\n            while (restIdx < rest.length) {\n                args.push(container.$getObjectById$(restInt()));\n            }\n            break;\n        case SerializationConstant.Store_VALUE:\n            break;\n        case SerializationConstant.Signal_VALUE:\n            const signal = target;\n            const semiIdx = rest.indexOf(';');\n            const manager = (signal[QObjectManagerSymbol] = container.$subsManager$.$createManager$());\n            let signalValue = container.$getObjectById$(rest.substring(1, semiIdx === -1 ? rest.length : semiIdx));\n            if (vnode_isVNode(signalValue)) {\n                signalValue = vnode_getNode(signalValue);\n            }\n            signal.untrackedValue = signalValue;\n            if (semiIdx > 0) {\n                subscriptionManagerFromString(manager, rest.substring(semiIdx + 1), container.$getObjectById$);\n            }\n            break;\n        case SerializationConstant.SignalWrapper_VALUE:\n            const signalWrapper = target;\n            signalWrapper.ref = container.$getObjectById$(restInt());\n            signalWrapper.prop = restString();\n            break;\n        case SerializationConstant.Error_VALUE:\n            Object.assign(target, container.$getObjectById$(restInt()));\n            break;\n        case SerializationConstant.FormData_VALUE:\n            const formData = target;\n            for (const [key, value] of container.$getObjectById$(restInt())) {\n                formData.append(key, value);\n            }\n            break;\n        case SerializationConstant.JSXNode_VALUE:\n            const jsx = target;\n            jsx.type = deserializeJSXType(container, restString());\n            jsx.varProps = container.$getObjectById$(restInt());\n            jsx.constProps = container.$getObjectById$(restInt());\n            jsx.children = container.$getObjectById$(restInt());\n            jsx.flags = restInt();\n            jsx.key = restString() || null;\n            break;\n        case SerializationConstant.Set_VALUE:\n            const set = target;\n            const setValues = container.$getObjectById$(restInt());\n            for (let i = 0; i < setValues.length; i++) {\n                set.add(setValues[i]);\n            }\n            break;\n        case SerializationConstant.Map_VALUE:\n            const map = target;\n            const mapKeyValue = container.$getObjectById$(restInt());\n            for (let i = 0; i < mapKeyValue.length;) {\n                map.set(mapKeyValue[i++], mapKeyValue[i++]);\n            }\n            break;\n        case SerializationConstant.Promise_VALUE:\n            const promise = target;\n            const id = restInt();\n            if (id >= 0) {\n                promise[PROMISE_RESOLVE](container.$getObjectById$(id));\n            }\n            else {\n                promise[PROMISE_REJECT](container.$getObjectById$(~id));\n            }\n            break;\n        case SerializationConstant.Uint8Array_VALUE:\n            const bytes = target;\n            const buf = atob(restString());\n            let i = 0;\n            for (const s of buf) {\n                bytes[i++] = s.charCodeAt(0);\n            }\n            break;\n        case SerializationConstant.PropsProxy_VALUE:\n            const propsProxy = target;\n            propsProxy[_VAR_PROPS] = container.$getObjectById$(restInt());\n            propsProxy[_CONST_PROPS] = container.$getObjectById$(restInt());\n            break;\n        default:\n            throw new Error('Not implemented');\n    }\n    restIdx = restStack.pop();\n    rest = restStack.pop();\n};\nconst allocate = (value) => {\n    switch (value.charCodeAt(0)) {\n        case SerializationConstant.UNDEFINED_VALUE:\n            return undefined;\n        case SerializationConstant.QRL_VALUE:\n            return parseQRL(value);\n        case SerializationConstant.Task_VALUE:\n            return new Task(-1, -1, null, null, null, null);\n        case SerializationConstant.Resource_VALUE:\n            throw new Error('Not implemented');\n        case SerializationConstant.URL_VALUE:\n            return new URL(value.substring(1));\n        case SerializationConstant.Date_VALUE:\n            return new Date(value.substring(1));\n        case SerializationConstant.Regex_VALUE:\n            const idx = value.lastIndexOf('/');\n            return new RegExp(value.substring(2, idx), value.substring(idx + 1));\n        case SerializationConstant.Error_VALUE:\n            return new Error();\n        case SerializationConstant.Component_VALUE:\n            return componentQrl(parseQRL(value));\n        case SerializationConstant.DerivedSignal_VALUE:\n            return new SignalDerived(null, null, null);\n        case SerializationConstant.Signal_VALUE:\n            return new SignalImpl(null, null, 0);\n        case SerializationConstant.SignalWrapper_VALUE:\n            return new SignalWrapper(null, null);\n        case SerializationConstant.NotFinite_VALUE:\n            const type = value.substring(1);\n            const isNaN = type.length === 0;\n            if (isNaN) {\n                return Number.NaN;\n            }\n            else {\n                const isNegativeInfinity = type === '-';\n                return isNegativeInfinity ? -Infinity : Infinity;\n            }\n        case SerializationConstant.URLSearchParams_VALUE:\n            return new URLSearchParams(value.substring(1));\n        case SerializationConstant.FormData_VALUE:\n            return new FormData();\n        case SerializationConstant.JSXNode_VALUE:\n            return new JSXNodeImpl(null, null, null, null, -1, null);\n        case SerializationConstant.BigInt_VALUE:\n            return BigInt(value.substring(1));\n        case SerializationConstant.Set_VALUE:\n            return new Set();\n        case SerializationConstant.Map_VALUE:\n            return new Map();\n        case SerializationConstant.String_VALUE:\n            return value.substring(1);\n        case SerializationConstant.Promise_VALUE:\n            let resolve;\n            let reject;\n            const promise = new Promise((res, rej) => {\n                resolve = res;\n                reject = rej;\n            });\n            promise[PROMISE_RESOLVE] = resolve;\n            promise[PROMISE_REJECT] = reject;\n            return promise;\n        case SerializationConstant.Uint8Array_VALUE:\n            const encodedLength = value.length - 1;\n            const blocks = encodedLength >>> 2;\n            const rest = encodedLength & 3;\n            const decodedLength = blocks * 3 + (rest ? rest - 1 : 0);\n            return new Uint8Array(decodedLength);\n        case SerializationConstant.PropsProxy_VALUE:\n            return createPropsProxy(null, null);\n        default:\n            throw new Error('unknown allocate type: ' + value.charCodeAt(0));\n    }\n};\nconst PROMISE_RESOLVE = Symbol('resolve');\nconst PROMISE_REJECT = Symbol('reject');\nexport function parseQRL(qrl) {\n    const hashIdx = qrl.indexOf('#');\n    const captureStart = qrl.indexOf('[', hashIdx);\n    const captureEnd = qrl.indexOf(']', captureStart);\n    const chunk = hashIdx > -1\n        ? qrl.substring(qrl.charCodeAt(0) < SerializationConstant.LAST_VALUE ? 1 : 0, hashIdx)\n        : qrl;\n    const symbol = captureStart > -1 ? qrl.substring(hashIdx + 1, captureStart) : qrl.substring(hashIdx + 1);\n    let qrlRef = null;\n    const captureIds = captureStart > -1 && captureEnd > -1\n        ? qrl\n            .substring(captureStart + 1, captureEnd)\n            .split(' ')\n            .filter((v) => v.length)\n        : null;\n    if (isDev && chunk === QRL_RUNTIME_CHUNK) {\n        const backChannel = globalThis[QRL_RUNTIME_CHUNK];\n        assertDefined(backChannel, 'Missing QRL_RUNTIME_CHUNK');\n        qrlRef = backChannel.get(symbol);\n    }\n    return createQRL(chunk, symbol, qrlRef, null, captureIds, null, null);\n}\nexport function inflateQRL(container, qrl) {\n    const captureIds = qrl.$capture$;\n    qrl.$captureRef$ = captureIds\n        ? captureIds.map((id) => container.$getObjectById$(parseInt(id)))\n        : null;\n    if (container.element) {\n        qrl.$setContainer$(container.element);\n    }\n    return qrl;\n}\nexport const createSerializationContext = (NodeConstructor, $proxyMap$, symbolToChunkResolver, setProp, writer) => {\n    if (!writer) {\n        const buffer = [];\n        writer = {\n            write: (text) => buffer.push(text),\n            toString: () => buffer.join(''),\n        };\n    }\n    const map = new Map();\n    const syncFnMap = new Map();\n    const syncFns = [];\n    const roots = [];\n    const $wasSeen$ = (obj) => map.get(obj);\n    const $seen$ = (obj) => map.set(obj, Number.MIN_SAFE_INTEGER);\n    const $addRoot$ = (obj) => {\n        let id = map.get(obj);\n        if (typeof id !== 'number' || id === Number.MIN_SAFE_INTEGER) {\n            id = roots.length;\n            map.set(obj, id);\n            roots.push(obj);\n        }\n        return id;\n    };\n    return {\n        $serialize$() {\n            serialize(this);\n        },\n        $NodeConstructor$: NodeConstructor,\n        $symbolToChunkResolver$: symbolToChunkResolver,\n        $wasSeen$,\n        $roots$: roots,\n        $seen$,\n        $hasRootId$: (obj) => {\n            const id = map.get(obj);\n            return id === undefined || id === Number.MIN_SAFE_INTEGER ? undefined : id;\n        },\n        $addRoot$,\n        $getRootId$: (obj) => {\n            const id = map.get(obj);\n            if (!id || id === Number.MIN_SAFE_INTEGER) {\n                throw throwErrorAndStop('Missing root id for: ' + obj);\n            }\n            return id;\n        },\n        $proxyMap$,\n        $syncFns$: syncFns,\n        $addSyncFn$: (funcStr, argCount, fn) => {\n            const isFullFn = funcStr === undefined;\n            if (isFullFn) {\n                funcStr = fn.toString();\n            }\n            let id = syncFnMap.get(funcStr);\n            if (id === undefined) {\n                id = syncFns.length;\n                syncFnMap.set(funcStr, id);\n                if (isFullFn) {\n                    syncFns.push(funcStr);\n                }\n                else {\n                    let code = '(';\n                    for (let i = 0; i < argCount; i++) {\n                        code += (i == 0 ? 'p' : ',p') + i;\n                    }\n                    syncFns.push((code += ')=>' + funcStr));\n                }\n            }\n            return id;\n        },\n        $writer$: writer,\n        $breakCircularDepsAndAwaitPromises$: () => {\n            const promises = [];\n            /// As `breakCircularDependencies` it is adding new roots\n            /// But we don't need te re-scan them.\n            const objRootsLength = roots.length;\n            for (let i = 0; i < objRootsLength; i++) {\n                breakCircularDependenciesAndResolvePromises(roots[i], promises);\n            }\n            const drain = () => {\n                if (promises.length) {\n                    return Promise.allSettled(promises).then(drain, drain);\n                }\n            };\n            return drain();\n        },\n        $eventQrls$: new Set(),\n        $eventNames$: new Set(),\n        $resources$: new Set(),\n        $renderSymbols$: new Set(),\n        $setProp$: setProp,\n    };\n    function breakCircularDependenciesAndResolvePromises(rootObj, promises) {\n        // As we walk the object graph we insert newly discovered objects which need to be scanned here.\n        const discoveredValues = [rootObj];\n        // discoveredValues.push = (...value: unknown[]) => {\n        //   if (isSignal(value[0])) {\n        //     debugger;\n        //   }\n        //   Array.prototype.push.apply(discoveredValues, value);\n        // };\n        // let count = 100;\n        while (discoveredValues.length) {\n            // if (count-- < 0) {\n            //   throw new Error('INFINITE LOOP');\n            // }\n            const obj = discoveredValues.pop();\n            if (shouldTrackObj(obj) || frameworkType(obj)) {\n                const isRoot = obj === rootObj;\n                // For root objects we pretend we have not seen them to force scan.\n                const id = $wasSeen$(obj);\n                const unwrapObj = unwrapProxy(obj);\n                if (unwrapObj !== obj) {\n                    discoveredValues.push(unwrapObj);\n                    const manager = getSubscriptionManager(obj);\n                    // add subscription host to the discovered values\n                    for (const sub of manager.$subs$) {\n                        for (let i = SubscriptionProp.HOST; i < sub.length; i++) {\n                            discoveredValues.push(sub[i]);\n                        }\n                    }\n                }\n                else if (id === undefined || isRoot) {\n                    // Object has not been seen yet, must scan content\n                    // But not for root.\n                    !isRoot && $seen$(obj);\n                    if (typeof obj !== 'object' ||\n                        obj === null ||\n                        obj instanceof URL ||\n                        obj instanceof Date ||\n                        obj instanceof RegExp ||\n                        obj instanceof Error ||\n                        obj instanceof Date ||\n                        obj instanceof Uint8Array ||\n                        obj instanceof URLSearchParams ||\n                        (typeof FormData !== 'undefined' && obj instanceof FormData)) {\n                        // skip as these are primitives\n                    }\n                    else if (fastSkipSerialize(obj)) {\n                        // Ignore the no serialize objects\n                    }\n                    else if (obj instanceof Set) {\n                        const contents = Array.from(obj.values());\n                        setSerializableDataRootId($addRoot$, obj, contents);\n                        discoveredValues.push(...contents);\n                    }\n                    else if (obj instanceof Map) {\n                        const tuples = [];\n                        obj.forEach((v, k) => {\n                            tuples.push(k, v);\n                            discoveredValues.push(k, v);\n                        });\n                        setSerializableDataRootId($addRoot$, obj, tuples);\n                        discoveredValues.push(tuples);\n                    }\n                    else if (isSignal(obj)) {\n                        if (obj instanceof SignalImpl) {\n                            discoveredValues.push(obj.untrackedValue);\n                            const manager = getSubscriptionManager(obj);\n                            manager?.$subs$.forEach((sub) => {\n                                discoveredValues.push(sub[SubscriptionProp.HOST]);\n                                // prevent infinity loop, don't add the same object as the current one\n                                if (obj !== sub[SubscriptionProp.SIGNAL]) {\n                                    discoveredValues.push(sub[SubscriptionProp.SIGNAL]);\n                                }\n                            });\n                        }\n                        else if (obj instanceof SignalWrapper) {\n                            discoveredValues.push(obj.ref);\n                        }\n                        // const manager = obj[QObjectManagerSymbol];\n                        // discoveredValues.push(...manager.$subs$);\n                    }\n                    else if (obj instanceof Task) {\n                        discoveredValues.push(obj.$el$, obj.$qrl$, obj.$state$);\n                    }\n                    else if (NodeConstructor && obj instanceof NodeConstructor) {\n                        // ignore the nodes\n                        // debugger;\n                    }\n                    else if (isJSXNode(obj)) {\n                        discoveredValues.push(obj.type, obj.props, obj.constProps, obj.children);\n                    }\n                    else if (Array.isArray(obj)) {\n                        discoveredValues.push(...obj);\n                    }\n                    else if (isQrl(obj)) {\n                        obj.$captureRef$ &&\n                            obj.$captureRef$.length &&\n                            discoveredValues.push(...obj.$captureRef$);\n                    }\n                    else if (isPropsProxy(obj)) {\n                        discoveredValues.push(obj[_VAR_PROPS], obj[_CONST_PROPS]);\n                    }\n                    else if (isPromise(obj)) {\n                        obj.then((value) => {\n                            setSerializableDataRootId($addRoot$, obj, value);\n                            promises.splice(promises.indexOf(obj), 1);\n                        }, (error) => {\n                            obj[SERIALIZABLE_ROOT_ID] = ~$addRoot$(error);\n                            promises.splice(promises.indexOf(obj), 1);\n                        });\n                        promises.push(obj);\n                    }\n                    else if (isObjectLiteral(obj)) {\n                        for (const key in obj) {\n                            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                                discoveredValues.push(obj[key]);\n                            }\n                        }\n                    }\n                    else {\n                        throw new Error('Unknown type: ' + obj);\n                    }\n                }\n                else if (id === Number.MIN_SAFE_INTEGER) {\n                    // We are seeing this object second time => promoted it.\n                    $addRoot$(obj);\n                    // we don't need to scan the children, since we have already seen them.\n                }\n            }\n        }\n    }\n};\nfunction serialize(serializationContext) {\n    const { $writer$, $addRoot$, $NodeConstructor$, $setProp$ } = serializationContext;\n    let depth = -1;\n    const writeString = (text) => {\n        text = JSON.stringify(text);\n        let angleBracketIdx = -1;\n        let lastIdx = 0;\n        while ((angleBracketIdx = text.indexOf('</', lastIdx)) !== -1) {\n            $writer$.write(text.substring(lastIdx, angleBracketIdx));\n            $writer$.write('<\\\\/');\n            lastIdx = angleBracketIdx + 2;\n        }\n        $writer$.write(lastIdx === 0 ? text : text.substring(lastIdx));\n    };\n    const writeValue = (value, idx) => {\n        if (fastSkipSerialize(value)) {\n            return writeString(SerializationConstant.UNDEFINED_CHAR);\n        }\n        else if (typeof value === 'bigint') {\n            return writeString(SerializationConstant.BigInt_CHAR + value.toString());\n        }\n        else if (typeof value === 'boolean') {\n            $writer$.write(String(value));\n        }\n        else if (typeof value === 'function') {\n            if (isQrl(value)) {\n                writeString(SerializationConstant.QRL_CHAR + qrlToString(serializationContext, value));\n            }\n            else if (isQwikComponent(value)) {\n                const [qrl] = value[SERIALIZABLE_STATE];\n                serializationContext.$renderSymbols$.add(qrl.$symbol$);\n                writeString(SerializationConstant.Component_CHAR + qrlToString(serializationContext, qrl));\n            }\n            else {\n                // throw new Error('implement: ' + value);\n                writeString(value.toString());\n            }\n        }\n        else if (typeof value === 'number') {\n            if (Number.isNaN(value)) {\n                return writeString(SerializationConstant.NotFinite_CHAR);\n            }\n            else if (!Number.isFinite(value)) {\n                return writeString(SerializationConstant.NotFinite_CHAR + (value > 0 ? '+' : '-'));\n            }\n            else {\n                $writer$.write(String(value));\n            }\n        }\n        else if (typeof value === 'object') {\n            depth++;\n            if (value === null) {\n                $writer$.write('null');\n            }\n            else {\n                writeObjectValue(value, idx);\n            }\n            depth--;\n        }\n        else if (typeof value === 'string') {\n            let seenIdx;\n            if (shouldTrackObj(value) &&\n                depth > 0 &&\n                (seenIdx = serializationContext.$hasRootId$(value)) !== undefined) {\n                assertTrue(seenIdx >= 0, 'seenIdx >= 0');\n                return writeString(SerializationConstant.REFERENCE_CHAR + seenIdx);\n            }\n            else if (value.length > 0 && value.charCodeAt(0) < SerializationConstant.LAST_VALUE) {\n                // We need to escape the first character, because it is a special character.\n                writeString(SerializationConstant.String_CHAR + value);\n            }\n            else {\n                writeString(value);\n            }\n        }\n        else if (typeof value === 'undefined') {\n            writeString(SerializationConstant.UNDEFINED_CHAR);\n        }\n        else {\n            throw new Error('Unknown type: ' + typeof value);\n        }\n    };\n    const writeObjectValue = (value, idx) => {\n        // Objects are the only way to create circular dependencies.\n        // So the first thing to to is to see if we have a circular dependency.\n        // (NOTE: For root objects we need to serialize them regardless if we have seen\n        //        them before, otherwise the root object reference will point to itself.)\n        const seen = depth <= 1 ? undefined : serializationContext.$wasSeen$(value);\n        if (fastSkipSerialize(value)) {\n            writeString(SerializationConstant.UNDEFINED_CHAR);\n        }\n        else if (typeof seen === 'number' && seen >= 0) {\n            // We have seen this object before, so we can serialize it as a reference.\n            // Otherwise serialize as normal\n            writeString(SerializationConstant.REFERENCE_CHAR + seen);\n        }\n        else if (isPropsProxy(value)) {\n            const varProps = value[_VAR_PROPS];\n            const varId = $addRoot$(varProps);\n            const constProps = value[_CONST_PROPS];\n            const constId = $addRoot$(constProps);\n            writeString(SerializationConstant.PropsProxy_CHAR + varId + ' ' + constId);\n        }\n        else if (isStore(value)) {\n            writeString(SerializationConstant.Store_CHAR + $addRoot$(unwrapProxy(value)));\n        }\n        else if (isObjectLiteral(value)) {\n            if (isResource(value)) {\n                serializationContext.$resources$.add(value);\n            }\n            serializeObjectLiteral(value, $writer$, writeValue, writeString, serializationContext.$proxyMap$, $addRoot$);\n        }\n        else if (value instanceof SignalImpl) {\n            const manager = getSubscriptionManager(value);\n            const subscriptions = subscriptionManagerToString(manager, $addRoot$);\n            writeString(SerializationConstant.Signal_CHAR +\n                $addRoot$(value.untrackedValue) +\n                (subscriptions === '' ? '' : ';' + subscriptions));\n        }\n        else if (value instanceof SignalDerived) {\n            const serializedSignalDerived = serializeSignalDerived(serializationContext, value, $addRoot$);\n            writeString(serializedSignalDerived);\n        }\n        else if (value instanceof SignalWrapper) {\n            writeString(SerializationConstant.SignalWrapper_CHAR + $addRoot$(value.ref) + ' ' + value.prop);\n        }\n        else if (value instanceof URL) {\n            writeString(SerializationConstant.URL_CHAR + value.href);\n        }\n        else if (value instanceof Date) {\n            writeString(SerializationConstant.Date_CHAR + value.toJSON());\n        }\n        else if (value instanceof RegExp) {\n            writeString(SerializationConstant.Regex_CHAR + value.toString());\n        }\n        else if (value instanceof Error) {\n            const errorProps = Object.assign({\n                message: value.message,\n                /// In production we don't want to leak the stack trace.\n                stack: isDev ? value.stack : '<hidden>',\n            }, value);\n            writeString(SerializationConstant.Error_CHAR + $addRoot$(errorProps));\n        }\n        else if ($NodeConstructor$ && value instanceof $NodeConstructor$) {\n            $setProp$(value, ELEMENT_ID, String(idx));\n            writeString(SerializationConstant.VNode_CHAR + value.id);\n        }\n        else if (typeof FormData !== 'undefined' && value instanceof FormData) {\n            const array = [];\n            value.forEach((value, key) => {\n                if (typeof value === 'string') {\n                    array.push([key, value]);\n                }\n                else {\n                    array.push([key, value.name]);\n                }\n            });\n            writeString(SerializationConstant.FormData_CHAR + $addRoot$(array));\n        }\n        else if (value instanceof URLSearchParams) {\n            writeString(SerializationConstant.URLSearchParams_CHAR + value.toString());\n        }\n        else if (value instanceof Set) {\n            writeString(SerializationConstant.Set_CHAR + getSerializableDataRootId(value));\n        }\n        else if (value instanceof Map) {\n            writeString(SerializationConstant.Map_CHAR + getSerializableDataRootId(value));\n        }\n        else if (isJSXNode(value)) {\n            writeString(SerializationConstant.JSXNode_CHAR +\n                serializeJSXType($addRoot$, value.type) +\n                ' ' +\n                $addRoot$(value.varProps) +\n                ' ' +\n                $addRoot$(value.constProps) +\n                ' ' +\n                $addRoot$(value.children) +\n                ' ' +\n                value.flags +\n                ' ' +\n                (value.key || ''));\n        }\n        else if (value instanceof Task) {\n            writeString(SerializationConstant.Task_CHAR +\n                value.$flags$ +\n                ' ' +\n                value.$index$ +\n                ' ' +\n                $addRoot$(value.$el$) +\n                ' ' +\n                qrlToString(serializationContext, value.$qrl$) +\n                (value.$state$ == null ? '' : ' ' + $addRoot$(value.$state$)));\n        }\n        else if (isPromise(value)) {\n            writeString(SerializationConstant.Promise_CHAR + getSerializableDataRootId(value));\n        }\n        else if (value instanceof Uint8Array) {\n            let buf = '';\n            for (const c of value) {\n                buf += String.fromCharCode(c);\n            }\n            const out = btoa(buf).replace(/=+$/, '');\n            writeString(SerializationConstant.Uint8Array_CHAR + out);\n        }\n        else {\n            throw new Error('implement: ' + JSON.stringify(value));\n        }\n    };\n    const serializeObjectLiteral = (value, $writer$, writeValue, writeString, objectMap, $addRoot$) => {\n        if (Array.isArray(value)) {\n            const proxy = objectMap.get(value);\n            if (proxy !== undefined) {\n                $writer$.write('{');\n                serializeProxy(value, proxy, $writer$, writeString, $addRoot$);\n                $writer$.write(',');\n                // for an array we have to add property key (undefined)\n                writeString(SerializationConstant.UNDEFINED_CHAR);\n                $writer$.write(':');\n            }\n            // Serialize as array.\n            serializeArray(value, $writer$, writeValue);\n            if (proxy !== undefined) {\n                $writer$.write('}');\n            }\n        }\n        else {\n            // Serialize as object.\n            $writer$.write('{');\n            const proxy = objectMap.get(value);\n            if (proxy !== undefined) {\n                serializeProxy(value, proxy, $writer$, writeString, $addRoot$);\n            }\n            serializeObjectProperties(value, $writer$, writeValue, writeString, proxy !== undefined);\n            $writer$.write('}');\n        }\n    };\n    writeValue(serializationContext.$roots$, -1);\n}\nfunction serializeProxy(value, proxy, $writer$, writeString, $addRoot$) {\n    const flags = getProxyFlags(value) || 0;\n    writeString(SerializationConstant.Store_CHAR);\n    $writer$.write(':');\n    const manager = getSubscriptionManager(proxy);\n    writeString(String(flags) + subscriptionManagerToString(manager, $addRoot$));\n}\nfunction serializeArray(value, $writer$, writeValue) {\n    $writer$.write('[');\n    for (let i = 0; i < value.length; i++) {\n        if (i !== 0) {\n            $writer$.write(',');\n        }\n        writeValue(value[i], i);\n    }\n    $writer$.write(']');\n}\nfunction serializeObjectProperties(value, $writer$, writeValue, writeString, startWithDelimiter) {\n    let delimiter = startWithDelimiter;\n    for (const key in value) {\n        if (Object.prototype.hasOwnProperty.call(value, key) && !fastSkipSerialize(value[key])) {\n            delimiter && $writer$.write(',');\n            writeString(key);\n            $writer$.write(':');\n            writeValue(value[key], -1);\n            delimiter = true;\n        }\n    }\n}\nfunction serializeSignalDerived(serializationContext, value, $addRoot$) {\n    // if value is an object then we need to wrap this in ()\n    if (value.$funcStr$ && value.$funcStr$[0] === '{') {\n        value.$funcStr$ = `(${value.$funcStr$})`;\n    }\n    const syncFnId = serializationContext.$addSyncFn$(value.$funcStr$, value.$args$.length, value.$func$);\n    const args = value.$args$.map($addRoot$).join(' ');\n    return SerializationConstant.DerivedSignal_CHAR + syncFnId + (args.length ? ' ' + args : '');\n}\nfunction setSerializableDataRootId($addRoot$, obj, value) {\n    obj[SERIALIZABLE_ROOT_ID] = $addRoot$(value);\n}\nfunction getSerializableDataRootId(value) {\n    const id = value[SERIALIZABLE_ROOT_ID];\n    assertDefined(id, 'Missing SERIALIZABLE_ROOT_ID');\n    return id;\n}\nfunction subscriptionManagerToString(subscriptionManager, $addRoot$) {\n    const data = [];\n    for (const sub of subscriptionManager.$subs$) {\n        let subData = '';\n        for (let i = 0; i < sub.length; i++) {\n            if (i === SubscriptionProp.TYPE) {\n                subData += sub[i];\n            }\n            else {\n                subData += ' ' + $addRoot$(sub[i]);\n            }\n        }\n        data.push(subData);\n    }\n    return data.join(';');\n}\nexport function subscriptionManagerFromString(subscriptionManager, value, getObjectById) {\n    const subs = value.split(';');\n    for (let k = 0; k < subs.length; k++) {\n        const sub = subs[k];\n        if (!sub) {\n            // skip empty strings\n            continue;\n        }\n        const subscription = sub.split(' ');\n        subscription[0] = parseInt(subscription[0]);\n        for (let i = 1; i < subscription.length; i++) {\n            subscription[i] = getObjectById(subscription[i]);\n        }\n        const prop = subscription.pop();\n        subscriptionManager.$addSub$(subscription, prop);\n    }\n}\nexport function qrlToString(serializationContext, value) {\n    let symbol = value.$symbol$;\n    let chunk = value.$chunk$;\n    const refSymbol = value.$refSymbol$ ?? symbol;\n    const platform = getPlatform();\n    if (platform) {\n        const result = platform.chunkForSymbol(refSymbol, chunk);\n        if (result) {\n            chunk = result[1];\n            if (!value.$refSymbol$) {\n                symbol = result[0];\n            }\n        }\n    }\n    const isSync = isSyncQrl(value);\n    if (!isSync) {\n        // If we have a symbol we need to resolve the chunk.\n        if (!chunk) {\n            chunk = serializationContext.$symbolToChunkResolver$(value.$hash$);\n        }\n        // in Dev mode we need to keep track of the symbols\n        if (isDev) {\n            let backChannel = globalThis[QRL_RUNTIME_CHUNK];\n            if (!backChannel) {\n                backChannel = globalThis[QRL_RUNTIME_CHUNK] = new Map();\n            }\n            backChannel.set(value.$symbol$, value._devOnlySymbolRef);\n            if (!chunk) {\n                chunk = QRL_RUNTIME_CHUNK;\n            }\n        }\n        if (!chunk) {\n            throwErrorAndStop('Missing chunk for: ' + value.$symbol$);\n        }\n    }\n    else {\n        const fn = value.resolved;\n        chunk = '';\n        symbol = String(serializationContext.$addSyncFn$(undefined, 0, fn));\n    }\n    let qrlStringInline = `${chunk}#${symbol}`;\n    if (Array.isArray(value.$captureRef$) && value.$captureRef$.length > 0) {\n        let serializedReferences = '';\n        // hot-path optimization\n        for (let i = 0; i < value.$captureRef$.length; i++) {\n            if (i > 0) {\n                serializedReferences += ' ';\n            }\n            serializedReferences += serializationContext.$addRoot$(value.$captureRef$[i]);\n        }\n        qrlStringInline += `[${serializedReferences}]`;\n    }\n    return qrlStringInline;\n}\n/**\n * Serialize data to string using SerializationContext.\n *\n * @param data - Data to serialize\n * @internal\n */\nexport async function _serialize(data) {\n    const serializationContext = createSerializationContext(null, new WeakMap(), () => '', () => { });\n    for (const root of data) {\n        serializationContext.$addRoot$(root);\n    }\n    await serializationContext.$breakCircularDepsAndAwaitPromises$();\n    serializationContext.$serialize$();\n    return serializationContext.$writer$.toString();\n}\n/**\n * Deserialize data from string to an array of objects.\n *\n * @param rawStateData - Data to deserialize\n * @param element - Container element\n * @internal\n */\nexport function _deserialize(rawStateData, element) {\n    if (rawStateData == null) {\n        return [];\n    }\n    const stateData = JSON.parse(rawStateData);\n    if (!Array.isArray(stateData)) {\n        return [];\n    }\n    let container = undefined;\n    if (isNode(element) && isElement(element)) {\n        container = createDeserializeContainer(stateData, element);\n    }\n    else {\n        container = createDeserializeContainer(stateData);\n    }\n    for (let i = 0; i < stateData.length; i++) {\n        const data = stateData[i];\n        stateData[i] = deserializeData(stateData, data, container);\n    }\n    return stateData;\n}\nfunction deserializeData(stateData, serializedData, container) {\n    let typeCode;\n    if (typeof serializedData === 'string' &&\n        serializedData.length >= 1 &&\n        (typeCode = serializedData.charCodeAt(0)) < SerializationConstant.LAST_VALUE) {\n        let propValue = serializedData;\n        if (typeCode === SerializationConstant.REFERENCE_VALUE) {\n            // Special case of Reference, we don't go through allocation/inflation\n            propValue = unwrapDeserializerProxy(container.$getObjectById$(parseInt(propValue.substring(1))));\n        }\n        else {\n            propValue = allocate(propValue);\n        }\n        if (typeCode >= SerializationConstant.Error_VALUE) {\n            inflate(container, propValue, serializedData);\n        }\n        return propValue;\n    }\n    else if (serializedData && typeof serializedData === 'object') {\n        if (Array.isArray(serializedData)) {\n            return deserializeArray(stateData, serializedData, container);\n        }\n        else {\n            return deserializeObject(stateData, serializedData, container);\n        }\n    }\n    return serializedData;\n}\nfunction deserializeObject(stateData, serializedData, container) {\n    if (!isSerializableObject(serializedData)) {\n        return serializedData;\n    }\n    for (const key in serializedData) {\n        if (Object.prototype.hasOwnProperty.call(serializedData, key)) {\n            const value = serializedData[key];\n            serializedData[key] = deserializeData(stateData, value, container);\n        }\n    }\n    return serializedData;\n}\nfunction deserializeArray(stateData, serializedData, container) {\n    for (let i = 0; i < serializedData.length; i++) {\n        const value = serializedData[i];\n        serializedData[i] = deserializeData(stateData, value, container);\n    }\n    return serializedData;\n}\nfunction getObjectById(id, stateData) {\n    if (typeof id === 'string') {\n        id = parseFloat(id);\n    }\n    assertTrue(id < stateData.length, 'Invalid reference');\n    return stateData[id];\n}\nfunction createDeserializeContainer(stateData, element) {\n    const container = {\n        $getObjectById$: (id) => getObjectById(id, stateData),\n        getSyncFn: (_) => {\n            const fn = () => { };\n            return fn;\n        },\n        $subsManager$: null,\n        element: null,\n    };\n    const subsManager = createSubscriptionManager(container);\n    container.$subsManager$ = subsManager;\n    if (element) {\n        container.element = element;\n    }\n    return container;\n}\n/**\n * Tracking all objects in the map would be expensive. For this reason we only track some of the\n * objects.\n *\n * For example we skip:\n *\n * - Short strings\n * - Anything which is not an object. (ie. number, boolean, null, undefined)\n *\n * @param obj\n * @returns\n */\nfunction shouldTrackObj(obj) {\n    return ((typeof obj === 'object' && obj !== null) ||\n        // THINK: Not sure if we need to keep track of functions (QRLs) Let's skip them for now.\n        // and see if we have a test case which requires them.\n        (typeof obj === 'string' && obj.length > 10));\n}\n/**\n * When serializing the object we need check if it is URL, RegExp, Map, Set, etc. This is time\n * consuming. So if we could know that this is a basic object literal we could skip the check, and\n * only run the checks for objects which are not object literals.\n *\n * So this function is here for performance to short circuit many checks later.\n *\n * @param obj\n */\nfunction isObjectLiteral(obj) {\n    // We are an object literal if:\n    // - we are a direct instance of object OR\n    // - we are an array\n    // In all other cases it is a subclass which requires more checks.\n    const prototype = Object.getPrototypeOf(obj);\n    return prototype == null || prototype === Object.prototype || prototype === Array.prototype;\n}\nfunction isResource(value) {\n    return '__brand' in value && value.__brand === 'resource';\n}\nconst frameworkType = (obj) => {\n    return ((typeof obj === 'object' &&\n        obj !== null &&\n        (obj instanceof SignalImpl || obj instanceof Task || isJSXNode(obj))) ||\n        isQrl(obj));\n};\nconst QRL_RUNTIME_CHUNK = 'qwik-runtime-mock-chunk';\nconst SERIALIZABLE_ROOT_ID = Symbol('SERIALIZABLE_ROOT_ID');\nexport var SerializationConstant;\n(function (SerializationConstant) {\n    SerializationConstant[\"UNDEFINED_CHAR\"] = \"\\0\";\n    SerializationConstant[SerializationConstant[\"UNDEFINED_VALUE\"] = 0] = \"UNDEFINED_VALUE\";\n    SerializationConstant[\"REFERENCE_CHAR\"] = \"\\u0001\";\n    SerializationConstant[SerializationConstant[\"REFERENCE_VALUE\"] = 1] = \"REFERENCE_VALUE\";\n    SerializationConstant[\"URL_CHAR\"] = \"\\u0002\";\n    SerializationConstant[SerializationConstant[\"URL_VALUE\"] = 2] = \"URL_VALUE\";\n    SerializationConstant[\"Date_CHAR\"] = \"\\u0003\";\n    SerializationConstant[SerializationConstant[\"Date_VALUE\"] = 3] = \"Date_VALUE\";\n    SerializationConstant[\"Regex_CHAR\"] = \"\\u0004\";\n    SerializationConstant[SerializationConstant[\"Regex_VALUE\"] = 4] = \"Regex_VALUE\";\n    SerializationConstant[\"String_CHAR\"] = \"\\u0005\";\n    SerializationConstant[SerializationConstant[\"String_VALUE\"] = 5] = \"String_VALUE\";\n    SerializationConstant[\"VNode_CHAR\"] = \"\\u0006\";\n    SerializationConstant[SerializationConstant[\"VNode_VALUE\"] = 6] = \"VNode_VALUE\";\n    SerializationConstant[\"NotFinite_CHAR\"] = \"\\u0007\";\n    SerializationConstant[SerializationConstant[\"NotFinite_VALUE\"] = 7] = \"NotFinite_VALUE\";\n    SerializationConstant[\"BigInt_CHAR\"] = \"\\b\";\n    SerializationConstant[SerializationConstant[\"BigInt_VALUE\"] = 8] = \"BigInt_VALUE\";\n    SerializationConstant[\"UNUSED_HORIZONTAL_TAB_CHAR\"] = \"\\t\";\n    SerializationConstant[SerializationConstant[\"UNUSED_HORIZONTAL_TAB_VALUE\"] = 9] = \"UNUSED_HORIZONTAL_TAB_VALUE\";\n    SerializationConstant[\"UNUSED_NEW_LINE_CHAR\"] = \"\\n\";\n    SerializationConstant[SerializationConstant[\"UNUSED_NEW_LINE_VALUE\"] = 10] = \"UNUSED_NEW_LINE_VALUE\";\n    SerializationConstant[\"UNUSED_VERTICAL_TAB_CHAR\"] = \"\\v\";\n    SerializationConstant[SerializationConstant[\"UNUSED_VERTICAL_TAB_VALUE\"] = 11] = \"UNUSED_VERTICAL_TAB_VALUE\";\n    SerializationConstant[\"UNUSED_FORM_FEED_CHAR\"] = \"\\f\";\n    SerializationConstant[SerializationConstant[\"UNUSED_FORM_FEED_VALUE\"] = 12] = \"UNUSED_FORM_FEED_VALUE\";\n    SerializationConstant[\"UNUSED_CARRIAGE_RETURN_CHAR\"] = \"\\r\";\n    SerializationConstant[SerializationConstant[\"UNUSED_CARRIAGE_RETURN_VALUE\"] = 13] = \"UNUSED_CARRIAGE_RETURN_VALUE\";\n    SerializationConstant[\"URLSearchParams_CHAR\"] = \"\\u000E\";\n    SerializationConstant[SerializationConstant[\"URLSearchParams_VALUE\"] = 14] = \"URLSearchParams_VALUE\";\n    /// All values bellow need inflation\n    SerializationConstant[\"Error_CHAR\"] = \"\\u000F\";\n    SerializationConstant[SerializationConstant[\"Error_VALUE\"] = 15] = \"Error_VALUE\";\n    SerializationConstant[\"QRL_CHAR\"] = \"\\u0010\";\n    SerializationConstant[SerializationConstant[\"QRL_VALUE\"] = 16] = \"QRL_VALUE\";\n    SerializationConstant[\"Task_CHAR\"] = \"\\u0011\";\n    SerializationConstant[SerializationConstant[\"Task_VALUE\"] = 17] = \"Task_VALUE\";\n    SerializationConstant[\"Resource_CHAR\"] = \"\\u0012\";\n    SerializationConstant[SerializationConstant[\"Resource_VALUE\"] = 18] = \"Resource_VALUE\";\n    SerializationConstant[\"Component_CHAR\"] = \"\\u0013\";\n    SerializationConstant[SerializationConstant[\"Component_VALUE\"] = 19] = \"Component_VALUE\";\n    SerializationConstant[\"DerivedSignal_CHAR\"] = \"\\u0014\";\n    SerializationConstant[SerializationConstant[\"DerivedSignal_VALUE\"] = 20] = \"DerivedSignal_VALUE\";\n    SerializationConstant[\"Signal_CHAR\"] = \"\\u0015\";\n    SerializationConstant[SerializationConstant[\"Signal_VALUE\"] = 21] = \"Signal_VALUE\";\n    SerializationConstant[\"SignalWrapper_CHAR\"] = \"\\u0016\";\n    SerializationConstant[SerializationConstant[\"SignalWrapper_VALUE\"] = 22] = \"SignalWrapper_VALUE\";\n    SerializationConstant[\"Store_CHAR\"] = \"\\u0017\";\n    SerializationConstant[SerializationConstant[\"Store_VALUE\"] = 23] = \"Store_VALUE\";\n    SerializationConstant[\"FormData_CHAR\"] = \"\\u0018\";\n    SerializationConstant[SerializationConstant[\"FormData_VALUE\"] = 24] = \"FormData_VALUE\";\n    SerializationConstant[\"JSXNode_CHAR\"] = \"\\u0019\";\n    SerializationConstant[SerializationConstant[\"JSXNode_VALUE\"] = 25] = \"JSXNode_VALUE\";\n    SerializationConstant[\"Set_CHAR\"] = \"\\u001A\";\n    SerializationConstant[SerializationConstant[\"Set_VALUE\"] = 26] = \"Set_VALUE\";\n    SerializationConstant[\"Map_CHAR\"] = \"\\u001B\";\n    SerializationConstant[SerializationConstant[\"Map_VALUE\"] = 27] = \"Map_VALUE\";\n    SerializationConstant[\"Promise_CHAR\"] = \"\\u001C\";\n    SerializationConstant[SerializationConstant[\"Promise_VALUE\"] = 28] = \"Promise_VALUE\";\n    SerializationConstant[\"Uint8Array_CHAR\"] = \"\\u001E\";\n    SerializationConstant[SerializationConstant[\"Uint8Array_VALUE\"] = 30] = \"Uint8Array_VALUE\";\n    SerializationConstant[\"PropsProxy_CHAR\"] = \"\\u001F\";\n    SerializationConstant[SerializationConstant[\"PropsProxy_VALUE\"] = 31] = \"PropsProxy_VALUE\";\n    /// Can't go past this value\n    SerializationConstant[SerializationConstant[\"LAST_VALUE\"] = 32] = \"LAST_VALUE\";\n})(SerializationConstant || (SerializationConstant = {}));\nfunction serializeJSXType($addRoot$, type) {\n    if (typeof type === 'string') {\n        return type;\n    }\n    else if (type === Slot) {\n        return ':slot';\n    }\n    else if (type === Fragment) {\n        return ':fragment';\n    }\n    else {\n        return $addRoot$(type);\n    }\n}\nfunction deserializeJSXType(container, type) {\n    if (type === ':slot') {\n        return Slot;\n    }\n    else if (type === ':fragment') {\n        return Fragment;\n    }\n    else {\n        const ch = type.charCodeAt(0);\n        if (48 /* '0' */ <= ch && ch <= 57 /* '9' */) {\n            return container.$getObjectById$(type);\n        }\n        else {\n            return type;\n        }\n    }\n}\nexport const codeToName = (code) => {\n    switch (code) {\n        case SerializationConstant.UNDEFINED_VALUE:\n            return 'UNDEFINED';\n        case SerializationConstant.REFERENCE_VALUE:\n            return 'REFERENCE';\n        case SerializationConstant.QRL_VALUE:\n            return 'QRL';\n        case SerializationConstant.Task_VALUE:\n            return 'Task';\n        case SerializationConstant.Resource_VALUE:\n            return 'Resource';\n        case SerializationConstant.URL_VALUE:\n            return 'URL';\n        case SerializationConstant.Date_VALUE:\n            return 'Date';\n        case SerializationConstant.Regex_VALUE:\n            return 'Regex';\n        case SerializationConstant.String_VALUE:\n            return 'String';\n        case SerializationConstant.UNUSED_HORIZONTAL_TAB_VALUE:\n            return 'UNUSED_HORIZONTAL_TAB';\n        case SerializationConstant.UNUSED_NEW_LINE_VALUE:\n            return 'UNUSED_NEW_LINE';\n        case SerializationConstant.UNUSED_VERTICAL_TAB_VALUE:\n            return 'UNUSED_VERTICAL_TAB';\n        case SerializationConstant.UNUSED_FORM_FEED_VALUE:\n            return 'UNUSED_FORM_FEED';\n        case SerializationConstant.UNUSED_CARRIAGE_RETURN_VALUE:\n            return 'UNUSED_CARRIAGE_RETURN';\n        case SerializationConstant.Error_VALUE:\n            return 'Error';\n        case SerializationConstant.VNode_VALUE:\n            return 'VNode';\n        case SerializationConstant.Component_VALUE:\n            return 'Component';\n        case SerializationConstant.DerivedSignal_VALUE:\n            return 'DerivedSignal';\n        case SerializationConstant.Store_VALUE:\n            return 'Store';\n        case SerializationConstant.Signal_VALUE:\n            return 'Signal';\n        case SerializationConstant.SignalWrapper_VALUE:\n            return 'SignalWrapper';\n        case SerializationConstant.NotFinite_VALUE:\n            return 'NotFinite';\n        case SerializationConstant.URLSearchParams_VALUE:\n            return 'URLSearchParams';\n        case SerializationConstant.FormData_VALUE:\n            return 'FormData';\n        case SerializationConstant.JSXNode_VALUE:\n            return 'JSXNode';\n        case SerializationConstant.BigInt_VALUE:\n            return 'BigInt';\n        case SerializationConstant.Set_VALUE:\n            return 'Set';\n        case SerializationConstant.Map_VALUE:\n            return 'Map';\n        case SerializationConstant.Promise_VALUE:\n            return 'Promise';\n        case SerializationConstant.Uint8Array_VALUE:\n            return 'Uint8Array';\n        case SerializationConstant.PropsProxy_VALUE:\n            return 'Props';\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertEqual, assertNumber, assertTrue } from '../error/assert';\nimport { QError_immutableProps, qError } from '../error/error';\nimport { tryGetInvokeContext } from '../use/use-core';\nimport { logError, logWarn } from '../util/log';\nimport { ComputedEvent, RenderEvent } from '../util/markers';\nimport { qDev, qSerialize } from '../util/qdev';\nimport { isArray, isObject, isSerializableObject } from '../util/types';\nimport { SERIALIZER_PROXY_UNWRAP, SerializationConstant, subscriptionManagerFromString, unwrapDeserializerProxy, } from '../v2/shared/shared-serialization';\nimport { LocalSubscriptionManager, fastSkipSerialize, unwrapProxy, verifySerializable, } from './common';\nimport { QObjectFlagsSymbol, QObjectImmutable, QObjectManagerSymbol, QObjectRecursive, QObjectTargetSymbol, _CONST_PROPS, } from './constants';\nimport { isSignal } from './signal';\n/** Creates a proxy that notifies of any writes. */\nexport const getOrCreateProxy = (target, storeMgr, flags = 0) => {\n    const proxy = storeMgr.$proxyMap$.get(target);\n    if (proxy) {\n        return proxy;\n    }\n    if (flags !== 0) {\n        setObjectFlags(target, flags);\n    }\n    return createProxy(target, storeMgr, undefined);\n};\nexport const isStore = (target) => {\n    const unwrap = unwrapProxy(target);\n    return unwrap !== target;\n};\nexport const createProxy = (target, storeTracker, subs) => {\n    assertEqual(unwrapProxy(target), target, 'Unexpected proxy at this location', target);\n    assertTrue(!storeTracker.$proxyMap$.has(target), 'Proxy was already created', target);\n    assertTrue(isObject(target), 'Target must be an object');\n    assertTrue(isSerializableObject(target) || isArray(target), 'Target must be a serializable object');\n    const manager = storeTracker.$subsManager$.$createManager$(subs);\n    const getSerializedState = (target) => {\n        return target[SerializationConstant.Store_CHAR];\n    };\n    const removeSerializedState = (target) => {\n        delete target[SerializationConstant.Store_CHAR];\n    };\n    const addSubscriptions = (serializedState, serializedStateObject, target) => {\n        removeSerializedState(serializedStateObject);\n        setObjectFlags(target, serializedState.charCodeAt(0) - 48 /*'0'*/);\n        subscriptionManagerFromString(manager, serializedState.substring(1), storeTracker.$getObjectById$);\n    };\n    /**\n     * If we have an `SerializationConstant.UNDEFINED_CHAR` as a prop, then this means that this is\n     * serialized store with an array as a value. We need to handle this separately, because the proxy\n     * target is now the value of the `SerializationConstant.UNDEFINED_CHAR` prop\n     */\n    const serializedArrayTarget = target[SerializationConstant.UNDEFINED_CHAR];\n    if (serializedArrayTarget) {\n        const proxy = new Proxy(serializedArrayTarget, new ReadWriteProxyHandler(storeTracker, manager));\n        storeTracker.$proxyMap$.set(target, proxy);\n        const serializedState = getSerializedState(target);\n        if (serializedState) {\n            addSubscriptions(serializedState, target, serializedArrayTarget);\n        }\n        return proxy;\n    }\n    else {\n        const proxy = new Proxy(target, new ReadWriteProxyHandler(storeTracker, manager));\n        storeTracker.$proxyMap$.set(target, proxy);\n        const serializedState = getSerializedState(target);\n        if (serializedState) {\n            addSubscriptions(serializedState, target, target);\n        }\n        return proxy;\n    }\n};\nexport const createPropsState = () => {\n    const props = {};\n    setObjectFlags(props, QObjectImmutable);\n    return props;\n};\nexport const setObjectFlags = (obj, flags) => {\n    Object.defineProperty(obj, QObjectFlagsSymbol, { value: flags, enumerable: false });\n};\n/** @internal */\nexport const _restProps = (props, omit, target = {}) => {\n    for (const key in props) {\n        if (!omit.includes(key)) {\n            target[key] = props[key];\n        }\n    }\n    return target;\n};\nexport class ReadWriteProxyHandler {\n    constructor($storeTracker$, $manager$) {\n        this.$storeTracker$ = $storeTracker$;\n        this.$manager$ = $manager$;\n    }\n    deleteProperty(target, prop) {\n        if (target[QObjectFlagsSymbol] & QObjectImmutable) {\n            throw qError(QError_immutableProps);\n        }\n        if (typeof prop != 'string' || !delete target[prop]) {\n            return false;\n        }\n        this.$manager$.$notifySubs$(isArray(target) ? undefined : prop);\n        return true;\n    }\n    get(target, prop) {\n        if (typeof prop === 'symbol') {\n            if (prop === QObjectTargetSymbol) {\n                return target;\n            }\n            if (prop === QObjectManagerSymbol) {\n                return this.$manager$;\n            }\n            if (prop === SERIALIZER_PROXY_UNWRAP) {\n                // SERIALIZER_PROXY_UNWRAP is used by v2 serialization to unwrap proxies.\n                // Our target may be a v2 serialization proxy so if we let it through\n                // we will return the naked object which removes ourselves,\n                // and that is not the intention so prevent of SERIALIZER_PROXY_UNWRAP.\n                return undefined;\n            }\n            return target[prop];\n        }\n        const flags = target[QObjectFlagsSymbol] ?? 0;\n        assertNumber(flags, 'flags must be an number');\n        const invokeCtx = tryGetInvokeContext();\n        const recursive = (flags & QObjectRecursive) !== 0;\n        const immutable = (flags & QObjectImmutable) !== 0;\n        let subscriber;\n        if (invokeCtx) {\n            subscriber = invokeCtx.$subscriber$;\n        }\n        if (immutable && (!(prop in target) || immutableValue(target[_CONST_PROPS]?.[prop]))) {\n            subscriber = null;\n        }\n        const value = target[prop];\n        if (subscriber) {\n            const isA = isArray(target);\n            this.$manager$.$addSub$(subscriber, isA ? undefined : prop);\n        }\n        return recursive ? wrap(value, this.$storeTracker$) : value;\n    }\n    set(target, prop, newValue) {\n        // we need deserializer proxy only to get the value, not to set it\n        target = unwrapDeserializerProxy(target);\n        if (typeof prop === 'symbol') {\n            target[prop] = newValue;\n            return true;\n        }\n        const flags = target[QObjectFlagsSymbol] ?? 0;\n        assertNumber(flags, 'flags must be an number');\n        const immutable = (flags & QObjectImmutable) !== 0;\n        if (immutable) {\n            throw qError(QError_immutableProps);\n        }\n        const recursive = (flags & QObjectRecursive) !== 0;\n        const unwrappedNewValue = recursive ? unwrapProxy(newValue) : newValue;\n        if (qDev) {\n            if (qSerialize) {\n                verifySerializable(unwrappedNewValue);\n            }\n            const invokeCtx = tryGetInvokeContext();\n            if (invokeCtx) {\n                if (invokeCtx.$event$ === RenderEvent) {\n                    logError('State mutation inside render function. Move mutation to useTask$() or useVisibleTask$()', prop);\n                }\n                else if (invokeCtx.$event$ === ComputedEvent) {\n                    logWarn('State mutation inside useComputed$() is an antipattern. Use useTask$() instead', String(invokeCtx.$hostElement$));\n                }\n            }\n        }\n        const isA = isArray(target);\n        if (isA) {\n            target[prop] = unwrappedNewValue;\n            this.$manager$.$notifySubs$();\n            return true;\n        }\n        const oldValue = target[prop];\n        target[prop] = unwrappedNewValue;\n        if (oldValue !== unwrappedNewValue) {\n            this.$manager$.$notifySubs$(prop);\n        }\n        return true;\n    }\n    has(target, property) {\n        if (property === QObjectTargetSymbol) {\n            return true;\n        }\n        const hasOwnProperty = Object.prototype.hasOwnProperty;\n        if (hasOwnProperty.call(target, property)) {\n            return true;\n        }\n        return false;\n    }\n    ownKeys(target) {\n        const flags = target[QObjectFlagsSymbol] ?? 0;\n        assertNumber(flags, 'flags must be an number');\n        const immutable = (flags & QObjectImmutable) !== 0;\n        if (!immutable) {\n            let subscriber = null;\n            const invokeCtx = tryGetInvokeContext();\n            if (invokeCtx) {\n                subscriber = invokeCtx.$subscriber$;\n            }\n            if (subscriber) {\n                this.$manager$.$addSub$(subscriber);\n            }\n        }\n        return Reflect.ownKeys(target);\n    }\n    getOwnPropertyDescriptor(target, prop) {\n        if (isArray(target) || typeof prop === 'symbol') {\n            return Object.getOwnPropertyDescriptor(target, prop);\n        }\n        return {\n            enumerable: true,\n            configurable: true,\n        };\n    }\n}\nconst immutableValue = (value) => {\n    return value === _CONST_PROPS || isSignal(value);\n};\nconst wrap = (value, storeTracker) => {\n    if (isObject(value)) {\n        if (Object.isFrozen(value)) {\n            return value;\n        }\n        const nakedValue = unwrapProxy(value);\n        if (nakedValue !== value) {\n            // already a proxy return;\n            return value;\n        }\n        if (fastSkipSerialize(nakedValue)) {\n            return value;\n        }\n        if (isSerializableObject(nakedValue) || isArray(nakedValue)) {\n            const proxy = storeTracker.$proxyMap$.get(nakedValue);\n            return proxy ? proxy : getOrCreateProxy(nakedValue, storeTracker, QObjectRecursive);\n        }\n    }\n    return value;\n};\n//# sourceMappingURL=data:application/json;base64,","import { qError, QError_invalidJsxNodeType } from '../../error/error';\nimport { SubscriptionType } from '../../state/common';\nimport { HOST_FLAG_MOUNTED } from '../../state/context';\nimport { isSignal } from '../../state/signal';\nimport { invoke, newInvokeContext } from '../../use/use-core';\nimport { EMPTY_ARRAY, EMPTY_OBJ } from '../../util/flyweight';\nimport { logWarn } from '../../util/log';\nimport { isNotNullable, isPromise, maybeThen, promiseAll } from '../../util/promises';\nimport { qDev, qInspector, seal } from '../../util/qdev';\nimport { isArray, isFunction, isObject, isString } from '../../util/types';\nimport { executeComponent, shouldWrapFunctional } from '../execute-component';\nimport { _jsxSorted, isJSXNode, SKIP_RENDER_TYPE, Virtual } from '../jsx/jsx-runtime';\nimport { SkipRender } from '../jsx/utils.public';\nimport { appendHeadStyle } from './operations';\nimport { VIRTUAL } from './virtual-element';\nimport { domToVnode, smartUpdateChildren } from './visitor';\nexport const renderComponent = (rCtx, elCtx, flags) => {\n    const justMounted = !(elCtx.$flags$ & HOST_FLAG_MOUNTED);\n    const hostElement = elCtx.$element$;\n    const containerState = rCtx.$static$.$containerState$;\n    // Component is not dirty any more\n    containerState.$hostsStaging$.delete(elCtx);\n    // Clean current subscription before render\n    containerState.$subsManager$.$clearSub$(hostElement);\n    // TODO, serialize scopeIds\n    return maybeThen(executeComponent(rCtx, elCtx), (res) => {\n        const staticCtx = rCtx.$static$;\n        const newCtx = res.rCtx;\n        const iCtx = newInvokeContext(rCtx.$static$.$locale$, hostElement);\n        staticCtx.$hostElements$.add(hostElement);\n        iCtx.$subscriber$ = [SubscriptionType.HOST, hostElement];\n        iCtx.$renderCtx$ = newCtx;\n        if (justMounted) {\n            if (elCtx.$appendStyles$) {\n                for (const style of elCtx.$appendStyles$) {\n                    appendHeadStyle(staticCtx, style);\n                }\n            }\n        }\n        const processedJSXNode = processData(res.node, iCtx);\n        return maybeThen(processedJSXNode, (processedJSXNode) => {\n            // Old code path\n            const newVdom = wrapJSX(hostElement, processedJSXNode);\n            // const oldVdom = getVdom(hostElement);\n            const oldVdom = getVdom(elCtx);\n            return maybeThen(smartUpdateChildren(newCtx, oldVdom, newVdom, flags), () => {\n                // setVdom(hostElement, newVdom);\n                elCtx.$vdom$ = newVdom;\n            });\n        });\n    });\n};\nexport const getVdom = (elCtx) => {\n    if (!elCtx.$vdom$) {\n        elCtx.$vdom$ = domToVnode(elCtx.$element$);\n    }\n    return elCtx.$vdom$;\n};\nexport class ProcessedJSXNodeImpl {\n    constructor($type$, $varProps$, $constProps$, $children$, $flags$, $key$) {\n        this.$type$ = $type$;\n        this.$varProps$ = $varProps$;\n        this.$constProps$ = $constProps$;\n        this.$children$ = $children$;\n        this.$flags$ = $flags$;\n        this.$key$ = $key$;\n        this.$elm$ = null;\n        this.$text$ = '';\n        this.$signal$ = null;\n        this.$id$ = $type$ + ($key$ ? ':' + $key$ : '');\n        if (qDev && qInspector) {\n            this.$dev$ = undefined;\n        }\n        seal(this);\n    }\n}\nexport const processNode = (node, invocationContext) => {\n    const { key, type, varProps, children, flags, constProps } = node;\n    let textType = '';\n    if (isString(type)) {\n        textType = type;\n    }\n    else if (type === Virtual) {\n        textType = VIRTUAL;\n    }\n    else if (isFunction(type)) {\n        const res = invoke(invocationContext, type, node.props, key, flags, node.dev);\n        if (!shouldWrapFunctional(res, node)) {\n            return processData(res, invocationContext);\n        }\n        return processNode(_jsxSorted(Virtual, null, null, res, 0, key), invocationContext);\n    }\n    else {\n        throw qError(QError_invalidJsxNodeType, type);\n    }\n    let convertedChildren = EMPTY_ARRAY;\n    if (children != null) {\n        return maybeThen(processData(children, invocationContext), (result) => {\n            if (result !== undefined) {\n                convertedChildren = isArray(result) ? result : [result];\n            }\n            const vnode = new ProcessedJSXNodeImpl(textType, varProps, constProps, convertedChildren, flags, key);\n            if (qDev && qInspector) {\n                vnode.$dev$ = node.dev;\n            }\n            return vnode;\n        });\n    }\n    else {\n        const vnode = new ProcessedJSXNodeImpl(textType, varProps, constProps, convertedChildren, flags, key);\n        if (qDev && qInspector) {\n            vnode.$dev$ = node.dev;\n        }\n        return vnode;\n    }\n};\nexport const wrapJSX = (element, input) => {\n    const children = input === undefined ? EMPTY_ARRAY : isArray(input) ? input : [input];\n    const node = new ProcessedJSXNodeImpl(':virtual', {}, null, children, 0, null);\n    node.$elm$ = element;\n    return node;\n};\nexport const processData = (node, invocationContext) => {\n    if (node == null || typeof node === 'boolean') {\n        return undefined;\n    }\n    if (isPrimitive(node)) {\n        const newNode = new ProcessedJSXNodeImpl('#text', EMPTY_OBJ, null, EMPTY_ARRAY, 0, null);\n        newNode.$text$ = String(node);\n        return newNode;\n    }\n    else if (isJSXNode(node)) {\n        return processNode(node, invocationContext);\n    }\n    else if (isSignal(node)) {\n        const newNode = new ProcessedJSXNodeImpl('#signal', EMPTY_OBJ, null, EMPTY_ARRAY, 0, null);\n        newNode.$signal$ = node;\n        return newNode;\n    }\n    else if (isArray(node)) {\n        const output = promiseAll(node.flatMap((n) => processData(n, invocationContext)));\n        return maybeThen(output, (array) => array.flat(100).filter(isNotNullable));\n    }\n    else if (isPromise(node)) {\n        return node.then((node) => processData(node, invocationContext));\n    }\n    else if (node === SkipRender) {\n        return new ProcessedJSXNodeImpl(SKIP_RENDER_TYPE, EMPTY_OBJ, null, EMPTY_ARRAY, 0, null);\n    }\n    else {\n        logWarn('A unsupported value was passed to the JSX, skipping render. Value:', node);\n        return undefined;\n    }\n};\nexport const isProcessedJSXNode = (n) => {\n    if (qDev) {\n        if (n instanceof ProcessedJSXNodeImpl) {\n            return true;\n        }\n        if (isObject(n) && n.constructor.name === ProcessedJSXNodeImpl.name) {\n            throw new Error(`Duplicate implementations of \"ProcessedJSXNodeImpl\" found`);\n        }\n        return false;\n    }\n    else {\n        return n instanceof ProcessedJSXNodeImpl;\n    }\n};\nexport const isPrimitive = (obj) => {\n    return isString(obj) || typeof obj === 'number';\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined, assertTrue } from '../error/assert';\nimport { getDocument } from '../util/dom';\nimport { isComment, isElement, isText } from '../util/element';\nimport { logDebug, logWarn } from '../util/log';\nimport { ELEMENT_ID, QContainerAttr, QInstanceAttr, getQFuncs } from '../util/markers';\nimport { emitEvent } from '../util/event';\nimport { isArray, isSerializableObject, isString } from '../util/types';\nimport { directGetAttribute, directSetAttribute } from '../render/fast-calls';\nimport { createParser, OBJECT_TRANSFORMS, UNDEFINED_PREFIX } from './serializers';\nimport { _getContainerState, isContainer, SHOW_COMMENT, strToInt, } from './container';\nimport { getVirtualElement } from '../render/dom/virtual-element';\nimport { getSubscriptionManager, parseSubscription } from '../state/common';\nimport { createProxy, setObjectFlags } from '../state/store';\nimport { qDev, qSerialize } from '../util/qdev';\nimport { pauseContainer } from './pause';\nimport { isPrimitive } from '../render/dom/render-dom';\nimport { getContext } from '../state/context';\nimport { _getQContainerElement } from '../v2/client/dom-container';\nexport const resumeIfNeeded = (containerEl) => {\n    const isResumed = directGetAttribute(containerEl, QContainerAttr);\n    if (isResumed === 'paused') {\n        resumeContainer(containerEl);\n        if (qSerialize) {\n            appendQwikDevTools(containerEl);\n        }\n    }\n};\nexport const getPauseState = (containerEl) => {\n    const doc = getDocument(containerEl);\n    const isDocElement = containerEl === doc.documentElement;\n    const parentJSON = isDocElement ? doc.body : containerEl;\n    const script = getQwikJSON(parentJSON, 'type');\n    if (script) {\n        const data = script.firstChild.data;\n        return JSON.parse(unescapeText(data) || '{}');\n    }\n};\nexport const resumeContainer = (containerEl) => {\n    if (!isContainer(containerEl)) {\n        logWarn('Skipping resuming because parent element is not q:container');\n        return;\n    }\n    const pauseState = containerEl['_qwikjson_'] ?? getPauseState(containerEl);\n    containerEl['_qwikjson_'] = null;\n    if (!pauseState) {\n        logWarn('Skipping resuming qwik/json metadata was not found.');\n        return;\n    }\n    const doc = getDocument(containerEl);\n    const hash = containerEl.getAttribute(QInstanceAttr);\n    const isDocElement = containerEl === doc.documentElement;\n    const parentJSON = isDocElement ? doc.body : containerEl;\n    if (qDev) {\n        const script = getQwikJSON(parentJSON, 'type');\n        if (!script) {\n            logWarn('Skipping resuming qwik/json metadata was not found.');\n            return;\n        }\n    }\n    const inlinedFunctions = getQFuncs(doc, hash);\n    const containerState = _getContainerState(containerEl);\n    // Collect all elements\n    const elements = new Map();\n    const text = new Map();\n    let node = null;\n    let container = 0;\n    // Collect all virtual elements\n    const elementWalker = doc.createTreeWalker(containerEl, SHOW_COMMENT);\n    while ((node = elementWalker.nextNode())) {\n        const data = node.data;\n        if (container === 0) {\n            if (data.startsWith('qv ')) {\n                const id = getID(data); // TODO: remove\n                if (id >= 0) {\n                    elements.set(id, node);\n                }\n            }\n            else if (data.startsWith('t=')) {\n                const id = data.slice(2);\n                const index = strToInt(id);\n                const textNode = getTextNode(node);\n                elements.set(index, textNode);\n                text.set(index, textNode.data);\n            }\n        }\n        if (data === 'cq') {\n            container++;\n        }\n        else if (data === '/cq') {\n            container--;\n        }\n    }\n    // Collect all elements\n    // If there are nested container, we are forced to take a slower path.\n    // In order to check if there are nested containers, we use the `'qc📦'` class.\n    // This is because checking for class is the fastest way for the browser to find it.\n    const slotPath = containerEl.getElementsByClassName('qc📦').length !== 0;\n    containerEl.querySelectorAll('[q\\\\:id]').forEach((el) => {\n        if (slotPath && el.closest('[q\\\\:container]') !== containerEl) {\n            return;\n        }\n        const id = directGetAttribute(el, ELEMENT_ID);\n        assertDefined(id, `resume: element missed q:id`, el);\n        const index = strToInt(id);\n        elements.set(index, el);\n    });\n    const parser = createParser(containerState, doc);\n    const finalized = new Map();\n    const revived = new Set();\n    const getObject = (id) => {\n        assertTrue(typeof id === 'string' && id.length > 0, 'resume: id must be an non-empty string, got:', id);\n        if (finalized.has(id)) {\n            return finalized.get(id);\n        }\n        return computeObject(id);\n    };\n    const computeObject = (id) => {\n        // Handle elements\n        if (id.startsWith('#')) {\n            const elementId = id.slice(1);\n            const index = strToInt(elementId);\n            assertTrue(elements.has(index), `missing element for id:`, elementId);\n            const rawElement = elements.get(index);\n            assertDefined(rawElement, `missing element for id:`, elementId);\n            if (isComment(rawElement)) {\n                if (!rawElement.isConnected) {\n                    finalized.set(id, undefined);\n                    return undefined;\n                }\n                const virtual = getVirtualElement(rawElement);\n                finalized.set(id, virtual);\n                getContext(virtual, containerState);\n                return virtual;\n            }\n            else if (isElement(rawElement)) {\n                finalized.set(id, rawElement);\n                getContext(rawElement, containerState);\n                return rawElement;\n            }\n            finalized.set(id, rawElement);\n            return rawElement;\n        }\n        else if (id.startsWith('@')) {\n            const funcId = id.slice(1);\n            const index = strToInt(funcId);\n            const func = inlinedFunctions[index];\n            assertDefined(func, `missing inlined function for id:`, funcId);\n            return func;\n        }\n        else if (id.startsWith('*')) {\n            const elementId = id.slice(1);\n            const index = strToInt(elementId);\n            assertTrue(elements.has(index), `missing element for id:`, elementId);\n            const str = text.get(index);\n            assertDefined(str, `missing element for id:`, elementId);\n            finalized.set(id, str);\n            return str;\n        }\n        const index = strToInt(id);\n        const objs = pauseState.objs;\n        assertTrue(objs.length > index, 'resume: index is out of bounds', id);\n        let value = objs[index];\n        if (isString(value)) {\n            value = value === UNDEFINED_PREFIX ? undefined : parser.prepare(value);\n        }\n        let obj = value;\n        for (let i = id.length - 1; i >= 0; i--) {\n            const code = id[i];\n            const transform = OBJECT_TRANSFORMS[code];\n            if (!transform) {\n                break;\n            }\n            obj = transform(obj, containerState);\n        }\n        finalized.set(id, obj);\n        if (!isPrimitive(value) && !revived.has(index)) {\n            revived.add(index);\n            reviveSubscriptions(value, index, pauseState.subs, getObject, containerState, parser);\n            reviveNestedObjects(value, getObject, parser);\n        }\n        return obj;\n    };\n    containerState.$elementIndex$ = 100000;\n    containerState.$pauseCtx$ = {\n        getObject,\n        meta: pauseState.ctx,\n        refs: pauseState.refs,\n    };\n    directSetAttribute(containerEl, QContainerAttr, 'resumed');\n    logDebug('Container resumed');\n    emitEvent(containerEl, 'qresume', undefined, true);\n};\nconst reviveSubscriptions = (value, i, objsSubs, getObject, containerState, parser) => {\n    const subs = objsSubs[i];\n    if (subs) {\n        const converted = [];\n        let flag = 0;\n        for (const sub of subs) {\n            if (sub.startsWith('_')) {\n                flag = parseInt(sub.slice(1), 10);\n            }\n            else {\n                const parsed = parseSubscription(sub, getObject);\n                if (parsed) {\n                    converted.push(parsed);\n                }\n            }\n        }\n        if (flag > 0) {\n            setObjectFlags(value, flag);\n        }\n        if (!parser.subs(value, converted)) {\n            const proxy = containerState.$proxyMap$.get(value);\n            if (proxy) {\n                getSubscriptionManager(proxy).$addSubs$(converted);\n            }\n            else {\n                createProxy(value, containerState, converted);\n            }\n        }\n    }\n};\nconst reviveNestedObjects = (obj, getObject, parser) => {\n    if (parser.fill(obj, getObject)) {\n        return;\n    }\n    if (obj && typeof obj == 'object') {\n        if (isArray(obj)) {\n            for (let i = 0; i < obj.length; i++) {\n                obj[i] = getObject(obj[i]);\n            }\n        }\n        else if (isSerializableObject(obj)) {\n            for (const key in obj) {\n                obj[key] = getObject(obj[key]);\n            }\n        }\n    }\n};\nconst unescapeText = (str) => {\n    return str.replace(/\\\\x3C(\\/?script)/gi, '<$1');\n};\nexport const getQwikJSON = (parentElm, attribute) => {\n    let child = parentElm.lastElementChild;\n    while (child) {\n        if (child.tagName === 'SCRIPT' && directGetAttribute(child, attribute) === 'qwik/json') {\n            return child;\n        }\n        child = child.previousElementSibling;\n    }\n    return undefined;\n};\nconst getTextNode = (mark) => {\n    const nextNode = mark.nextSibling;\n    if (isText(nextNode)) {\n        return nextNode;\n    }\n    else {\n        const textNode = mark.ownerDocument.createTextNode('');\n        mark.parentElement.insertBefore(textNode, mark);\n        return textNode;\n    }\n};\nexport const appendQwikDevTools = (containerEl) => {\n    containerEl['qwik'] = {\n        pause: () => pauseContainer(containerEl),\n        state: _getContainerState(containerEl),\n    };\n};\nexport const getID = (stuff) => {\n    const index = stuff.indexOf('q:id=');\n    if (index > 0) {\n        return strToInt(stuff.slice(index + 5));\n    }\n    return -1;\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined } from '../error/assert';\nimport { inflateQrl, parseQRL } from '../qrl/qrl';\nimport { getInvokeContext } from './use-core';\nimport { assertQrl } from '../qrl/qrl-class';\nimport { getContext } from '../state/context';\nimport { resumeIfNeeded } from '../container/resume';\nimport { _getContainerState } from '../container/container';\nimport { _getQContainerElement, getDomContainer } from '../v2/client/dom-container';\n// <docs markdown=\"../readme.md#useLexicalScope\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useLexicalScope instead)\n/**\n * Used by the Qwik Optimizer to restore the lexically scoped variables.\n *\n * This method should not be present in the application source code.\n *\n * NOTE: `useLexicalScope` method can only be used in the synchronous portion of the callback\n * (before any `await` statements.)\n *\n * @internal\n */\n// </docs>\nexport const useLexicalScope = () => {\n    const context = getInvokeContext();\n    let qrl = context.$qrl$;\n    if (!qrl) {\n        const el = context.$element$;\n        assertDefined(el, 'invoke: element must be defined inside useLexicalScope()', context);\n        const containerElement = _getQContainerElement(el);\n        assertDefined(containerElement, `invoke: cant find parent q:container of`, el);\n        if (containerElement.getAttribute('q:runtime') == '2') {\n            const container = getDomContainer(containerElement);\n            qrl = container.parseQRL(decodeURIComponent(String(context.$url$)));\n        }\n        else {\n            qrl = parseQRL(decodeURIComponent(String(context.$url$)), containerElement);\n            assertQrl(qrl);\n            resumeIfNeeded(containerElement);\n            const elCtx = getContext(el, _getContainerState(containerElement));\n            inflateQrl(qrl, elCtx);\n        }\n    }\n    else {\n        assertQrl(qrl);\n        assertDefined(qrl.$captureRef$, 'invoke: qrl $captureRef$ must be defined inside useLexicalScope()', qrl);\n    }\n    return qrl.$captureRef$;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWxleGljYWwtc2NvcGUucHVibGljLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtbGV4aWNhbC1zY29wZS5wdWJsaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUM5QyxPQUFPLEVBQUUsU0FBUyxFQUFvQixNQUFNLGtCQUFrQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGVBQWUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXBGLGlEQUFpRDtBQUNqRCx5Q0FBeUM7QUFDekMsOENBQThDO0FBQzlDOzs7Ozs7Ozs7R0FTRztBQUNILFVBQVU7QUFDVixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsR0FBNkIsRUFBRTtJQUM1RCxNQUFNLE9BQU8sR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ25DLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUF5QyxDQUFDO0lBQzVELElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNULE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDN0IsYUFBYSxDQUFDLEVBQUUsRUFBRSwwREFBMEQsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2RixNQUFNLGdCQUFnQixHQUFHLHFCQUFxQixDQUFDLEVBQUUsQ0FBZ0IsQ0FBQztRQUNsRSxhQUFhLENBQUMsZ0JBQWdCLEVBQUUseUNBQXlDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDL0UsSUFBSSxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7WUFDdEQsTUFBTSxTQUFTLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDcEQsR0FBRyxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUF5QixDQUFDO1FBQzlGLENBQUM7YUFBTSxDQUFDO1lBQ04sR0FBRyxHQUFHLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztZQUM1RSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDZixjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUNqQyxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsRUFBRSxFQUFFLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztZQUNuRSxVQUFVLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3pCLENBQUM7SUFDSCxDQUFDO1NBQU0sQ0FBQztRQUNOLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNmLGFBQWEsQ0FDWCxHQUFHLENBQUMsWUFBWSxFQUNoQixtRUFBbUUsRUFDbkUsR0FBRyxDQUNKLENBQUM7SUFDSixDQUFDO0lBQ0QsT0FBTyxHQUFJLENBQUMsWUFBb0IsQ0FBQztBQUNuQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnREZWZpbmVkIH0gZnJvbSAnLi4vZXJyb3IvYXNzZXJ0JztcbmltcG9ydCB7IGluZmxhdGVRcmwsIHBhcnNlUVJMIH0gZnJvbSAnLi4vcXJsL3FybCc7XG5pbXBvcnQgeyBnZXRJbnZva2VDb250ZXh0IH0gZnJvbSAnLi91c2UtY29yZSc7XG5pbXBvcnQgeyBhc3NlcnRRcmwsIHR5cGUgUVJMSW50ZXJuYWwgfSBmcm9tICcuLi9xcmwvcXJsLWNsYXNzJztcbmltcG9ydCB7IGdldENvbnRleHQgfSBmcm9tICcuLi9zdGF0ZS9jb250ZXh0JztcbmltcG9ydCB7IHJlc3VtZUlmTmVlZGVkIH0gZnJvbSAnLi4vY29udGFpbmVyL3Jlc3VtZSc7XG5pbXBvcnQgeyBfZ2V0Q29udGFpbmVyU3RhdGUgfSBmcm9tICcuLi9jb250YWluZXIvY29udGFpbmVyJztcbmltcG9ydCB7IF9nZXRRQ29udGFpbmVyRWxlbWVudCwgZ2V0RG9tQ29udGFpbmVyIH0gZnJvbSAnLi4vdjIvY2xpZW50L2RvbS1jb250YWluZXInO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VMZXhpY2FsU2NvcGVcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjdXNlTGV4aWNhbFNjb3BlIGluc3RlYWQpXG4vKipcbiAqIFVzZWQgYnkgdGhlIFF3aWsgT3B0aW1pemVyIHRvIHJlc3RvcmUgdGhlIGxleGljYWxseSBzY29wZWQgdmFyaWFibGVzLlxuICpcbiAqIFRoaXMgbWV0aG9kIHNob3VsZCBub3QgYmUgcHJlc2VudCBpbiB0aGUgYXBwbGljYXRpb24gc291cmNlIGNvZGUuXG4gKlxuICogTk9URTogYHVzZUxleGljYWxTY29wZWAgbWV0aG9kIGNhbiBvbmx5IGJlIHVzZWQgaW4gdGhlIHN5bmNocm9ub3VzIHBvcnRpb24gb2YgdGhlIGNhbGxiYWNrXG4gKiAoYmVmb3JlIGFueSBgYXdhaXRgIHN0YXRlbWVudHMuKVxuICpcbiAqIEBpbnRlcm5hbFxuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3QgdXNlTGV4aWNhbFNjb3BlID0gPFZBUlMgZXh0ZW5kcyBhbnlbXT4oKTogVkFSUyA9PiB7XG4gIGNvbnN0IGNvbnRleHQgPSBnZXRJbnZva2VDb250ZXh0KCk7XG4gIGxldCBxcmwgPSBjb250ZXh0LiRxcmwkIGFzIFFSTEludGVybmFsPHVua25vd24+IHwgdW5kZWZpbmVkO1xuICBpZiAoIXFybCkge1xuICAgIGNvbnN0IGVsID0gY29udGV4dC4kZWxlbWVudCQ7XG4gICAgYXNzZXJ0RGVmaW5lZChlbCwgJ2ludm9rZTogZWxlbWVudCBtdXN0IGJlIGRlZmluZWQgaW5zaWRlIHVzZUxleGljYWxTY29wZSgpJywgY29udGV4dCk7XG4gICAgY29uc3QgY29udGFpbmVyRWxlbWVudCA9IF9nZXRRQ29udGFpbmVyRWxlbWVudChlbCkgYXMgSFRNTEVsZW1lbnQ7XG4gICAgYXNzZXJ0RGVmaW5lZChjb250YWluZXJFbGVtZW50LCBgaW52b2tlOiBjYW50IGZpbmQgcGFyZW50IHE6Y29udGFpbmVyIG9mYCwgZWwpO1xuICAgIGlmIChjb250YWluZXJFbGVtZW50LmdldEF0dHJpYnV0ZSgncTpydW50aW1lJykgPT0gJzInKSB7XG4gICAgICBjb25zdCBjb250YWluZXIgPSBnZXREb21Db250YWluZXIoY29udGFpbmVyRWxlbWVudCk7XG4gICAgICBxcmwgPSBjb250YWluZXIucGFyc2VRUkwoZGVjb2RlVVJJQ29tcG9uZW50KFN0cmluZyhjb250ZXh0LiR1cmwkKSkpIGFzIFFSTEludGVybmFsPHVua25vd24+O1xuICAgIH0gZWxzZSB7XG4gICAgICBxcmwgPSBwYXJzZVFSTChkZWNvZGVVUklDb21wb25lbnQoU3RyaW5nKGNvbnRleHQuJHVybCQpKSwgY29udGFpbmVyRWxlbWVudCk7XG4gICAgICBhc3NlcnRRcmwocXJsKTtcbiAgICAgIHJlc3VtZUlmTmVlZGVkKGNvbnRhaW5lckVsZW1lbnQpO1xuICAgICAgY29uc3QgZWxDdHggPSBnZXRDb250ZXh0KGVsLCBfZ2V0Q29udGFpbmVyU3RhdGUoY29udGFpbmVyRWxlbWVudCkpO1xuICAgICAgaW5mbGF0ZVFybChxcmwsIGVsQ3R4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYXNzZXJ0UXJsKHFybCk7XG4gICAgYXNzZXJ0RGVmaW5lZChcbiAgICAgIHFybC4kY2FwdHVyZVJlZiQsXG4gICAgICAnaW52b2tlOiBxcmwgJGNhcHR1cmVSZWYkIG11c3QgYmUgZGVmaW5lZCBpbnNpZGUgdXNlTGV4aWNhbFNjb3BlKCknLFxuICAgICAgcXJsXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcXJsIS4kY2FwdHVyZVJlZiQgYXMgVkFSUztcbn07XG4iXX0=","import { getLastSubscription } from '../../state/common';\nimport { getContext, tryGetContext } from '../../state/context';\nimport { trackSignal } from '../../use/use-core';\nimport { logError } from '../../util/log';\nimport { serializeClassWithHost, stringifyStyle } from '../execute-component';\nimport { insertBefore, removeNode } from './operations';\nimport { getVdom, processData } from './render-dom';\nimport { SVG_NS, createElm, diffVnode, getVnodeFromEl, smartSetProperty } from './visitor';\nimport { Virtual, JSXNodeImpl } from '../jsx/jsx-runtime';\nimport { isPromise } from '../../util/promises';\nimport { isQwikElement } from '../../util/element';\nexport const executeSignalOperation = (rCtx, operation) => {\n    try {\n        const type = operation[0];\n        const staticCtx = rCtx.$static$;\n        switch (type) {\n            case 1:\n            case 2: {\n                let elm;\n                let hostElm;\n                if (type === 1) {\n                    elm = operation[1];\n                    hostElm = operation[3];\n                }\n                else {\n                    elm = operation[3];\n                    hostElm = operation[1];\n                }\n                // assertTrue(elm.isConnected, 'element must be connected to the dom');\n                // assertTrue(hostElm.isConnected, 'host element must be connected to the dom');\n                const elCtx = tryGetContext(elm);\n                if (elCtx == null) {\n                    return;\n                }\n                const prop = operation[4];\n                const isSVG = elm.namespaceURI === SVG_NS;\n                staticCtx.$containerState$.$subsManager$.$clearSignal$(operation);\n                let value = trackSignal(operation[2], operation.slice(0, -1));\n                if (prop === 'class') {\n                    value = serializeClassWithHost(value, tryGetContext(hostElm));\n                }\n                else if (prop === 'style') {\n                    value = stringifyStyle(value);\n                }\n                const vdom = getVdom(elCtx);\n                if (prop in vdom.$varProps$ && vdom.$varProps$[prop] === value) {\n                    return;\n                }\n                vdom.$varProps$[prop] = value;\n                return smartSetProperty(staticCtx, elm, prop, value, isSVG);\n            }\n            case 3:\n            case 4: {\n                const elm = operation[3];\n                if (!staticCtx.$visited$.includes(elm)) {\n                    // assertTrue(elm.isConnected, 'text node must be connected to the dom');\n                    staticCtx.$containerState$.$subsManager$.$clearSignal$(operation);\n                    // MISKO: I believe no `invocationContext` is OK because the JSX in signal\n                    // has already been converted to JSX and there is nothing to execute there.\n                    const invocationContext = undefined;\n                    let signalValue = trackSignal(operation[2], operation.slice(0, -1));\n                    const subscription = getLastSubscription();\n                    if (Array.isArray(signalValue)) {\n                        signalValue = new JSXNodeImpl(Virtual, {}, null, signalValue, 0, null);\n                    }\n                    let newVnode = processData(signalValue, invocationContext);\n                    if (isPromise(newVnode)) {\n                        logError('Rendering promises in JSX signals is not supported');\n                    }\n                    else {\n                        if (newVnode === undefined) {\n                            newVnode = processData('', invocationContext);\n                        }\n                        const oldVnode = getVnodeFromEl(elm);\n                        const element = getQwikElement(operation[1]);\n                        rCtx.$cmpCtx$ = getContext(element, rCtx.$static$.$containerState$);\n                        if (oldVnode.$type$ == newVnode.$type$ &&\n                            oldVnode.$key$ == newVnode.$key$ &&\n                            oldVnode.$id$ == newVnode.$id$) {\n                            diffVnode(rCtx, oldVnode, newVnode, 0);\n                        }\n                        else {\n                            const promises = []; // TODO(misko): hook this up\n                            const oldNode = oldVnode.$elm$;\n                            const newElm = createElm(rCtx, newVnode, 0, promises);\n                            if (promises.length) {\n                                logError('Rendering promises in JSX signals is not supported');\n                            }\n                            subscription[3] = newElm;\n                            insertBefore(rCtx.$static$, elm.parentElement, newElm, oldNode);\n                            oldNode && removeNode(staticCtx, oldNode);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    catch (e) {\n        // Ignore\n    }\n};\nfunction getQwikElement(element) {\n    while (element) {\n        if (isQwikElement(element)) {\n            return element;\n        }\n        element = element.parentElement;\n    }\n    throw new Error('Not found');\n}\n//# sourceMappingURL=data:application/json;base64,","import { _getContainerState } from '../../container/container';\nimport { resumeIfNeeded } from '../../container/resume';\nimport { assertDefined, assertTrue } from '../../error/assert';\nimport { getPlatform, isServerPlatform } from '../../platform/platform';\nimport { HOST_FLAG_DIRTY, getContext } from '../../state/context';\nimport { useLexicalScope } from '../../use/use-lexical-scope.public';\nimport { TaskFlags, isSubscriberDescriptor, runSubscriber, } from '../../use/use-task';\nimport { getDocument } from '../../util/dom';\nimport { logError, logWarn } from '../../util/log';\nimport { QStyle } from '../../util/markers';\nimport { maybeThen } from '../../util/promises';\nimport { qDev } from '../../util/qdev';\nimport { getDomContainer, isDomContainer } from '../../v2/client/dom-container';\nimport { vnode_isVNode } from '../../v2/client/vnode';\nimport { ChoreType } from '../../v2/shared/scheduler';\nimport { createRenderContext } from '../execute-component';\nimport { directGetAttribute } from '../fast-calls';\nimport { appendChild, printRenderStats } from './operations';\nimport { renderComponent } from './render-dom';\nimport { executeSignalOperation } from './signals';\nimport { getRootNode } from './virtual-element';\nimport { IS_HEAD, IS_SVG, SVG_NS, executeContextWithScrollAndTransition } from './visitor';\nexport const notifyChange = (subAction, containerState) => {\n    if (subAction[0] === 0) {\n        const host = subAction[1];\n        if (isSubscriberDescriptor(host)) {\n            notifyTask(host, containerState);\n        }\n        else {\n            notifyRender(host, containerState);\n        }\n    }\n    else {\n        notifySignalOperation(subAction, containerState);\n    }\n};\n/**\n * Mark component for rendering.\n *\n * Use `notifyRender` method to mark a component for rendering at some later point in time. This\n * method uses `getPlatform(doc).queueRender` for scheduling of the rendering. The default\n * implementation of the method is to use `requestAnimationFrame` to do actual rendering.\n *\n * The method is intended to coalesce multiple calls into `notifyRender` into a single call for\n * rendering.\n *\n * @param hostElement - Host-element of the component to re-render.\n * @returns A promise which is resolved when the component has been rendered.\n */\nconst notifyRender = (hostElement, containerState) => {\n    if (vnode_isVNode(hostElement)) {\n        const container2 = containerState;\n        container2.markComponentForRender(hostElement);\n    }\n    else {\n        const server = isServerPlatform();\n        if (!server) {\n            resumeIfNeeded(containerState.$containerEl$);\n        }\n        const elCtx = getContext(hostElement, containerState);\n        assertDefined(elCtx.$componentQrl$, `render: notified host element must have a defined $renderQrl$`, elCtx);\n        if (elCtx.$flags$ & HOST_FLAG_DIRTY) {\n            return;\n        }\n        elCtx.$flags$ |= HOST_FLAG_DIRTY;\n        const activeRendering = containerState.$hostsRendering$ !== undefined;\n        if (activeRendering) {\n            containerState.$hostsStaging$.add(elCtx);\n        }\n        else {\n            if (server) {\n                logWarn('Can not rerender in server platform');\n                return undefined;\n            }\n            containerState.$hostsNext$.add(elCtx);\n            scheduleFrame(containerState);\n        }\n    }\n};\nconst notifySignalOperation = (op, containerState) => {\n    const activeRendering = containerState.$hostsRendering$ !== undefined;\n    containerState.$opsNext$.add(op);\n    if (!activeRendering) {\n        scheduleFrame(containerState);\n    }\n};\nexport const notifyTask = (task, containerState) => {\n    if (task.$flags$ & TaskFlags.DIRTY) {\n        return;\n    }\n    task.$flags$ |= TaskFlags.DIRTY;\n    if (isDomContainer(containerState)) {\n        // TODO @mhevery please add $state$ to the ContainerState type if this is correct\n        containerState.$tasks$.push(task);\n        containerState.scheduleRender();\n    }\n    else {\n        const activeRendering = containerState.$hostsRendering$ !== undefined;\n        if (activeRendering) {\n            containerState.$taskStaging$.add(task);\n        }\n        else {\n            containerState.$taskNext$.add(task);\n            scheduleFrame(containerState);\n        }\n    }\n};\nconst scheduleFrame = (containerState) => {\n    if (containerState.$renderPromise$ === undefined) {\n        containerState.$renderPromise$ = getPlatform().nextTick(() => renderMarked(containerState));\n    }\n    return containerState.$renderPromise$;\n};\n/**\n * Low-level API used by the Optimizer to process `useTask$()` API. This method is not intended to\n * be used by developers.\n *\n * @internal\n */\nexport const _hW = () => {\n    const [task] = useLexicalScope();\n    const container = getDomContainer(task.$el$);\n    const type = task.$flags$ & TaskFlags.VISIBLE_TASK ? ChoreType.VISIBLE : ChoreType.TASK;\n    container.$scheduler$(type, task);\n};\nconst renderMarked = async (containerState) => {\n    const containerEl = containerState.$containerEl$;\n    const doc = getDocument(containerEl);\n    try {\n        const rCtx = createRenderContext(doc, containerState);\n        const staticCtx = rCtx.$static$;\n        const hostsRendering = (containerState.$hostsRendering$ = new Set(containerState.$hostsNext$));\n        containerState.$hostsNext$.clear();\n        await executeTasksBefore(containerState, rCtx);\n        containerState.$hostsStaging$.forEach((host) => {\n            hostsRendering.add(host);\n        });\n        containerState.$hostsStaging$.clear();\n        const signalOperations = Array.from(containerState.$opsNext$);\n        containerState.$opsNext$.clear();\n        const renderingQueue = Array.from(hostsRendering);\n        sortNodes(renderingQueue);\n        if (!containerState.$styleMoved$ && renderingQueue.length > 0) {\n            containerState.$styleMoved$ = true;\n            const parentJSON = containerEl === doc.documentElement ? doc.body : containerEl;\n            parentJSON.querySelectorAll('style[q\\\\:style]').forEach((el) => {\n                containerState.$styleIds$.add(directGetAttribute(el, QStyle));\n                appendChild(staticCtx, doc.head, el);\n            });\n        }\n        for (const elCtx of renderingQueue) {\n            const el = elCtx.$element$;\n            if (!staticCtx.$hostElements$.has(el)) {\n                if (elCtx.$componentQrl$) {\n                    assertTrue(el.isConnected, 'element must be connected to the dom');\n                    staticCtx.$roots$.push(elCtx);\n                    try {\n                        await renderComponent(rCtx, elCtx, getFlags(el.parentElement));\n                    }\n                    catch (err) {\n                        if (qDev) {\n                            throw err;\n                        }\n                        else {\n                            logError(err);\n                        }\n                    }\n                }\n            }\n        }\n        signalOperations.forEach((op) => {\n            executeSignalOperation(rCtx, op);\n        });\n        // Add post operations\n        staticCtx.$operations$.push(...staticCtx.$postOperations$);\n        // Early exist, no dom operations\n        if (staticCtx.$operations$.length === 0) {\n            printRenderStats(staticCtx);\n            await postRendering(containerState, rCtx);\n            return;\n        }\n        await executeContextWithScrollAndTransition(staticCtx);\n        printRenderStats(staticCtx);\n        return postRendering(containerState, rCtx);\n    }\n    catch (err) {\n        logError(err);\n    }\n};\nconst getFlags = (el) => {\n    let flags = 0;\n    if (el) {\n        if (el.namespaceURI === SVG_NS) {\n            flags |= IS_SVG;\n        }\n        if (el.tagName === 'HEAD') {\n            flags |= IS_HEAD;\n        }\n    }\n    return flags;\n};\nexport const postRendering = async (containerState, rCtx) => {\n    const hostElements = rCtx.$static$.$hostElements$;\n    await executeTasksAfter(containerState, rCtx, (task, stage) => {\n        if ((task.$flags$ & TaskFlags.VISIBLE_TASK) === 0) {\n            return false;\n        }\n        if (stage) {\n            return hostElements.has(task.$el$);\n        }\n        return true;\n    });\n    // Clear staging\n    containerState.$hostsStaging$.forEach((el) => {\n        containerState.$hostsNext$.add(el);\n    });\n    containerState.$hostsStaging$.clear();\n    containerState.$hostsRendering$ = undefined;\n    containerState.$renderPromise$ = undefined;\n    const pending = containerState.$hostsNext$.size +\n        containerState.$taskNext$.size +\n        containerState.$opsNext$.size;\n    if (pending > 0) {\n        // Immediately render again\n        containerState.$renderPromise$ = renderMarked(containerState);\n    }\n};\nconst isTask = (task) => (task.$flags$ & TaskFlags.TASK) !== 0;\nconst isResourceTask = (task) => (task.$flags$ & TaskFlags.RESOURCE) !== 0;\nconst executeTasksBefore = async (containerState, rCtx) => {\n    const containerEl = containerState.$containerEl$;\n    const resourcesPromises = [];\n    const taskPromises = [];\n    containerState.$taskNext$.forEach((task) => {\n        if (isTask(task)) {\n            taskPromises.push(maybeThen(task.$qrl$.$resolveLazy$(containerEl), () => task));\n            containerState.$taskNext$.delete(task);\n        }\n        if (isResourceTask(task)) {\n            resourcesPromises.push(maybeThen(task.$qrl$.$resolveLazy$(containerEl), () => task));\n            containerState.$taskNext$.delete(task);\n        }\n    });\n    do {\n        // Run staging effected\n        containerState.$taskStaging$.forEach((task) => {\n            if (isTask(task)) {\n                taskPromises.push(maybeThen(task.$qrl$.$resolveLazy$(containerEl), () => task));\n            }\n            else if (isResourceTask(task)) {\n                resourcesPromises.push(maybeThen(task.$qrl$.$resolveLazy$(containerEl), () => task));\n            }\n            else {\n                containerState.$taskNext$.add(task);\n            }\n        });\n        containerState.$taskStaging$.clear();\n        // Wait for all promises\n        if (taskPromises.length > 0) {\n            const tasks = await Promise.all(taskPromises);\n            sortTasks(tasks);\n            await Promise.all(tasks.map((task) => {\n                return runSubscriber(task, containerState, rCtx);\n            }));\n            taskPromises.length = 0;\n        }\n    } while (containerState.$taskStaging$.size > 0);\n    if (resourcesPromises.length > 0) {\n        const resources = await Promise.all(resourcesPromises);\n        sortTasks(resources);\n        // no await so these run concurrently with the rendering\n        for (const task of resources) {\n            runSubscriber(task, containerState, rCtx);\n        }\n    }\n};\n/** Execute tasks that are dirty during SSR render */\nexport const executeSSRTasks = (containerState, rCtx) => {\n    const containerEl = containerState.$containerEl$;\n    const staging = containerState.$taskStaging$;\n    if (!staging.size) {\n        return;\n    }\n    const taskPromises = [];\n    let tries = 20;\n    const runTasks = () => {\n        // SSR dirty tasks are in taskStaging\n        staging.forEach((task) => {\n            if (isTask(task)) {\n                taskPromises.push(maybeThen(task.$qrl$.$resolveLazy$(containerEl), () => task));\n            }\n            // We ignore other types of tasks, they are handled via waitOn\n        });\n        staging.clear();\n        // Wait for all promises\n        if (taskPromises.length > 0) {\n            return Promise.all(taskPromises).then(async (tasks) => {\n                sortTasks(tasks);\n                await Promise.all(tasks.map((task) => {\n                    return runSubscriber(task, containerState, rCtx);\n                }));\n                taskPromises.length = 0;\n                if (--tries && staging.size > 0) {\n                    return runTasks();\n                }\n                if (!tries) {\n                    logWarn(`Infinite task loop detected. Tasks:\\n${Array.from(staging)\n                        .map((task) => `  ${task.$qrl$.$symbol$}`)\n                        .join('\\n')}`);\n                }\n            });\n        }\n    };\n    return runTasks();\n};\nconst executeTasksAfter = async (containerState, rCtx, taskPred) => {\n    const taskPromises = [];\n    const containerEl = containerState.$containerEl$;\n    containerState.$taskNext$.forEach((task) => {\n        if (taskPred(task, false)) {\n            if (task.$el$.isConnected) {\n                taskPromises.push(maybeThen(task.$qrl$.$resolveLazy$(containerEl), () => task));\n            }\n            containerState.$taskNext$.delete(task);\n        }\n    });\n    do {\n        // Run staging effected\n        containerState.$taskStaging$.forEach((task) => {\n            if (task.$el$.isConnected) {\n                if (taskPred(task, true)) {\n                    taskPromises.push(maybeThen(task.$qrl$.$resolveLazy$(containerEl), () => task));\n                }\n                else {\n                    containerState.$taskNext$.add(task);\n                }\n            }\n        });\n        containerState.$taskStaging$.clear();\n        // Wait for all promises\n        if (taskPromises.length > 0) {\n            const tasks = await Promise.all(taskPromises);\n            sortTasks(tasks);\n            for (const task of tasks) {\n                runSubscriber(task, containerState, rCtx);\n            }\n            taskPromises.length = 0;\n        }\n    } while (containerState.$taskStaging$.size > 0);\n};\nconst sortNodes = (elements) => {\n    elements.sort((a, b) => a.$element$.compareDocumentPosition(getRootNode(b.$element$)) & 2 ? 1 : -1);\n};\nconst sortTasks = (tasks) => {\n    const isServer = isServerPlatform();\n    tasks.sort((a, b) => {\n        if (isServer || a.$el$ === b.$el$) {\n            return a.$index$ < b.$index$ ? -1 : 1;\n        }\n        return (a.$el$.compareDocumentPosition(getRootNode(b.$el$)) & 2) !== 0 ? 1 : -1;\n    });\n};\n//# sourceMappingURL=data:application/json;base64,","import { intToStr, strToInt } from '../container/container';\nimport { assertDefined, assertEqual } from '../error/assert';\nimport { QError_trackUseStore, codeToText } from '../error/error';\nimport { isServerPlatform } from '../platform/platform';\nimport { assertQrl, assertSignal, createQRL } from '../qrl/qrl-class';\nimport { _hW, notifyTask } from '../render/dom/notify-render';\nimport { handleError } from '../render/error-handling';\nimport { SubscriptionType, getSubscriptionManager, noSerialize, unwrapProxy, } from '../state/common';\nimport { QObjectManagerSymbol } from '../state/constants';\nimport { QObjectSignalFlags, SIGNAL_IMMUTABLE, SIGNAL_UNASSIGNED, _createSignal, isSignal, } from '../state/signal';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { logError, logErrorAndStop } from '../util/log';\nimport { ComputedEvent, ResourceEvent, TaskEvent } from '../util/markers';\nimport { delay, isPromise, safeCall } from '../util/promises';\nimport { isFunction, isObject } from '../util/types';\nimport { ChoreType } from '../v2/shared/scheduler';\nimport {} from '../v2/shared/types';\nimport { invoke, newInvokeContext, untrack, waitAndRun } from './use-core';\nimport { useOn, useOnDocument } from './use-on';\nimport { useSequentialScope } from './use-sequential-scope';\nexport var TaskFlags;\n(function (TaskFlags) {\n    TaskFlags[TaskFlags[\"VISIBLE_TASK\"] = 1] = \"VISIBLE_TASK\";\n    TaskFlags[TaskFlags[\"TASK\"] = 2] = \"TASK\";\n    TaskFlags[TaskFlags[\"RESOURCE\"] = 4] = \"RESOURCE\";\n    TaskFlags[TaskFlags[\"COMPUTED\"] = 8] = \"COMPUTED\";\n    TaskFlags[TaskFlags[\"DIRTY\"] = 16] = \"DIRTY\";\n})(TaskFlags || (TaskFlags = {}));\n// <docs markdown=\"../readme.md#useTask\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useTask instead)\n/**\n * Reruns the `taskFn` when the observed inputs change.\n *\n * Use `useTask` to observe changes on a set of inputs, and then re-execute the `taskFn` when those\n * inputs change.\n *\n * The `taskFn` only executes if the observed inputs change. To observe the inputs, use the `obs`\n * function to wrap property reads. This creates subscriptions that will trigger the `taskFn` to\n * rerun.\n *\n * @param task - Function which should be re-executed when changes to the inputs are detected\n * @public\n *\n * ### Example\n *\n * The `useTask` function is used to observe the `store.count` property. Any changes to the\n * `store.count` cause the `taskFn` to execute which in turn updates the `store.doubleCount` to\n * the double of `store.count`.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *     doubleCount: 0,\n *     debounced: 0,\n *   });\n *\n *   // Double count task\n *   useTask$(({ track }) => {\n *     const count = track(() => store.count);\n *     store.doubleCount = 2 * count;\n *   });\n *\n *   // Debouncer task\n *   useTask$(({ track }) => {\n *     const doubleCount = track(() => store.doubleCount);\n *     const timer = setTimeout(() => {\n *       store.debounced = doubleCount;\n *     }, 2000);\n *     return () => {\n *       clearTimeout(timer);\n *     };\n *   });\n *   return (\n *     <div>\n *       <div>\n *         {store.count} / {store.doubleCount}\n *       </div>\n *       <div>{store.debounced}</div>\n *     </div>\n *   );\n * });\n * ```\n *\n * @public\n * @see `Tracker`\n */\n// </docs>\nexport const useTaskQrl = (qrl, opts) => {\n    const { val, set, iCtx, i, elCtx } = useSequentialScope();\n    if (val) {\n        return;\n    }\n    assertQrl(qrl);\n    set(1);\n    if (iCtx.$container2$) {\n        const host = iCtx.$hostElement$;\n        const task = new Task(TaskFlags.DIRTY | TaskFlags.TASK, i, iCtx.$hostElement$, qrl, undefined, null);\n        // In V2 we add the task to the sequential scope. We need to do this\n        // in order to be able to retrieve it later when the parent element is\n        // deleted and we need to be able to release the task subscriptions.\n        set(task);\n        const result = runTask2(task, iCtx.$container2$, host);\n        if (isPromise(result)) {\n            throw result;\n        }\n        qrl.$resolveLazy$(host);\n        if (isServerPlatform()) {\n            useRunTask(task, opts?.eagerness);\n        }\n    }\n    else {\n        const containerState = iCtx.$renderCtx$.$static$.$containerState$;\n        const task = new Task(TaskFlags.DIRTY | TaskFlags.TASK, i, elCtx.$element$, qrl, undefined, null);\n        qrl.$resolveLazy$(containerState.$containerEl$);\n        if (!elCtx.$tasks$) {\n            elCtx.$tasks$ = [];\n        }\n        elCtx.$tasks$.push(task);\n        waitAndRun(iCtx, () => runTask(task, containerState, iCtx.$renderCtx$));\n        if (isServerPlatform()) {\n            useRunTask(task, opts?.eagerness);\n        }\n    }\n};\nexport const runTask2 = (task, container, host) => {\n    task.$flags$ &= ~TaskFlags.DIRTY;\n    const iCtx = newInvokeContext(container.$locale$, host, undefined, TaskEvent);\n    const taskFn = task.$qrl$.getFn(iCtx, () => {\n        container.$subsManager$.$clearSub$(task);\n    });\n    const track = (obj, prop) => {\n        if (isFunction(obj)) {\n            const ctx = newInvokeContext();\n            ctx.$subscriber$ = [SubscriptionType.HOST, task];\n            return invoke(ctx, obj);\n        }\n        const manager = getSubscriptionManager(obj);\n        if (manager) {\n            manager.$addSub$([SubscriptionType.HOST, task], prop);\n        }\n        else {\n            logErrorAndStop(codeToText(QError_trackUseStore), obj);\n        }\n        if (prop) {\n            return obj[prop];\n        }\n        else if (isSignal(obj)) {\n            return obj.value;\n        }\n        else {\n            return obj;\n        }\n    };\n    const handleError = (reason) => container.handleError(reason, host);\n    let cleanupFns = null;\n    const cleanup = (fn) => {\n        if (typeof fn == 'function') {\n            if (!cleanupFns) {\n                cleanupFns = [];\n                task.$destroy$ = noSerialize(() => {\n                    task.$destroy$ = null;\n                    cleanupFns.forEach((fn) => {\n                        try {\n                            fn();\n                        }\n                        catch (err) {\n                            handleError(err);\n                        }\n                    });\n                });\n            }\n            cleanupFns.push(fn);\n        }\n    };\n    const taskApi = { track, cleanup };\n    cleanupTask(task);\n    const result = safeCall(() => taskFn(taskApi), cleanup, handleError);\n    return result;\n};\nexport const runComputed2 = (task, container, host) => {\n    assertSignal(task.$state$);\n    task.$flags$ &= ~TaskFlags.DIRTY;\n    const iCtx = newInvokeContext(container.$locale$, host, undefined, ComputedEvent);\n    iCtx.$subscriber$ = [SubscriptionType.HOST, task];\n    const taskFn = task.$qrl$.getFn(iCtx, () => {\n        container.$subsManager$.$clearSub$(task);\n    });\n    const handleError = (reason) => container.handleError(reason, host);\n    const result = safeCall(taskFn, (returnValue) => untrack(() => {\n        const signal = task.$state$;\n        signal[QObjectSignalFlags] &= ~SIGNAL_UNASSIGNED;\n        signal.untrackedValue = returnValue;\n        signal[QObjectManagerSymbol].$notifySubs$();\n    }), handleError);\n    return result;\n};\n/** @public */\nexport const useComputedQrl = (qrl) => {\n    const { val, set, iCtx, i } = useSequentialScope();\n    if (val) {\n        return val;\n    }\n    assertQrl(qrl);\n    const host = iCtx.$hostElement$;\n    const signal = _createSignal(undefined, iCtx.$container2$.$subsManager$, SIGNAL_UNASSIGNED | SIGNAL_IMMUTABLE, undefined);\n    const task = new Task(TaskFlags.DIRTY | TaskFlags.TASK | TaskFlags.COMPUTED, i, iCtx.$hostElement$, qrl, signal, null);\n    set(signal);\n    qrl.$resolveLazy$(host);\n    const result = runComputed2(task, iCtx.$container2$, host);\n    if (isPromise(result)) {\n        throw result;\n    }\n    return signal;\n};\n/** @public */\nexport const useComputed$ = implicit$FirstArg(useComputedQrl);\n// <docs markdown=\"../readme.md#useTask\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useTask instead)\n/**\n * Reruns the `taskFn` when the observed inputs change.\n *\n * Use `useTask` to observe changes on a set of inputs, and then re-execute the `taskFn` when those\n * inputs change.\n *\n * The `taskFn` only executes if the observed inputs change. To observe the inputs, use the `obs`\n * function to wrap property reads. This creates subscriptions that will trigger the `taskFn` to\n * rerun.\n *\n * @param task - Function which should be re-executed when changes to the inputs are detected\n * @public\n *\n * ### Example\n *\n * The `useTask` function is used to observe the `store.count` property. Any changes to the\n * `store.count` cause the `taskFn` to execute which in turn updates the `store.doubleCount` to\n * the double of `store.count`.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *     doubleCount: 0,\n *     debounced: 0,\n *   });\n *\n *   // Double count task\n *   useTask$(({ track }) => {\n *     const count = track(() => store.count);\n *     store.doubleCount = 2 * count;\n *   });\n *\n *   // Debouncer task\n *   useTask$(({ track }) => {\n *     const doubleCount = track(() => store.doubleCount);\n *     const timer = setTimeout(() => {\n *       store.debounced = doubleCount;\n *     }, 2000);\n *     return () => {\n *       clearTimeout(timer);\n *     };\n *   });\n *   return (\n *     <div>\n *       <div>\n *         {store.count} / {store.doubleCount}\n *       </div>\n *       <div>{store.debounced}</div>\n *     </div>\n *   );\n * });\n * ```\n *\n * @public\n * @see `Tracker`\n */\n// </docs>\nexport const useTask$ = /*#__PURE__*/ implicit$FirstArg(useTaskQrl);\n// <docs markdown=\"../readme.md#useVisibleTask\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useVisibleTask instead)\n/**\n * ```tsx\n * const Timer = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *   });\n *\n *   useVisibleTask$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       store.count++;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *\n *   return <div>{store.count}</div>;\n * });\n * ```\n *\n * @public\n */\n// </docs>\nexport const useVisibleTaskQrl = (qrl, opts) => {\n    const { val, set, i, iCtx, elCtx } = useSequentialScope();\n    const eagerness = opts?.strategy ?? 'intersection-observer';\n    if (val) {\n        if (isServerPlatform()) {\n            useRunTask(val, eagerness);\n        }\n        return;\n    }\n    assertQrl(qrl);\n    if (iCtx.$container2$) {\n        const task = new Task(TaskFlags.VISIBLE_TASK, i, iCtx.$hostElement$, qrl, undefined, null);\n        set(task);\n        useRunTask(task, eagerness);\n        if (!isServerPlatform()) {\n            qrl.$resolveLazy$(iCtx.$hostElement$);\n            iCtx.$container2$.$scheduler$(task.$flags$ & TaskFlags.VISIBLE_TASK ? ChoreType.VISIBLE : ChoreType.TASK, task);\n        }\n    }\n    else {\n        const task = new Task(TaskFlags.VISIBLE_TASK, i, elCtx.$element$, qrl, undefined, null);\n        const containerState = iCtx.$renderCtx$.$static$.$containerState$;\n        if (!elCtx.$tasks$) {\n            elCtx.$tasks$ = [];\n        }\n        elCtx.$tasks$.push(task);\n        set(task);\n        useRunTask(task, eagerness);\n        if (!isServerPlatform()) {\n            qrl.$resolveLazy$(containerState.$containerEl$);\n            notifyTask(task, containerState);\n        }\n    }\n};\n// <docs markdown=\"../readme.md#useVisibleTask\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useVisibleTask instead)\n/**\n * ```tsx\n * const Timer = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *   });\n *\n *   useVisibleTask$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       store.count++;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *\n *   return <div>{store.count}</div>;\n * });\n * ```\n *\n * @public\n */\n// </docs>\nexport const useVisibleTask$ = /*#__PURE__*/ implicit$FirstArg(useVisibleTaskQrl);\nexport const isResourceTask = (task) => {\n    return (task.$flags$ & TaskFlags.RESOURCE) !== 0;\n};\nexport const isComputedTask = (task) => {\n    return (task.$flags$ & TaskFlags.COMPUTED) !== 0;\n};\nexport const runSubscriber = async (task, containerState, rCtx) => {\n    assertEqual(!!(task.$flags$ & TaskFlags.DIRTY), true, 'Resource is not dirty', task);\n    if (isResourceTask(task)) {\n        return runResource(task, containerState, rCtx);\n    }\n    else if (isComputedTask(task)) {\n        return runComputed(task, containerState, rCtx);\n    }\n    else {\n        return runTask(task, containerState, rCtx);\n    }\n};\nexport const runSubscriber2 = async (task, container, host) => {\n    assertEqual(!!(task.$flags$ & TaskFlags.DIRTY), true, 'Task is not dirty', task);\n    if (isResourceTask(task)) {\n        return runResource(task, container, host);\n    }\n    else if (isComputedTask(task)) {\n        return runComputed2(task, container, host);\n    }\n    else {\n        return runTask2(task, container, host);\n    }\n};\nexport const runResource = (task, container, host) => {\n    task.$flags$ &= ~TaskFlags.DIRTY;\n    cleanupTask(task);\n    const iCtx = newInvokeContext(container.$locale$, host, undefined, ResourceEvent);\n    const taskFn = task.$qrl$.getFn(iCtx, () => {\n        container.$subsManager$.$clearSub$(task);\n    });\n    const resource = task.$state$;\n    assertDefined(resource, 'useResource: when running a resource, \"task.resource\" must be a defined.', task);\n    const track = (obj, prop) => {\n        if (isFunction(obj)) {\n            const ctx = newInvokeContext();\n            ctx.$subscriber$ = [SubscriptionType.HOST, task];\n            return invoke(ctx, obj);\n        }\n        const manager = getSubscriptionManager(obj);\n        if (manager) {\n            manager.$addSub$([SubscriptionType.HOST, task], prop);\n        }\n        else {\n            logErrorAndStop(codeToText(QError_trackUseStore), obj);\n        }\n        if (prop) {\n            return obj[prop];\n        }\n        else if (isSignal(obj)) {\n            return obj.value;\n        }\n        else {\n            return obj;\n        }\n    };\n    const handleError = (reason) => container.handleError(reason, host);\n    const cleanups = [];\n    task.$destroy$ = noSerialize(() => {\n        cleanups.forEach((fn) => {\n            try {\n                fn();\n            }\n            catch (err) {\n                handleError(err);\n            }\n        });\n        done = true;\n    });\n    const resourceTarget = unwrapProxy(resource);\n    const opts = {\n        track,\n        cleanup(fn) {\n            if (typeof fn === 'function') {\n                cleanups.push(fn);\n            }\n        },\n        cache(policy) {\n            let milliseconds = 0;\n            if (policy === 'immutable') {\n                milliseconds = Infinity;\n            }\n            else {\n                milliseconds = policy;\n            }\n            resource._cache = milliseconds;\n        },\n        previous: resourceTarget._resolved,\n    };\n    let resolve;\n    let reject;\n    let done = false;\n    const setState = (resolved, value) => {\n        if (!done) {\n            done = true;\n            if (resolved) {\n                done = true;\n                resource.loading = false;\n                resource._state = 'resolved';\n                resource._resolved = value;\n                resource._error = undefined;\n                // console.log('RESOURCE.resolved: ', value);\n                resolve(value);\n            }\n            else {\n                done = true;\n                resource.loading = false;\n                resource._state = 'rejected';\n                resource._error = value;\n                reject(value);\n            }\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Add cleanup to resolve the resource if we are trying to run the same resource again while the\n     * previous one is not resolved yet. The next `runResource` run will call this cleanup\n     */\n    cleanups.push(() => {\n        if (untrack(() => resource.loading) === true) {\n            const value = untrack(() => resource._resolved);\n            setState(true, value);\n        }\n    });\n    // Execute mutation inside empty invocation\n    invoke(iCtx, () => {\n        // console.log('RESOURCE.pending: ');\n        resource._state = 'pending';\n        resource.loading = !isServerPlatform();\n        const promise = (resource.value = new Promise((r, re) => {\n            resolve = r;\n            reject = re;\n        }));\n        promise.catch(ignoreErrorToPreventNodeFromCrashing);\n    });\n    const promise = safeCall(() => Promise.resolve(taskFn(opts)), (value) => {\n        setState(true, value);\n    }, (reason) => {\n        setState(false, reason);\n    });\n    const timeout = resourceTarget._timeout;\n    if (timeout > 0) {\n        return Promise.race([\n            promise,\n            delay(timeout).then(() => {\n                if (setState(false, new Error('timeout'))) {\n                    cleanupTask(task);\n                }\n            }),\n        ]);\n    }\n    return promise;\n};\nconst ignoreErrorToPreventNodeFromCrashing = (err) => {\n    // ignore error to prevent node from crashing\n    // node will crash in promise is rejected and no one is listening to the rejection.\n};\nexport const runTask = (task, containerState, rCtx) => {\n    task.$flags$ &= ~TaskFlags.DIRTY;\n    cleanupTask(task);\n    const hostElement = task.$el$;\n    const iCtx = newInvokeContext(rCtx.$static$.$locale$, hostElement, undefined, TaskEvent);\n    iCtx.$renderCtx$ = rCtx;\n    const { $subsManager$: subsManager } = containerState;\n    const taskFn = task.$qrl$.getFn(iCtx, () => {\n        subsManager.$clearSub$(task);\n    });\n    const track = (obj, prop) => {\n        if (isFunction(obj)) {\n            const ctx = newInvokeContext();\n            ctx.$subscriber$ = [SubscriptionType.HOST, task];\n            return invoke(ctx, obj);\n        }\n        const manager = getSubscriptionManager(obj);\n        if (manager) {\n            manager.$addSub$([SubscriptionType.HOST, task], prop);\n        }\n        else {\n            logErrorAndStop(codeToText(QError_trackUseStore), obj);\n        }\n        if (prop) {\n            return obj[prop];\n        }\n        else if (isSignal(obj)) {\n            return obj.value;\n        }\n        else {\n            return obj;\n        }\n    };\n    const cleanups = [];\n    task.$destroy$ = noSerialize(() => {\n        cleanups.forEach((fn) => fn());\n    });\n    const opts = {\n        track,\n        cleanup(callback) {\n            cleanups.push(callback);\n        },\n    };\n    return safeCall(() => taskFn(opts), (returnValue) => {\n        if (isFunction(returnValue)) {\n            cleanups.push(returnValue);\n        }\n    }, (reason) => {\n        handleError(reason, hostElement, rCtx.$static$.$containerState$);\n    });\n};\nexport const runComputed = (task, containerState, rCtx) => {\n    assertSignal(task.$state$);\n    task.$flags$ &= ~TaskFlags.DIRTY;\n    cleanupTask(task);\n    const hostElement = task.$el$;\n    const iCtx = newInvokeContext(rCtx.$static$.$locale$, hostElement, undefined, ComputedEvent);\n    iCtx.$subscriber$ = [SubscriptionType.HOST, task];\n    iCtx.$renderCtx$ = rCtx;\n    const { $subsManager$: subsManager } = containerState;\n    const taskFn = task.$qrl$.getFn(iCtx, () => {\n        subsManager.$clearSub$(task);\n    });\n    return safeCall(taskFn, (returnValue) => untrack(() => {\n        const signal = task.$state$;\n        signal[QObjectSignalFlags] &= ~SIGNAL_UNASSIGNED;\n        signal.untrackedValue = returnValue;\n        signal[QObjectManagerSymbol].$notifySubs$();\n    }), (reason) => {\n        handleError(reason, hostElement, rCtx.$static$.$containerState$);\n    });\n};\nexport const cleanupTask = (task) => {\n    const destroy = task.$destroy$;\n    if (destroy) {\n        task.$destroy$ = null;\n        try {\n            destroy();\n        }\n        catch (err) {\n            logError(err);\n        }\n    }\n};\nconst useRunTask = (task, eagerness) => {\n    if (eagerness === 'visible' || eagerness === 'intersection-observer') {\n        useOn('qvisible', getTaskHandlerQrl(task));\n    }\n    else if (eagerness === 'load' || eagerness === 'document-ready') {\n        useOnDocument('qinit', getTaskHandlerQrl(task));\n    }\n    else if (eagerness === 'idle' || eagerness === 'document-idle') {\n        useOnDocument('qidle', getTaskHandlerQrl(task));\n    }\n};\nconst getTaskHandlerQrl = (task) => {\n    const taskQrl = task.$qrl$;\n    const taskHandler = createQRL(taskQrl.$chunk$, '_hW', _hW, null, null, [task], taskQrl.$symbol$);\n    // Needed for chunk lookup in dev mode\n    if (taskQrl.dev) {\n        taskHandler.dev = taskQrl.dev;\n    }\n    return taskHandler;\n};\nexport const isSubscriberDescriptor = (obj) => {\n    return isObject(obj) && obj instanceof Task;\n};\nexport const serializeTask = (task, getObjId) => {\n    let value = `${intToStr(task.$flags$)} ${intToStr(task.$index$)} ${getObjId(task.$qrl$)} ${getObjId(task.$el$)}`;\n    if (task.$state$) {\n        value += ` ${getObjId(task.$state$)}`;\n    }\n    return value;\n};\nexport const parseTask = (data) => {\n    const [flags, index, qrl, el, resource] = data.split(' ');\n    return new Task(strToInt(flags), strToInt(index), el, qrl, resource, null);\n};\nexport class Task {\n    constructor($flags$, $index$, $el$, $qrl$, $state$, $destroy$) {\n        this.$flags$ = $flags$;\n        this.$index$ = $index$;\n        this.$el$ = $el$;\n        this.$qrl$ = $qrl$;\n        this.$state$ = $state$;\n        this.$destroy$ = $destroy$;\n    }\n}\nexport const isTask = (value) => {\n    return value instanceof Task;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXRhc2suanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXNlL3VzZS10YXNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUEwQyxNQUFNLHdCQUF3QixDQUFDO0FBQ3BHLE9BQU8sRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDN0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBb0IsTUFBTSxrQkFBa0IsQ0FBQztBQUV4RixPQUFPLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTlELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUV2RCxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLHNCQUFzQixFQUN0QixXQUFXLEVBQ1gsV0FBVyxHQUVaLE1BQU0saUJBQWlCLENBQUM7QUFDekIsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDMUQsT0FBTyxFQUNMLGtCQUFrQixFQUNsQixnQkFBZ0IsRUFDaEIsaUJBQWlCLEVBQ2pCLGFBQWEsRUFDYixRQUFRLEdBSVQsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN4RCxPQUFPLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMs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aUIsRUFBRTtJQUNsRCxPQUFPLEtBQUssWUFBWSxJQUFJLENBQUM7QUFDL0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW50VG9TdHIsIHN0clRvSW50LCB0eXBlIENvbnRhaW5lclN0YXRlLCB0eXBlIE11c3RHZXRPYmpJRCB9IGZyb20gJy4uL2NvbnRhaW5lci9jb250YWluZXInO1xuaW1wb3J0IHsgYXNzZXJ0RGVmaW5lZCwgYXNzZXJ0RXF1YWwgfSBmcm9tICcuLi9lcnJvci9hc3NlcnQnO1xuaW1wb3J0IHsgUUVycm9yX3RyYWNrVXNlU3RvcmUsIGNvZGVUb1RleHQgfSBmcm9tICcuLi9lcnJvci9lcnJvcic7XG5pbXBvcnQgeyBpc1NlcnZlclBsYXRmb3JtIH0gZnJvbSAnLi4vcGxhdGZvcm0vcGxhdGZvcm0nO1xuaW1wb3J0IHsgYXNzZXJ0UXJsLCBhc3NlcnRTaWduYWwsIGNyZWF0ZVFSTCwgdHlwZSBRUkxJbnRlcm5hbCB9IGZyb20gJy4uL3FybC9xcmwtY2xhc3MnO1xuaW1wb3J0IHR5cGUgeyBRUkwgfSBmcm9tICcuLi9xcmwvcXJsLnB1YmxpYyc7XG5pbXBvcnQgeyBfaFcsIG5vdGlmeVRhc2sgfSBmcm9tICcuLi9yZW5kZXIvZG9tL25vdGlmeS1yZW5kZXInO1xuaW1wb3J0IHR5cGUgeyBRd2lrRWxlbWVudCB9IGZyb20gJy4uL3JlbmRlci9kb20vdmlydHVhbC1lbGVtZW50JztcbmltcG9ydCB7IGhhbmRsZUVycm9yIH0gZnJvbSAnLi4vcmVuZGVyL2Vycm9yLWhhbmRsaW5nJztcbmltcG9ydCB0eXBlIHsgUmVuZGVyQ29udGV4dCB9IGZyb20gJy4uL3JlbmRlci90eXBlcyc7XG5pbXBvcnQge1xuICBTdWJzY3JpcHRpb25UeXBlLFxuICBnZXRTdWJzY3JpcHRpb25NYW5hZ2VyLFxuICBub1NlcmlhbGl6ZSxcbiAgdW53cmFwUHJveHksXG4gIHR5cGUgTm9TZXJpYWxpemUsXG59IGZyb20gJy4uL3N0YXRlL2NvbW1vbic7XG5pbXBvcnQgeyBRT2JqZWN0TWFuYWdlclN5bWJvbCB9IGZyb20gJy4uL3N0YXRlL2NvbnN0YW50cyc7XG5pbXBvcnQge1xuICBRT2JqZWN0U2lnbmFsRmxhZ3MsXG4gIFNJR05BTF9JTU1VVEFCTEUsXG4gIFNJR05BTF9VTkFTU0lHTkVELFxuICBfY3JlYXRlU2lnbmFsLFxuICBpc1NpZ25hbCxcbiAgdHlwZSBSZWFkb25seVNpZ25hbCxcbiAgdHlwZSBTaWduYWwsXG4gIHR5cGUgU2lnbmFsSW50ZXJuYWwsXG59IGZyb20gJy4uL3N0YXRlL3NpZ25hbCc7XG5pbXBvcnQgeyBpbXBsaWNpdCRGaXJzdEFyZyB9IGZyb20gJy4uL3V0aWwvaW1wbGljaXRfZG9sbGFyJztcbmltcG9ydCB7IGxvZ0Vycm9yLCBsb2dFcnJvckFuZFN0b3AgfSBmcm9tICcuLi91dGlsL2xvZyc7XG5pbXBvcnQgeyBDb21wdXRlZEV2ZW50LCBSZXNvdXJjZUV2ZW50LCBUYXNrRXZlbnQgfSBmcm9tICcuLi91dGlsL21hcmtlcnMnO1xuaW1wb3J0IHsgZGVsYXksIGlzUHJvbWlzZSwgc2FmZUNhbGwgfSBmcm9tICcuLi91dGlsL3Byb21pc2VzJztcbmltcG9ydCB7IGlzRnVuY3Rpb24sIGlzT2JqZWN0LCB0eXBlIFZhbHVlT3JQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgeyBDaG9yZVR5cGUgfSBmcm9tICcuLi92Mi9zaGFyZWQvc2NoZWR1bGVyJztcbmltcG9ydCB7IHR5cGUgQ29udGFpbmVyMiwgdHlwZSBIb3N0RWxlbWVudCwgdHlwZSBmaXhNZUFueSB9IGZyb20gJy4uL3YyL3NoYXJlZC90eXBlcyc7XG5pbXBvcnQgeyBpbnZva2UsIG5ld0ludm9rZUNvbnRleHQsIHVudHJhY2ssIHdhaXRBbmRSdW4gfSBmcm9tICcuL3VzZS1jb3JlJztcbmltcG9ydCB7IHVzZU9uLCB1c2VPbkRvY3VtZW50IH0gZnJvbSAnLi91c2Utb24nO1xuaW1wb3J0IHsgdXNlU2VxdWVudGlhbFNjb3BlIH0gZnJvbSAnLi91c2Utc2VxdWVudGlhbC1zY29wZSc7XG5cbmV4cG9ydCBjb25zdCBlbnVtIFRhc2tGbGFncyB7XG4gIFZJU0lCTEVfVEFTSyA9IDEgPDwgMCxcbiAgVEFTSyA9IDEgPDwgMSxcbiAgUkVTT1VSQ0UgPSAxIDw8IDIsXG4gIENPTVBVVEVEID0gMSA8PCAzLFxuICBESVJUWSA9IDEgPDwgNCxcbn1cblxuLy8gPGRvY3MgbWFya2Rvd249XCIuLi9yZWFkbWUubWQjVHJhY2tlclwiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCNUcmFja2VyIGluc3RlYWQpXG4vKipcbiAqIFVzZWQgdG8gc2lnbmFsIHRvIFF3aWsgd2hpY2ggc3RhdGUgc2hvdWxkIGJlIHdhdGNoZWQgZm9yIGNoYW5nZXMuXG4gKlxuICogVGhlIGBUcmFja2VyYCBpcyBwYXNzZWQgaW50byB0aGUgYHRhc2tGbmAgb2YgYHVzZVRhc2tgLiBJdCBpcyBpbnRlbmRlZCB0byBiZSB1c2VkIHRvIHdyYXAgc3RhdGVcbiAqIG9iamVjdHMgaW4gYSByZWFkIHByb3h5IHdoaWNoIHNpZ25hbHMgdG8gUXdpayB3aGljaCBwcm9wZXJ0aWVzIHNob3VsZCBiZSB3YXRjaGVkIGZvciBjaGFuZ2VzLiBBXG4gKiBjaGFuZ2UgdG8gYW55IG9mIHRoZSBwcm9wZXJ0aWVzIGNhdXNlcyB0aGUgYHRhc2tGbmAgdG8gcmVydW4uXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqXG4gKiBUaGUgYG9ic2AgcGFzc2VkIGludG8gdGhlIGB0YXNrRm5gIGlzIHVzZWQgdG8gbWFyayBgc3RhdGUuY291bnRgIGFzIGEgcHJvcGVydHkgb2YgaW50ZXJlc3QuIEFueVxuICogY2hhbmdlcyB0byB0aGUgYHN0YXRlLmNvdW50YCBwcm9wZXJ0eSB3aWxsIGNhdXNlIHRoZSBgdGFza0ZuYCB0byByZXJ1bi5cbiAqXG4gKiBgYGB0c3hcbiAqIGNvbnN0IENtcCA9IGNvbXBvbmVudCQoKCkgPT4ge1xuICogICBjb25zdCBzdG9yZSA9IHVzZVN0b3JlKHsgY291bnQ6IDAsIGRvdWJsZUNvdW50OiAwIH0pO1xuICogICBjb25zdCBzaWduYWwgPSB1c2VTaWduYWwoMCk7XG4gKiAgIHVzZVRhc2skKCh7IHRyYWNrIH0pID0+IHtcbiAqICAgICAvLyBBbnkgc2lnbmFscyBvciBzdG9yZXMgYWNjZXNzZWQgaW5zaWRlIHRoZSB0YXNrIHdpbGwgYmUgdHJhY2tlZFxuICogICAgIGNvbnN0IGNvdW50ID0gdHJhY2soKCkgPT4gc3RvcmUuY291bnQpO1xuICogICAgIC8vIFlvdSBjYW4gYWxzbyBwYXNzIGEgc2lnbmFsIHRvIHRyYWNrKCkgZGlyZWN0bHlcbiAqICAgICBjb25zdCBzaWduYWxDb3VudCA9IHRyYWNrKHNpZ25hbCk7XG4gKiAgICAgc3RvcmUuZG91YmxlQ291bnQgPSBjb3VudCArIHNpZ25hbENvdW50O1xuICogICB9KTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPHNwYW4+XG4gKiAgICAgICAgIHtzdG9yZS5jb3VudH0gLyB7c3RvcmUuZG91YmxlQ291bnR9XG4gKiAgICAgICA8L3NwYW4+XG4gKiAgICAgICA8YnV0dG9uXG4gKiAgICAgICAgIG9uQ2xpY2skPXsoKSA9PiB7XG4gKiAgICAgICAgICAgc3RvcmUuY291bnQrKztcbiAqICAgICAgICAgICBzaWduYWwudmFsdWUrKztcbiAqICAgICAgICAgfX1cbiAqICAgICAgID5cbiAqICAgICAgICAgK1xuICogICAgICAgPC9idXR0b24+XG4gKiAgICAgPC9kaXY+XG4gKiAgICk7XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqIEBzZWUgYHVzZVRhc2tgXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhY2tlciB7XG4gIC8qKlxuICAgKiBJbmNsdWRlIHRoZSBleHByZXNzaW9uIHVzaW5nIHN0b3JlcyAvIHNpZ25hbHMgdG8gdHJhY2s6XG4gICAqXG4gICAqIGBgYHRzeFxuICAgKiB0cmFjaygoKSA9PiBzdG9yZS5jb3VudCk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBUaGUgYHRyYWNrKClgIGZ1bmN0aW9uIGFsc28gcmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIHNjb3BlZCBleHByZXNzaW9uOlxuICAgKlxuICAgKiBgYGB0c3hcbiAgICogY29uc3QgY291bnQgPSB0cmFjaygoKSA9PiBzdG9yZS5jb3VudCk7XG4gICAqIGBgYFxuICAgKi9cbiAgPFQ+KGZuOiAoKSA9PiBUKTogVDtcblxuICAvKipcbiAgICogVXNlZCB0byB0cmFjayB0aGUgd2hvbGUgb2JqZWN0LiBJZiBhbnkgcHJvcGVydHkgb2YgdGhlIHBhc3NlZCBzdG9yZSBjaGFuZ2VzLCB0aGUgdGFzayB3aWxsIGJlXG4gICAqIHNjaGVkdWxlZCB0byBydW4uIEFsc28gYWNjZXB0cyBzaWduYWxzLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhlIGNoYW5nZSB0cmFja2luZyBpcyBub3QgZGVlcC4gSWYgeW91IHdhbnQgdG8gdHJhY2sgY2hhbmdlcyB0byBuZXN0ZWQgcHJvcGVydGllcyxcbiAgICogeW91IG5lZWQgdG8gdXNlIGB0cmFja2Agb24gZWFjaCBvZiB0aGVtLlxuICAgKlxuICAgKiBgYGB0c3hcbiAgICogdHJhY2soc3RvcmUpOyAvLyByZXR1cm5zIHN0b3JlXG4gICAqIHRyYWNrKHNpZ25hbCk7IC8vIHJldHVybnMgc2lnbmFsLnZhbHVlXG4gICAqIGBgYFxuICAgKi9cbiAgPFQgZXh0ZW5kcyBvYmplY3Q+KG9iajogVCk6IFQgZXh0ZW5kcyBTaWduYWw8aW5mZXIgVT4gPyBVIDogVDtcblxuICAvKipcbiAgICogVXNlZCB0byB0cmFjayB0byB0cmFjayBhIHNwZWNpZmljIHByb3BlcnR5IG9mIGFuIG9iamVjdC5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoZSBjaGFuZ2UgdHJhY2tpbmcgaXMgbm90IGRlZXAuIElmIHlvdSB3YW50IHRvIHRyYWNrIGNoYW5nZXMgdG8gbmVzdGVkIHByb3BlcnRpZXMsXG4gICAqIHlvdSBuZWVkIHRvIHVzZSBgdHJhY2tgIG9uIGVhY2ggb2YgdGhlbS5cbiAgICpcbiAgICogYGBgdHN4XG4gICAqIHRyYWNrKHN0b3JlLCAncHJvcEEnKTsgLy8gcmV0dXJucyBzdG9yZS5wcm9wQVxuICAgKiBgYGBcbiAgICovXG4gIDxUIGV4dGVuZHMgb2JqZWN0LCBQIGV4dGVuZHMga2V5b2YgVD4ob2JqOiBULCBwcm9wOiBQKTogVFtQXTtcbn1cblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGFza0N0eCB7XG4gIHRyYWNrOiBUcmFja2VyO1xuICBjbGVhbnVwKGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogdm9pZDtcbn1cblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzb3VyY2VDdHg8VD4ge1xuICByZWFkb25seSB0cmFjazogVHJhY2tlcjtcbiAgY2xlYW51cChjYWxsYmFjazogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gIGNhY2hlKHBvbGljeU9yTWlsbGlzZWNvbmRzOiBudW1iZXIgfCAnaW1tdXRhYmxlJyk6IHZvaWQ7XG4gIHJlYWRvbmx5IHByZXZpb3VzOiBUIHwgdW5kZWZpbmVkO1xufVxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgVGFza0ZuID0gKGN0eDogVGFza0N0eCkgPT4gVmFsdWVPclByb21pc2U8dm9pZCB8ICgoKSA9PiB2b2lkKT47XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgdHlwZSBDb21wdXRlZEZuPFQ+ID0gKCkgPT4gVDtcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCB0eXBlIFJlc291cmNlRm48VD4gPSAoY3R4OiBSZXNvdXJjZUN0eDx1bmtub3duPikgPT4gVmFsdWVPclByb21pc2U8VD47XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgdHlwZSBSZXNvdXJjZVJldHVybjxUPiA9IFJlc291cmNlUGVuZGluZzxUPiB8IFJlc291cmNlUmVzb2x2ZWQ8VD4gfCBSZXNvdXJjZVJlamVjdGVkPFQ+O1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNvdXJjZVBlbmRpbmc8VD4ge1xuICByZWFkb25seSB2YWx1ZTogUHJvbWlzZTxUPjtcbiAgcmVhZG9ubHkgbG9hZGluZzogYm9vbGVhbjtcbn1cblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzb3VyY2VSZXNvbHZlZDxUPiB7XG4gIHJlYWRvbmx5IHZhbHVlOiBQcm9taXNlPFQ+O1xuICByZWFkb25seSBsb2FkaW5nOiBib29sZWFuO1xufVxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNvdXJjZVJlamVjdGVkPFQ+IHtcbiAgcmVhZG9ubHkgdmFsdWU6IFByb21pc2U8VD47XG4gIHJlYWRvbmx5IGxvYWRpbmc6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzb3VyY2VSZXR1cm5JbnRlcm5hbDxUPiB7XG4gIF9fYnJhbmQ6ICdyZXNvdXJjZSc7XG4gIF9zdGF0ZTogJ3BlbmRpbmcnIHwgJ3Jlc29sdmVkJyB8ICdyZWplY3RlZCc7XG4gIF9yZXNvbHZlZDogVCB8IHVuZGVmaW5lZDtcbiAgX2Vycm9yOiBFcnJvciB8IHVuZGVmaW5lZDtcbiAgX2NhY2hlOiBudW1iZXI7XG4gIF90aW1lb3V0OiBudW1iZXI7XG4gIHZhbHVlOiBQcm9taXNlPFQ+O1xuICBsb2FkaW5nOiBib29sZWFuO1xufVxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGVzY3JpcHRvckJhc2U8VCA9IHVua25vd24sIEIgPSB1bmtub3duPiB7XG4gICRmbGFncyQ6IG51bWJlcjtcbiAgJGluZGV4JDogbnVtYmVyO1xuICAkZWwkOiBRd2lrRWxlbWVudDtcbiAgJHFybCQ6IFFSTEludGVybmFsPFQ+O1xuICAkc3RhdGUkOiBCIHwgdW5kZWZpbmVkO1xuICAkZGVzdHJveSQ6IE5vU2VyaWFsaXplPCgpID0+IHZvaWQ+IHwgbnVsbDtcbn1cblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCB0eXBlIEVhZ2VybmVzc09wdGlvbnMgPSAndmlzaWJsZScgfCAnbG9hZCcgfCAnaWRsZSc7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgdHlwZSBWaXNpYmxlVGFza1N0cmF0ZWd5ID0gJ2ludGVyc2VjdGlvbi1vYnNlcnZlcicgfCAnZG9jdW1lbnQtcmVhZHknIHwgJ2RvY3VtZW50LWlkbGUnO1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGludGVyZmFjZSBPblZpc2libGVUYXNrT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBUaGUgc3RyYXRlZ3kgdG8gdXNlIHRvIGRldGVybWluZSB3aGVuIHRoZSBcIlZpc2libGVUYXNrXCIgc2hvdWxkIGZpcnN0IGV4ZWN1dGUuXG4gICAqXG4gICAqIC0gYGludGVyc2VjdGlvbi1vYnNlcnZlcmA6IHRoZSB0YXNrIHdpbGwgZmlyc3QgZXhlY3V0ZSB3aGVuIHRoZSBlbGVtZW50IGlzIHZpc2libGUgaW4gdGhlXG4gICAqICAgdmlld3BvcnQsIHVuZGVyIHRoZSBob29kIGl0IHVzZXMgdGhlIEludGVyc2VjdGlvbk9ic2VydmVyIEFQSS5cbiAgICogLSBgZG9jdW1lbnQtcmVhZHlgOiB0aGUgdGFzayB3aWxsIGZpcnN0IGV4ZWN1dGUgd2hlbiB0aGUgZG9jdW1lbnQgaXMgcmVhZHksIHVuZGVyIHRoZSBob29kIGl0XG4gICAqICAgdXNlcyB0aGUgZG9jdW1lbnQgYGxvYWRgIGV2ZW50LlxuICAgKiAtIGBkb2N1bWVudC1pZGxlYDogdGhlIHRhc2sgd2lsbCBmaXJzdCBleGVjdXRlIHdoZW4gdGhlIGRvY3VtZW50IGlzIGlkbGUsIHVuZGVyIHRoZSBob29kIGl0IHVzZXNcbiAgICogICB0aGUgcmVxdWVzdElkbGVDYWxsYmFjayBBUEkuXG4gICAqL1xuICBzdHJhdGVneT86IFZpc2libGVUYXNrU3RyYXRlZ3k7XG59XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgaW50ZXJmYWNlIFVzZVRhc2tPcHRpb25zIHtcbiAgLyoqXG4gICAqIC0gYHZpc2libGVgOiBydW4gdGhlIGVmZmVjdCB3aGVuIHRoZSBlbGVtZW50IGlzIHZpc2libGUuXG4gICAqIC0gYGxvYWRgOiBlYWdlcmx5IHJ1biB0aGUgZWZmZWN0IHdoZW4gdGhlIGFwcGxpY2F0aW9uIHJlc3VtZXMuXG4gICAqL1xuICBlYWdlcm5lc3M/OiBFYWdlcm5lc3NPcHRpb25zO1xufVxuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VUYXNrXCI+XG4vLyAhIURPIE5PVCBFRElUIFRISVMgQ09NTUVOVCBESVJFQ1RMWSEhIVxuLy8gKGVkaXQgLi4vcmVhZG1lLm1kI3VzZVRhc2sgaW5zdGVhZClcbi8qKlxuICogUmVydW5zIHRoZSBgdGFza0ZuYCB3aGVuIHRoZSBvYnNlcnZlZCBpbnB1dHMgY2hhbmdlLlxuICpcbiAqIFVzZSBgdXNlVGFza2AgdG8gb2JzZXJ2ZSBjaGFuZ2VzIG9uIGEgc2V0IG9mIGlucHV0cywgYW5kIHRoZW4gcmUtZXhlY3V0ZSB0aGUgYHRhc2tGbmAgd2hlbiB0aG9zZVxuICogaW5wdXRzIGNoYW5nZS5cbiAqXG4gKiBUaGUgYHRhc2tGbmAgb25seSBleGVjdXRlcyBpZiB0aGUgb2JzZXJ2ZWQgaW5wdXRzIGNoYW5nZS4gVG8gb2JzZXJ2ZSB0aGUgaW5wdXRzLCB1c2UgdGhlIGBvYnNgXG4gKiBmdW5jdGlvbiB0byB3cmFwIHByb3BlcnR5IHJlYWRzLiBUaGlzIGNyZWF0ZXMgc3Vic2NyaXB0aW9ucyB0aGF0IHdpbGwgdHJpZ2dlciB0aGUgYHRhc2tGbmAgdG9cbiAqIHJlcnVuLlxuICpcbiAqIEBwYXJhbSB0YXNrIC0gRnVuY3Rpb24gd2hpY2ggc2hvdWxkIGJlIHJlLWV4ZWN1dGVkIHdoZW4gY2hhbmdlcyB0byB0aGUgaW5wdXRzIGFyZSBkZXRlY3RlZFxuICogQHB1YmxpY1xuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogVGhlIGB1c2VUYXNrYCBmdW5jdGlvbiBpcyB1c2VkIHRvIG9ic2VydmUgdGhlIGBzdG9yZS5jb3VudGAgcHJvcGVydHkuIEFueSBjaGFuZ2VzIHRvIHRoZVxuICogYHN0b3JlLmNvdW50YCBjYXVzZSB0aGUgYHRhc2tGbmAgdG8gZXhlY3V0ZSB3aGljaCBpbiB0dXJuIHVwZGF0ZXMgdGhlIGBzdG9yZS5kb3VibGVDb3VudGAgdG9cbiAqIHRoZSBkb3VibGUgb2YgYHN0b3JlLmNvdW50YC5cbiAqXG4gKiBgYGB0c3hcbiAqIGNvbnN0IENtcCA9IGNvbXBvbmVudCQoKCkgPT4ge1xuICogICBjb25zdCBzdG9yZSA9IHVzZVN0b3JlKHtcbiAqICAgICBjb3VudDogMCxcbiAqICAgICBkb3VibGVDb3VudDogMCxcbiAqICAgICBkZWJvdW5jZWQ6IDAsXG4gKiAgIH0pO1xuICpcbiAqICAgLy8gRG91YmxlIGNvdW50IHRhc2tcbiAqICAgdXNlVGFzayQoKHsgdHJhY2sgfSkgPT4ge1xuICogICAgIGNvbnN0IGNvdW50ID0gdHJhY2soKCkgPT4gc3RvcmUuY291bnQpO1xuICogICAgIHN0b3JlLmRvdWJsZUNvdW50ID0gMiAqIGNvdW50O1xuICogICB9KTtcbiAqXG4gKiAgIC8vIERlYm91bmNlciB0YXNrXG4gKiAgIHVzZVRhc2skKCh7IHRyYWNrIH0pID0+IHtcbiAqICAgICBjb25zdCBkb3VibGVDb3VudCA9IHRyYWNrKCgpID0+IHN0b3JlLmRvdWJsZUNvdW50KTtcbiAqICAgICBjb25zdCB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICogICAgICAgc3RvcmUuZGVib3VuY2VkID0gZG91YmxlQ291bnQ7XG4gKiAgICAgfSwgMjAwMCk7XG4gKiAgICAgcmV0dXJuICgpID0+IHtcbiAqICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gKiAgICAgfTtcbiAqICAgfSk7XG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGRpdj5cbiAqICAgICAgIDxkaXY+XG4gKiAgICAgICAgIHtzdG9yZS5jb3VudH0gLyB7c3RvcmUuZG91YmxlQ291bnR9XG4gKiAgICAgICA8L2Rpdj5cbiAqICAgICAgIDxkaXY+e3N0b3JlLmRlYm91bmNlZH08L2Rpdj5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICogQHNlZSBgVHJhY2tlcmBcbiAqL1xuLy8gPC9kb2NzPlxuZXhwb3J0IGNvbnN0IHVzZVRhc2tRcmwgPSAocXJsOiBRUkw8VGFza0ZuPiwgb3B0cz86IFVzZVRhc2tPcHRpb25zKTogdm9pZCA9PiB7XG4gIGNvbnN0IHsgdmFsLCBzZXQsIGlDdHgsIGksIGVsQ3R4IH0gPSB1c2VTZXF1ZW50aWFsU2NvcGU8MSB8IFRhc2s+KCk7XG4gIGlmICh2YWwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgYXNzZXJ0UXJsKHFybCk7XG4gIHNldCgxKTtcblxuICBpZiAoaUN0eC4kY29udGFpbmVyMiQpIHtcbiAgICBjb25zdCBob3N0ID0gaUN0eC4kaG9zdEVsZW1lbnQkIGFzIHVua25vd24gYXMgSG9zdEVsZW1lbnQ7XG4gICAgY29uc3QgdGFzayA9IG5ldyBUYXNrKFxuICAgICAgVGFza0ZsYWdzLkRJUlRZIHwgVGFza0ZsYWdzLlRBU0ssXG4gICAgICBpLFxuICAgICAgaUN0eC4kaG9zdEVsZW1lbnQkLFxuICAgICAgcXJsLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgbnVsbFxuICAgICk7XG4gICAgLy8gSW4gVjIgd2UgYWRkIHRoZSB0YXNrIHRvIHRoZSBzZXF1ZW50aWFsIHNjb3BlLiBXZSBuZWVkIHRvIGRvIHRoaXNcbiAgICAvLyBpbiBvcmRlciB0byBiZSBhYmxlIHRvIHJldHJpZXZlIGl0IGxhdGVyIHdoZW4gdGhlIHBhcmVudCBlbGVtZW50IGlzXG4gICAgLy8gZGVsZXRlZCBhbmQgd2UgbmVlZCB0byBiZSBhYmxlIHRvIHJlbGVhc2UgdGhlIHRhc2sgc3Vic2NyaXB0aW9ucy5cbiAgICBzZXQodGFzayk7XG4gICAgY29uc3QgcmVzdWx0ID0gcnVuVGFzazIodGFzaywgaUN0eC4kY29udGFpbmVyMiQsIGhvc3QpO1xuICAgIGlmIChpc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgdGhyb3cgcmVzdWx0O1xuICAgIH1cbiAgICBxcmwuJHJlc29sdmVMYXp5JChob3N0IGFzIGZpeE1lQW55KTtcbiAgICBpZiAoaXNTZXJ2ZXJQbGF0Zm9ybSgpKSB7XG4gICAgICB1c2VSdW5UYXNrKHRhc2ssIG9wdHM/LmVhZ2VybmVzcyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IGNvbnRhaW5lclN0YXRlID0gaUN0eC4kcmVuZGVyQ3R4JC4kc3RhdGljJC4kY29udGFpbmVyU3RhdGUkO1xuICAgIGNvbnN0IHRhc2sgPSBuZXcgVGFzayhcbiAgICAgIFRhc2tGbGFncy5ESVJUWSB8IFRhc2tGbGFncy5UQVNLLFxuICAgICAgaSxcbiAgICAgIGVsQ3R4LiRlbGVtZW50JCxcbiAgICAgIHFybCxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIG51bGxcbiAgICApO1xuICAgIHFybC4kcmVzb2x2ZUxhenkkKGNvbnRhaW5lclN0YXRlLiRjb250YWluZXJFbCQpO1xuICAgIGlmICghZWxDdHguJHRhc2tzJCkge1xuICAgICAgZWxDdHguJHRhc2tzJCA9IFtdO1xuICAgIH1cbiAgICBlbEN0eC4kdGFza3MkLnB1c2godGFzayk7XG4gICAgd2FpdEFuZFJ1bihpQ3R4LCAoKSA9PiBydW5UYXNrKHRhc2ssIGNvbnRhaW5lclN0YXRlLCBpQ3R4LiRyZW5kZXJDdHgkKSk7XG4gICAgaWYgKGlzU2VydmVyUGxhdGZvcm0oKSkge1xuICAgICAgdXNlUnVuVGFzayh0YXNrLCBvcHRzPy5lYWdlcm5lc3MpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHJ1blRhc2syID0gKFxuICB0YXNrOiBUYXNrRGVzY3JpcHRvciB8IENvbXB1dGVkRGVzY3JpcHRvcjx1bmtub3duPixcbiAgY29udGFpbmVyOiBDb250YWluZXIyLFxuICBob3N0OiBIb3N0RWxlbWVudFxuKSA9PiB7XG4gIHRhc2suJGZsYWdzJCAmPSB+VGFza0ZsYWdzLkRJUlRZO1xuICBjb25zdCBpQ3R4ID0gbmV3SW52b2tlQ29udGV4dChjb250YWluZXIuJGxvY2FsZSQsIGhvc3QgYXMgZml4TWVBbnksIHVuZGVmaW5lZCwgVGFza0V2ZW50KTtcbiAgY29uc3QgdGFza0ZuID0gdGFzay4kcXJsJC5nZXRGbihpQ3R4LCAoKSA9PiB7XG4gICAgY29udGFpbmVyLiRzdWJzTWFuYWdlciQuJGNsZWFyU3ViJCh0YXNrKTtcbiAgfSkgYXMgVGFza0ZuO1xuXG4gIGNvbnN0IHRyYWNrOiBUcmFja2VyID0gKG9iajogKCgpID0+IHVua25vd24pIHwgb2JqZWN0IHwgU2lnbmFsLCBwcm9wPzogc3RyaW5nKSA9PiB7XG4gICAgaWYgKGlzRnVuY3Rpb24ob2JqKSkge1xuICAgICAgY29uc3QgY3R4ID0gbmV3SW52b2tlQ29udGV4dCgpO1xuICAgICAgY3R4LiRzdWJzY3JpYmVyJCA9IFtTdWJzY3JpcHRpb25UeXBlLkhPU1QsIHRhc2tdO1xuICAgICAgcmV0dXJuIGludm9rZShjdHgsIG9iaik7XG4gICAgfVxuICAgIGNvbnN0IG1hbmFnZXIgPSBnZXRTdWJzY3JpcHRpb25NYW5hZ2VyKG9iaik7XG4gICAgaWYgKG1hbmFnZXIpIHtcbiAgICAgIG1hbmFnZXIuJGFkZFN1YiQoW1N1YnNjcmlwdGlvblR5cGUuSE9TVCwgdGFza10sIHByb3ApO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2dFcnJvckFuZFN0b3AoY29kZVRvVGV4dChRRXJyb3JfdHJhY2tVc2VTdG9yZSksIG9iaik7XG4gICAgfVxuICAgIGlmIChwcm9wKSB7XG4gICAgICByZXR1cm4gKG9iaiBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPilbcHJvcF07XG4gICAgfSBlbHNlIGlmIChpc1NpZ25hbChvYmopKSB7XG4gICAgICByZXR1cm4gb2JqLnZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlRXJyb3IgPSAocmVhc29uOiB1bmtub3duKSA9PiBjb250YWluZXIuaGFuZGxlRXJyb3IocmVhc29uLCBob3N0KTtcbiAgbGV0IGNsZWFudXBGbnM6ICgoKSA9PiB2b2lkKVtdIHwgbnVsbCA9IG51bGw7XG4gIGNvbnN0IGNsZWFudXAgPSAoZm46ICgpID0+IHZvaWQpID0+IHtcbiAgICBpZiAodHlwZW9mIGZuID09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmICghY2xlYW51cEZucykge1xuICAgICAgICBjbGVhbnVwRm5zID0gW107XG4gICAgICAgIHRhc2suJGRlc3Ryb3kkID0gbm9TZXJpYWxpemUoKCkgPT4ge1xuICAgICAgICAgIHRhc2suJGRlc3Ryb3kkID0gbnVsbDtcbiAgICAgICAgICBjbGVhbnVwRm5zIS5mb3JFYWNoKChmbikgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGNsZWFudXBGbnMucHVzaChmbik7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHRhc2tBcGk6IFRhc2tDdHggPSB7IHRyYWNrLCBjbGVhbnVwIH07XG4gIGNsZWFudXBUYXNrKHRhc2spO1xuICBjb25zdCByZXN1bHQgPSBzYWZlQ2FsbCgoKSA9PiB0YXNrRm4odGFza0FwaSksIGNsZWFudXAsIGhhbmRsZUVycm9yKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBjb25zdCBydW5Db21wdXRlZDIgPSAoXG4gIHRhc2s6IFRhc2tEZXNjcmlwdG9yIHwgQ29tcHV0ZWREZXNjcmlwdG9yPHVua25vd24+LFxuICBjb250YWluZXI6IENvbnRhaW5lcjIsXG4gIGhvc3Q6IEhvc3RFbGVtZW50XG4pOiBWYWx1ZU9yUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGFzc2VydFNpZ25hbCh0YXNrLiRzdGF0ZSQpO1xuICB0YXNrLiRmbGFncyQgJj0gflRhc2tGbGFncy5ESVJUWTtcbiAgY29uc3QgaUN0eCA9IG5ld0ludm9rZUNvbnRleHQoY29udGFpbmVyLiRsb2NhbGUkLCBob3N0IGFzIGZpeE1lQW55LCB1bmRlZmluZWQsIENvbXB1dGVkRXZlbnQpO1xuICBpQ3R4LiRzdWJzY3JpYmVyJCA9IFtTdWJzY3JpcHRpb25UeXBlLkhPU1QsIHRhc2tdO1xuXG4gIGNvbnN0IHRhc2tGbiA9IHRhc2suJHFybCQuZ2V0Rm4oaUN0eCwgKCkgPT4ge1xuICAgIGNvbnRhaW5lci4kc3Vic01hbmFnZXIkLiRjbGVhclN1YiQodGFzayk7XG4gIH0pIGFzIENvbXB1dGVkRm48dW5rbm93bj47XG5cbiAgY29uc3QgaGFuZGxlRXJyb3IgPSAocmVhc29uOiB1bmtub3duKSA9PiBjb250YWluZXIuaGFuZGxlRXJyb3IocmVhc29uLCBob3N0KTtcbiAgY29uc3QgcmVzdWx0ID0gc2FmZUNhbGwoXG4gICAgdGFza0ZuLFxuICAgIChyZXR1cm5WYWx1ZSkgPT5cbiAgICAgIHVudHJhY2soKCkgPT4ge1xuICAgICAgICBjb25zdCBzaWduYWwgPSB0YXNrLiRzdGF0ZSQhIGFzIFNpZ25hbEludGVybmFsPHVua25vd24+O1xuICAgICAgICBzaWduYWxbUU9iamVjdFNpZ25hbEZsYWdzXSAmPSB+U0lHTkFMX1VOQVNTSUdORUQ7XG4gICAgICAgIHNpZ25hbC51bnRyYWNrZWRWYWx1ZSA9IHJldHVyblZhbHVlO1xuICAgICAgICBzaWduYWxbUU9iamVjdE1hbmFnZXJTeW1ib2xdLiRub3RpZnlTdWJzJCgpO1xuICAgICAgfSksXG4gICAgaGFuZGxlRXJyb3JcbiAgKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmludGVyZmFjZSBDb21wdXRlZFFSTCB7XG4gIDxUPihxcmw6IFFSTDxDb21wdXRlZEZuPFQ+Pik6IFJlYWRvbmx5U2lnbmFsPEF3YWl0ZWQ8VD4+O1xufVxuXG5pbnRlcmZhY2UgQ29tcHV0ZWQge1xuICA8VD4ocXJsOiBDb21wdXRlZEZuPFQ+KTogUmVhZG9ubHlTaWduYWw8QXdhaXRlZDxUPj47XG59XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgdXNlQ29tcHV0ZWRRcmw6IENvbXB1dGVkUVJMID0gPFQ+KHFybDogUVJMPENvbXB1dGVkRm48VD4+KTogU2lnbmFsPEF3YWl0ZWQ8VD4+ID0+IHtcbiAgY29uc3QgeyB2YWwsIHNldCwgaUN0eCwgaSB9ID0gdXNlU2VxdWVudGlhbFNjb3BlPFNpZ25hbDxBd2FpdGVkPFQ+Pj4oKTtcbiAgaWYgKHZhbCkge1xuICAgIHJldHVybiB2YWw7XG4gIH1cbiAgYXNzZXJ0UXJsKHFybCk7XG5cbiAgY29uc3QgaG9zdCA9IGlDdHguJGhvc3RFbGVtZW50JCBhcyB1bmtub3duIGFzIEhvc3RFbGVtZW50O1xuICBjb25zdCBzaWduYWwgPSBfY3JlYXRlU2lnbmFsKFxuICAgIHVuZGVmaW5lZCBhcyBBd2FpdGVkPFQ+LFxuICAgIGlDdHguJGNvbnRhaW5lcjIkLiRzdWJzTWFuYWdlciQsXG4gICAgU0lHTkFMX1VOQVNTSUdORUQgfCBTSUdOQUxfSU1NVVRBQkxFLFxuICAgIHVuZGVmaW5lZFxuICApO1xuICBjb25zdCB0YXNrID0gbmV3IFRhc2soXG4gICAgVGFza0ZsYWdzLkRJUlRZIHwgVGFza0ZsYWdzLlRBU0sgfCBUYXNrRmxhZ3MuQ09NUFVURUQsXG4gICAgaSxcbiAgICBpQ3R4LiRob3N0RWxlbWVudCQsXG4gICAgcXJsLFxuICAgIHNpZ25hbCxcbiAgICBudWxsXG4gICk7XG4gIHNldChzaWduYWwpO1xuICBxcmwuJHJlc29sdmVMYXp5JChob3N0IGFzIGZpeE1lQW55KTtcbiAgY29uc3QgcmVzdWx0ID0gcnVuQ29tcHV0ZWQyKHRhc2ssIGlDdHguJGNvbnRhaW5lcjIkLCBob3N0KTtcbiAgaWYgKGlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgdGhyb3cgcmVzdWx0O1xuICB9XG4gIHJldHVybiBzaWduYWw7XG59O1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGNvbnN0IHVzZUNvbXB1dGVkJDogQ29tcHV0ZWQgPSBpbXBsaWNpdCRGaXJzdEFyZyh1c2VDb21wdXRlZFFybCk7XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI3VzZVRhc2tcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjdXNlVGFzayBpbnN0ZWFkKVxuLyoqXG4gKiBSZXJ1bnMgdGhlIGB0YXNrRm5gIHdoZW4gdGhlIG9ic2VydmVkIGlucHV0cyBjaGFuZ2UuXG4gKlxuICogVXNlIGB1c2VUYXNrYCB0byBvYnNlcnZlIGNoYW5nZXMgb24gYSBzZXQgb2YgaW5wdXRzLCBhbmQgdGhlbiByZS1leGVjdXRlIHRoZSBgdGFza0ZuYCB3aGVuIHRob3NlXG4gKiBpbnB1dHMgY2hhbmdlLlxuICpcbiAqIFRoZSBgdGFza0ZuYCBvbmx5IGV4ZWN1dGVzIGlmIHRoZSBvYnNlcnZlZCBpbnB1dHMgY2hhbmdlLiBUbyBvYnNlcnZlIHRoZSBpbnB1dHMsIHVzZSB0aGUgYG9ic2BcbiAqIGZ1bmN0aW9uIHRvIHdyYXAgcHJvcGVydHkgcmVhZHMuIFRoaXMgY3JlYXRlcyBzdWJzY3JpcHRpb25zIHRoYXQgd2lsbCB0cmlnZ2VyIHRoZSBgdGFza0ZuYCB0b1xuICogcmVydW4uXG4gKlxuICogQHBhcmFtIHRhc2sgLSBGdW5jdGlvbiB3aGljaCBzaG91bGQgYmUgcmUtZXhlY3V0ZWQgd2hlbiBjaGFuZ2VzIHRvIHRoZSBpbnB1dHMgYXJlIGRldGVjdGVkXG4gKiBAcHVibGljXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqXG4gKiBUaGUgYHVzZVRhc2tgIGZ1bmN0aW9uIGlzIHVzZWQgdG8gb2JzZXJ2ZSB0aGUgYHN0b3JlLmNvdW50YCBwcm9wZXJ0eS4gQW55IGNoYW5nZXMgdG8gdGhlXG4gKiBgc3RvcmUuY291bnRgIGNhdXNlIHRoZSBgdGFza0ZuYCB0byBleGVjdXRlIHdoaWNoIGluIHR1cm4gdXBkYXRlcyB0aGUgYHN0b3JlLmRvdWJsZUNvdW50YCB0b1xuICogdGhlIGRvdWJsZSBvZiBgc3RvcmUuY291bnRgLlxuICpcbiAqIGBgYHRzeFxuICogY29uc3QgQ21wID0gY29tcG9uZW50JCgoKSA9PiB7XG4gKiAgIGNvbnN0IHN0b3JlID0gdXNlU3RvcmUoe1xuICogICAgIGNvdW50OiAwLFxuICogICAgIGRvdWJsZUNvdW50OiAwLFxuICogICAgIGRlYm91bmNlZDogMCxcbiAqICAgfSk7XG4gKlxuICogICAvLyBEb3VibGUgY291bnQgdGFza1xuICogICB1c2VUYXNrJCgoeyB0cmFjayB9KSA9PiB7XG4gKiAgICAgY29uc3QgY291bnQgPSB0cmFjaygoKSA9PiBzdG9yZS5jb3VudCk7XG4gKiAgICAgc3RvcmUuZG91YmxlQ291bnQgPSAyICogY291bnQ7XG4gKiAgIH0pO1xuICpcbiAqICAgLy8gRGVib3VuY2VyIHRhc2tcbiAqICAgdXNlVGFzayQoKHsgdHJhY2sgfSkgPT4ge1xuICogICAgIGNvbnN0IGRvdWJsZUNvdW50ID0gdHJhY2soKCkgPT4gc3RvcmUuZG91YmxlQ291bnQpO1xuICogICAgIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gKiAgICAgICBzdG9yZS5kZWJvdW5jZWQgPSBkb3VibGVDb3VudDtcbiAqICAgICB9LCAyMDAwKTtcbiAqICAgICByZXR1cm4gKCkgPT4ge1xuICogICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAqICAgICB9O1xuICogICB9KTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPGRpdj5cbiAqICAgICAgICAge3N0b3JlLmNvdW50fSAvIHtzdG9yZS5kb3VibGVDb3VudH1cbiAqICAgICAgIDwvZGl2PlxuICogICAgICAgPGRpdj57c3RvcmUuZGVib3VuY2VkfTwvZGl2PlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKiBAc2VlIGBUcmFja2VyYFxuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3QgdXNlVGFzayQgPSAvKiNfX1BVUkVfXyovIGltcGxpY2l0JEZpcnN0QXJnKHVzZVRhc2tRcmwpO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VWaXNpYmxlVGFza1wiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCN1c2VWaXNpYmxlVGFzayBpbnN0ZWFkKVxuLyoqXG4gKiBgYGB0c3hcbiAqIGNvbnN0IFRpbWVyID0gY29tcG9uZW50JCgoKSA9PiB7XG4gKiAgIGNvbnN0IHN0b3JlID0gdXNlU3RvcmUoe1xuICogICAgIGNvdW50OiAwLFxuICogICB9KTtcbiAqXG4gKiAgIHVzZVZpc2libGVUYXNrJCgoKSA9PiB7XG4gKiAgICAgLy8gT25seSBydW5zIGluIHRoZSBjbGllbnRcbiAqICAgICBjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcbiAqICAgICAgIHN0b3JlLmNvdW50Kys7XG4gKiAgICAgfSwgNTAwKTtcbiAqICAgICByZXR1cm4gKCkgPT4ge1xuICogICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gKiAgICAgfTtcbiAqICAgfSk7XG4gKlxuICogICByZXR1cm4gPGRpdj57c3RvcmUuY291bnR9PC9kaXY+O1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VWaXNpYmxlVGFza1FybCA9IChxcmw6IFFSTDxUYXNrRm4+LCBvcHRzPzogT25WaXNpYmxlVGFza09wdGlvbnMpOiB2b2lkID0+IHtcbiAgY29uc3QgeyB2YWwsIHNldCwgaSwgaUN0eCwgZWxDdHggfSA9IHVzZVNlcXVlbnRpYWxTY29wZTxUYXNrPFRhc2tGbj4+KCk7XG4gIGNvbnN0IGVhZ2VybmVzcyA9IG9wdHM/LnN0cmF0ZWd5ID8/ICdpbnRlcnNlY3Rpb24tb2JzZXJ2ZXInO1xuICBpZiAodmFsKSB7XG4gICAgaWYgKGlzU2VydmVyUGxhdGZvcm0oKSkge1xuICAgICAgdXNlUnVuVGFzayh2YWwsIGVhZ2VybmVzcyk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBhc3NlcnRRcmwocXJsKTtcblxuICBpZiAoaUN0eC4kY29udGFpbmVyMiQpIHtcbiAgICBjb25zdCB0YXNrID0gbmV3IFRhc2soVGFza0ZsYWdzLlZJU0lCTEVfVEFTSywgaSwgaUN0eC4kaG9zdEVsZW1lbnQkLCBxcmwsIHVuZGVmaW5lZCwgbnVsbCk7XG4gICAgc2V0KHRhc2spO1xuICAgIHVzZVJ1blRhc2sodGFzaywgZWFnZXJuZXNzKTtcbiAgICBpZiAoIWlzU2VydmVyUGxhdGZvcm0oKSkge1xuICAgICAgcXJsLiRyZXNvbHZlTGF6eSQoaUN0eC4kaG9zdEVsZW1lbnQkIGFzIGZpeE1lQW55KTtcbiAgICAgIGlDdHguJGNvbnRhaW5lcjIkLiRzY2hlZHVsZXIkKFxuICAgICAgICB0YXNrLiRmbGFncyQgJiBUYXNrRmxhZ3MuVklTSUJMRV9UQVNLID8gQ2hvcmVUeXBlLlZJU0lCTEUgOiBDaG9yZVR5cGUuVEFTSyxcbiAgICAgICAgdGFza1xuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgdGFzayA9IG5ldyBUYXNrKFRhc2tGbGFncy5WSVNJQkxFX1RBU0ssIGksIGVsQ3R4LiRlbGVtZW50JCwgcXJsLCB1bmRlZmluZWQsIG51bGwpO1xuICAgIGNvbnN0IGNvbnRhaW5lclN0YXRlID0gaUN0eC4kcmVuZGVyQ3R4JC4kc3RhdGljJC4kY29udGFpbmVyU3RhdGUkO1xuICAgIGlmICghZWxDdHguJHRhc2tzJCkge1xuICAgICAgZWxDdHguJHRhc2tzJCA9IFtdO1xuICAgIH1cbiAgICBlbEN0eC4kdGFza3MkLnB1c2godGFzayk7XG4gICAgc2V0KHRhc2spO1xuICAgIHVzZVJ1blRhc2sodGFzaywgZWFnZXJuZXNzKTtcbiAgICBpZiAoIWlzU2VydmVyUGxhdGZvcm0oKSkge1xuICAgICAgcXJsLiRyZXNvbHZlTGF6eSQoY29udGFpbmVyU3RhdGUuJGNvbnRhaW5lckVsJCk7XG4gICAgICBub3RpZnlUYXNrKHRhc2ssIGNvbnRhaW5lclN0YXRlKTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI3VzZVZpc2libGVUYXNrXCI+XG4vLyAhIURPIE5PVCBFRElUIFRISVMgQ09NTUVOVCBESVJFQ1RMWSEhIVxuLy8gKGVkaXQgLi4vcmVhZG1lLm1kI3VzZVZpc2libGVUYXNrIGluc3RlYWQpXG4vKipcbiAqIGBgYHRzeFxuICogY29uc3QgVGltZXIgPSBjb21wb25lbnQkKCgpID0+IHtcbiAqICAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZSh7XG4gKiAgICAgY291bnQ6IDAsXG4gKiAgIH0pO1xuICpcbiAqICAgdXNlVmlzaWJsZVRhc2skKCgpID0+IHtcbiAqICAgICAvLyBPbmx5IHJ1bnMgaW4gdGhlIGNsaWVudFxuICogICAgIGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICogICAgICAgc3RvcmUuY291bnQrKztcbiAqICAgICB9LCA1MDApO1xuICogICAgIHJldHVybiAoKSA9PiB7XG4gKiAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcbiAqICAgICB9O1xuICogICB9KTtcbiAqXG4gKiAgIHJldHVybiA8ZGl2PntzdG9yZS5jb3VudH08L2Rpdj47XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuLy8gPC9kb2NzPlxuZXhwb3J0IGNvbnN0IHVzZVZpc2libGVUYXNrJCA9IC8qI19fUFVSRV9fKi8gaW1wbGljaXQkRmlyc3RBcmcodXNlVmlzaWJsZVRhc2tRcmwpO1xuXG5leHBvcnQgdHlwZSBUYXNrRGVzY3JpcHRvciA9IERlc2NyaXB0b3JCYXNlPFRhc2tGbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzb3VyY2VEZXNjcmlwdG9yPFQ+XG4gIGV4dGVuZHMgRGVzY3JpcHRvckJhc2U8UmVzb3VyY2VGbjxUPiwgUmVzb3VyY2VSZXR1cm5JbnRlcm5hbDxUPj4ge31cblxuZXhwb3J0IGludGVyZmFjZSBDb21wdXRlZERlc2NyaXB0b3I8VD4gZXh0ZW5kcyBEZXNjcmlwdG9yQmFzZTxDb21wdXRlZEZuPFQ+LCBTaWduYWw8VD4+IHt9XG5cbmV4cG9ydCB0eXBlIFN1YnNjcmliZXJIb3N0ID0gUXdpa0VsZW1lbnQ7XG5cbmV4cG9ydCB0eXBlIFN1YnNjcmliZXJFZmZlY3QgPVxuICB8IFRhc2tEZXNjcmlwdG9yXG4gIHwgUmVzb3VyY2VEZXNjcmlwdG9yPHVua25vd24+XG4gIHwgQ29tcHV0ZWREZXNjcmlwdG9yPHVua25vd24+O1xuXG5leHBvcnQgY29uc3QgaXNSZXNvdXJjZVRhc2sgPSAodGFzazogU3Vic2NyaWJlckVmZmVjdCk6IHRhc2sgaXMgUmVzb3VyY2VEZXNjcmlwdG9yPHVua25vd24+ID0+IHtcbiAgcmV0dXJuICh0YXNrLiRmbGFncyQgJiBUYXNrRmxhZ3MuUkVTT1VSQ0UpICE9PSAwO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzQ29tcHV0ZWRUYXNrID0gKHRhc2s6IFN1YnNjcmliZXJFZmZlY3QpOiB0YXNrIGlzIENvbXB1dGVkRGVzY3JpcHRvcjx1bmtub3duPiA9PiB7XG4gIHJldHVybiAodGFzay4kZmxhZ3MkICYgVGFza0ZsYWdzLkNPTVBVVEVEKSAhPT0gMDtcbn07XG5leHBvcnQgY29uc3QgcnVuU3Vic2NyaWJlciA9IGFzeW5jIChcbiAgdGFzazogU3Vic2NyaWJlckVmZmVjdCxcbiAgY29udGFpbmVyU3RhdGU6IENvbnRhaW5lclN0YXRlLFxuICByQ3R4OiBSZW5kZXJDb250ZXh0XG4pID0+IHtcbiAgYXNzZXJ0RXF1YWwoISEodGFzay4kZmxhZ3MkICYgVGFza0ZsYWdzLkRJUlRZKSwgdHJ1ZSwgJ1Jlc291cmNlIGlzIG5vdCBkaXJ0eScsIHRhc2spO1xuICBpZiAoaXNSZXNvdXJjZVRhc2sodGFzaykpIHtcbiAgICByZXR1cm4gcnVuUmVzb3VyY2UodGFzaywgY29udGFpbmVyU3RhdGUgYXMgYW55LCByQ3R4IGFzIGFueSk7XG4gIH0gZWxzZSBpZiAoaXNDb21wdXRlZFRhc2sodGFzaykpIHtcbiAgICByZXR1cm4gcnVuQ29tcHV0ZWQodGFzaywgY29udGFpbmVyU3RhdGUsIHJDdHgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBydW5UYXNrKHRhc2ssIGNvbnRhaW5lclN0YXRlLCByQ3R4KTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHJ1blN1YnNjcmliZXIyID0gYXN5bmMgKFxuICB0YXNrOiBTdWJzY3JpYmVyRWZmZWN0LFxuICBjb250YWluZXI6IENvbnRhaW5lcjIsXG4gIGhvc3Q6IEhvc3RFbGVtZW50XG4pID0+IHtcbiAgYXNzZXJ0RXF1YWwoISEodGFzay4kZmxhZ3MkICYgVGFza0ZsYWdzLkRJUlRZKSwgdHJ1ZSwgJ1Rhc2sgaXMgbm90IGRpcnR5JywgdGFzayk7XG4gIGlmIChpc1Jlc291cmNlVGFzayh0YXNrKSkge1xuICAgIHJldHVybiBydW5SZXNvdXJjZSh0YXNrLCBjb250YWluZXIsIGhvc3QpO1xuICB9IGVsc2UgaWYgKGlzQ29tcHV0ZWRUYXNrKHRhc2spKSB7XG4gICAgcmV0dXJuIHJ1bkNvbXB1dGVkMih0YXNrLCBjb250YWluZXIsIGhvc3QpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBydW5UYXNrMih0YXNrLCBjb250YWluZXIsIGhvc3QpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcnVuUmVzb3VyY2UgPSA8VD4oXG4gIHRhc2s6IFJlc291cmNlRGVzY3JpcHRvcjxUPixcbiAgY29udGFpbmVyOiBDb250YWluZXIyLFxuICBob3N0OiBIb3N0RWxlbWVudFxuKTogVmFsdWVPclByb21pc2U8dm9pZD4gPT4ge1xuICB0YXNrLiRmbGFncyQgJj0gflRhc2tGbGFncy5ESVJUWTtcbiAgY2xlYW51cFRhc2sodGFzayk7XG5cbiAgY29uc3QgaUN0eCA9IG5ld0ludm9rZUNvbnRleHQoY29udGFpbmVyLiRsb2NhbGUkLCBob3N0IGFzIGZpeE1lQW55LCB1bmRlZmluZWQsIFJlc291cmNlRXZlbnQpO1xuXG4gIGNvbnN0IHRhc2tGbiA9IHRhc2suJHFybCQuZ2V0Rm4oaUN0eCwgKCkgPT4ge1xuICAgIGNvbnRhaW5lci4kc3Vic01hbmFnZXIkLiRjbGVhclN1YiQodGFzayk7XG4gIH0pO1xuXG4gIGNvbnN0IHJlc291cmNlID0gdGFzay4kc3RhdGUkO1xuICBhc3NlcnREZWZpbmVkKFxuICAgIHJlc291cmNlLFxuICAgICd1c2VSZXNvdXJjZTogd2hlbiBydW5uaW5nIGEgcmVzb3VyY2UsIFwidGFzay5yZXNvdXJjZVwiIG11c3QgYmUgYSBkZWZpbmVkLicsXG4gICAgdGFza1xuICApO1xuXG4gIGNvbnN0IHRyYWNrOiBUcmFja2VyID0gKG9iajogKCgpID0+IHVua25vd24pIHwgb2JqZWN0IHwgU2lnbmFsLCBwcm9wPzogc3RyaW5nKSA9PiB7XG4gICAgaWYgKGlzRnVuY3Rpb24ob2JqKSkge1xuICAgICAgY29uc3QgY3R4ID0gbmV3SW52b2tlQ29udGV4dCgpO1xuICAgICAgY3R4LiRzdWJzY3JpYmVyJCA9IFtTdWJzY3JpcHRpb25UeXBlLkhPU1QsIHRhc2tdO1xuICAgICAgcmV0dXJuIGludm9rZShjdHgsIG9iaik7XG4gICAgfVxuICAgIGNvbnN0IG1hbmFnZXIgPSBnZXRTdWJzY3JpcHRpb25NYW5hZ2VyKG9iaik7XG4gICAgaWYgKG1hbmFnZXIpIHtcbiAgICAgIG1hbmFnZXIuJGFkZFN1YiQoW1N1YnNjcmlwdGlvblR5cGUuSE9TVCwgdGFza10sIHByb3ApO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2dFcnJvckFuZFN0b3AoY29kZVRvVGV4dChRRXJyb3JfdHJhY2tVc2VTdG9yZSksIG9iaik7XG4gICAgfVxuICAgIGlmIChwcm9wKSB7XG4gICAgICByZXR1cm4gKG9iaiBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPilbcHJvcF07XG4gICAgfSBlbHNlIGlmIChpc1NpZ25hbChvYmopKSB7XG4gICAgICByZXR1cm4gb2JqLnZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVFcnJvciA9IChyZWFzb246IHVua25vd24pID0+IGNvbnRhaW5lci5oYW5kbGVFcnJvcihyZWFzb24sIGhvc3QpO1xuXG4gIGNvbnN0IGNsZWFudXBzOiAoKCkgPT4gdm9pZClbXSA9IFtdO1xuICB0YXNrLiRkZXN0cm95JCA9IG5vU2VyaWFsaXplKCgpID0+IHtcbiAgICBjbGVhbnVwcy5mb3JFYWNoKChmbikgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBoYW5kbGVFcnJvcihlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGRvbmUgPSB0cnVlO1xuICB9KTtcblxuICBjb25zdCByZXNvdXJjZVRhcmdldCA9IHVud3JhcFByb3h5KHJlc291cmNlKTtcbiAgY29uc3Qgb3B0czogUmVzb3VyY2VDdHg8VD4gPSB7XG4gICAgdHJhY2ssXG4gICAgY2xlYW51cChmbikge1xuICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjbGVhbnVwcy5wdXNoKGZuKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNhY2hlKHBvbGljeSkge1xuICAgICAgbGV0IG1pbGxpc2Vjb25kcyA9IDA7XG4gICAgICBpZiAocG9saWN5ID09PSAnaW1tdXRhYmxlJykge1xuICAgICAgICBtaWxsaXNlY29uZHMgPSBJbmZpbml0eTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1pbGxpc2Vjb25kcyA9IHBvbGljeTtcbiAgICAgIH1cbiAgICAgIHJlc291cmNlLl9jYWNoZSA9IG1pbGxpc2Vjb25kcztcbiAgICB9LFxuICAgIHByZXZpb3VzOiByZXNvdXJjZVRhcmdldC5fcmVzb2x2ZWQsXG4gIH07XG5cbiAgbGV0IHJlc29sdmU6ICh2OiBUKSA9PiB2b2lkO1xuICBsZXQgcmVqZWN0OiAodjogdW5rbm93bikgPT4gdm9pZDtcbiAgbGV0IGRvbmUgPSBmYWxzZTtcblxuICBjb25zdCBzZXRTdGF0ZSA9IChyZXNvbHZlZDogYm9vbGVhbiwgdmFsdWU6IFQgfCBFcnJvcikgPT4ge1xuICAgIGlmICghZG9uZSkge1xuICAgICAgZG9uZSA9IHRydWU7XG4gICAgICBpZiAocmVzb2x2ZWQpIHtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgIHJlc291cmNlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmVzb3VyY2UuX3N0YXRlID0gJ3Jlc29sdmVkJztcbiAgICAgICAgcmVzb3VyY2UuX3Jlc29sdmVkID0gdmFsdWUgYXMgVDtcbiAgICAgICAgcmVzb3VyY2UuX2Vycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnUkVTT1VSQ0UucmVzb2x2ZWQ6ICcsIHZhbHVlKTtcblxuICAgICAgICByZXNvbHZlKHZhbHVlIGFzIFQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgIHJlc291cmNlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmVzb3VyY2UuX3N0YXRlID0gJ3JlamVjdGVkJztcbiAgICAgICAgcmVzb3VyY2UuX2Vycm9yID0gdmFsdWUgYXMgRXJyb3I7XG4gICAgICAgIHJlamVjdCh2YWx1ZSBhcyBFcnJvcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBZGQgY2xlYW51cCB0byByZXNvbHZlIHRoZSByZXNvdXJjZSBpZiB3ZSBhcmUgdHJ5aW5nIHRvIHJ1biB0aGUgc2FtZSByZXNvdXJjZSBhZ2FpbiB3aGlsZSB0aGVcbiAgICogcHJldmlvdXMgb25lIGlzIG5vdCByZXNvbHZlZCB5ZXQuIFRoZSBuZXh0IGBydW5SZXNvdXJjZWAgcnVuIHdpbGwgY2FsbCB0aGlzIGNsZWFudXBcbiAgICovXG4gIGNsZWFudXBzLnB1c2goKCkgPT4ge1xuICAgIGlmICh1bnRyYWNrKCgpID0+IHJlc291cmNlLmxvYWRpbmcpID09PSB0cnVlKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHVudHJhY2soKCkgPT4gcmVzb3VyY2UuX3Jlc29sdmVkKSBhcyBUO1xuICAgICAgc2V0U3RhdGUodHJ1ZSwgdmFsdWUpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gRXhlY3V0ZSBtdXRhdGlvbiBpbnNpZGUgZW1wdHkgaW52b2NhdGlvblxuICBpbnZva2UoaUN0eCwgKCkgPT4ge1xuICAgIC8vIGNvbnNvbGUubG9nKCdSRVNPVVJDRS5wZW5kaW5nOiAnKTtcbiAgICByZXNvdXJjZS5fc3RhdGUgPSAncGVuZGluZyc7XG4gICAgcmVzb3VyY2UubG9hZGluZyA9ICFpc1NlcnZlclBsYXRmb3JtKCk7XG4gICAgY29uc3QgcHJvbWlzZSA9IChyZXNvdXJjZS52YWx1ZSA9IG5ldyBQcm9taXNlKChyLCByZSkgPT4ge1xuICAgICAgcmVzb2x2ZSA9IHI7XG4gICAgICByZWplY3QgPSByZTtcbiAgICB9KSk7XG4gICAgcHJvbWlzZS5jYXRjaChpZ25vcmVFcnJvclRvUHJldmVudE5vZGVGcm9tQ3Jhc2hpbmcpO1xuICB9KTtcblxuICBjb25zdCBwcm9taXNlID0gc2FmZUNhbGwoXG4gICAgKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHRhc2tGbihvcHRzKSksXG4gICAgKHZhbHVlKSA9PiB7XG4gICAgICBzZXRTdGF0ZSh0cnVlLCB2YWx1ZSk7XG4gICAgfSxcbiAgICAocmVhc29uKSA9PiB7XG4gICAgICBzZXRTdGF0ZShmYWxzZSwgcmVhc29uKTtcbiAgICB9XG4gICk7XG5cbiAgY29uc3QgdGltZW91dCA9IHJlc291cmNlVGFyZ2V0Ll90aW1lb3V0O1xuICBpZiAodGltZW91dCA+IDApIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yYWNlKFtcbiAgICAgIHByb21pc2UsXG4gICAgICBkZWxheSh0aW1lb3V0KS50aGVuKCgpID0+IHtcbiAgICAgICAgaWYgKHNldFN0YXRlKGZhbHNlLCBuZXcgRXJyb3IoJ3RpbWVvdXQnKSkpIHtcbiAgICAgICAgICBjbGVhbnVwVGFzayh0YXNrKTtcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgXSk7XG4gIH1cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5jb25zdCBpZ25vcmVFcnJvclRvUHJldmVudE5vZGVGcm9tQ3Jhc2hpbmcgPSAoZXJyOiB1bmtub3duKSA9PiB7XG4gIC8vIGlnbm9yZSBlcnJvciB0byBwcmV2ZW50IG5vZGUgZnJvbSBjcmFzaGluZ1xuICAvLyBub2RlIHdpbGwgY3Jhc2ggaW4gcHJvbWlzZSBpcyByZWplY3RlZCBhbmQgbm8gb25lIGlzIGxpc3RlbmluZyB0byB0aGUgcmVqZWN0aW9uLlxufTtcblxuZXhwb3J0IGNvbnN0IHJ1blRhc2sgPSAoXG4gIHRhc2s6IFRhc2tEZXNjcmlwdG9yIHwgQ29tcHV0ZWREZXNjcmlwdG9yPHVua25vd24+LFxuICBjb250YWluZXJTdGF0ZTogQ29udGFpbmVyU3RhdGUsXG4gIHJDdHg6IFJlbmRlckNvbnRleHRcbik6IFZhbHVlT3JQcm9taXNlPHZvaWQ+ID0+IHtcbiAgdGFzay4kZmxhZ3MkICY9IH5UYXNrRmxhZ3MuRElSVFk7XG5cbiAgY2xlYW51cFRhc2sodGFzayk7XG4gIGNvbnN0IGhvc3RFbGVtZW50ID0gdGFzay4kZWwkO1xuICBjb25zdCBpQ3R4ID0gbmV3SW52b2tlQ29udGV4dChyQ3R4LiRzdGF0aWMkLiRsb2NhbGUkLCBob3N0RWxlbWVudCwgdW5kZWZpbmVkLCBUYXNrRXZlbnQpO1xuICBpQ3R4LiRyZW5kZXJDdHgkID0gckN0eDtcbiAgY29uc3QgeyAkc3Vic01hbmFnZXIkOiBzdWJzTWFuYWdlciB9ID0gY29udGFpbmVyU3RhdGU7XG4gIGNvbnN0IHRhc2tGbiA9IHRhc2suJHFybCQuZ2V0Rm4oaUN0eCwgKCkgPT4ge1xuICAgIHN1YnNNYW5hZ2VyLiRjbGVhclN1YiQodGFzayk7XG4gIH0pIGFzIFRhc2tGbjtcbiAgY29uc3QgdHJhY2s6IFRyYWNrZXIgPSAob2JqOiAoKCkgPT4gdW5rbm93bikgfCBvYmplY3QgfCBTaWduYWwsIHByb3A/OiBzdHJpbmcpID0+IHtcbiAgICBpZiAoaXNGdW5jdGlvbihvYmopKSB7XG4gICAgICBjb25zdCBjdHggPSBuZXdJbnZva2VDb250ZXh0KCk7XG4gICAgICBjdHguJHN1YnNjcmliZXIkID0gW1N1YnNjcmlwdGlvblR5cGUuSE9TVCwgdGFza107XG4gICAgICByZXR1cm4gaW52b2tlKGN0eCwgb2JqKTtcbiAgICB9XG4gICAgY29uc3QgbWFuYWdlciA9IGdldFN1YnNjcmlwdGlvbk1hbmFnZXIob2JqKTtcbiAgICBpZiAobWFuYWdlcikge1xuICAgICAgbWFuYWdlci4kYWRkU3ViJChbU3Vic2NyaXB0aW9uVHlwZS5IT1NULCB0YXNrXSwgcHJvcCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ0Vycm9yQW5kU3RvcChjb2RlVG9UZXh0KFFFcnJvcl90cmFja1VzZVN0b3JlKSwgb2JqKTtcbiAgICB9XG4gICAgaWYgKHByb3ApIHtcbiAgICAgIHJldHVybiAob2JqIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+KVtwcm9wXTtcbiAgICB9IGVsc2UgaWYgKGlzU2lnbmFsKG9iaikpIHtcbiAgICAgIHJldHVybiBvYmoudmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICB9O1xuICBjb25zdCBjbGVhbnVwczogKCgpID0+IHZvaWQpW10gPSBbXTtcbiAgdGFzay4kZGVzdHJveSQgPSBub1NlcmlhbGl6ZSgoKSA9PiB7XG4gICAgY2xlYW51cHMuZm9yRWFjaCgoZm4pID0+IGZuKCkpO1xuICB9KTtcblxuICBjb25zdCBvcHRzOiBUYXNrQ3R4ID0ge1xuICAgIHRyYWNrLFxuICAgIGNsZWFudXAoY2FsbGJhY2spIHtcbiAgICAgIGNsZWFudXBzLnB1c2goY2FsbGJhY2spO1xuICAgIH0sXG4gIH07XG4gIHJldHVybiBzYWZlQ2FsbChcbiAgICAoKSA9PiB0YXNrRm4ob3B0cyksXG4gICAgKHJldHVyblZhbHVlKSA9PiB7XG4gICAgICBpZiAoaXNGdW5jdGlvbihyZXR1cm5WYWx1ZSkpIHtcbiAgICAgICAgY2xlYW51cHMucHVzaChyZXR1cm5WYWx1ZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICAocmVhc29uKSA9PiB7XG4gICAgICBoYW5kbGVFcnJvcihyZWFzb24sIGhvc3RFbGVtZW50LCByQ3R4LiRzdGF0aWMkLiRjb250YWluZXJTdGF0ZSQpO1xuICAgIH1cbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBydW5Db21wdXRlZCA9IChcbiAgdGFzazogQ29tcHV0ZWREZXNjcmlwdG9yPHVua25vd24+LFxuICBjb250YWluZXJTdGF0ZTogQ29udGFpbmVyU3RhdGUsXG4gIHJDdHg6IFJlbmRlckNvbnRleHRcbik6IFZhbHVlT3JQcm9taXNlPHZvaWQ+ID0+IHtcbiAgYXNzZXJ0U2lnbmFsKHRhc2suJHN0YXRlJCk7XG4gIHRhc2suJGZsYWdzJCAmPSB+VGFza0ZsYWdzLkRJUlRZO1xuICBjbGVhbnVwVGFzayh0YXNrKTtcbiAgY29uc3QgaG9zdEVsZW1lbnQgPSB0YXNrLiRlbCQ7XG4gIGNvbnN0IGlDdHggPSBuZXdJbnZva2VDb250ZXh0KHJDdHguJHN0YXRpYyQuJGxvY2FsZSQsIGhvc3RFbGVtZW50LCB1bmRlZmluZWQsIENvbXB1dGVkRXZlbnQpO1xuICBpQ3R4LiRzdWJzY3JpYmVyJCA9IFtTdWJzY3JpcHRpb25UeXBlLkhPU1QsIHRhc2tdO1xuICBpQ3R4LiRyZW5kZXJDdHgkID0gckN0eDtcblxuICBjb25zdCB7ICRzdWJzTWFuYWdlciQ6IHN1YnNNYW5hZ2VyIH0gPSBjb250YWluZXJTdGF0ZTtcbiAgY29uc3QgdGFza0ZuID0gdGFzay4kcXJsJC5nZXRGbihpQ3R4LCAoKSA9PiB7XG4gICAgc3Vic01hbmFnZXIuJGNsZWFyU3ViJCh0YXNrKTtcbiAgfSkgYXMgQ29tcHV0ZWRGbjx1bmtub3duPjtcblxuICByZXR1cm4gc2FmZUNhbGwoXG4gICAgdGFza0ZuLFxuICAgIChyZXR1cm5WYWx1ZSkgPT5cbiAgICAgIHVudHJhY2soKCkgPT4ge1xuICAgICAgICBjb25zdCBzaWduYWwgPSB0YXNrLiRzdGF0ZSQhIGFzIFNpZ25hbEludGVybmFsPHVua25vd24+O1xuICAgICAgICBzaWduYWxbUU9iamVjdFNpZ25hbEZsYWdzXSAmPSB+U0lHTkFMX1VOQVNTSUdORUQ7XG4gICAgICAgIHNpZ25hbC51bnRyYWNrZWRWYWx1ZSA9IHJldHVyblZhbHVlO1xuICAgICAgICBzaWduYWxbUU9iamVjdE1hbmFnZXJTeW1ib2xdLiRub3RpZnlTdWJzJCgpO1xuICAgICAgfSksXG4gICAgKHJlYXNvbikgPT4ge1xuICAgICAgaGFuZGxlRXJyb3IocmVhc29uLCBob3N0RWxlbWVudCwgckN0eC4kc3RhdGljJC4kY29udGFpbmVyU3RhdGUkKTtcbiAgICB9XG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgY2xlYW51cFRhc2sgPSAodGFzazogU3Vic2NyaWJlckVmZmVjdCkgPT4ge1xuICBjb25zdCBkZXN0cm95ID0gdGFzay4kZGVzdHJveSQ7XG4gIGlmIChkZXN0cm95KSB7XG4gICAgdGFzay4kZGVzdHJveSQgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICBkZXN0cm95KCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2dFcnJvcihlcnIpO1xuICAgIH1cbiAgfVxufTtcblxuY29uc3QgdXNlUnVuVGFzayA9IChcbiAgdGFzazogU3Vic2NyaWJlckVmZmVjdCxcbiAgZWFnZXJuZXNzOiBWaXNpYmxlVGFza1N0cmF0ZWd5IHwgRWFnZXJuZXNzT3B0aW9ucyB8IHVuZGVmaW5lZFxuKSA9PiB7XG4gIGlmIChlYWdlcm5lc3MgPT09ICd2aXNpYmxlJyB8fCBlYWdlcm5lc3MgPT09ICdpbnRlcnNlY3Rpb24tb2JzZXJ2ZXInKSB7XG4gICAgdXNlT24oJ3F2aXNpYmxlJywgZ2V0VGFza0hhbmRsZXJRcmwodGFzaykpO1xuICB9IGVsc2UgaWYgKGVhZ2VybmVzcyA9PT0gJ2xvYWQnIHx8IGVhZ2VybmVzcyA9PT0gJ2RvY3VtZW50LXJlYWR5Jykge1xuICAgIHVzZU9uRG9jdW1lbnQoJ3Fpbml0JywgZ2V0VGFza0hhbmRsZXJRcmwodGFzaykpO1xuICB9IGVsc2UgaWYgKGVhZ2VybmVzcyA9PT0gJ2lkbGUnIHx8IGVhZ2VybmVzcyA9PT0gJ2RvY3VtZW50LWlkbGUnKSB7XG4gICAgdXNlT25Eb2N1bWVudCgncWlkbGUnLCBnZXRUYXNrSGFuZGxlclFybCh0YXNrKSk7XG4gIH1cbn07XG5cbmNvbnN0IGdldFRhc2tIYW5kbGVyUXJsID0gKHRhc2s6IFN1YnNjcmliZXJFZmZlY3QpOiBRUkw8KGV2OiBFdmVudCkgPT4gdm9pZD4gPT4ge1xuICBjb25zdCB0YXNrUXJsID0gdGFzay4kcXJsJDtcbiAgY29uc3QgdGFza0hhbmRsZXIgPSBjcmVhdGVRUkw8KGV2OiBFdmVudCkgPT4gdm9pZD4oXG4gICAgdGFza1FybC4kY2h1bmskLFxuICAgICdfaFcnLFxuICAgIF9oVyxcbiAgICBudWxsLFxuICAgIG51bGwsXG4gICAgW3Rhc2tdLFxuICAgIHRhc2tRcmwuJHN5bWJvbCRcbiAgKTtcbiAgLy8gTmVlZGVkIGZvciBjaHVuayBsb29rdXAgaW4gZGV2IG1vZGVcbiAgaWYgKHRhc2tRcmwuZGV2KSB7XG4gICAgdGFza0hhbmRsZXIuZGV2ID0gdGFza1FybC5kZXY7XG4gIH1cbiAgcmV0dXJuIHRhc2tIYW5kbGVyO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzU3Vic2NyaWJlckRlc2NyaXB0b3IgPSAob2JqOiB1bmtub3duKTogb2JqIGlzIFN1YnNjcmliZXJFZmZlY3QgPT4ge1xuICByZXR1cm4gaXNPYmplY3Qob2JqKSAmJiBvYmogaW5zdGFuY2VvZiBUYXNrO1xufTtcblxuZXhwb3J0IGNvbnN0IHNlcmlhbGl6ZVRhc2sgPSAodGFzazogU3Vic2NyaWJlckVmZmVjdCwgZ2V0T2JqSWQ6IE11c3RHZXRPYmpJRCkgPT4ge1xuICBsZXQgdmFsdWUgPSBgJHtpbnRUb1N0cih0YXNrLiRmbGFncyQpfSAke2ludFRvU3RyKHRhc2suJGluZGV4JCl9ICR7Z2V0T2JqSWQoXG4gICAgdGFzay4kcXJsJFxuICApfSAke2dldE9iaklkKHRhc2suJGVsJCl9YDtcbiAgaWYgKHRhc2suJHN0YXRlJCkge1xuICAgIHZhbHVlICs9IGAgJHtnZXRPYmpJZCh0YXNrLiRzdGF0ZSQpfWA7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuZXhwb3J0IGNvbnN0IHBhcnNlVGFzayA9IChkYXRhOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgW2ZsYWdzLCBpbmRleCwgcXJsLCBlbCwgcmVzb3VyY2VdID0gZGF0YS5zcGxpdCgnICcpO1xuICByZXR1cm4gbmV3IFRhc2soc3RyVG9JbnQoZmxhZ3MpLCBzdHJUb0ludChpbmRleCksIGVsIGFzIGFueSwgcXJsIGFzIGFueSwgcmVzb3VyY2UgYXMgYW55LCBudWxsKTtcbn07XG5cbmV4cG9ydCBjbGFzcyBUYXNrPFQgPSB1bmtub3duLCBCID0gVD4gaW1wbGVtZW50cyBEZXNjcmlwdG9yQmFzZTx1bmtub3duLCBTaWduYWw8Qj4+IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljICRmbGFncyQ6IG51bWJlcixcbiAgICBwdWJsaWMgJGluZGV4JDogbnVtYmVyLFxuICAgIHB1YmxpYyAkZWwkOiBRd2lrRWxlbWVudCxcbiAgICBwdWJsaWMgJHFybCQ6IFFSTEludGVybmFsPFQ+LFxuICAgIHB1YmxpYyAkc3RhdGUkOiBTaWduYWw8Qj4gfCB1bmRlZmluZWQsXG4gICAgcHVibGljICRkZXN0cm95JDogTm9TZXJpYWxpemU8KCkgPT4gdm9pZD4gfCBudWxsXG4gICkge31cbn1cblxuZXhwb3J0IGNvbnN0IGlzVGFzayA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgVGFzayA9PiB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFRhc2s7XG59O1xuIl19","import { cleanupTask } from '../use/use-task';\nimport { getProxyTarget } from './common';\nimport { getDomListeners } from './listeners';\nimport { seal } from '../util/qdev';\nimport { directGetAttribute } from '../render/fast-calls';\nimport { assertQwikElement } from '../error/assert';\nimport { ELEMENT_ID, ELEMENT_PROPS, ELEMENT_SEQ, OnRenderProp, QScopedStyle, } from '../util/markers';\nimport { createPropsState, createProxy, setObjectFlags } from './store';\nimport { _CONST_PROPS, Q_CTX, QObjectImmutable } from './constants';\nimport { isElement } from '../util/element';\nexport const HOST_FLAG_DIRTY = 1 << 0;\nexport const HOST_FLAG_NEED_ATTACH_LISTENER = 1 << 1;\nexport const HOST_FLAG_MOUNTED = 1 << 2;\nexport const HOST_FLAG_DYNAMIC = 1 << 3;\nexport const HOST_REMOVED = 1 << 4;\nexport const tryGetContext = (element) => {\n    return element[Q_CTX];\n};\nexport const getContext = (el, containerState) => {\n    assertQwikElement(el);\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        return ctx;\n    }\n    const elCtx = createContext(el);\n    const elementID = directGetAttribute(el, ELEMENT_ID);\n    if (elementID) {\n        const pauseCtx = containerState.$pauseCtx$;\n        elCtx.$id$ = elementID;\n        if (pauseCtx) {\n            const { getObject, meta, refs } = pauseCtx;\n            if (isElement(el)) {\n                // regular elements have listeners;\n                const refMap = refs[elementID];\n                if (refMap) {\n                    elCtx.$refMap$ = refMap.split(' ').map(getObject);\n                    elCtx.li = getDomListeners(elCtx, containerState.$containerEl$);\n                }\n            }\n            else {\n                // Virtual elements are Components\n                const styleIds = el.getAttribute(QScopedStyle);\n                elCtx.$scopeIds$ = styleIds ? styleIds.split('|') : null;\n                const ctxMeta = meta[elementID];\n                if (ctxMeta) {\n                    const seq = ctxMeta.s;\n                    const host = ctxMeta.h;\n                    const contexts = ctxMeta.c;\n                    const tasks = ctxMeta.w;\n                    if (seq) {\n                        elCtx.$seq$ = seq.split(' ').map(getObject);\n                    }\n                    if (tasks) {\n                        elCtx.$tasks$ = tasks.split(' ').map(getObject);\n                    }\n                    if (contexts) {\n                        elCtx.$contexts$ = new Map();\n                        for (const part of contexts.split(' ')) {\n                            const [key, value] = part.split('=');\n                            elCtx.$contexts$.set(key, getObject(value));\n                        }\n                    }\n                    // Restore sequence scoping\n                    if (host) {\n                        const [renderQrl, props] = host.split(' ');\n                        elCtx.$flags$ = HOST_FLAG_MOUNTED;\n                        if (renderQrl) {\n                            elCtx.$componentQrl$ = getObject(renderQrl);\n                        }\n                        if (props) {\n                            const propsObj = getObject(props);\n                            elCtx.$props$ = propsObj;\n                            setObjectFlags(propsObj, QObjectImmutable);\n                            propsObj[_CONST_PROPS] = getImmutableFromProps(propsObj);\n                        }\n                        else {\n                            elCtx.$props$ = createProxy(createPropsState(), containerState);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    const onRenderProp = directGetAttribute(el, OnRenderProp);\n    if (onRenderProp) {\n        const getObject = containerState.$pauseCtx$.getObject;\n        elCtx.$componentQrl$ = getObject(onRenderProp);\n        const propId = directGetAttribute(el, ELEMENT_PROPS);\n        propId && (elCtx.$props$ = getObject(propId));\n        const seq = directGetAttribute(el, ELEMENT_SEQ);\n        seq && (elCtx.$seq$ = getObject(seq));\n    }\n    return elCtx;\n};\nconst getImmutableFromProps = (props) => {\n    const immutable = {};\n    const target = getProxyTarget(props);\n    for (const key in target) {\n        if (key.startsWith('_IMMUTABLE_PREFIX')) {\n            immutable[key.slice('_IMMUTABLE_PREFIX'.length)] = target[key];\n        }\n    }\n    return immutable;\n};\nexport const createContext = (element) => {\n    const ctx = {\n        $flags$: 0,\n        $id$: '',\n        $element$: element,\n        $refMap$: [],\n        li: [],\n        $tasks$: null,\n        $seq$: null,\n        $slots$: null,\n        $scopeIds$: null,\n        $appendStyles$: null,\n        $props$: null,\n        $vdom$: null,\n        $componentQrl$: null,\n        $contexts$: null,\n        $dynamicSlots$: null,\n        $parentCtx$: undefined,\n        $realParentCtx$: undefined,\n    };\n    seal(ctx);\n    element[Q_CTX] = ctx;\n    return ctx;\n};\nexport const cleanupContext = (elCtx, subsManager) => {\n    elCtx.$tasks$?.forEach((task) => {\n        subsManager.$clearSub$(task);\n        cleanupTask(task);\n    });\n    elCtx.$componentQrl$ = null;\n    elCtx.$seq$ = null;\n    elCtx.$tasks$ = null;\n};\n//# sourceMappingURL=data:application/json;base64,","import { tryGetInvokeContext } from './use-core';\nlet _locale = undefined;\n/**\n * Retrieve the current locale.\n *\n * If no current locale and there is no `defaultLocale` the function throws an error.\n *\n * @returns The locale.\n * @internal\n */\nexport function getLocale(defaultLocale) {\n    if (_locale === undefined) {\n        const ctx = tryGetInvokeContext();\n        if (ctx && ctx.$locale$) {\n            return ctx.$locale$;\n        }\n        if (defaultLocale !== undefined) {\n            return defaultLocale;\n        }\n        throw new Error('Reading `locale` outside of context.');\n    }\n    return _locale;\n}\n/**\n * Override the `getLocale` with `lang` within the `fn` execution.\n *\n * @internal\n */\nexport function withLocale(locale, fn) {\n    const previousLang = _locale;\n    try {\n        _locale = locale;\n        return fn();\n    }\n    finally {\n        _locale = previousLang;\n    }\n}\n/**\n * Globally set a lang.\n *\n * This can be used only in browser. Server execution requires that each request could potentially\n * be a different lang, therefore setting a global lang would produce incorrect responses.\n *\n * @param lang\n */\nexport function setLocale(locale) {\n    _locale = locale;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWxvY2FsZS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLWxvY2FsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFakQsSUFBSSxPQUFPLEdBQXVCLFNBQVMsQ0FBQztBQUU1Qzs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFVLFNBQVMsQ0FBQyxhQUFzQjtJQUM5QyxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUUsQ0FBQztRQUMxQixNQUFNLEdBQUcsR0FBRyxtQkFBbUIsRUFBRSxDQUFDO1FBQ2xDLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN4QixPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUM7UUFDdEIsQ0FBQztRQUNELElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQ2hDLE9BQU8sYUFBYSxDQUFDO1FBQ3ZCLENBQUM7UUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUNELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FBSSxNQUFjLEVBQUUsRUFBVztJQUN2RCxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUM7SUFDN0IsSUFBSSxDQUFDO1FBQ0gsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUNqQixPQUFPLEVBQUUsRUFBRSxDQUFDO0lBQ2QsQ0FBQztZQUFTLENBQUM7UUFDVCxPQUFPLEdBQUcsWUFBWSxDQUFDO0lBQ3pCLENBQUM7QUFDSCxDQUFDO0FBRUQ7Ozs7Ozs7R0FPRztBQUNILE1BQU0sVUFBVSxTQUFTLENBQUMsTUFBYztJQUN0QyxPQUFPLEdBQUcsTUFBTSxDQUFDO0FBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0cnlHZXRJbnZva2VDb250ZXh0IH0gZnJvbSAnLi91c2UtY29yZSc7XG5cbmxldCBfbG9jYWxlOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGN1cnJlbnQgbG9jYWxlLlxuICpcbiAqIElmIG5vIGN1cnJlbnQgbG9jYWxlIGFuZCB0aGVyZSBpcyBubyBgZGVmYXVsdExvY2FsZWAgdGhlIGZ1bmN0aW9uIHRocm93cyBhbiBlcnJvci5cbiAqXG4gKiBAcmV0dXJucyBUaGUgbG9jYWxlLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhbGUoZGVmYXVsdExvY2FsZT86IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmIChfbG9jYWxlID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBjdHggPSB0cnlHZXRJbnZva2VDb250ZXh0KCk7XG4gICAgaWYgKGN0eCAmJiBjdHguJGxvY2FsZSQpIHtcbiAgICAgIHJldHVybiBjdHguJGxvY2FsZSQ7XG4gICAgfVxuICAgIGlmIChkZWZhdWx0TG9jYWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0TG9jYWxlO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlYWRpbmcgYGxvY2FsZWAgb3V0c2lkZSBvZiBjb250ZXh0LicpO1xuICB9XG4gIHJldHVybiBfbG9jYWxlO1xufVxuXG4vKipcbiAqIE92ZXJyaWRlIHRoZSBgZ2V0TG9jYWxlYCB3aXRoIGBsYW5nYCB3aXRoaW4gdGhlIGBmbmAgZXhlY3V0aW9uLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aExvY2FsZTxUPihsb2NhbGU6IHN0cmluZywgZm46ICgpID0+IFQpOiBUIHtcbiAgY29uc3QgcHJldmlvdXNMYW5nID0gX2xvY2FsZTtcbiAgdHJ5IHtcbiAgICBfbG9jYWxlID0gbG9jYWxlO1xuICAgIHJldHVybiBmbigpO1xuICB9IGZpbmFsbHkge1xuICAgIF9sb2NhbGUgPSBwcmV2aW91c0xhbmc7XG4gIH1cbn1cblxuLyoqXG4gKiBHbG9iYWxseSBzZXQgYSBsYW5nLlxuICpcbiAqIFRoaXMgY2FuIGJlIHVzZWQgb25seSBpbiBicm93c2VyLiBTZXJ2ZXIgZXhlY3V0aW9uIHJlcXVpcmVzIHRoYXQgZWFjaCByZXF1ZXN0IGNvdWxkIHBvdGVudGlhbGx5XG4gKiBiZSBhIGRpZmZlcmVudCBsYW5nLCB0aGVyZWZvcmUgc2V0dGluZyBhIGdsb2JhbCBsYW5nIHdvdWxkIHByb2R1Y2UgaW5jb3JyZWN0IHJlc3BvbnNlcy5cbiAqXG4gKiBAcGFyYW0gbGFuZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0TG9jYWxlKGxvY2FsZTogc3RyaW5nKTogdm9pZCB7XG4gIF9sb2NhbGUgPSBsb2NhbGU7XG59XG4iXX0=","import { _getContainerState } from '../container/container';\nimport { assertDefined } from '../error/assert';\nimport { qError, QError_useInvokeContext, QError_useMethodOutsideContext } from '../error/error';\nimport { getContext, HOST_FLAG_DYNAMIC } from '../state/context';\nimport { ComputedEvent, QContainerSelector, QLocaleAttr, RenderEvent, ResourceEvent, TaskEvent, } from '../util/markers';\nimport { isPromise } from '../util/promises';\nimport { seal } from '../util/qdev';\nimport { isArray } from '../util/types';\nimport { setLocale } from './use-locale';\nimport { vnode_getNode, vnode_isElementVNode, vnode_isVNode } from '../v2/client/vnode';\nimport { _getQContainerElement } from '../v2/client/dom-container';\nlet _context;\n/** @public */\nexport const tryGetInvokeContext = () => {\n    if (!_context) {\n        const context = typeof document !== 'undefined' && document && document.__q_context__;\n        if (!context) {\n            return undefined;\n        }\n        if (isArray(context)) {\n            return (document.__q_context__ = newInvokeContextFromTuple(context));\n        }\n        return context;\n    }\n    return _context;\n};\nexport const getInvokeContext = () => {\n    const ctx = tryGetInvokeContext();\n    if (!ctx) {\n        throw qError(QError_useMethodOutsideContext);\n    }\n    return ctx;\n};\nexport const useInvokeContext = () => {\n    const ctx = tryGetInvokeContext();\n    if (!ctx || ctx.$event$ !== RenderEvent) {\n        throw qError(QError_useInvokeContext);\n    }\n    assertDefined(ctx.$hostElement$, `invoke: $hostElement$ must be defined`, ctx);\n    assertDefined(ctx.$subscriber$, `invoke: $subscriber$ must be defined`, ctx);\n    return ctx;\n};\nexport const useContainerState = () => {\n    const ctx = useInvokeContext();\n    return ctx.$renderCtx$.$static$.$containerState$;\n};\nexport function useBindInvokeContext(fn) {\n    if (fn == null) {\n        return fn;\n    }\n    const ctx = getInvokeContext();\n    return function (...args) {\n        return (invokeApply).call(this, ctx, fn, args);\n    };\n}\n/** Call a function with the given InvokeContext and given arguments. */\nexport function invoke(context, fn, ...args) {\n    return invokeApply.call(this, context, fn, args);\n}\n/** Call a function with the given InvokeContext and array of arguments. */\nexport function invokeApply(context, fn, args) {\n    const previousContext = _context;\n    let returnValue;\n    try {\n        _context = context;\n        returnValue = fn.apply(this, args);\n    }\n    finally {\n        _context = previousContext;\n    }\n    return returnValue;\n}\nexport const waitAndRun = (ctx, callback) => {\n    const waitOn = ctx.$waitOn$;\n    if (waitOn.length === 0) {\n        const result = callback();\n        if (isPromise(result)) {\n            waitOn.push(result);\n        }\n    }\n    else {\n        waitOn.push(Promise.all(waitOn).then(callback));\n    }\n};\nexport const newInvokeContextFromTuple = ([element, event, url]) => {\n    const container = element.closest(QContainerSelector);\n    const locale = container?.getAttribute(QLocaleAttr) || undefined;\n    locale && setLocale(locale);\n    return newInvokeContext(locale, undefined, element, event, url);\n};\n// TODO how about putting url and locale (and event/custom?) in to a \"static\" object\nexport const newInvokeContext = (locale, hostElement, element, event, url) => {\n    // ServerRequestEvent has .locale, but it's not always defined.\n    const $locale$ = locale || (typeof event === 'object' && event && 'locale' in event ? event.locale : undefined);\n    const ctx = {\n        $url$: url,\n        $i$: 0,\n        $hostElement$: hostElement,\n        $element$: element,\n        $event$: event,\n        $qrl$: undefined,\n        $waitOn$: undefined,\n        $subscriber$: undefined,\n        $renderCtx$: undefined,\n        $locale$,\n        $container2$: undefined,\n    };\n    seal(ctx);\n    return ctx;\n};\n/**\n * Don't track listeners for this callback\n *\n * @public\n */\nexport const untrack = (fn) => {\n    return invoke(undefined, fn);\n};\nconst trackInvocation = /*#__PURE__*/ newInvokeContext(undefined, undefined, undefined, RenderEvent);\n/**\n * Mark sub as a listener for the signal\n *\n * @public\n */\nexport const trackSignal = (signal, sub) => {\n    trackInvocation.$subscriber$ = sub;\n    return invoke(trackInvocation, () => signal.value);\n};\nexport const trackRead = (readFn, sub) => {\n    trackInvocation.$subscriber$ = sub;\n    return invoke(trackInvocation, readFn);\n};\n/** @internal */\nexport const _getContextElement = () => {\n    const iCtx = tryGetInvokeContext();\n    if (iCtx) {\n        const hostElement = iCtx.$hostElement$;\n        let element;\n        if (vnode_isVNode(hostElement) && vnode_isElementVNode(hostElement)) {\n            element = vnode_getNode(hostElement);\n        }\n        else {\n            element = hostElement;\n        }\n        return element ?? iCtx.$qrl$?.$setContainer$(undefined);\n    }\n};\n/** @internal */\nexport const _getContextEvent = () => {\n    const iCtx = tryGetInvokeContext();\n    if (iCtx) {\n        return iCtx.$event$;\n    }\n};\n/** @internal */\nexport const _jsxBranch = (input) => {\n    const iCtx = tryGetInvokeContext();\n    if (iCtx && iCtx.$hostElement$ && iCtx.$renderCtx$ && !iCtx.$container2$) {\n        const hostElement = iCtx.$hostElement$;\n        const elCtx = getContext(hostElement, iCtx.$renderCtx$.$static$.$containerState$);\n        elCtx.$flags$ |= HOST_FLAG_DYNAMIC;\n    }\n    return input;\n};\n/** @internal */\nexport const _waitUntilRendered = (elm) => {\n    const containerEl = _getQContainerElement(elm);\n    if (!containerEl) {\n        return Promise.resolve();\n    }\n    const container = containerEl.qContainer;\n    return container?.renderDone ?? Promise.resolve();\n};\n//# sourceMappingURL=data:application/json;base64,","var _a;\nimport { assertEqual } from '../error/assert';\nimport { tryGetInvokeContext } from '../use/use-core';\nimport { logWarn } from '../util/log';\nimport { ComputedEvent, RenderEvent } from '../util/markers';\nimport { qDev, qSerialize } from '../util/qdev';\nimport { isObject } from '../util/types';\nimport { LocalSubscriptionManager, getProxyTarget, getSubscriptionManager, verifySerializable, } from './common';\nimport { QObjectManagerSymbol, _CONST_PROPS, _IMMUTABLE } from './constants';\n/** @internal */\nexport const _createSignal = (value, subsManager, flags, subscriptions) => {\n    const manager = subsManager.$createManager$(subscriptions);\n    const signal = new SignalImpl(value, manager, flags);\n    return signal;\n};\nexport const QObjectSignalFlags = Symbol('proxy manager');\nexport const SIGNAL_IMMUTABLE = 1 << 0;\nexport const SIGNAL_UNASSIGNED = 1 << 1;\nexport const SignalUnassignedException = Symbol('unassigned signal');\nexport class SignalBase {\n}\nexport class SignalImpl extends SignalBase {\n    constructor(v, manager, flags) {\n        super();\n        this[_a] = 0;\n        this.untrackedValue = v;\n        this[QObjectManagerSymbol] = manager;\n        this[QObjectSignalFlags] = flags;\n    }\n    // prevent accidental use as value\n    valueOf() {\n        if (qDev) {\n            throw new TypeError('Cannot coerce a Signal, use `.value` instead');\n        }\n    }\n    toString() {\n        return `[Signal ${String(this.value)}]`;\n    }\n    toJSON() {\n        return { value: this.value };\n    }\n    get value() {\n        if (this[QObjectSignalFlags] & SIGNAL_UNASSIGNED) {\n            throw SignalUnassignedException;\n        }\n        const sub = tryGetInvokeContext()?.$subscriber$;\n        if (sub) {\n            this[QObjectManagerSymbol].$addSub$(sub);\n        }\n        return this.untrackedValue;\n    }\n    set value(v) {\n        if (qDev) {\n            if (this[QObjectSignalFlags] & SIGNAL_IMMUTABLE) {\n                throw new Error('Cannot mutate immutable signal');\n            }\n            if (qSerialize) {\n                verifySerializable(v);\n            }\n            const invokeCtx = tryGetInvokeContext();\n            if (invokeCtx) {\n                if (invokeCtx.$event$ === RenderEvent) {\n                    logWarn('State mutation inside render function. Use useTask$() instead.', String(invokeCtx.$hostElement$));\n                }\n                else if (invokeCtx.$event$ === ComputedEvent) {\n                    logWarn('State mutation inside useComputed$() is an antipattern. Use useTask$() instead', String(invokeCtx.$hostElement$));\n                }\n            }\n        }\n        const manager = this[QObjectManagerSymbol];\n        const oldValue = this.untrackedValue;\n        if (manager && oldValue !== v) {\n            this.untrackedValue = v;\n            manager.$notifySubs$();\n        }\n    }\n}\n_a = QObjectSignalFlags;\nexport class SignalDerived extends SignalBase {\n    constructor($func$, $args$, $funcStr$) {\n        super();\n        this.$func$ = $func$;\n        this.$args$ = $args$;\n        this.$funcStr$ = $funcStr$;\n    }\n    get value() {\n        return this.$func$.apply(undefined, this.$args$);\n    }\n    get [QObjectManagerSymbol]() {\n        const args = this.$args$;\n        if (args?.length >= 2 && typeof args[0] === 'object' && typeof args[1] === 'string') {\n            const subMgr = getSubscriptionManager(args[0]);\n            if (subMgr) {\n                return new DerivedSubscriptionManager(subMgr, args[1]);\n            }\n        }\n        return undefined;\n    }\n}\nconst notImplemented = () => {\n    throw new Error();\n};\nclass DerivedSubscriptionManager {\n    constructor($delegate$, $prop$) {\n        this.$delegate$ = $delegate$;\n        this.$prop$ = $prop$;\n        this.$addSubs$ = notImplemented;\n        this.$addToGroup$ = notImplemented;\n        this.$unsubGroup$ = notImplemented;\n        this.$unsubEntry$ = notImplemented;\n        this.$notifySubs$ = notImplemented;\n    }\n    $addSub$(sub, key) {\n        this.$delegate$.$addSub$(sub, this.$prop$);\n    }\n}\nexport class SignalWrapper extends SignalBase {\n    constructor(ref, prop) {\n        super();\n        this.ref = ref;\n        this.prop = prop;\n    }\n    get [QObjectManagerSymbol]() {\n        return getSubscriptionManager(this.ref);\n    }\n    get value() {\n        return this.ref[this.prop];\n    }\n    set value(value) {\n        this.ref[this.prop] = value;\n    }\n}\n/**\n * Checks if a given object is a `Signal`.\n *\n * @param obj - The object to check if `Signal`.\n * @returns Boolean - True if the object is a `Signal`.\n * @public\n */\nexport const isSignal = (obj) => {\n    return obj instanceof SignalBase;\n};\nconst getProp = (obj, prop) => obj[prop];\n/** @internal */\nexport const _wrapProp = (obj, prop = 'value') => {\n    if (!isObject(obj)) {\n        return obj[prop];\n    }\n    if (isSignal(obj)) {\n        assertEqual(prop, 'value', 'Left side is a signal, prop must be value');\n        return new SignalDerived(getProp, [obj, prop]);\n    }\n    if (_CONST_PROPS in obj) {\n        const constProps = obj[_CONST_PROPS];\n        if (constProps && prop in constProps) {\n            // Const props don't need wrapping\n            return constProps[prop];\n        }\n    }\n    else {\n        const target = getProxyTarget(obj);\n        if (target) {\n            const signal = target[prop];\n            return isSignal(signal) ? signal : new SignalDerived(getProp, [obj, prop]);\n        }\n    }\n    // We need to forward the access to the original object\n    return new SignalDerived(getProp, [obj, prop]);\n};\n/** @internal @deprecated v1 compat */\nexport const _wrapSignal = (obj, prop) => {\n    const r = _wrapProp(obj, prop);\n    if (r === _IMMUTABLE) {\n        return obj[prop];\n    }\n    return r;\n};\n//# sourceMappingURL=data:application/json;base64,","import { qError, QError_invalidRefValue } from '../error/error';\nimport { seal } from '../util/qdev';\nimport { isFunction } from '../util/types';\nimport { fromKebabToCamelCase } from '../util/case';\nimport { QContainerAttr } from '../util/markers';\nimport { isElement } from '../util/element';\nimport { createSubscriptionManager } from '../state/common';\nimport { isSignal } from '../state/signal';\nimport { directGetAttribute } from '../render/fast-calls';\nimport { isServerPlatform } from '../platform/platform';\nconst CONTAINER_STATE = Symbol('ContainerState');\n/** @internal */\nexport const _getContainerState = (containerEl) => {\n    let state = containerEl[CONTAINER_STATE];\n    if (!state) {\n        containerEl[CONTAINER_STATE] = state = createContainerState(containerEl, directGetAttribute(containerEl, 'q:base') ?? '/');\n    }\n    return state;\n};\nexport const createContainerState = (containerEl, base) => {\n    const containerAttributes = {};\n    if (containerEl) {\n        const attrs = containerEl.attributes;\n        if (attrs) {\n            for (let index = 0; index < attrs.length; index++) {\n                const attr = attrs[index];\n                containerAttributes[attr.name] = attr.value;\n            }\n        }\n    }\n    // @ts-expect-error - v1 code missing StoreTracker\n    const containerState = {\n        $containerEl$: containerEl,\n        $elementIndex$: 0,\n        $styleMoved$: false,\n        $proxyMap$: new WeakMap(),\n        $opsNext$: new Set(),\n        $taskNext$: new Set(),\n        $taskStaging$: new Set(),\n        $hostsNext$: new Set(),\n        $hostsStaging$: new Set(),\n        $styleIds$: new Set(),\n        $events$: new Set(),\n        $serverData$: { containerAttributes },\n        $base$: base,\n        $renderPromise$: undefined,\n        $hostsRendering$: undefined,\n        $pauseCtx$: undefined,\n        $subsManager$: undefined,\n        $inlineFns$: new Map(),\n    };\n    containerState.$subsManager$ = createSubscriptionManager(containerState);\n    seal(containerState);\n    return containerState;\n};\nexport const removeContainerState = (containerEl) => {\n    delete containerEl[CONTAINER_STATE];\n};\nexport const setRef = (value, elm) => {\n    if (isFunction(value)) {\n        return value(elm);\n    }\n    else if (isSignal(value)) {\n        if (isServerPlatform()) {\n            // During SSR, assigning a ref should not cause reactivity because\n            // the expectation is that the ref is filled in on the client\n            return (value.untrackedValue = elm);\n        }\n        else {\n            return (value.value = elm);\n        }\n    }\n    throw qError(QError_invalidRefValue, value);\n};\nexport const SHOW_ELEMENT = 1;\nexport const SHOW_COMMENT = 128;\nexport const FILTER_ACCEPT = 1;\nexport const FILTER_REJECT = 2;\nexport const FILTER_SKIP = 3;\nexport const isContainer = (el) => {\n    return isElement(el) && el.hasAttribute(QContainerAttr);\n};\nexport const intToStr = (nu) => {\n    return nu.toString(36);\n};\nexport const strToInt = (nu) => {\n    return parseInt(nu, 36);\n};\nexport const getEventName = (attribute) => {\n    const colonPos = attribute.indexOf(':');\n    if (attribute) {\n        return fromKebabToCamelCase(attribute.slice(colonPos + 1));\n    }\n    else {\n        return attribute;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { getEventName, setRef } from '../../container/container';\nimport { assertDefined, assertElement, assertEqual, assertFail, assertQwikElement, assertTrue, } from '../../error/assert';\nimport { assertQrl, isQrl } from '../../qrl/qrl-class';\nimport { PREVENT_DEFAULT, isOnProp, setEvent } from '../../state/listeners';\nimport { isElement, isQwikElement, isText, isVirtualElement } from '../../util/element';\nimport { logWarn } from '../../util/log';\nimport { ELEMENT_ID, OnRenderProp, QSlot, QSlotRef, QSlotS, QStyle } from '../../util/markers';\nimport { isPromise, maybeThen, promiseAll, promiseAllLazy } from '../../util/promises';\nimport { qDev, qInspector, qTest } from '../../util/qdev';\nimport { dangerouslySetInnerHTML, isAriaAttribute, jsxToString, pushRenderContext, serializeClassWithHost, setQId, static_listeners, static_subtree, stringifyStyle, } from '../execute-component';\nimport { directGetAttribute, directSetAttribute } from '../fast-calls';\nimport { SKIP_RENDER_TYPE, isJSXNode } from '../jsx/jsx-runtime';\nimport { ProcessedJSXNodeImpl, getVdom, processData, renderComponent, } from './render-dom';\nimport { VIRTUAL, getRootNode, newVirtualElement, processVirtualNodes, queryAllVirtualByAttribute, } from './virtual-element';\nimport { isBrowser } from '@builder.io/qwik/build';\nimport { getProxyTarget, getSubscriptionManager, SubscriptionType, } from '../../state/common';\nimport { _CONST_PROPS } from '../../state/constants';\nimport { HOST_FLAG_DIRTY, HOST_FLAG_NEED_ATTACH_LISTENER, cleanupContext, createContext, getContext, tryGetContext, } from '../../state/context';\nimport { isSignal } from '../../state/signal';\nimport { ReadWriteProxyHandler, createPropsState, createProxy } from '../../state/store';\nimport { trackSignal } from '../../use/use-core';\nimport { EMPTY_OBJ } from '../../util/flyweight';\nimport { appendChild, createElement, createTemplate, executeDOMRender, getKey, insertAfter, insertBefore, prepend, removeNode, setAttribute, setKey, setProperty, setPropertyPost, } from './operations';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\nexport const IS_SVG = 1 << 0;\nexport const IS_HEAD = 1 << 1;\nexport const IS_IMMUTABLE = 1 << 2;\nconst CHILDREN_PLACEHOLDER = [];\nexport const smartUpdateChildren = (ctx, oldVnode, newVnode, flags) => {\n    assertQwikElement(oldVnode.$elm$);\n    const ch = newVnode.$children$;\n    if (ch.length === 1 && ch[0].$type$ === SKIP_RENDER_TYPE) {\n        newVnode.$children$ = oldVnode.$children$;\n        return;\n    }\n    const elm = oldVnode.$elm$;\n    const needsDOMRead = oldVnode.$children$ === CHILDREN_PLACEHOLDER;\n    let filter = isChildComponent;\n    if (needsDOMRead) {\n        const isHead = elm.nodeName === 'HEAD';\n        if (isHead) {\n            filter = isHeadChildren;\n            flags |= IS_HEAD;\n        }\n    }\n    const oldCh = getVnodeChildren(oldVnode, filter);\n    if (oldCh.length > 0 && ch.length > 0) {\n        return diffChildren(ctx, elm, oldCh, ch, flags);\n    }\n    else if (oldCh.length > 0 && ch.length === 0) {\n        return removeChildren(ctx.$static$, oldCh, 0, oldCh.length - 1);\n    }\n    else if (ch.length > 0) {\n        return addChildren(ctx, elm, null, ch, 0, ch.length - 1, flags);\n    }\n};\nexport const getVnodeChildren = (oldVnode, filter) => {\n    const oldCh = oldVnode.$children$;\n    const elm = oldVnode.$elm$;\n    if (oldCh === CHILDREN_PLACEHOLDER) {\n        return (oldVnode.$children$ = getChildrenVnodes(elm, filter));\n    }\n    return oldCh;\n};\nexport const diffChildren = (ctx, parentElm, oldCh, newCh, flags) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let oldKeyToIdx;\n    let idxInOld;\n    let elmToMove;\n    const results = [];\n    const staticCtx = ctx.$static$;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (oldStartVnode.$id$ === newStartVnode.$id$) {\n            results.push(diffVnode(ctx, oldStartVnode, newStartVnode, flags));\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (oldEndVnode.$id$ === newEndVnode.$id$) {\n            results.push(diffVnode(ctx, oldEndVnode, newEndVnode, flags));\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (oldStartVnode.$key$ && oldStartVnode.$id$ === newEndVnode.$id$) {\n            assertDefined(oldStartVnode.$elm$, 'oldStartVnode $elm$ must be defined');\n            assertDefined(oldEndVnode.$elm$, 'oldEndVnode $elm$ must be defined');\n            // Vnode moved right\n            results.push(diffVnode(ctx, oldStartVnode, newEndVnode, flags));\n            insertAfter(staticCtx, parentElm, oldStartVnode.$elm$, oldEndVnode.$elm$);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (oldEndVnode.$key$ && oldEndVnode.$id$ === newStartVnode.$id$) {\n            assertDefined(oldStartVnode.$elm$, 'oldStartVnode $elm$ must be defined');\n            assertDefined(oldEndVnode.$elm$, 'oldEndVnode $elm$ must be defined');\n            // Vnode moved left\n            results.push(diffVnode(ctx, oldEndVnode, newStartVnode, flags));\n            insertBefore(staticCtx, parentElm, oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            if (oldKeyToIdx === undefined) {\n                oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n            }\n            idxInOld = oldKeyToIdx[newStartVnode.$key$];\n            if (idxInOld === undefined) {\n                // New element\n                const newElm = createElm(ctx, newStartVnode, flags, results);\n                insertBefore(staticCtx, parentElm, newElm, oldStartVnode?.$elm$);\n            }\n            else {\n                elmToMove = oldCh[idxInOld];\n                if (elmToMove.$type$ !== newStartVnode.$type$) {\n                    const newElm = createElm(ctx, newStartVnode, flags, results);\n                    // TO CHECK: should we not await these promises?\n                    maybeThen(newElm, (newElm) => {\n                        insertBefore(staticCtx, parentElm, newElm, oldStartVnode?.$elm$);\n                    });\n                }\n                else {\n                    results.push(diffVnode(ctx, elmToMove, newStartVnode, flags));\n                    oldCh[idxInOld] = undefined;\n                    assertDefined(elmToMove.$elm$, 'elmToMove $elm$ must be defined');\n                    insertBefore(staticCtx, parentElm, elmToMove.$elm$, oldStartVnode.$elm$);\n                }\n            }\n            newStartVnode = newCh[++newStartIdx];\n        }\n    }\n    if (newStartIdx <= newEndIdx) {\n        const before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$;\n        results.push(addChildren(ctx, parentElm, before, newCh, newStartIdx, newEndIdx, flags));\n    }\n    let wait = promiseAll(results);\n    if (oldStartIdx <= oldEndIdx) {\n        wait = maybeThen(wait, () => {\n            removeChildren(staticCtx, oldCh, oldStartIdx, oldEndIdx);\n        });\n    }\n    return wait;\n};\nexport const getChildren = (elm, filter) => {\n    const end = isVirtualElement(elm) ? elm.close : null;\n    const nodes = [];\n    let node = elm.firstChild;\n    while ((node = processVirtualNodes(node))) {\n        if (filter(node)) {\n            nodes.push(node);\n        }\n        node = node.nextSibling;\n        if (node === end) {\n            break;\n        }\n    }\n    return nodes;\n};\n// export const getChildren = (elm: QwikElement, mode: ChildrenMode): (Node | VirtualElement)[] => {\n//   // console.warn('DOM READ: getChildren()', elm);\n//   switch (mode) {\n//     case 'root':\n//       return getCh(elm, isChildComponent);\n//     case 'head':\n//       return getCh(elm, isHeadChildren);\n//     case 'elements':\n//       return getCh(elm, isNodeElement);\n//   }\n// };\nconst getChildrenVnodes = (elm, filter) => {\n    return getChildren(elm, filter).map(getVnodeFromEl);\n};\nexport const getVnodeFromEl = (el) => {\n    if (isElement(el)) {\n        return tryGetContext(el)?.$vdom$ ?? domToVnode(el);\n    }\n    return domToVnode(el);\n};\nexport const domToVnode = (node) => {\n    if (isQwikElement(node)) {\n        const t = new ProcessedJSXNodeImpl(node.localName, {}, null, CHILDREN_PLACEHOLDER, 0, getKey(node));\n        t.$elm$ = node;\n        return t;\n    }\n    else if (isText(node)) {\n        const t = new ProcessedJSXNodeImpl(node.nodeName, EMPTY_OBJ, null, CHILDREN_PLACEHOLDER, 0, null);\n        t.$text$ = node.data;\n        t.$elm$ = node;\n        return t;\n    }\n    assertFail('Invalid node type');\n};\nconst isHeadChildren = (node) => {\n    const type = node.nodeType;\n    if (type === 1) {\n        return node.hasAttribute('q:head');\n    }\n    return type === 111;\n};\nexport const isSlotTemplate = (node) => {\n    return node.nodeName === 'Q:TEMPLATE';\n};\nexport const isChildComponent = (node) => {\n    const type = node.nodeType;\n    if (type === 3 || type === 111) {\n        return true;\n    }\n    if (type !== 1) {\n        return false;\n    }\n    const nodeName = node.nodeName;\n    if (nodeName === 'Q:TEMPLATE') {\n        return false;\n    }\n    if (nodeName === 'HEAD') {\n        return node.hasAttribute('q:head');\n    }\n    if (nodeName === 'STYLE') {\n        return !node.hasAttribute(QStyle);\n    }\n    return true;\n};\nexport const splitChildren = (input) => {\n    const output = {};\n    for (const item of input) {\n        const key = getSlotName(item);\n        const node = output[key] ??\n            (output[key] = new ProcessedJSXNodeImpl(VIRTUAL, {\n                [QSlotS]: '',\n            }, null, [], 0, key));\n        node.$children$.push(item);\n    }\n    return output;\n};\nexport const diffVnode = (rCtx, oldVnode, newVnode, flags) => {\n    assertEqual(oldVnode.$type$, newVnode.$type$, 'old and new vnodes type must be the same');\n    assertEqual(oldVnode.$key$, newVnode.$key$, 'old and new vnodes key must be the same');\n    assertEqual(oldVnode.$id$, newVnode.$id$, 'old and new vnodes key must be the same');\n    const elm = oldVnode.$elm$;\n    const tag = newVnode.$type$;\n    const staticCtx = rCtx.$static$;\n    const containerState = staticCtx.$containerState$;\n    const currentComponent = rCtx.$cmpCtx$;\n    assertDefined(elm, 'while patching element must be defined');\n    assertDefined(currentComponent, 'while patching current component must be defined');\n    newVnode.$elm$ = elm;\n    // Render text nodes\n    if (tag === '#text') {\n        staticCtx.$visited$.push(elm);\n        const signal = newVnode.$signal$;\n        if (signal) {\n            newVnode.$text$ = jsxToString(trackSignal(signal, [\n                SubscriptionType.TEXT_MUTABLE,\n                currentComponent.$element$,\n                signal,\n                elm,\n            ]));\n        }\n        setProperty(staticCtx, elm, 'data', newVnode.$text$);\n        return;\n    }\n    else if (tag === '#signal') {\n        return;\n    }\n    assertQwikElement(elm);\n    const props = newVnode.$varProps$;\n    const vnodeFlags = newVnode.$flags$;\n    const elCtx = getContext(elm, containerState);\n    if (tag !== VIRTUAL) {\n        // Track SVG state\n        let isSvg = (flags & IS_SVG) !== 0;\n        if (!isSvg && tag === 'svg') {\n            flags |= IS_SVG;\n            isSvg = true;\n        }\n        if (props !== EMPTY_OBJ) {\n            // elCtx.$vdom$ = newVnode;\n            if ((vnodeFlags & static_listeners) === 0) {\n                elCtx.li.length = 0;\n            }\n            const values = oldVnode.$varProps$;\n            newVnode.$varProps$ = values;\n            for (const prop in props) {\n                let newValue = props[prop];\n                if (prop === 'ref') {\n                    assertElement(elm);\n                    if (newValue !== undefined) {\n                        setRef(newValue, elm);\n                    }\n                    continue;\n                }\n                if (isOnProp(prop)) {\n                    const normalized = setEvent(elCtx.li, prop, newValue, containerState.$containerEl$);\n                    addQwikEvent(staticCtx, elm, normalized);\n                    continue;\n                }\n                if (isSignal(newValue)) {\n                    newValue = trackSignal(newValue, [\n                        SubscriptionType.PROP_IMMUTABLE,\n                        currentComponent.$element$,\n                        newValue,\n                        elm,\n                        prop,\n                        undefined,\n                    ]);\n                }\n                if (prop === 'class') {\n                    newValue = serializeClassWithHost(newValue, currentComponent);\n                }\n                else if (prop === 'style') {\n                    newValue = stringifyStyle(newValue);\n                }\n                if (values[prop] !== newValue) {\n                    values[prop] = newValue;\n                    smartSetProperty(staticCtx, elm, prop, newValue, isSvg);\n                }\n            }\n        }\n        if (vnodeFlags & static_subtree) {\n            return;\n        }\n        if (isSvg && tag === 'foreignObject') {\n            flags &= ~IS_SVG;\n        }\n        const setsInnerHTML = props[dangerouslySetInnerHTML] !== undefined;\n        if (setsInnerHTML) {\n            if (qDev && newVnode.$children$.length > 0) {\n                logWarn('Node can not have children when innerHTML is set');\n            }\n            return;\n        }\n        if (tag === 'textarea') {\n            return;\n        }\n        return smartUpdateChildren(rCtx, oldVnode, newVnode, flags);\n    }\n    else if (OnRenderProp in props) {\n        const cmpProps = props.props;\n        setComponentProps(containerState, elCtx, cmpProps);\n        let needsRender = !!(elCtx.$flags$ & HOST_FLAG_DIRTY);\n        // TODO: review this corner case\n        if (!needsRender && !elCtx.$componentQrl$ && !elCtx.$element$.hasAttribute(ELEMENT_ID)) {\n            setQId(rCtx, elCtx);\n            elCtx.$componentQrl$ = cmpProps[OnRenderProp];\n            assertQrl(elCtx.$componentQrl$);\n            needsRender = true;\n        }\n        // Rendering of children of component is more complicated,\n        // since the children must be projected into the rendered slots\n        // In addition, nested children might need rerendering, if that's the case\n        // we need to render the nested component, and wait before projecting the content\n        // since otherwise we don't know where the slots\n        if (needsRender) {\n            return maybeThen(renderComponent(rCtx, elCtx, flags), () => renderContentProjection(rCtx, elCtx, newVnode, flags));\n        }\n        return renderContentProjection(rCtx, elCtx, newVnode, flags);\n    }\n    else if (QSlotS in props) {\n        assertDefined(currentComponent.$slots$, 'current component slots must be a defined array');\n        currentComponent.$slots$.push(newVnode);\n        return;\n    }\n    else if (dangerouslySetInnerHTML in props) {\n        setProperty(staticCtx, elm, 'innerHTML', props[dangerouslySetInnerHTML]);\n        return;\n    }\n    if (vnodeFlags & static_subtree) {\n        return;\n    }\n    return smartUpdateChildren(rCtx, oldVnode, newVnode, flags);\n};\nconst renderContentProjection = (rCtx, hostCtx, vnode, flags) => {\n    if (vnode.$flags$ & static_subtree) {\n        return;\n    }\n    const newChildren = vnode.$children$;\n    const staticCtx = rCtx.$static$;\n    const splittedNewChildren = splitChildren(newChildren);\n    const slotMaps = getSlotMap(hostCtx);\n    // Remove content from empty slots\n    for (const key in slotMaps.slots) {\n        if (!splittedNewChildren[key]) {\n            const slotEl = slotMaps.slots[key];\n            const oldCh = getChildrenVnodes(slotEl, isChildComponent);\n            if (oldCh.length > 0) {\n                // getVdom(slotEl).$children$ = [];\n                const slotCtx = tryGetContext(slotEl);\n                if (slotCtx && slotCtx.$vdom$) {\n                    slotCtx.$vdom$.$children$ = [];\n                }\n                removeChildren(staticCtx, oldCh, 0, oldCh.length - 1);\n            }\n        }\n    }\n    // Remove empty templates\n    for (const key in slotMaps.templates) {\n        const templateEl = slotMaps.templates[key];\n        if (templateEl && !splittedNewChildren[key]) {\n            slotMaps.templates[key] = undefined;\n            removeNode(staticCtx, templateEl);\n        }\n    }\n    // Render into slots\n    return promiseAll(Object.keys(splittedNewChildren).map((slotName) => {\n        const newVdom = splittedNewChildren[slotName];\n        const slotCtx = getSlotCtx(staticCtx, slotMaps, hostCtx, slotName, rCtx.$static$.$containerState$);\n        const oldVdom = getVdom(slotCtx);\n        const slotRctx = pushRenderContext(rCtx);\n        const slotEl = slotCtx.$element$;\n        slotRctx.$slotCtx$ = slotCtx;\n        slotCtx.$vdom$ = newVdom;\n        newVdom.$elm$ = slotEl;\n        let newFlags = flags & ~IS_SVG;\n        if (slotEl.isSvg) {\n            newFlags |= IS_SVG;\n        }\n        const index = staticCtx.$addSlots$.findIndex((slot) => slot[0] === slotEl);\n        if (index >= 0) {\n            staticCtx.$addSlots$.splice(index, 1);\n        }\n        return smartUpdateChildren(slotRctx, oldVdom, newVdom, newFlags);\n    }));\n};\nconst addChildren = (ctx, parentElm, before, vnodes, startIdx, endIdx, flags) => {\n    const promises = [];\n    for (; startIdx <= endIdx; ++startIdx) {\n        const ch = vnodes[startIdx];\n        assertDefined(ch, 'render: node must be defined at index', startIdx, vnodes);\n        const elm = createElm(ctx, ch, flags, promises);\n        insertBefore(ctx.$static$, parentElm, elm, before);\n    }\n    return promiseAllLazy(promises);\n};\nconst removeChildren = (staticCtx, nodes, startIdx, endIdx) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        const ch = nodes[startIdx];\n        if (ch) {\n            assertDefined(ch.$elm$, 'vnode elm must be defined');\n            removeNode(staticCtx, ch.$elm$);\n        }\n    }\n};\nconst getSlotCtx = (staticCtx, slotMaps, hostCtx, slotName, containerState) => {\n    // If a slot is known, render children inside\n    const slotEl = slotMaps.slots[slotName];\n    if (slotEl) {\n        return getContext(slotEl, containerState);\n    }\n    // Otherwise we park the children in a template\n    const templateEl = slotMaps.templates[slotName];\n    if (templateEl) {\n        return getContext(templateEl, containerState);\n    }\n    const template = createTemplate(staticCtx.$doc$, slotName);\n    const elCtx = createContext(template);\n    elCtx.$parentCtx$ = hostCtx;\n    prepend(staticCtx, hostCtx.$element$, template);\n    slotMaps.templates[slotName] = template;\n    return elCtx;\n};\nconst getSlotName = (node) => {\n    return node.$varProps$[QSlot] ?? '';\n};\nexport const createElm = (rCtx, vnode, flags, promises) => {\n    const tag = vnode.$type$;\n    const doc = rCtx.$static$.$doc$;\n    const currentComponent = rCtx.$cmpCtx$;\n    if (tag === '#text') {\n        return (vnode.$elm$ = doc.createTextNode(vnode.$text$));\n    }\n    if (tag === '#signal') {\n        const signal = vnode.$signal$;\n        assertDefined(signal, 'expecting signal here');\n        assertDefined(currentComponent, 'signals can not be used outside components');\n        const signalValue = signal.value;\n        if (isJSXNode(signalValue)) {\n            // convert signal value to ProcessedJSXNode\n            const processedSignal = processData(signalValue);\n            if (isSignal(processedSignal)) {\n                throw new Error('NOT IMPLEMENTED: Promise');\n            }\n            else if (Array.isArray(processedSignal)) {\n                throw new Error('NOT IMPLEMENTED: Array');\n            }\n            else {\n                // crate elements\n                const elm = createElm(rCtx, processedSignal, flags, promises);\n                // create subscription\n                trackSignal(signal, flags & IS_IMMUTABLE\n                    ? [SubscriptionType.TEXT_IMMUTABLE, elm, signal, elm]\n                    : [\n                        SubscriptionType.TEXT_MUTABLE,\n                        currentComponent.$element$,\n                        signal,\n                        elm,\n                    ]);\n                // update the vNode for future diff.\n                return (vnode.$elm$ = elm);\n            }\n        }\n        else {\n            // create element\n            const elm = doc.createTextNode(vnode.$text$);\n            elm.data = vnode.$text$ = jsxToString(signalValue);\n            // create subscription\n            trackSignal(signal, flags & IS_IMMUTABLE\n                ? [SubscriptionType.TEXT_IMMUTABLE, elm, signal, elm]\n                : [\n                    SubscriptionType.TEXT_MUTABLE,\n                    currentComponent.$element$,\n                    signal,\n                    elm,\n                ]);\n            // update the vNode for future diff.\n            return (vnode.$elm$ = elm);\n        }\n    }\n    let elm;\n    let isSvg = !!(flags & IS_SVG);\n    if (!isSvg && tag === 'svg') {\n        flags |= IS_SVG;\n        isSvg = true;\n    }\n    const isVirtual = tag === VIRTUAL;\n    const props = vnode.$varProps$;\n    const staticCtx = rCtx.$static$;\n    const containerState = staticCtx.$containerState$;\n    if (isVirtual) {\n        elm = newVirtualElement(doc, isSvg);\n    }\n    else if (tag === 'head') {\n        elm = doc.head;\n        flags |= IS_HEAD;\n    }\n    else {\n        elm = createElement(doc, tag, isSvg);\n        flags &= ~IS_HEAD;\n    }\n    if (vnode.$flags$ & static_subtree) {\n        flags |= IS_IMMUTABLE;\n    }\n    vnode.$elm$ = elm;\n    const elCtx = createContext(elm);\n    if (rCtx.$slotCtx$) {\n        elCtx.$parentCtx$ = rCtx.$slotCtx$;\n        elCtx.$realParentCtx$ = rCtx.$cmpCtx$;\n    }\n    else {\n        elCtx.$parentCtx$ = rCtx.$cmpCtx$;\n    }\n    if (!isVirtual) {\n        if (qDev && qInspector) {\n            const dev = vnode.$dev$;\n            if (dev) {\n                directSetAttribute(elm, 'data-qwik-inspector', `${dev.fileName}:${dev.lineNumber}:${dev.columnNumber}`);\n            }\n        }\n        if (vnode.$constProps$) {\n            setProperties(staticCtx, elCtx, currentComponent, vnode.$constProps$, isSvg, true);\n        }\n        if (props !== EMPTY_OBJ) {\n            elCtx.$vdom$ = vnode;\n            vnode.$varProps$ = setProperties(staticCtx, elCtx, currentComponent, props, isSvg, false);\n        }\n        if (isSvg && tag === 'foreignObject') {\n            isSvg = false;\n            flags &= ~IS_SVG;\n        }\n        if (currentComponent) {\n            const scopedIds = currentComponent.$scopeIds$;\n            if (scopedIds) {\n                scopedIds.forEach((styleId) => {\n                    elm.classList.add(styleId);\n                });\n            }\n            if (currentComponent.$flags$ & HOST_FLAG_NEED_ATTACH_LISTENER) {\n                elCtx.li.push(...currentComponent.li);\n                currentComponent.$flags$ &= ~HOST_FLAG_NEED_ATTACH_LISTENER;\n            }\n        }\n        for (const listener of elCtx.li) {\n            addQwikEvent(staticCtx, elm, listener[0]);\n        }\n        const setsInnerHTML = props[dangerouslySetInnerHTML] !== undefined;\n        if (setsInnerHTML) {\n            if (qDev && vnode.$children$.length > 0) {\n                logWarn('Node can not have children when innerHTML is set');\n            }\n            return elm;\n        }\n        if (isSvg && tag === 'foreignObject') {\n            isSvg = false;\n            flags &= ~IS_SVG;\n        }\n    }\n    else if (OnRenderProp in props) {\n        const renderQRL = props[OnRenderProp];\n        assertQrl(renderQRL);\n        const target = createPropsState();\n        const manager = containerState.$subsManager$.$createManager$();\n        const proxy = new Proxy(target, new ReadWriteProxyHandler(containerState, manager));\n        const expectProps = props.props;\n        containerState.$proxyMap$.set(target, proxy);\n        elCtx.$props$ = proxy;\n        if (expectProps !== EMPTY_OBJ) {\n            const immutableMeta = (target[_CONST_PROPS] =\n                expectProps[_CONST_PROPS] ?? EMPTY_OBJ);\n            for (const prop in expectProps) {\n                if (prop !== 'children' && prop !== QSlot) {\n                    const immutableValue = immutableMeta[prop];\n                    if (isSignal(immutableValue)) {\n                        target['_IMMUTABLE_PREFIX' + prop] = immutableValue;\n                    }\n                    else {\n                        target[prop] = expectProps[prop];\n                    }\n                }\n            }\n        }\n        setQId(rCtx, elCtx);\n        // Run mount hook\n        elCtx.$componentQrl$ = renderQRL;\n        const wait = maybeThen(renderComponent(rCtx, elCtx, flags), () => {\n            let children = vnode.$children$;\n            if (children.length === 0) {\n                return;\n            }\n            if (children.length === 1 && children[0].$type$ === SKIP_RENDER_TYPE) {\n                children = children[0].$children$;\n            }\n            const slotMap = getSlotMap(elCtx);\n            const p = [];\n            const splittedNewChildren = splitChildren(children);\n            for (const slotName in splittedNewChildren) {\n                const newVnode = splittedNewChildren[slotName];\n                const slotCtx = getSlotCtx(staticCtx, slotMap, elCtx, slotName, staticCtx.$containerState$);\n                const slotRctx = pushRenderContext(rCtx);\n                const slotEl = slotCtx.$element$;\n                slotRctx.$slotCtx$ = slotCtx;\n                slotCtx.$vdom$ = newVnode;\n                newVnode.$elm$ = slotEl;\n                let newFlags = flags & ~IS_SVG;\n                if (slotEl.isSvg) {\n                    newFlags |= IS_SVG;\n                }\n                for (const node of newVnode.$children$) {\n                    const nodeElm = createElm(slotRctx, node, newFlags, p);\n                    assertDefined(node.$elm$, 'vnode elm must be defined');\n                    assertEqual(nodeElm, node.$elm$, 'vnode elm must be defined');\n                    appendChild(staticCtx, slotEl, nodeElm);\n                }\n            }\n            return promiseAllLazy(p);\n        });\n        if (isPromise(wait)) {\n            promises.push(wait);\n        }\n        return elm;\n    }\n    else if (QSlotS in props) {\n        assertDefined(currentComponent, 'slot can only be used inside component');\n        assertDefined(currentComponent.$slots$, 'current component slots must be a defined array');\n        setKey(elm, vnode.$key$);\n        directSetAttribute(elm, QSlotRef, currentComponent.$id$);\n        directSetAttribute(elm, QSlotS, '');\n        currentComponent.$slots$.push(vnode);\n        staticCtx.$addSlots$.push([elm, currentComponent.$element$]);\n    }\n    else if (dangerouslySetInnerHTML in props) {\n        setProperty(staticCtx, elm, 'innerHTML', props[dangerouslySetInnerHTML]);\n        return elm;\n    }\n    let children = vnode.$children$;\n    if (children.length === 0) {\n        return elm;\n    }\n    if (children.length === 1 && children[0].$type$ === SKIP_RENDER_TYPE) {\n        children = children[0].$children$;\n    }\n    const nodes = children.map((ch) => createElm(rCtx, ch, flags, promises));\n    for (const node of nodes) {\n        directAppendChild(elm, node);\n    }\n    return elm;\n};\nconst getSlots = (elCtx) => {\n    const slots = elCtx.$slots$;\n    if (!slots) {\n        const parent = elCtx.$element$.parentElement;\n        assertDefined(parent, 'component should be already attached to the dom');\n        return (elCtx.$slots$ = readDOMSlots(elCtx));\n    }\n    return slots;\n};\nconst getSlotMap = (elCtx) => {\n    const slotsArray = getSlots(elCtx);\n    const slots = {};\n    const templates = {};\n    const t = Array.from(elCtx.$element$.childNodes).filter(isSlotTemplate);\n    // Map virtual slots\n    for (const vnode of slotsArray) {\n        assertQwikElement(vnode.$elm$);\n        slots[vnode.$key$ ?? ''] = vnode.$elm$;\n    }\n    // Map templates\n    for (const elm of t) {\n        templates[directGetAttribute(elm, QSlot) ?? ''] = elm;\n    }\n    return { slots, templates };\n};\nconst readDOMSlots = (elCtx) => {\n    const parent = elCtx.$element$.parentElement;\n    assertDefined(parent, 'component should be already attached to the dom');\n    return queryAllVirtualByAttribute(parent, QSlotRef, elCtx.$id$).map(domToVnode);\n};\nconst handleStyle = (ctx, elm, newValue) => {\n    setProperty(ctx, elm.style, 'cssText', newValue);\n    return true;\n};\nconst handleClass = (ctx, elm, newValue) => {\n    assertTrue(newValue == null || typeof newValue === 'string', 'class newValue must be either nullish or string', newValue);\n    if (elm.namespaceURI === SVG_NS) {\n        setAttribute(ctx, elm, 'class', newValue);\n    }\n    else {\n        setProperty(ctx, elm, 'className', newValue);\n    }\n    return true;\n};\nconst checkBeforeAssign = (ctx, elm, newValue, prop) => {\n    if (prop in elm) {\n        // a selected <option> is different from a selected <option value> (innerText vs '')\n        if (elm[prop] !== newValue || (prop === 'value' && !elm.hasAttribute(prop))) {\n            if (\n            // we must set value last so that it adheres to min,max,step\n            prop === 'value' &&\n                // but we must also set options first so they are present before updating select\n                elm.tagName !== 'OPTION') {\n                setPropertyPost(ctx, elm, prop, newValue);\n            }\n            else {\n                setProperty(ctx, elm, prop, newValue);\n            }\n        }\n        return true;\n    }\n    return false;\n};\nconst forceAttribute = (ctx, elm, newValue, prop) => {\n    setAttribute(ctx, elm, prop.toLowerCase(), newValue);\n    return true;\n};\nconst setInnerHTML = (ctx, elm, newValue) => {\n    setProperty(ctx, elm, 'innerHTML', newValue);\n    return true;\n};\nconst noop = () => {\n    return true;\n};\nexport const PROP_HANDLER_MAP = {\n    style: handleStyle,\n    class: handleClass,\n    className: handleClass,\n    value: checkBeforeAssign,\n    checked: checkBeforeAssign,\n    href: forceAttribute,\n    list: forceAttribute,\n    form: forceAttribute,\n    tabIndex: forceAttribute,\n    download: forceAttribute,\n    innerHTML: noop,\n    [dangerouslySetInnerHTML]: setInnerHTML,\n    // handled by jsx\n    children: noop,\n};\nexport const smartSetProperty = (staticCtx, elm, prop, newValue, isSvg) => {\n    // aria attribute value should be rendered as string\n    if (isAriaAttribute(prop)) {\n        setAttribute(staticCtx, elm, prop, newValue != null ? String(newValue) : newValue);\n        return;\n    }\n    // Check if its an exception\n    const exception = PROP_HANDLER_MAP[prop];\n    if (exception) {\n        if (exception(staticCtx, elm, newValue, prop)) {\n            return;\n        }\n    }\n    // Check if property in prototype\n    if (!isSvg && prop in elm) {\n        setProperty(staticCtx, elm, prop, newValue);\n        return;\n    }\n    if (prop.startsWith(PREVENT_DEFAULT)) {\n        registerQwikEvent(prop.slice(PREVENT_DEFAULT.length));\n    }\n    // Fallback to render attribute\n    setAttribute(staticCtx, elm, prop, newValue);\n};\nexport const areExactQRLs = (oldValue, newValue) => {\n    if (!isQrl(oldValue) || !isQrl(newValue) || oldValue.$hash$ !== newValue.$hash$) {\n        return false;\n    }\n    const cA = oldValue.$captureRef$;\n    const cB = newValue.$captureRef$;\n    if (cA && cB) {\n        return sameArrays(cA, cB);\n    }\n    return false;\n};\nexport const sameArrays = (a1, a2) => {\n    const len = a1.length;\n    if (len !== a2.length) {\n        return false;\n    }\n    for (let i = 0; i < len; i++) {\n        if (a1[i] !== a2[i]) {\n            return false;\n        }\n    }\n    return true;\n};\nexport const setProperties = (staticCtx, elCtx, hostCtx, newProps, isSvg, immutable) => {\n    const values = {};\n    const elm = elCtx.$element$;\n    for (const prop in newProps) {\n        let newValue = newProps[prop];\n        if (prop === 'ref') {\n            assertElement(elm);\n            if (newValue !== undefined) {\n                setRef(newValue, elm);\n            }\n            continue;\n        }\n        if (isOnProp(prop)) {\n            setEvent(elCtx.li, prop, newValue, staticCtx.$containerState$.$containerEl$);\n            continue;\n        }\n        if (isSignal(newValue)) {\n            assertDefined(hostCtx, 'Signals can only be used in components');\n            newValue = trackSignal(newValue, immutable\n                ? [SubscriptionType.PROP_IMMUTABLE, elm, newValue, hostCtx.$element$, prop, undefined]\n                : [SubscriptionType.PROP_MUTABLE, hostCtx.$element$, newValue, elm, prop, undefined]);\n        }\n        if (prop === 'class') {\n            if (qDev && values.class) {\n                throw new TypeError('Can only provide one of class or className');\n            }\n            newValue = serializeClassWithHost(newValue, hostCtx);\n            if (!newValue) {\n                continue;\n            }\n        }\n        else if (prop === 'style') {\n            newValue = stringifyStyle(newValue);\n        }\n        values[prop] = newValue;\n        smartSetProperty(staticCtx, elm, prop, newValue, isSvg);\n    }\n    return values;\n};\nexport const setComponentProps = (containerState, elCtx, expectProps) => {\n    let props = elCtx.$props$;\n    if (!props) {\n        elCtx.$props$ = props = createProxy(createPropsState(), containerState);\n    }\n    if (expectProps === EMPTY_OBJ) {\n        return;\n    }\n    const manager = getSubscriptionManager(props);\n    assertDefined(manager, `props have to be a proxy, but it is not`, props);\n    const target = getProxyTarget(props);\n    assertDefined(target, `props have to be a proxy, but it is not`, props);\n    const immutableMeta = (target[_CONST_PROPS] =\n        expectProps[_CONST_PROPS] ?? EMPTY_OBJ);\n    for (const prop in expectProps) {\n        if (prop !== 'children' && prop !== QSlot && !immutableMeta[prop]) {\n            const value = expectProps[prop];\n            if (target[prop] !== value) {\n                target[prop] = value;\n                manager.$notifySubs$(prop);\n            }\n        }\n    }\n};\nexport const cleanupTree = (elm, staticCtx, subsManager, stopSlots) => {\n    subsManager.$clearSub$(elm);\n    if (isQwikElement(elm)) {\n        if (stopSlots && elm.hasAttribute(QSlotS)) {\n            staticCtx.$rmSlots$.push(elm);\n            return;\n        }\n        const ctx = tryGetContext(elm);\n        if (ctx) {\n            cleanupContext(ctx, subsManager);\n        }\n        const end = isVirtualElement(elm) ? elm.close : null;\n        let node = elm.firstChild;\n        while ((node = processVirtualNodes(node))) {\n            cleanupTree(node, staticCtx, subsManager, true);\n            node = node.nextSibling;\n            if (node === end) {\n                break;\n            }\n        }\n    }\n};\nconst restoreScroll = () => {\n    if (document.__q_scroll_restore__) {\n        document.__q_scroll_restore__();\n        document.__q_scroll_restore__ = undefined;\n    }\n};\nexport const executeContextWithScrollAndTransition = async (ctx) => {\n    // try to use `document.startViewTransition`\n    if (isBrowser && !qTest) {\n        if (document.__q_view_transition__) {\n            document.__q_view_transition__ = undefined;\n            if (document.startViewTransition) {\n                await document.startViewTransition(() => {\n                    executeDOMRender(ctx);\n                    restoreScroll();\n                }).finished;\n                return;\n            }\n        }\n    }\n    // fallback\n    executeDOMRender(ctx);\n    if (isBrowser) {\n        restoreScroll();\n    }\n};\nexport const directAppendChild = (parent, child) => {\n    if (isVirtualElement(child)) {\n        child.appendTo(parent);\n    }\n    else {\n        parent.appendChild(child);\n    }\n};\nexport const directRemoveChild = (parent, child) => {\n    if (isVirtualElement(child)) {\n        child.remove();\n    }\n    else {\n        parent.removeChild(child);\n    }\n};\nexport const directInsertAfter = (parent, child, ref) => {\n    if (isVirtualElement(child)) {\n        child.insertBeforeTo(parent, ref?.nextSibling ?? null);\n    }\n    else {\n        parent.insertBefore(child, ref?.nextSibling ?? null);\n    }\n};\nexport const directInsertBefore = (parent, child, ref) => {\n    if (isVirtualElement(child)) {\n        child.insertBeforeTo(parent, getRootNode(ref));\n    }\n    else {\n        parent.insertBefore(child, getRootNode(ref));\n    }\n};\nconst createKeyToOldIdx = (children, beginIdx, endIdx) => {\n    const map = {};\n    for (let i = beginIdx; i <= endIdx; ++i) {\n        const child = children[i];\n        const key = child.$key$;\n        if (key != null) {\n            map[key] = i;\n        }\n    }\n    return map;\n};\nexport const addQwikEvent = (staticCtx, elm, prop) => {\n    if (!prop.startsWith('on:')) {\n        setAttribute(staticCtx, elm, prop, '');\n    }\n    registerQwikEvent(prop);\n};\nexport const registerQwikEvent = (prop) => {\n    var _a;\n    if (!qTest) {\n        const eventName = getEventName(prop);\n        try {\n            // This is managed by qwik-loader\n            ((_a = globalThis).qwikevents || (_a.qwikevents = [])).push(eventName);\n        }\n        catch (err) {\n            logWarn(err);\n        }\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined } from '../../error/assert';\nimport { codeToText, QError_setProperty } from '../../error/error';\nimport { getDocument } from '../../util/dom';\nimport { isElement, isNode, isQwikElement } from '../../util/element';\nimport { logDebug, logError, logWarn } from '../../util/log';\nimport { QSlot, QSlotRef, QStyle } from '../../util/markers';\nimport { qDev } from '../../util/qdev';\nimport { directGetAttribute, directSetAttribute } from '../fast-calls';\nimport { cleanupTree, directAppendChild, directInsertAfter, directInsertBefore, directRemoveChild, getChildren, isChildComponent, isSlotTemplate, SVG_NS, } from './visitor';\nexport const setAttribute = (staticCtx, el, prop, value) => {\n    staticCtx.$operations$.push({\n        $operation$: _setAttribute,\n        $args$: [el, prop, value],\n    });\n};\nconst _setAttribute = (el, prop, value) => {\n    if (value == null || value === false) {\n        el.removeAttribute(prop);\n    }\n    else {\n        // element.setAttribute requires string. Boolean attributes automatically convert \"\" to `true`\n        const str = value === true ? '' : String(value);\n        directSetAttribute(el, prop, str);\n    }\n};\nexport const setProperty = (staticCtx, node, key, value) => {\n    staticCtx.$operations$.push({\n        $operation$: _setProperty,\n        $args$: [node, key, value],\n    });\n};\nexport const setPropertyPost = (staticCtx, node, key, value) => {\n    staticCtx.$postOperations$.push({\n        $operation$: _setProperty,\n        $args$: [node, key, value],\n    });\n};\nconst _setProperty = (node, key, value) => {\n    try {\n        node[key] = value == null ? '' : value;\n        if (value == null && isNode(node) && isElement(node)) {\n            node.removeAttribute(key);\n        }\n    }\n    catch (err) {\n        logError(codeToText(QError_setProperty), key, { node, value }, err);\n    }\n};\nexport const createElement = (doc, expectTag, isSvg) => {\n    const el = isSvg ? doc.createElementNS(SVG_NS, expectTag) : doc.createElement(expectTag);\n    return el;\n};\nexport const insertBefore = (staticCtx, parent, newChild, refChild) => {\n    staticCtx.$operations$.push({\n        $operation$: directInsertBefore,\n        $args$: [parent, newChild, refChild ? refChild : null],\n    });\n    return newChild;\n};\nexport const insertAfter = (staticCtx, parent, newChild, refChild) => {\n    staticCtx.$operations$.push({\n        $operation$: directInsertAfter,\n        $args$: [parent, newChild, refChild ? refChild : null],\n    });\n    return newChild;\n};\nexport const appendChild = (staticCtx, parent, newChild) => {\n    staticCtx.$operations$.push({\n        $operation$: directAppendChild,\n        $args$: [parent, newChild],\n    });\n    return newChild;\n};\nexport const appendHeadStyle = (staticCtx, styleTask) => {\n    staticCtx.$containerState$.$styleIds$.add(styleTask.styleId);\n    staticCtx.$postOperations$.push({\n        $operation$: _appendHeadStyle,\n        $args$: [staticCtx.$containerState$, styleTask],\n    });\n};\nexport const setClasslist = (staticCtx, elm, toRemove, toAdd) => {\n    staticCtx.$operations$.push({\n        $operation$: _setClasslist,\n        $args$: [elm, toRemove, toAdd],\n    });\n};\nexport const _setClasslist = (elm, toRemove, toAdd) => {\n    const classList = elm.classList;\n    classList.remove(...toRemove);\n    classList.add(...toAdd);\n};\nexport const _appendHeadStyle = (containerState, styleTask) => {\n    const containerEl = containerState.$containerEl$;\n    const doc = getDocument(containerEl);\n    const isDoc = doc.documentElement === containerEl;\n    const headEl = doc.head;\n    const style = doc.createElement('style');\n    if (isDoc && !headEl) {\n        logWarn('document.head is undefined');\n    }\n    directSetAttribute(style, QStyle, styleTask.styleId);\n    directSetAttribute(style, 'hidden', '');\n    style.textContent = styleTask.content;\n    if (isDoc && headEl) {\n        directAppendChild(headEl, style);\n    }\n    else {\n        directInsertBefore(containerEl, style, containerEl.firstChild);\n    }\n};\nexport const prepend = (staticCtx, parent, newChild) => {\n    staticCtx.$operations$.push({\n        $operation$: directPrepend,\n        $args$: [parent, newChild],\n    });\n};\nexport const directPrepend = (parent, newChild) => {\n    directInsertBefore(parent, newChild, parent.firstChild);\n};\nexport const removeNode = (staticCtx, el) => {\n    if (isQwikElement(el)) {\n        const subsManager = staticCtx.$containerState$.$subsManager$;\n        cleanupTree(el, staticCtx, subsManager, true);\n    }\n    staticCtx.$operations$.push({\n        $operation$: _removeNode,\n        $args$: [el, staticCtx],\n    });\n};\nconst _removeNode = (el, staticCtx) => {\n    const parent = el.parentElement;\n    if (parent) {\n        directRemoveChild(parent, el);\n    }\n    else if (qDev) {\n        logWarn('Trying to remove component already removed', el);\n    }\n};\nexport const createTemplate = (doc, slotName) => {\n    const template = createElement(doc, 'q:template', false);\n    directSetAttribute(template, QSlot, slotName);\n    directSetAttribute(template, 'hidden', '');\n    directSetAttribute(template, 'aria-hidden', 'true');\n    return template;\n};\nexport const executeDOMRender = (staticCtx) => {\n    for (const op of staticCtx.$operations$) {\n        // PERF(misko): polymorphic execution\n        op.$operation$.apply(undefined, op.$args$);\n    }\n    resolveSlotProjection(staticCtx);\n};\nexport const getKey = (el) => {\n    return directGetAttribute(el, 'q:key');\n};\nexport const setKey = (el, key) => {\n    if (key !== null) {\n        directSetAttribute(el, 'q:key', key);\n    }\n};\nexport const resolveSlotProjection = (staticCtx) => {\n    // Slots removed\n    const subsManager = staticCtx.$containerState$.$subsManager$;\n    for (const slotEl of staticCtx.$rmSlots$) {\n        const key = getKey(slotEl);\n        assertDefined(key, 'slots must have a key');\n        const slotChildren = getChildren(slotEl, isChildComponent);\n        if (slotChildren.length > 0) {\n            const sref = slotEl.getAttribute(QSlotRef);\n            const hostCtx = staticCtx.$roots$.find((r) => r.$id$ === sref);\n            if (hostCtx) {\n                const hostElm = hostCtx.$element$;\n                if (hostElm.isConnected) {\n                    const hasTemplate = getChildren(hostElm, isSlotTemplate).some((node) => directGetAttribute(node, QSlot) === key);\n                    if (!hasTemplate) {\n                        const template = createTemplate(staticCtx.$doc$, key);\n                        for (const child of slotChildren) {\n                            directAppendChild(template, child);\n                        }\n                        directInsertBefore(hostElm, template, hostElm.firstChild);\n                    }\n                    else {\n                        cleanupTree(slotEl, staticCtx, subsManager, false);\n                    }\n                }\n                else {\n                    cleanupTree(slotEl, staticCtx, subsManager, false);\n                }\n            }\n            else {\n                // If slot content cannot be relocated, it means it's content is definitely removed\n                // Cleanup needs to be executed\n                cleanupTree(slotEl, staticCtx, subsManager, false);\n            }\n        }\n    }\n    // Slots added\n    for (const [slotEl, hostElm] of staticCtx.$addSlots$) {\n        const key = getKey(slotEl);\n        assertDefined(key, 'slots must have a key');\n        const template = getChildren(hostElm, isSlotTemplate).find((node) => {\n            return node.getAttribute(QSlot) === key;\n        });\n        if (template) {\n            getChildren(template, isChildComponent).forEach((child) => {\n                directAppendChild(slotEl, child);\n            });\n            template.remove();\n        }\n    }\n};\nexport const printRenderStats = (staticCtx) => {\n    if (qDev) {\n        if (typeof window !== 'undefined' && window.document != null) {\n            const byOp = {};\n            for (const op of staticCtx.$operations$) {\n                byOp[op.$operation$.name] = (byOp[op.$operation$.name] ?? 0) + 1;\n            }\n            const stats = {\n                byOp,\n                roots: staticCtx.$roots$.map((ctx) => ctx.$element$),\n                hostElements: Array.from(staticCtx.$hostElements$),\n                operations: staticCtx.$operations$.map((v) => [v.$operation$.name, ...v.$args$]),\n            };\n            const noOps = staticCtx.$operations$.length === 0;\n            logDebug('Render stats.', noOps ? 'No operations' : '', stats);\n        }\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertEqual, assertFail, assertTrue } from '../../error/assert';\nimport { VIRTUAL_SYMBOL } from '../../state/constants';\nimport { isComment, isElement, isNodeElement, isQwikElement, isVirtualElement, } from '../../util/element';\nimport { qSerialize, seal } from '../../util/qdev';\nimport { directGetAttribute } from '../fast-calls';\nimport { createElement } from './operations';\nimport { SVG_NS, getChildren } from './visitor';\nexport const newVirtualElement = (doc, isSvg) => {\n    const open = doc.createComment('qv ');\n    const close = doc.createComment('/qv');\n    return new VirtualElementImpl(open, close, isSvg);\n};\nexport const parseVirtualAttributes = (str) => {\n    if (!str) {\n        return {};\n    }\n    const attributes = str.split(' ');\n    return Object.fromEntries(attributes.map((attr) => {\n        const index = attr.indexOf('=');\n        if (index >= 0) {\n            return [attr.slice(0, index), unescape(attr.slice(index + 1))];\n        }\n        else {\n            return [attr, ''];\n        }\n    }));\n};\nexport const serializeVirtualAttributes = (map) => {\n    const attributes = [];\n    Object.entries(map).forEach(([key, value]) => {\n        if (!value) {\n            attributes.push(`${key}`);\n        }\n        else {\n            attributes.push(`${key}=${escape(value)}`);\n        }\n    });\n    return attributes.join(' ');\n};\nconst SHOW_COMMENT = 128;\nconst FILTER_ACCEPT = 1;\nconst FILTER_REJECT = 2;\nexport const walkerVirtualByAttribute = (el, prop, value) => {\n    return el.ownerDocument.createTreeWalker(el, SHOW_COMMENT, {\n        acceptNode(c) {\n            const virtual = getVirtualElement(c);\n            if (virtual) {\n                return directGetAttribute(virtual, prop) === value ? FILTER_ACCEPT : FILTER_REJECT;\n            }\n            return FILTER_REJECT;\n        },\n    });\n};\nexport const queryVirtualByAttribute = (el, prop, value) => {\n    const walker = walkerVirtualByAttribute(el, prop, value);\n    const open = walker.firstChild();\n    if (open) {\n        return getVirtualElement(open);\n    }\n    return null;\n};\nexport const queryAllVirtualByAttribute = (el, prop, value) => {\n    const walker = walkerVirtualByAttribute(el, prop, value);\n    const pars = [];\n    let currentNode = null;\n    while ((currentNode = walker.nextNode())) {\n        pars.push(getVirtualElement(currentNode));\n    }\n    return pars;\n};\nexport const escape = (s) => {\n    return s.replace(/ /g, '+');\n};\nexport const unescape = (s) => {\n    return s.replace(/\\+/g, ' ');\n};\nexport const VIRTUAL = ':virtual';\nexport class VirtualElementImpl {\n    constructor(open, close, isSvg) {\n        this.open = open;\n        this.close = close;\n        this.isSvg = isSvg;\n        this._qc_ = null;\n        this.nodeType = 111;\n        this.localName = VIRTUAL;\n        this.nodeName = VIRTUAL;\n        throw new Error('SHOULD NOT BE CALLED');\n        const doc = (this.ownerDocument = open.ownerDocument);\n        this.$template$ = createElement(doc, 'template', false);\n        this.$attributes$ = parseVirtualAttributes(open.data.slice(3));\n        assertTrue(open.data.startsWith('qv '), 'comment is not a qv');\n        open[VIRTUAL_SYMBOL] = this;\n        close[VIRTUAL_SYMBOL] = this;\n        seal(this);\n    }\n    insertBefore(node, ref) {\n        const parent = this.parentElement;\n        if (parent) {\n            const ref2 = ref ? ref : this.close;\n            parent.insertBefore(node, ref2);\n        }\n        else {\n            this.$template$.insertBefore(node, ref);\n        }\n        return node;\n    }\n    remove() {\n        const parent = this.parentElement;\n        if (parent) {\n            const ch = this.childNodes;\n            assertEqual(this.$template$.childElementCount, 0, 'children should be empty');\n            parent.removeChild(this.open);\n            for (let i = 0; i < ch.length; i++) {\n                this.$template$.appendChild(ch[i]);\n            }\n            parent.removeChild(this.close);\n        }\n    }\n    appendChild(node) {\n        return this.insertBefore(node, null);\n    }\n    insertBeforeTo(newParent, child) {\n        // const ch = this.childNodes;\n        const ch = this.childNodes;\n        // TODO\n        // if (this.parentElement) {\n        //   console.warn('already attached');\n        // }\n        newParent.insertBefore(this.open, child);\n        for (const c of ch) {\n            newParent.insertBefore(c, child);\n        }\n        newParent.insertBefore(this.close, child);\n        assertEqual(this.$template$.childElementCount, 0, 'children should be empty');\n    }\n    appendTo(newParent) {\n        this.insertBeforeTo(newParent, null);\n    }\n    get namespaceURI() {\n        return this.parentElement?.namespaceURI ?? '';\n    }\n    removeChild(child) {\n        if (this.parentElement) {\n            this.parentElement.removeChild(child);\n        }\n        else {\n            this.$template$.removeChild(child);\n        }\n    }\n    getAttribute(prop) {\n        return this.$attributes$[prop] ?? null;\n    }\n    hasAttribute(prop) {\n        return prop in this.$attributes$;\n    }\n    setAttribute(prop, value) {\n        this.$attributes$[prop] = value;\n        if (qSerialize) {\n            this.open.data = updateComment(this.$attributes$);\n        }\n    }\n    removeAttribute(prop) {\n        delete this.$attributes$[prop];\n        if (qSerialize) {\n            this.open.data = updateComment(this.$attributes$);\n        }\n    }\n    matches(_) {\n        return false;\n    }\n    compareDocumentPosition(other) {\n        return this.open.compareDocumentPosition(other);\n    }\n    closest(query) {\n        const parent = this.parentElement;\n        if (parent) {\n            return parent.closest(query);\n        }\n        return null;\n    }\n    querySelectorAll(query) {\n        const result = [];\n        const ch = getChildren(this, isNodeElement);\n        ch.forEach((el) => {\n            if (isQwikElement(el)) {\n                if (el.matches(query)) {\n                    result.push(el);\n                }\n                result.concat(Array.from(el.querySelectorAll(query)));\n            }\n        });\n        return result;\n    }\n    querySelector(query) {\n        for (const el of this.childNodes) {\n            if (isElement(el)) {\n                if (el.matches(query)) {\n                    return el;\n                }\n                const v = el.querySelector(query);\n                if (v !== null) {\n                    return v;\n                }\n            }\n        }\n        return null;\n    }\n    get innerHTML() {\n        return '';\n    }\n    set innerHTML(html) {\n        const parent = this.parentElement;\n        if (parent) {\n            this.childNodes.forEach((a) => this.removeChild(a));\n            this.$template$.innerHTML = html;\n            parent.insertBefore(this.$template$.content, this.close);\n        }\n        else {\n            this.$template$.innerHTML = html;\n        }\n    }\n    get firstChild() {\n        if (this.parentElement) {\n            const first = this.open.nextSibling;\n            if (first === this.close) {\n                return null;\n            }\n            return first;\n        }\n        else {\n            return this.$template$.firstChild;\n        }\n    }\n    get nextSibling() {\n        return this.close.nextSibling;\n    }\n    get previousSibling() {\n        return this.open.previousSibling;\n    }\n    get childNodes() {\n        if (!this.parentElement) {\n            return Array.from(this.$template$.childNodes);\n        }\n        const nodes = [];\n        let node = this.open;\n        while ((node = node.nextSibling)) {\n            if (node === this.close) {\n                break;\n            }\n            nodes.push(node);\n        }\n        return nodes;\n    }\n    get isConnected() {\n        return this.open.isConnected;\n    }\n    /** The DOM parent element (not the vDOM parent, use findVirtual for that) */\n    get parentElement() {\n        return this.open.parentElement;\n    }\n}\nconst updateComment = (attributes) => {\n    return `qv ${serializeVirtualAttributes(attributes)}`;\n};\nexport const processVirtualNodes = (node) => {\n    if (node == null) {\n        return null;\n    }\n    if (isComment(node)) {\n        const virtual = getVirtualElement(node);\n        if (virtual) {\n            return virtual;\n        }\n    }\n    return node;\n};\nconst findClose = (open) => {\n    let node = open;\n    let stack = 1;\n    while ((node = node.nextSibling)) {\n        if (isComment(node)) {\n            // We don't want to resume virtual nodes but if they're already resumed, use them\n            const virtual = node[VIRTUAL_SYMBOL];\n            if (virtual) {\n                // This is not our existing virtual node because otherwise findClose wouldn't have been called\n                node = virtual;\n            }\n            else if (node.data.startsWith('qv ')) {\n                stack++;\n            }\n            else if (node.data === '/qv') {\n                stack--;\n                if (stack === 0) {\n                    return node;\n                }\n            }\n        }\n    }\n    assertFail('close not found');\n};\nexport const getVirtualElement = (open) => {\n    const virtual = open[VIRTUAL_SYMBOL];\n    if (virtual) {\n        return virtual;\n    }\n    if (open.data.startsWith('qv ')) {\n        const close = findClose(open);\n        return new VirtualElementImpl(open, close, open.parentElement?.namespaceURI === SVG_NS);\n    }\n    return null;\n};\nexport const getRootNode = (node) => {\n    if (node == null) {\n        return null; // TODO\n    }\n    if (isVirtualElement(node)) {\n        return node.open;\n    }\n    else {\n        return node;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined, assertElement, assertEqual } from '../error/assert';\nimport { getDocument } from '../util/dom';\nimport { isComment, isDocument, isElement, isNode, isQwikElement, isText, isVirtualElement, } from '../util/element';\nimport { logWarn } from '../util/log';\nimport { ELEMENT_ID, ELEMENT_ID_PREFIX, QContainerAttr, QScopedStyle } from '../util/markers';\nimport { qDev } from '../util/qdev';\nimport { QError_containerAlreadyPaused, QError_missingObjectId, QError_verifySerializable, qError, } from '../error/error';\nimport { serializeQRLs } from '../qrl/qrl';\nimport { processVirtualNodes, } from '../render/dom/virtual-element';\nimport { directGetAttribute, directSetAttribute } from '../render/fast-calls';\nimport { LocalSubscriptionManager, fastSkipSerialize, fastWeakSerialize, getProxyFlags, getProxyTarget, getSubscriptionManager, isConnected, serializeSubscription, } from '../state/common';\nimport { QObjectImmutable, QObjectRecursive } from '../state/constants';\nimport { HOST_FLAG_DYNAMIC, tryGetContext } from '../state/context';\nimport { groupListeners } from '../state/listeners';\nimport { SignalImpl } from '../state/signal';\nimport { serializeSStyle } from '../style/qrl-styles';\nimport { TaskFlags, cleanupTask, isResourceTask, } from '../use/use-task';\nimport { isNotNullable, isPromise } from '../util/promises';\nimport { isArray, isObject, isSerializableObject } from '../util/types';\nimport { FILTER_REJECT, FILTER_SKIP, SHOW_COMMENT, SHOW_ELEMENT, _getContainerState, intToStr, } from './container';\nimport { UNDEFINED_PREFIX, collectDeps, serializeValue } from './serializers';\nimport { isQrl } from '../qrl/qrl-class';\n// <docs markdown=\"../readme.md#pauseContainer\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#pauseContainer instead)\n// </docs>\n/** This pauses a running container in the browser. It is not used for SSR */\n// TODO(mhevery): this is a remnant when you could have paused on client. Should be deleted.\nexport const pauseContainer = async (elmOrDoc, defaultParentJSON) => {\n    const doc = getDocument(elmOrDoc);\n    const documentElement = doc.documentElement;\n    const containerEl = isDocument(elmOrDoc) ? documentElement : elmOrDoc;\n    if (directGetAttribute(containerEl, QContainerAttr) === 'paused') {\n        throw qError(QError_containerAlreadyPaused);\n    }\n    const parentJSON = defaultParentJSON ?? (containerEl === doc.documentElement ? doc.body : containerEl);\n    const containerState = _getContainerState(containerEl);\n    const contexts = getNodesInScope(containerEl, hasContext);\n    // Set container to paused\n    directSetAttribute(containerEl, QContainerAttr, 'paused');\n    // Update elements with context\n    for (const elCtx of contexts) {\n        const elm = elCtx.$element$;\n        const listeners = elCtx.li;\n        if (elCtx.$scopeIds$) {\n            const value = serializeSStyle(elCtx.$scopeIds$);\n            if (value) {\n                elm.setAttribute(QScopedStyle, value);\n            }\n        }\n        if (elCtx.$id$) {\n            elm.setAttribute(ELEMENT_ID, elCtx.$id$);\n        }\n        if (isElement(elm) && listeners.length > 0) {\n            const groups = groupListeners(listeners);\n            for (const listener of groups) {\n                elm.setAttribute(listener[0], serializeQRLs(listener[1], containerState, elCtx));\n            }\n        }\n    }\n    // Serialize data\n    const data = await _pauseFromContexts(contexts, containerState, (el) => {\n        if (isNode(el) && isText(el)) {\n            return getTextID(el, containerState);\n        }\n        return null;\n    });\n    // Emit Qwik JSON\n    const qwikJson = doc.createElement('script');\n    directSetAttribute(qwikJson, 'type', 'qwik/json');\n    qwikJson.textContent = escapeText(JSON.stringify(data.state, undefined, qDev ? '  ' : undefined));\n    parentJSON.appendChild(qwikJson);\n    // Emit event registration\n    const extraListeners = Array.from(containerState.$events$, (s) => JSON.stringify(s));\n    const eventsScript = doc.createElement('script');\n    eventsScript.textContent = `(window.qwikevents||=[]).push(${extraListeners.join(', ')})`;\n    parentJSON.appendChild(eventsScript);\n    return data;\n};\n/**\n * Grab all state needed to resume the container later.\n *\n * @internal\n */\nexport const _pauseFromContexts = async (allContexts, containerState, fallbackGetObjId, textNodes) => {\n    const collector = createCollector(containerState);\n    textNodes?.forEach((_, key) => {\n        collector.$seen$.add(key);\n    });\n    let hasListeners = false;\n    // Collect resources\n    // TODO: optimize\n    for (const ctx of allContexts) {\n        if (ctx.$tasks$) {\n            for (const task of ctx.$tasks$) {\n                if (qDev) {\n                    if (task.$flags$ & TaskFlags.DIRTY) {\n                        logWarn(`Serializing dirty task. Looks like an internal error. \nTask Symbol: ${task.$qrl$.$symbol$}\n`);\n                    }\n                    if (!isConnected(task)) {\n                        logWarn('Serializing disconnected task. Looks like an internal error.');\n                    }\n                }\n                if (isResourceTask(task)) {\n                    collector.$resources$.push(task.$state$);\n                }\n                cleanupTask(task);\n            }\n        }\n    }\n    // Find all listeners. They are the \"entries\" for resuming the container.\n    // Any lexical scope they reference must be serialized.\n    for (const ctx of allContexts) {\n        const el = ctx.$element$;\n        const ctxListeners = ctx.li;\n        for (const listener of ctxListeners) {\n            if (isElement(el)) {\n                const qrl = listener[1];\n                const captured = qrl.$captureRef$;\n                if (captured) {\n                    for (const obj of captured) {\n                        /**\n                         * Collect the lexical scope used by the listener. This also collects all the\n                         * subscribers of any reactive state in scope, since the listener might change that\n                         * state\n                         */\n                        collectValue(obj, collector, true);\n                    }\n                }\n                collector.$qrls$.push(qrl);\n                hasListeners = true;\n            }\n        }\n    }\n    // No listeners implies static page\n    if (!hasListeners) {\n        return {\n            state: {\n                refs: {},\n                ctx: {},\n                objs: [],\n                subs: [],\n            },\n            objs: [],\n            funcs: [],\n            qrls: [],\n            resources: collector.$resources$,\n            mode: 'static',\n        };\n    }\n    // Wait for remaining promises\n    let promises;\n    while ((promises = collector.$promises$).length > 0) {\n        collector.$promises$ = [];\n        await Promise.all(promises);\n    }\n    // If at this point any component can render, we need to capture Context and Props\n    const canRender = collector.$elements$.length > 0;\n    if (canRender) {\n        for (const elCtx of collector.$deferElements$) {\n            collectElementData(elCtx, collector, elCtx.$element$);\n        }\n        for (const ctx of allContexts) {\n            collectProps(ctx, collector);\n        }\n    }\n    // Wait for remaining promises\n    while ((promises = collector.$promises$).length > 0) {\n        collector.$promises$ = [];\n        await Promise.all(promises);\n    }\n    // Convert objSet to array\n    const elementToIndex = new Map();\n    const objs = Array.from(collector.$objSet$.keys());\n    const objToId = new Map();\n    const getElementID = (el) => {\n        let id = elementToIndex.get(el);\n        if (id === undefined) {\n            id = getQId(el);\n            if (!id) {\n                console.warn('Missing ID', el);\n            }\n            elementToIndex.set(el, id);\n        }\n        return id;\n    };\n    const getObjId = (obj) => {\n        let suffix = '';\n        if (isPromise(obj)) {\n            const promiseValue = getPromiseValue(obj);\n            if (!promiseValue) {\n                return null;\n            }\n            obj = promiseValue.value;\n            if (promiseValue.resolved) {\n                suffix += '~';\n            }\n            else {\n                suffix += '_';\n            }\n        }\n        if (isObject(obj)) {\n            const target = getProxyTarget(obj);\n            if (target) {\n                suffix += '!';\n                obj = target;\n            }\n            else if (isQwikElement(obj)) {\n                const elID = getElementID(obj);\n                if (elID) {\n                    return ELEMENT_ID_PREFIX + elID + suffix;\n                }\n                return null;\n            }\n        }\n        const id = objToId.get(obj);\n        if (id) {\n            return id + suffix;\n        }\n        const textId = textNodes?.get(obj);\n        if (textId) {\n            return '*' + textId;\n        }\n        if (fallbackGetObjId) {\n            return fallbackGetObjId(obj);\n        }\n        return null;\n    };\n    const mustGetObjId = (obj) => {\n        const key = getObjId(obj);\n        if (key === null) {\n            // TODO(mhevery): this is a hack as we should never get here.\n            // This as a workaround for https://github.com/QwikDev/qwik/issues/4979\n            if (isQrl(obj)) {\n                const id = intToStr(objToId.size);\n                objToId.set(obj, id);\n                return id;\n            }\n            else {\n                throw qError(QError_missingObjectId, obj);\n            }\n        }\n        return key;\n    };\n    // Compute subscriptions\n    const subsMap = new Map();\n    for (const obj of objs) {\n        const subs = getManager(obj, containerState)?.$subs$;\n        if (!subs) {\n            continue;\n        }\n        const flags = getProxyFlags(obj) ?? 0;\n        const converted = [];\n        if (flags & QObjectRecursive) {\n            converted.push(flags);\n        }\n        for (const sub of subs) {\n            const host = sub[1];\n            if (sub[0] === 0 && isNode(host) && isVirtualElement(host)) {\n                if (!collector.$elements$.includes(tryGetContext(host))) {\n                    continue;\n                }\n            }\n            converted.push(sub);\n        }\n        if (converted.length > 0) {\n            subsMap.set(obj, converted);\n        }\n    }\n    // Sort objects: the ones with subscriptions go first\n    objs.sort((a, b) => {\n        const isProxyA = subsMap.has(a) ? 0 : 1;\n        const isProxyB = subsMap.has(b) ? 0 : 1;\n        return isProxyA - isProxyB;\n    });\n    // Generate object ID by using a monotonic counter\n    let count = 0;\n    for (const obj of objs) {\n        objToId.set(obj, intToStr(count));\n        count++;\n    }\n    if (collector.$noSerialize$.length > 0) {\n        const undefinedID = objToId.get(undefined);\n        assertDefined(undefinedID, 'undefined ID must be defined');\n        for (const obj of collector.$noSerialize$) {\n            objToId.set(obj, undefinedID);\n        }\n    }\n    // Serialize object subscriptions\n    const subs = [];\n    for (const obj of objs) {\n        const value = subsMap.get(obj);\n        if (value == null) {\n            break;\n        }\n        subs.push(value\n            .map((s) => {\n            if (typeof s === 'number') {\n                return `_${s}`;\n            }\n            return serializeSubscription(s, getObjId);\n        })\n            .filter(isNotNullable));\n    }\n    assertEqual(subs.length, subsMap.size, 'missing subscriptions to serialize', subs, subsMap);\n    const convertedObjs = serializeObjects(objs, mustGetObjId, getObjId, collector, containerState);\n    const meta = {};\n    const refs = {};\n    // Write back to the dom\n    for (const ctx of allContexts) {\n        const node = ctx.$element$;\n        const elementCaptured = isVirtualElement(node) && collector.$elements$.includes(ctx);\n        const value = serializeComponentContext(ctx, getObjId, mustGetObjId, elementCaptured, canRender, refs);\n        if (value) {\n            meta[ctx.$id$] = value;\n        }\n    }\n    // Sanity check of serialized element\n    if (qDev) {\n        elementToIndex.forEach((value, el) => {\n            if (!value) {\n                logWarn('unconnected element', el.nodeName, '\\n');\n            }\n        });\n    }\n    return {\n        state: {\n            refs,\n            ctx: meta,\n            objs: convertedObjs,\n            subs,\n        },\n        objs,\n        funcs: collector.$inlinedFunctions$,\n        resources: collector.$resources$,\n        qrls: collector.$qrls$,\n        mode: canRender ? 'render' : 'listeners',\n    };\n};\nexport const mapJoin = (objects, getObjectId, sep) => {\n    let output = '';\n    for (const obj of objects) {\n        const id = getObjectId(obj);\n        if (id !== null) {\n            if (output !== '') {\n                output += sep;\n            }\n            output += id;\n        }\n    }\n    return output;\n};\nexport const getNodesInScope = (parent, predicate) => {\n    const results = [];\n    const v = predicate(parent);\n    if (v !== undefined) {\n        results.push(v);\n    }\n    const walker = parent.ownerDocument.createTreeWalker(parent, SHOW_ELEMENT | SHOW_COMMENT, {\n        acceptNode(node) {\n            if (isContainer(node)) {\n                return FILTER_REJECT;\n            }\n            const v = predicate(node);\n            if (v !== undefined) {\n                results.push(v);\n            }\n            return FILTER_SKIP;\n        },\n    });\n    while (walker.nextNode()) {\n        // do nothing\n    }\n    return results;\n};\n// Collect props proxy objects\nconst collectProps = (elCtx, collector) => {\n    const parentCtx = elCtx.$realParentCtx$ || elCtx.$parentCtx$;\n    const props = elCtx.$props$;\n    // Collect only if the parent (which changes the props) is part of the listener graph\n    if (parentCtx && props && !isEmptyObj(props) && collector.$elements$.includes(parentCtx)) {\n        const subs = getSubscriptionManager(props)?.$subs$;\n        const el = elCtx.$element$;\n        if (subs) {\n            for (const [type, host] of subs) {\n                if (type === 0) {\n                    if (host !== el) {\n                        collectSubscriptions(getSubscriptionManager(props), collector, false);\n                    }\n                    if (isNode(host)) {\n                        collectElement(host, collector);\n                    }\n                    else {\n                        collectValue(host, collector, true);\n                    }\n                }\n                else {\n                    collectValue(props, collector, false);\n                    collectSubscriptions(getSubscriptionManager(props), collector, false);\n                }\n            }\n        }\n    }\n};\nconst createCollector = (containerState) => {\n    const inlinedFunctions = [];\n    containerState.$inlineFns$.forEach((id, fnStr) => {\n        while (inlinedFunctions.length <= id) {\n            inlinedFunctions.push('');\n        }\n        inlinedFunctions[id] = fnStr;\n    });\n    return {\n        $containerState$: containerState,\n        $seen$: new Set(),\n        $objSet$: new Set(),\n        $prefetch$: 0,\n        $noSerialize$: [],\n        $inlinedFunctions$: inlinedFunctions,\n        $resources$: [],\n        $elements$: [],\n        $qrls$: [],\n        $deferElements$: [],\n        $promises$: [],\n    };\n};\nconst collectDeferElement = (el, collector) => {\n    const ctx = tryGetContext(el);\n    if (collector.$elements$.includes(ctx)) {\n        return;\n    }\n    collector.$elements$.push(ctx);\n    if (ctx.$flags$ & HOST_FLAG_DYNAMIC) {\n        collector.$prefetch$++;\n        collectElementData(ctx, collector, true);\n        collector.$prefetch$--;\n    }\n    else {\n        collector.$deferElements$.push(ctx);\n    }\n};\nconst collectElement = (el, collector) => {\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        if (collector.$elements$.includes(ctx)) {\n            return;\n        }\n        collector.$elements$.push(ctx);\n        collectElementData(ctx, collector, el);\n    }\n};\nexport const collectElementData = (elCtx, collector, dynamicCtx) => {\n    if (elCtx.$props$ && !isEmptyObj(elCtx.$props$)) {\n        collectValue(elCtx.$props$, collector, dynamicCtx);\n        collectSubscriptions(getSubscriptionManager(elCtx.$props$), collector, dynamicCtx);\n    }\n    if (elCtx.$componentQrl$) {\n        collectValue(elCtx.$componentQrl$, collector, dynamicCtx);\n    }\n    if (elCtx.$seq$) {\n        for (const obj of elCtx.$seq$) {\n            collectValue(obj, collector, dynamicCtx);\n        }\n    }\n    if (elCtx.$tasks$) {\n        const map = collector.$containerState$.$subsManager$.$groupToManagers$;\n        for (const obj of elCtx.$tasks$) {\n            if (map.has(obj)) {\n                collectValue(obj, collector, dynamicCtx);\n            }\n        }\n    }\n    if (dynamicCtx === true) {\n        collectContext(elCtx, collector);\n        if (elCtx.$dynamicSlots$) {\n            for (const slotCtx of elCtx.$dynamicSlots$) {\n                collectContext(slotCtx, collector);\n            }\n        }\n    }\n};\nconst collectContext = (elCtx, collector) => {\n    while (elCtx) {\n        if (elCtx.$contexts$) {\n            for (const obj of elCtx.$contexts$.values()) {\n                collectValue(obj, collector, true);\n            }\n        }\n        elCtx = elCtx.$parentCtx$;\n    }\n};\nexport const escapeText = (str) => {\n    return str.replace(/<(\\/?script)/gi, '\\\\x3C$1');\n};\n// Collect all the subscribers of this manager\nexport const collectSubscriptions = (manager, collector, leaks) => {\n    // if (!leaks) {\n    //   return;\n    // }\n    if (collector.$seen$.has(manager)) {\n        return;\n    }\n    collector.$seen$.add(manager);\n    const subs = manager.$subs$;\n    assertDefined(subs, 'subs must be defined');\n    for (const sub of subs) {\n        const type = sub[0];\n        if (type > 0) {\n            collectValue(sub[2], collector, leaks);\n        }\n        if (leaks === true) {\n            const host = sub[1];\n            if (isNode(host) && isVirtualElement(host)) {\n                if (sub[0] === 0) {\n                    collectDeferElement(host, collector);\n                }\n            }\n            else {\n                collectValue(host, collector, true);\n            }\n        }\n    }\n};\nconst PROMISE_VALUE = Symbol();\nconst resolvePromise = (promise) => {\n    return promise.then((value) => {\n        const v = {\n            resolved: true,\n            value,\n        };\n        promise[PROMISE_VALUE] = v;\n        return value;\n    }, (value) => {\n        const v = {\n            resolved: false,\n            value,\n        };\n        promise[PROMISE_VALUE] = v;\n        return value;\n    });\n};\nconst getPromiseValue = (promise) => {\n    return promise[PROMISE_VALUE];\n};\nexport const collectValue = (obj, collector, leaks) => {\n    if (obj != null) {\n        switch (typeof obj) {\n            case 'function':\n            case 'object': {\n                if (collector.$seen$.has(obj)) {\n                    return;\n                }\n                collector.$seen$.add(obj);\n                if (fastSkipSerialize(obj)) {\n                    collector.$objSet$.add(undefined);\n                    collector.$noSerialize$.push(obj);\n                    return;\n                }\n                /** The possibly proxied `obj` */\n                const input = obj;\n                const target = getProxyTarget(obj);\n                if (target) {\n                    // `obj` is now the non-proxied object\n                    obj = target;\n                    // NOTE: You may be tempted to add the `target` to the `seen` set,\n                    // but that would not work as it is possible for the `target` object\n                    // to already be in `seen` set if it was passed in directly, so\n                    // we can't short circuit and need to do the work.\n                    // Issue: https://github.com/QwikDev/qwik/issues/5001\n                    const mutable = (getProxyFlags(obj) & QObjectImmutable) === 0;\n                    if (leaks && mutable) {\n                        collectSubscriptions(getSubscriptionManager(input), collector, leaks);\n                    }\n                    if (fastWeakSerialize(input)) {\n                        collector.$objSet$.add(obj);\n                        return;\n                    }\n                }\n                const collected = collectDeps(obj, collector, leaks);\n                if (collected) {\n                    collector.$objSet$.add(obj);\n                    return;\n                }\n                if (isPromise(obj)) {\n                    collector.$promises$.push(resolvePromise(obj).then((value) => {\n                        collectValue(value, collector, leaks);\n                    }));\n                    return;\n                }\n                if (typeof obj === 'object') {\n                    if (isNode(obj)) {\n                        return;\n                    }\n                    if (isArray(obj)) {\n                        for (let i = 0; i < obj.length; i++) {\n                            collectValue(input[i], collector, leaks);\n                        }\n                    }\n                    else if (isSerializableObject(obj)) {\n                        for (const key in obj) {\n                            collectValue(input[key], collector, leaks);\n                        }\n                    }\n                }\n                break;\n            }\n        }\n    }\n    collector.$objSet$.add(obj);\n};\nexport const isContainer = (el) => {\n    return isElement(el) && el.hasAttribute(QContainerAttr);\n};\nconst hasContext = (el) => {\n    const node = processVirtualNodes(el);\n    if (isQwikElement(node)) {\n        const ctx = tryGetContext(node);\n        if (ctx && ctx.$id$) {\n            return ctx;\n        }\n    }\n    return undefined;\n};\nconst getManager = (obj, containerState) => {\n    if (!isObject(obj)) {\n        return undefined;\n    }\n    if (obj instanceof SignalImpl) {\n        return getSubscriptionManager(obj);\n    }\n    const proxy = containerState.$proxyMap$.get(obj);\n    if (proxy) {\n        return getSubscriptionManager(proxy);\n    }\n    return undefined;\n};\nconst getQId = (el) => {\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        return ctx.$id$;\n    }\n    return null;\n};\nconst getTextID = (node, containerState) => {\n    const prev = node.previousSibling;\n    if (prev && isComment(prev)) {\n        if (prev.data.startsWith('t=')) {\n            return ELEMENT_ID_PREFIX + prev.data.slice(2);\n        }\n    }\n    const doc = node.ownerDocument;\n    const id = intToStr(containerState.$elementIndex$++);\n    const open = doc.createComment(`t=${id}`);\n    const close = doc.createComment('');\n    const parent = node.parentElement;\n    parent.insertBefore(open, node);\n    parent.insertBefore(close, node.nextSibling);\n    return ELEMENT_ID_PREFIX + id;\n};\nconst isEmptyObj = (obj) => {\n    return Object.keys(obj).length === 0;\n};\nexport function serializeComponentContext(ctx, getObjId, mustGetObjId, elementCaptured, canRender, refs) {\n    const node = ctx.$element$;\n    const ref = ctx.$refMap$;\n    const props = ctx.$props$;\n    const contexts = ctx.$contexts$;\n    const tasks = ctx.$tasks$;\n    const renderQrl = ctx.$componentQrl$;\n    const seq = ctx.$seq$;\n    const metaValue = {};\n    assertDefined(ctx.$id$, `pause: can not generate ID for dom node`, node);\n    if (ref.length > 0) {\n        assertElement(node);\n        const value = mapJoin(ref, mustGetObjId, ' ');\n        if (value) {\n            refs[ctx.$id$] = value;\n        }\n    }\n    else if (canRender) {\n        let add = false;\n        if (elementCaptured) {\n            assertDefined(renderQrl, 'renderQrl must be defined');\n            const propsId = getObjId(props);\n            metaValue.h = mustGetObjId(renderQrl) + (propsId ? ' ' + propsId : '');\n            add = true;\n        }\n        else {\n            const propsId = getObjId(props);\n            if (propsId) {\n                metaValue.h = ' ' + propsId;\n                add = true;\n            }\n        }\n        if (tasks && tasks.length > 0) {\n            const value = mapJoin(tasks, getObjId, ' ');\n            if (value) {\n                metaValue.w = value;\n                add = true;\n            }\n        }\n        if (elementCaptured && seq && seq.length > 0) {\n            const value = mapJoin(seq, mustGetObjId, ' ');\n            metaValue.s = value;\n            add = true;\n        }\n        if (contexts) {\n            const serializedContexts = [];\n            contexts.forEach((value, key) => {\n                const id = getObjId(value);\n                if (id) {\n                    serializedContexts.push(`${key}=${id}`);\n                }\n            });\n            const value = serializedContexts.join(' ');\n            if (value) {\n                metaValue.c = value;\n                add = true;\n            }\n        }\n        if (add) {\n            return metaValue;\n        }\n    }\n}\nfunction serializeObjects(objs, mustGetObjId, getObjId, collector, containerState) {\n    return objs.map((obj) => {\n        if (obj === null) {\n            return null;\n        }\n        const typeObj = typeof obj;\n        switch (typeObj) {\n            case 'undefined':\n                return UNDEFINED_PREFIX;\n            case 'number':\n                if (!Number.isFinite(obj)) {\n                    break;\n                }\n                return obj;\n            case 'string':\n                if (obj.charCodeAt(0) < 32 /* space */) {\n                    // if strings starts with a special character let the string serializer handle it\n                    // to deal with escape sequences.\n                    break;\n                }\n                else {\n                    // Fast path of just serializing the string.\n                    return obj;\n                }\n            case 'boolean':\n                return obj;\n        }\n        const value = serializeValue(obj, mustGetObjId, collector, containerState);\n        if (value !== undefined) {\n            return value;\n        }\n        if (typeObj === 'object') {\n            if (isArray(obj)) {\n                return obj.map(mustGetObjId);\n            }\n            if (isSerializableObject(obj)) {\n                const output = {};\n                for (const key in obj) {\n                    if (getObjId) {\n                        const id = getObjId(obj[key]);\n                        if (id !== null) {\n                            output[key] = id;\n                        }\n                    }\n                    else {\n                        output[key] = mustGetObjId(obj[key]);\n                    }\n                }\n                return output;\n            }\n        }\n        throw qError(QError_verifySerializable, obj);\n    });\n}\n//# sourceMappingURL=data:application/json;base64,","import { EMPTY_ARRAY } from '../util/flyweight';\nimport { assertQrl, createQRL, emitEvent, getSymbolHash, isSyncQrl, } from './qrl-class';\nimport { isFunction, isString } from '../util/types';\nimport { qError, QError_dynamicImportFailed, QError_qrlMissingChunk, QError_unknownTypeArgument, } from '../error/error';\nimport { qRuntimeQrl, qSerialize } from '../util/qdev';\nimport { getPlatform } from '../platform/platform';\nimport { assertDefined, assertTrue, assertElement } from '../error/assert';\nimport { mapJoin } from '../container/pause';\nimport { throwErrorAndStop } from '../util/log';\n// https://regexr.com/68v72\nconst EXTRACT_IMPORT_PATH = /\\(\\s*(['\"])([^\\1]+)\\1\\s*\\)/;\n// https://regexr.com/690ds\nconst EXTRACT_SELF_IMPORT = /Promise\\s*\\.\\s*resolve/;\n// https://regexr.com/6a83h\nconst EXTRACT_FILE_NAME = /[\\\\/(]([\\w\\d.\\-_]+\\.(js|ts)x?):/;\nconst announcedQRL = /*#__PURE__*/ new Set();\n// <docs markdown=\"../readme.md#qrl\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#qrl instead)\n/**\n * Used by Qwik Optimizer to point to lazy-loaded resources.\n *\n * This function should be used by the Qwik Optimizer only. The function should not be directly\n * referred to in the source code of the application.\n *\n * @param chunkOrFn - Chunk name (or function which is stringified to extract chunk name)\n * @param symbol - Symbol to lazy load\n * @param lexicalScopeCapture - A set of lexically scoped variables to capture.\n * @public\n * @see `QRL`, `$(...)`\n */\n// </docs>\nexport const qrl = (chunkOrFn, symbol, lexicalScopeCapture = EMPTY_ARRAY, stackOffset = 0) => {\n    let chunk = null;\n    let symbolFn = null;\n    if (isFunction(chunkOrFn)) {\n        symbolFn = chunkOrFn;\n        if (qSerialize) {\n            let match;\n            const srcCode = String(chunkOrFn);\n            if ((match = srcCode.match(EXTRACT_IMPORT_PATH)) && match[2]) {\n                chunk = match[2];\n            }\n            else if ((match = srcCode.match(EXTRACT_SELF_IMPORT))) {\n                const ref = 'QWIK-SELF';\n                const frames = new Error(ref).stack.split('\\n');\n                const start = frames.findIndex((f) => f.includes(ref));\n                const frame = frames[start + 2 + stackOffset];\n                match = frame.match(EXTRACT_FILE_NAME);\n                if (!match) {\n                    chunk = 'main';\n                }\n                else {\n                    chunk = match[1];\n                }\n            }\n            else {\n                throw qError(QError_dynamicImportFailed, srcCode);\n            }\n        }\n    }\n    else if (isString(chunkOrFn)) {\n        chunk = chunkOrFn;\n    }\n    else {\n        throw qError(QError_unknownTypeArgument, chunkOrFn);\n    }\n    if (!announcedQRL.has(symbol)) {\n        // Emit event\n        announcedQRL.add(symbol);\n        emitEvent('qprefetch', {\n            symbols: [getSymbolHash(symbol)],\n            bundles: chunk && [chunk],\n        });\n    }\n    // Unwrap subscribers\n    return createQRL(chunk, symbol, null, symbolFn, null, lexicalScopeCapture, null);\n};\n/** @internal */\nexport const inlinedQrl = (symbol, symbolName, lexicalScopeCapture = EMPTY_ARRAY) => {\n    // Unwrap subscribers\n    return createQRL(null, symbolName, symbol, null, null, lexicalScopeCapture, null);\n};\n/** @internal */\nexport const _noopQrl = (symbolName, lexicalScopeCapture = EMPTY_ARRAY) => {\n    return createQRL(null, symbolName, null, null, null, lexicalScopeCapture, null);\n};\n/** @internal */\nexport const _noopQrlDEV = (symbolName, opts, lexicalScopeCapture = EMPTY_ARRAY) => {\n    const newQrl = _noopQrl(symbolName, lexicalScopeCapture);\n    newQrl.dev = opts;\n    return newQrl;\n};\n/** @internal */\nexport const qrlDEV = (chunkOrFn, symbol, opts, lexicalScopeCapture = EMPTY_ARRAY) => {\n    const newQrl = qrl(chunkOrFn, symbol, lexicalScopeCapture, 1);\n    newQrl.dev = opts;\n    return newQrl;\n};\n/** @internal */\nexport const inlinedQrlDEV = (symbol, symbolName, opts, lexicalScopeCapture = EMPTY_ARRAY) => {\n    const qrl = inlinedQrl(symbol, symbolName, lexicalScopeCapture);\n    qrl.dev = opts;\n    return qrl;\n};\nexport const serializeQRL = (qrl, opts = {}) => {\n    assertTrue(qSerialize, 'In order to serialize a QRL, qSerialize must be true');\n    assertQrl(qrl);\n    let symbol = qrl.$symbol$;\n    let chunk = qrl.$chunk$;\n    const refSymbol = qrl.$refSymbol$ ?? symbol;\n    const platform = getPlatform();\n    if (platform) {\n        const result = platform.chunkForSymbol(refSymbol, chunk, qrl.dev?.file);\n        if (result) {\n            chunk = result[1];\n            if (!qrl.$refSymbol$) {\n                symbol = result[0];\n            }\n        }\n        else {\n            console.error('serializeQRL: Cannot resolve symbol', symbol, 'in', chunk, qrl.dev?.file);\n        }\n    }\n    if (qRuntimeQrl && chunk == null) {\n        chunk = '/runtimeQRL';\n        symbol = '_';\n    }\n    if (chunk == null) {\n        throw qError(QError_qrlMissingChunk, qrl.$symbol$);\n    }\n    if (chunk.startsWith('./')) {\n        chunk = chunk.slice(2);\n    }\n    if (isSyncQrl(qrl)) {\n        if (opts.$containerState$) {\n            const fn = qrl.resolved;\n            const containerState = opts.$containerState$;\n            const fnStrKey = fn.toString();\n            let id = containerState.$inlineFns$.get(fnStrKey);\n            if (id === undefined) {\n                id = containerState.$inlineFns$.size;\n                containerState.$inlineFns$.set(fnStrKey, id);\n            }\n            symbol = String(id);\n        }\n        else {\n            throwErrorAndStop('Sync QRL without containerState');\n        }\n    }\n    let output = `${chunk}#${symbol}`;\n    const capture = qrl.$capture$;\n    const captureRef = qrl.$captureRef$;\n    if (captureRef && captureRef.length) {\n        if (opts.$getObjId$) {\n            output += `[${mapJoin(captureRef, opts.$getObjId$, ' ')}]`;\n        }\n        else if (opts.$addRefMap$) {\n            output += `[${mapJoin(captureRef, opts.$addRefMap$, ' ')}]`;\n        }\n    }\n    else if (capture && capture.length > 0) {\n        output += `[${capture.join(' ')}]`;\n    }\n    return output;\n};\nexport const serializeQRLs = (existingQRLs, containerState, elCtx) => {\n    assertElement(elCtx.$element$);\n    const opts = {\n        $containerState$: containerState,\n        $addRefMap$: (obj) => addToArray(elCtx.$refMap$, obj),\n    };\n    return mapJoin(existingQRLs, (qrl) => serializeQRL(qrl, opts), '\\n');\n};\n/** `./chunk#symbol[captures] */\nexport const parseQRL = (qrl, containerEl) => {\n    const endIdx = qrl.length;\n    const hashIdx = indexOf(qrl, 0, '#');\n    const captureIdx = indexOf(qrl, hashIdx, '[');\n    const chunkEndIdx = Math.min(hashIdx, captureIdx);\n    const chunk = qrl.substring(0, chunkEndIdx);\n    const symbolStartIdx = hashIdx == endIdx ? hashIdx : hashIdx + 1;\n    const symbolEndIdx = captureIdx;\n    const symbol = symbolStartIdx == symbolEndIdx ? 'default' : qrl.substring(symbolStartIdx, symbolEndIdx);\n    const captureStartIdx = captureIdx;\n    const captureEndIdx = endIdx;\n    const capture = captureStartIdx === captureEndIdx\n        ? EMPTY_ARRAY\n        : qrl.substring(captureStartIdx + 1, captureEndIdx - 1).split(' ');\n    const iQrl = createQRL(chunk, symbol, null, null, capture, null, null);\n    if (containerEl) {\n        iQrl.$setContainer$(containerEl);\n    }\n    return iQrl;\n};\nconst indexOf = (text, startIdx, char) => {\n    const endIdx = text.length;\n    const charIdx = text.indexOf(char, startIdx == endIdx ? 0 : startIdx);\n    return charIdx == -1 ? endIdx : charIdx;\n};\nconst addToArray = (array, obj) => {\n    const index = array.indexOf(obj);\n    if (index === -1) {\n        array.push(obj);\n        return String(array.length - 1);\n    }\n    return String(index);\n};\nexport const inflateQrl = (qrl, elCtx) => {\n    assertDefined(qrl.$capture$, 'invoke: qrl capture must be defined inside useLexicalScope()', qrl);\n    return (qrl.$captureRef$ = qrl.$capture$.map((idx) => {\n        const int = parseInt(idx, 10);\n        const obj = elCtx.$refMap$[int];\n        assertTrue(elCtx.$refMap$.length > int, 'out of bounds inflate access', idx);\n        return obj;\n    }));\n};\n/** @internal */\nexport const _regSymbol = (symbol, hash) => {\n    if (typeof globalThis.__qwik_reg_symbols === 'undefined') {\n        globalThis.__qwik_reg_symbols = new Map();\n    }\n    globalThis.__qwik_reg_symbols.set(hash, symbol);\n    return symbol;\n};\n//# sourceMappingURL=data:application/json;base64,","import { isServerPlatform } from '../platform/platform';\nimport { assertQrl } from '../qrl/qrl-class';\nimport { dollar } from '../qrl/qrl.public';\nimport { Fragment, _jsxSorted } from '../render/jsx/jsx-runtime';\nimport { untrack, useBindInvokeContext } from './use-core';\nimport { Task, TaskFlags, runResource, } from './use-task';\nimport { getProxyTarget } from '../state/common';\nimport { isSignal } from '../state/signal';\nimport { createProxy } from '../state/store';\nimport { isPromise } from '../util/promises';\nimport { isObject } from '../util/types';\nimport { useSequentialScope } from './use-sequential-scope';\nconst DEBUG = false;\nfunction debugLog(...arg) {\n    // eslint-disable-next-line no-console\n    console.log(arg.join(', '));\n}\n// <docs markdown=\"../readme.md#useResource\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResource instead)\n/**\n * This method works like an async memoized function that runs whenever some tracked value changes\n * and returns some data.\n *\n * `useResource` however returns immediate a `ResourceReturn` object that contains the data and a\n * state that indicates if the data is available or not.\n *\n * The status can be one of the following:\n *\n * - `pending` - the data is not yet available.\n * - `resolved` - the data is available.\n * - `rejected` - the data is not available due to an error or timeout.\n *\n * Avoid using a `try/catch` statement in `useResource$`. If you catch the error instead of passing\n * it, the resource status will never be `rejected`.\n *\n * ### Example\n *\n * Example showing how `useResource` to perform a fetch to request the weather, whenever the input\n * city name changes.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const cityS = useSignal('');\n *\n *   const weatherResource = useResource$(async ({ track, cleanup }) => {\n *     const cityName = track(cityS);\n *     const abortController = new AbortController();\n *     cleanup(() => abortController.abort('cleanup'));\n *     const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n *       signal: abortController.signal,\n *     });\n *     const data = await res.json();\n *     return data as { temp: number };\n *   });\n *\n *   return (\n *     <div>\n *       <input name=\"city\" bind:value={cityS} />\n *       <Resource\n *         value={weatherResource}\n *         onResolved={(weather) => {\n *           return <div>Temperature: {weather.temp}</div>;\n *         }}\n *       />\n *     </div>\n *   );\n * });\n * ```\n *\n * @public\n * @see Resource\n * @see ResourceReturn\n */\n// </docs>\nexport const useResourceQrl = (qrl, opts) => {\n    const { val, set, i, iCtx } = useSequentialScope();\n    if (val != null) {\n        return val;\n    }\n    assertQrl(qrl);\n    const container = iCtx.$container2$;\n    const resource = createResourceReturn(container, opts);\n    const el = iCtx.$hostElement$;\n    const task = new Task(TaskFlags.DIRTY | TaskFlags.RESOURCE, i, el, qrl, resource, null);\n    runResource(task, container, iCtx.$hostElement$);\n    set(resource);\n    return resource;\n};\n// <docs markdown=\"../readme.md#useResource\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResource instead)\n/**\n * This method works like an async memoized function that runs whenever some tracked value changes\n * and returns some data.\n *\n * `useResource` however returns immediate a `ResourceReturn` object that contains the data and a\n * state that indicates if the data is available or not.\n *\n * The status can be one of the following:\n *\n * - 'pending' - the data is not yet available.\n * - 'resolved' - the data is available.\n * - 'rejected' - the data is not available due to an error or timeout.\n *\n * ### Example\n *\n * Example showing how `useResource` to perform a fetch to request the weather, whenever the input\n * city name changes.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const cityS = useSignal('');\n *\n *   const weatherResource = useResource$(async ({ track, cleanup }) => {\n *     const cityName = track(cityS);\n *     const abortController = new AbortController();\n *     cleanup(() => abortController.abort('cleanup'));\n *     const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n *       signal: abortController.signal,\n *     });\n *     const data = await res.json();\n *     return data as { temp: number };\n *   });\n *\n *   return (\n *     <div>\n *       <input name=\"city\" bind:value={cityS} />\n *       <Resource\n *         value={weatherResource}\n *         onResolved={(weather) => {\n *           return <div>Temperature: {weather.temp}</div>;\n *         }}\n *       />\n *     </div>\n *   );\n * });\n * ```\n *\n * @public\n * @see Resource\n * @see ResourceReturn\n */\n// </docs>\nexport const useResource$ = (generatorFn, opts) => {\n    return useResourceQrl(dollar(generatorFn), opts);\n};\n// <docs markdown=\"../readme.md#useResource\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResource instead)\n/**\n * This method works like an async memoized function that runs whenever some tracked value changes\n * and returns some data.\n *\n * `useResource` however returns immediate a `ResourceReturn` object that contains the data and a\n * state that indicates if the data is available or not.\n *\n * The status can be one of the following:\n *\n * - 'pending' - the data is not yet available.\n * - 'resolved' - the data is available.\n * - 'rejected' - the data is not available due to an error or timeout.\n *\n * ### Example\n *\n * Example showing how `useResource` to perform a fetch to request the weather, whenever the input\n * city name changes.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const cityS = useSignal('');\n *\n *   const weatherResource = useResource$(async ({ track, cleanup }) => {\n *     const cityName = track(cityS);\n *     const abortController = new AbortController();\n *     cleanup(() => abortController.abort('cleanup'));\n *     const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n *       signal: abortController.signal,\n *     });\n *     const data = await res.json();\n *     return data as { temp: number };\n *   });\n *\n *   return (\n *     <div>\n *       <input name=\"city\" bind:value={cityS} />\n *       <Resource\n *         value={weatherResource}\n *         onResolved={(weather) => {\n *           return <div>Temperature: {weather.temp}</div>;\n *         }}\n *       />\n *     </div>\n *   );\n * });\n * ```\n *\n * @public\n * @see Resource\n * @see ResourceReturn\n */\n// </docs>\nexport const Resource = (props) => {\n    // Resource path\n    return _jsxSorted(Fragment, null, null, getResourceValueAsPromise(props), 0, null);\n};\nfunction getResourceValueAsPromise(props) {\n    const resource = props.value;\n    if (isResourceReturn(resource)) {\n        const isBrowser = !isServerPlatform();\n        if (isBrowser) {\n            const state = resource._state;\n            DEBUG && debugLog(`RESOURCE_CMP.${state}`, 'VALUE: ' + untrack(() => resource._resolved));\n            if (state === 'pending' && props.onPending) {\n                return Promise.resolve(props.onPending());\n            }\n            else if (state === 'rejected' && props.onRejected) {\n                return Promise.resolve(resource._error).then(props.onRejected);\n            }\n            else {\n                // resolved, pending without onPending prop or rejected with onRejected prop\n                return Promise.resolve(resource._resolved).then(props.onResolved);\n            }\n        }\n        return resource.value.then(useBindInvokeContext(props.onResolved), useBindInvokeContext(props.onRejected));\n    }\n    else if (isPromise(resource)) {\n        return resource.then(useBindInvokeContext(props.onResolved), useBindInvokeContext(props.onRejected));\n    }\n    else if (isSignal(resource)) {\n        return Promise.resolve(resource.value).then(useBindInvokeContext(props.onResolved), useBindInvokeContext(props.onRejected));\n    }\n    else {\n        return Promise.resolve(resource).then(useBindInvokeContext(props.onResolved), useBindInvokeContext(props.onRejected));\n    }\n}\nexport const _createResourceReturn = (opts) => {\n    const resource = {\n        __brand: 'resource',\n        value: undefined,\n        loading: isServerPlatform() ? false : true,\n        _resolved: undefined,\n        _error: undefined,\n        _state: 'pending',\n        _timeout: opts?.timeout ?? -1,\n        _cache: 0,\n    };\n    return resource;\n};\nexport const createResourceReturn = (containerState, opts, initialPromise) => {\n    const result = _createResourceReturn(opts);\n    result.value = initialPromise;\n    const resource = createProxy(result, containerState, undefined);\n    return resource;\n};\nexport const getInternalResource = (resource) => {\n    return getProxyTarget(resource);\n};\nexport const isResourceReturn = (obj) => {\n    return isObject(obj) && (getProxyTarget(obj) || obj).__brand === 'resource';\n};\n// TODO: to remove - serializers v1\nexport const serializeResource = (resource, getObjId) => {\n    const state = resource._state;\n    if (state === 'resolved') {\n        return `0 ${getObjId(resource._resolved)}`;\n    }\n    else if (state === 'pending') {\n        return `1`;\n    }\n    else {\n        return `2 ${getObjId(resource._error)}`;\n    }\n};\n// TODO: to remove - serializers v1\nexport const parseResourceReturn = (data) => {\n    const [first, id] = data.split(' ');\n    const result = _createResourceReturn();\n    result.value = Promise.resolve();\n    if (first === '0') {\n        result._state = 'resolved';\n        result._resolved = id;\n        result.loading = false;\n    }\n    else if (first === '1') {\n        result._state = 'pending';\n        result.value = new Promise(() => { });\n        result.loading = true;\n    }\n    else if (first === '2') {\n        result._state = 'rejected';\n        result._error = id;\n        result.loading = false;\n    }\n    return result;\n};\n//# sourceMappingURL=data:application/json;base64,","import { componentQrl, isQwikComponent, } from '../component/component.public';\nimport { parseQRL, serializeQRL } from '../qrl/qrl';\nimport { isQrl } from '../qrl/qrl-class';\nimport { intToStr } from './container';\nimport { isResourceReturn, parseResourceReturn, serializeResource } from '../use/use-resource';\nimport { isSubscriberDescriptor, parseTask, serializeTask, } from '../use/use-task';\nimport { isDocument } from '../util/element';\nimport { QObjectSignalFlags, SIGNAL_IMMUTABLE, SignalDerived, SignalImpl, SignalWrapper, } from '../state/signal';\nimport { collectSubscriptions, collectValue, mapJoin } from './pause';\nimport { fastWeakSerialize, getSubscriptionManager, LocalSubscriptionManager, } from '../state/common';\nimport { getOrCreateProxy } from '../state/store';\nimport { QObjectManagerSymbol } from '../state/constants';\nimport { serializeDerivedSignalFunc } from '../qrl/inlined-fn';\nimport { assertString, assertTrue } from '../error/assert';\nimport { Fragment, JSXNodeImpl, isJSXNode } from '../render/jsx/jsx-runtime';\nimport { Slot } from '../render/jsx/slot.public';\n/**\n * - 0, 8, 9, A, B, C, D\n * - `\\0`: null character (U+0000 NULL) (only if the next character is not a decimal digit; else it’s\n *   an octal escape sequence)\n * - `\\b`: backspace (U+0008 BACKSPACE)\n * - `\\t`: horizontal tab (U+0009 CHARACTER TABULATION)\n * - `\\n`: line feed (U+000A LINE FEED)\n * - `\\v`: vertical tab (U+000B LINE TABULATION)\n * - `\\f`: form feed (U+000C FORM FEED)\n * - `\\r`: carriage return (U+000D CARRIAGE RETURN)\n * - `\\\"`: double quote (U+0022 QUOTATION MARK)\n * - `\\'`: single quote (U+0027 APOSTROPHE)\n * - `\\\\`: backslash (U+005C REVERSE SOLIDUS)\n */\nexport const UNDEFINED_PREFIX = '\\u0001';\n/**\n * Normalize the shape of the serializer for better inline-cache performance.\n *\n * @param serializer\n * @returns\n */\nfunction serializer(serializer) {\n    return {\n        $prefixCode$: serializer.$prefix$.charCodeAt(0),\n        $prefixChar$: serializer.$prefix$,\n        $test$: serializer.$test$,\n        $serialize$: serializer.$serialize$,\n        $prepare$: serializer.$prepare$,\n        $fill$: serializer.$fill$,\n        $collect$: serializer.$collect$,\n        $subs$: serializer.$subs$,\n    };\n}\nconst QRLSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0002',\n    $test$: (v) => isQrl(v),\n    $collect$: (v, collector, leaks) => {\n        if (v.$captureRef$) {\n            for (const item of v.$captureRef$) {\n                collectValue(item, collector, leaks);\n            }\n        }\n        if (collector.$prefetch$ === 0) {\n            collector.$qrls$.push(v);\n        }\n    },\n    $serialize$: (obj, getObjId) => {\n        return serializeQRL(obj, {\n            $getObjId$: getObjId,\n        });\n    },\n    $prepare$: (data, containerState) => {\n        return parseQRL(data, containerState.$containerEl$);\n    },\n    $fill$: (qrl, getObject) => {\n        if (qrl.$capture$ && qrl.$capture$.length > 0) {\n            qrl.$captureRef$ = qrl.$capture$.map(getObject);\n            qrl.$capture$ = null;\n        }\n    },\n});\nconst TaskSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0003',\n    $test$: (v) => isSubscriberDescriptor(v),\n    $collect$: (v, collector, leaks) => {\n        collectValue(v.$qrl$, collector, leaks);\n        if (v.$state$) {\n            collectValue(v.$state$, collector, leaks);\n            if (leaks === true && v.$state$ instanceof SignalImpl) {\n                collectSubscriptions(v.$state$[QObjectManagerSymbol], collector, true);\n            }\n        }\n    },\n    $serialize$: (obj, getObjId) => serializeTask(obj, getObjId),\n    $prepare$: (data) => parseTask(data),\n    $fill$: (task, getObject) => {\n        task.$el$ = getObject(task.$el$);\n        task.$qrl$ = getObject(task.$qrl$);\n        if (task.$state$) {\n            task.$state$ = getObject(task.$state$);\n        }\n    },\n});\nconst ResourceSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0004',\n    $test$: (v) => isResourceReturn(v),\n    $collect$: (obj, collector, leaks) => {\n        collectValue(obj.value, collector, leaks);\n        collectValue(obj._resolved, collector, leaks);\n    },\n    $serialize$: (obj, getObjId) => {\n        return serializeResource(obj, getObjId);\n    },\n    $prepare$: (data) => {\n        return parseResourceReturn(data);\n    },\n    $fill$: (resource, getObject) => {\n        if (resource._state === 'resolved') {\n            resource._resolved = getObject(resource._resolved);\n            resource.value = Promise.resolve(resource._resolved);\n        }\n        else if (resource._state === 'rejected') {\n            const p = Promise.reject(resource._error);\n            p.catch(() => null);\n            resource._error = getObject(resource._error);\n            resource.value = p;\n        }\n    },\n});\nconst URLSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0005',\n    $test$: (v) => v instanceof URL,\n    $serialize$: (obj) => obj.href,\n    $prepare$: (data) => new URL(data),\n});\nconst DateSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0006',\n    $test$: (v) => v instanceof Date,\n    $serialize$: (obj) => obj.toISOString(),\n    $prepare$: (data) => new Date(data),\n});\nconst RegexSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0007',\n    $test$: (v) => v instanceof RegExp,\n    $serialize$: (obj) => `${obj.flags} ${obj.source}`,\n    $prepare$: (data) => {\n        const space = data.indexOf(' ');\n        const source = data.slice(space + 1);\n        const flags = data.slice(0, space);\n        return new RegExp(source, flags);\n    },\n});\nconst ErrorSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u000E',\n    $test$: (v) => v instanceof Error,\n    $serialize$: (obj) => {\n        return obj.message;\n    },\n    $prepare$: (text) => {\n        const err = new Error(text);\n        err.stack = undefined;\n        return err;\n    },\n});\nconst DocumentSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u000F',\n    $test$: (v) => !!v && typeof v === 'object' && isDocument(v),\n    $prepare$: (_, _c, doc) => {\n        return doc;\n    },\n});\nexport const SERIALIZABLE_STATE = Symbol('serializable-data');\nconst ComponentSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0010',\n    $test$: (obj) => isQwikComponent(obj),\n    $serialize$: (obj, getObjId) => {\n        const [qrl] = obj[SERIALIZABLE_STATE];\n        return serializeQRL(qrl, {\n            $getObjId$: getObjId,\n        });\n    },\n    $prepare$: (data, containerState) => {\n        const qrl = parseQRL(data, containerState.$containerEl$);\n        return componentQrl(qrl);\n    },\n    $fill$: (component, getObject) => {\n        const [qrl] = component[SERIALIZABLE_STATE];\n        if (qrl.$capture$?.length) {\n            qrl.$captureRef$ = qrl.$capture$.map(getObject);\n            qrl.$capture$ = null;\n        }\n    },\n});\nconst DerivedSignalSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0011',\n    $test$: (obj) => obj instanceof SignalDerived,\n    $collect$: (obj, collector, leaks) => {\n        if (obj.$args$) {\n            for (const arg of obj.$args$) {\n                collectValue(arg, collector, leaks);\n            }\n        }\n    },\n    $serialize$: (signal, getObjID, collector) => {\n        const serialized = serializeDerivedSignalFunc(signal);\n        let index = collector.$inlinedFunctions$.indexOf(serialized);\n        if (index < 0) {\n            index = collector.$inlinedFunctions$.length;\n            collector.$inlinedFunctions$.push(serialized);\n        }\n        return mapJoin(signal.$args$, getObjID, ' ') + ' @' + intToStr(index);\n    },\n    $prepare$: (data) => {\n        const ids = data.split(' ');\n        const args = ids.slice(0, -1);\n        const fn = ids[ids.length - 1];\n        return new SignalDerived(fn, args, fn);\n    },\n    $fill$: (fn, getObject) => {\n        assertString(fn.$func$, 'fn.$func$ should be a string');\n        fn.$func$ = getObject(fn.$func$);\n        fn.$args$ = fn.$args$.map(getObject);\n    },\n});\nconst SignalSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0012',\n    $test$: (v) => v instanceof SignalImpl,\n    $collect$: (obj, collector, leaks) => {\n        collectValue(obj.untrackedValue, collector, leaks);\n        const mutable = (obj[QObjectSignalFlags] & SIGNAL_IMMUTABLE) === 0;\n        if (leaks === true && mutable) {\n            collectSubscriptions(obj[QObjectManagerSymbol], collector, true);\n        }\n        return obj;\n    },\n    $serialize$: (obj, getObjId) => {\n        return getObjId(obj.untrackedValue);\n    },\n    $prepare$: (data, containerState) => {\n        return new SignalImpl(data, containerState?.$subsManager$?.$createManager$(), 0);\n    },\n    $subs$: (signal, subs) => {\n        signal[QObjectManagerSymbol].$addSubs$(subs);\n    },\n    $fill$: (signal, getObject) => {\n        signal.untrackedValue = getObject(signal.untrackedValue);\n    },\n});\nconst SignalWrapperSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0013',\n    $test$: (v) => v instanceof SignalWrapper,\n    $collect$(obj, collector, leaks) {\n        collectValue(obj.ref, collector, leaks);\n        if (fastWeakSerialize(obj.ref)) {\n            const localManager = getSubscriptionManager(obj.ref);\n            if (isTreeShakeable(collector.$containerState$.$subsManager$, localManager, leaks)) {\n                collectValue(obj.ref[obj.prop], collector, leaks);\n            }\n        }\n        return obj;\n    },\n    $serialize$: (obj, getObjId) => {\n        return `${getObjId(obj.ref)} ${obj.prop}`;\n    },\n    $prepare$: (data) => {\n        const [id, prop] = data.split(' ');\n        return new SignalWrapper(id, prop);\n    },\n    $fill$: (signal, getObject) => {\n        signal.ref = getObject(signal.ref);\n    },\n});\nconst NoFiniteNumberSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0014',\n    $test$: (v) => typeof v === 'number',\n    $serialize$: (v) => {\n        return String(v);\n    },\n    $prepare$: (data) => {\n        return Number(data);\n    },\n});\nconst URLSearchParamsSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0015',\n    $test$: (v) => v instanceof URLSearchParams,\n    $serialize$: (obj) => obj.toString(),\n    $prepare$: (data) => new URLSearchParams(data),\n});\nconst FormDataSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0016',\n    $test$: (v) => typeof FormData !== 'undefined' && v instanceof globalThis.FormData,\n    $serialize$: (formData) => {\n        const array = [];\n        formData.forEach((value, key) => {\n            if (typeof value === 'string') {\n                array.push([key, value]);\n            }\n            else {\n                array.push([key, value.name]);\n            }\n        });\n        return JSON.stringify(array);\n    },\n    $prepare$: (data) => {\n        const array = JSON.parse(data);\n        const formData = new FormData();\n        for (const [key, value] of array) {\n            formData.append(key, value);\n        }\n        return formData;\n    },\n});\nconst JSXNodeSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0017',\n    $test$: (v) => isJSXNode(v),\n    $collect$: (node, collector, leaks) => {\n        collectValue(node.children, collector, leaks);\n        collectValue(node.props, collector, leaks);\n        collectValue(node.constProps, collector, leaks);\n        collectValue(node.key, collector, leaks);\n        let type = node.type;\n        if (type === Slot) {\n            type = ':slot';\n        }\n        else if (type === Fragment) {\n            type = ':fragment';\n        }\n        collectValue(type, collector, leaks);\n    },\n    $serialize$: (node, getObjID) => {\n        let type = node.type;\n        if (type === Slot) {\n            type = ':slot';\n        }\n        else if (type === Fragment) {\n            type = ':fragment';\n        }\n        return `${getObjID(type)} ${getObjID(node.props)} ${getObjID(node.constProps)} ${getObjID(node.key)} ${getObjID(node.children)} ${node.flags}`;\n    },\n    $prepare$: (data) => {\n        const [type, props, immutableProps, key, children, flags] = data.split(' ');\n        const node = new JSXNodeImpl(type, props, immutableProps, children, parseInt(flags, 10), key);\n        return node;\n    },\n    $fill$: (node, getObject) => {\n        node.type = getResolveJSXType(getObject(node.type));\n        node.props = getObject(node.props);\n        node.constProps = getObject(node.constProps);\n        node.key = getObject(node.key);\n        node.children = getObject(node.children);\n    },\n});\nconst BigIntSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0018',\n    $test$: (v) => typeof v === 'bigint',\n    $serialize$: (v) => {\n        return v.toString();\n    },\n    $prepare$: (data) => {\n        return BigInt(data);\n    },\n});\nconst Uint8ArraySerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u001c',\n    $test$: (v) => v instanceof Uint8Array,\n    $serialize$: (v) => {\n        let buf = '';\n        for (const c of v) {\n            buf += String.fromCharCode(c);\n        }\n        return btoa(buf).replace(/=+$/, '');\n    },\n    $prepare$: (data) => {\n        const buf = atob(data);\n        const bytes = new Uint8Array(buf.length);\n        let i = 0;\n        for (const s of buf) {\n            bytes[i++] = s.charCodeAt(0);\n        }\n        return bytes;\n    },\n    $fill$: undefined,\n});\nconst DATA = Symbol();\nconst SetSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0019',\n    $test$: (v) => v instanceof Set,\n    $collect$: (set, collector, leaks) => {\n        set.forEach((value) => collectValue(value, collector, leaks));\n    },\n    $serialize$: (v, getObjID) => {\n        return Array.from(v).map(getObjID).join(' ');\n    },\n    $prepare$: (data) => {\n        const set = new Set();\n        set[DATA] = data;\n        return set;\n    },\n    $fill$: (set, getObject) => {\n        const data = set[DATA];\n        set[DATA] = undefined;\n        assertString(data, 'SetSerializer should be defined');\n        const items = data.length === 0 ? [] : data.split(' ');\n        for (const id of items) {\n            set.add(getObject(id));\n        }\n    },\n});\nconst MapSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u001a',\n    $test$: (v) => v instanceof Map,\n    $collect$: (map, collector, leaks) => {\n        map.forEach((value, key) => {\n            collectValue(value, collector, leaks);\n            collectValue(key, collector, leaks);\n        });\n    },\n    $serialize$: (map, getObjID) => {\n        const result = [];\n        map.forEach((value, key) => {\n            result.push(getObjID(key) + ' ' + getObjID(value));\n        });\n        return result.join(' ');\n    },\n    $prepare$: (data) => {\n        const set = new Map();\n        set[DATA] = data;\n        return set;\n    },\n    $fill$: (set, getObject) => {\n        const data = set[DATA];\n        set[DATA] = undefined;\n        assertString(data, 'SetSerializer should be defined');\n        const items = data.length === 0 ? [] : data.split(' ');\n        assertTrue(items.length % 2 === 0, 'MapSerializer should have even number of items');\n        for (let i = 0; i < items.length; i += 2) {\n            set.set(getObject(items[i]), getObject(items[i + 1]));\n        }\n    },\n});\nconst StringSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u001b',\n    $test$: (v) => !!getSerializer(v) || v === UNDEFINED_PREFIX,\n    $serialize$: (v) => v,\n    $prepare$: (data) => data,\n});\nconst serializers = [\n    // NULL                       \\u0000\n    // UNDEFINED_PREFIX           \\u0001\n    QRLSerializer, ////////////// \\u0002\n    TaskSerializer, ///////////// \\u0003\n    ResourceSerializer, ///////// \\u0004\n    URLSerializer, ////////////// \\u0005\n    DateSerializer, ///////////// \\u0006\n    RegexSerializer, //////////// \\u0007\n    // BACKSPACE                  \\u0008\n    // HORIZONTAL TAB             \\u0009\n    // NEW LINE                   \\u000A\n    // VERTICAL TAB               \\u000B\n    // FORM FEED                  \\u000C\n    // CARRIAGE RETURN            \\u000D\n    ErrorSerializer, //////////// \\u000E\n    DocumentSerializer, ///////// \\u000F\n    ComponentSerializer, //////// \\u0010\n    DerivedSignalSerializer, //// \\u0011\n    SignalSerializer, /////////// \\u0012\n    SignalWrapperSerializer, //// \\u0013\n    NoFiniteNumberSerializer, /// \\u0014\n    URLSearchParamsSerializer, // \\u0015\n    FormDataSerializer, ///////// \\u0016\n    JSXNodeSerializer, ////////// \\u0017\n    BigIntSerializer, /////////// \\u0018\n    SetSerializer, ////////////// \\u0019\n    MapSerializer, ////////////// \\u001a\n    StringSerializer, /////////// \\u001b\n    Uint8ArraySerializer, /////// \\u001c\n];\nconst serializerByPrefix = /*#__PURE__*/ (() => {\n    const serializerByPrefix = [];\n    serializers.forEach((s) => {\n        const prefix = s.$prefixCode$;\n        while (serializerByPrefix.length < prefix) {\n            serializerByPrefix.push(undefined);\n        }\n        serializerByPrefix.push(s);\n    });\n    return serializerByPrefix;\n})();\nexport function getSerializer(obj) {\n    if (typeof obj === 'string') {\n        const prefix = obj.charCodeAt(0);\n        if (prefix < serializerByPrefix.length) {\n            return serializerByPrefix[prefix];\n        }\n    }\n    return undefined;\n}\nconst collectorSerializers = /*#__PURE__*/ serializers.filter((a) => a.$collect$);\nexport const canSerialize = (obj) => {\n    for (const s of serializers) {\n        if (s.$test$(obj)) {\n            return true;\n        }\n    }\n    return false;\n};\nexport const collectDeps = (obj, collector, leaks) => {\n    for (const s of collectorSerializers) {\n        if (s.$test$(obj)) {\n            s.$collect$(obj, collector, leaks);\n            return true;\n        }\n    }\n    return false;\n};\nexport const serializeValue = (obj, getObjID, collector, containerState) => {\n    for (const s of serializers) {\n        if (s.$test$(obj)) {\n            let value = s.$prefixChar$;\n            if (s.$serialize$) {\n                value += s.$serialize$(obj, getObjID, collector, containerState);\n            }\n            return value;\n        }\n    }\n    if (typeof obj === 'string') {\n        return obj;\n    }\n    return undefined;\n};\nexport const createParser = (containerState, doc) => {\n    const fillMap = new Map();\n    const subsMap = new Map();\n    return {\n        prepare(data) {\n            const serializer = getSerializer(data);\n            if (serializer) {\n                const value = serializer.$prepare$(data.slice(1), containerState, doc);\n                if (serializer.$fill$) {\n                    fillMap.set(value, serializer);\n                }\n                if (serializer.$subs$) {\n                    subsMap.set(value, serializer);\n                }\n                return value;\n            }\n            return data;\n        },\n        subs(obj, subs) {\n            const serializer = subsMap.get(obj);\n            if (serializer) {\n                serializer.$subs$(obj, subs, containerState);\n                return true;\n            }\n            return false;\n        },\n        fill(obj, getObject) {\n            const serializer = fillMap.get(obj);\n            if (serializer) {\n                serializer.$fill$(obj, getObject, containerState);\n                return true;\n            }\n            return false;\n        },\n    };\n};\nexport const OBJECT_TRANSFORMS = {\n    '!': (obj, containerState) => {\n        return containerState.$proxyMap$.get(obj) ?? getOrCreateProxy(obj, containerState);\n    },\n    '~': (obj) => {\n        return Promise.resolve(obj);\n    },\n    _: (obj) => {\n        return Promise.reject(obj);\n    },\n};\nconst isTreeShakeable = (manager, target, leaks) => {\n    if (typeof leaks === 'boolean') {\n        return leaks;\n    }\n    const localManager = manager.$groupToManagers$.get(leaks);\n    if (localManager && localManager.length > 0) {\n        if (localManager.length === 1) {\n            return localManager[0] !== target;\n        }\n        return true;\n    }\n    return false;\n};\nconst getResolveJSXType = (type) => {\n    if (type === ':slot') {\n        return Slot;\n    }\n    if (type === ':fragment') {\n        return Fragment;\n    }\n    return type;\n};\n//# sourceMappingURL=data:application/json;base64,","import { canSerialize } from '../container/serializers';\nimport { assertDefined, assertFail, assertTrue } from '../error/assert';\nimport { QError_verifySerializable, qError } from '../error/error';\nimport { notifyChange } from '../render/dom/notify-render';\nimport { serializeAttribute } from '../render/execute-component';\nimport { trackSignal } from '../use/use-core';\nimport { TaskFlags, isComputedTask, isResourceTask, isSubscriberDescriptor, isTask, } from '../use/use-task';\nimport { isNode } from '../util/element';\nimport { logError, throwErrorAndStop } from '../util/log';\nimport { ELEMENT_PROPS, OnRenderProp } from '../util/markers';\nimport { isPromise } from '../util/promises';\nimport { seal } from '../util/qdev';\nimport { isArray, isFunction, isObject, isSerializableObject } from '../util/types';\nimport { ElementVNodeProps } from '../v2/client/types';\nimport { VNodeJournalOpCode, vnode_setAttr } from '../v2/client/vnode';\nimport { ChoreType } from '../v2/shared/scheduler';\nimport { isContainer2 } from '../v2/shared/types';\nimport { QObjectFlagsSymbol, QObjectManagerSymbol, QObjectTargetSymbol } from './constants';\nimport { tryGetContext } from './context';\n/** @internal */\nexport const verifySerializable = (value, preMessage) => {\n    const seen = new Set();\n    return _verifySerializable(value, seen, '_', preMessage);\n};\nconst _verifySerializable = (value, seen, ctx, preMessage) => {\n    const unwrapped = unwrapProxy(value);\n    if (unwrapped == null) {\n        return value;\n    }\n    if (shouldSerialize(unwrapped)) {\n        if (seen.has(unwrapped)) {\n            return value;\n        }\n        seen.add(unwrapped);\n        if (canSerialize(unwrapped)) {\n            return value;\n        }\n        const typeObj = typeof unwrapped;\n        switch (typeObj) {\n            case 'object':\n                if (isPromise(unwrapped)) {\n                    return value;\n                }\n                if (isNode(unwrapped)) {\n                    return value;\n                }\n                if (isArray(unwrapped)) {\n                    let expectIndex = 0;\n                    // Make sure the array has no holes\n                    unwrapped.forEach((v, i) => {\n                        if (i !== expectIndex) {\n                            throw qError(QError_verifySerializable, unwrapped);\n                        }\n                        _verifySerializable(v, seen, ctx + '[' + i + ']');\n                        expectIndex = i + 1;\n                    });\n                    return value;\n                }\n                if (isSerializableObject(unwrapped)) {\n                    for (const [key, item] of Object.entries(unwrapped)) {\n                        _verifySerializable(item, seen, ctx + '.' + key);\n                    }\n                    return value;\n                }\n                break;\n            case 'boolean':\n            case 'string':\n            case 'number':\n                return value;\n        }\n        let message = '';\n        if (preMessage) {\n            message = preMessage;\n        }\n        else {\n            message = 'Value cannot be serialized';\n        }\n        if (ctx !== '_') {\n            message += ` in ${ctx},`;\n        }\n        if (typeObj === 'object') {\n            message += ` because it's an instance of \"${value?.constructor.name}\". You might need to use 'noSerialize()' or use an object literal instead. Check out https://qwik.dev/docs/advanced/dollar/`;\n        }\n        else if (typeObj === 'function') {\n            const fnName = value.name;\n            message += ` because it's a function named \"${fnName}\". You might need to convert it to a QRL using $(fn):\\n\\nconst ${fnName} = $(${String(value)});\\n\\nPlease check out https://qwik.dev/docs/advanced/qrl/ for more information.`;\n        }\n        console.error('Trying to serialize', value);\n        throwErrorAndStop(message);\n    }\n    return value;\n};\nconst noSerializeSet = /*#__PURE__*/ new WeakSet();\nconst weakSerializeSet = /*#__PURE__*/ new WeakSet();\nexport const shouldSerialize = (obj) => {\n    if (isObject(obj) || isFunction(obj)) {\n        return !noSerializeSet.has(obj);\n    }\n    return true;\n};\nexport const fastSkipSerialize = (obj) => {\n    return noSerializeSet.has(obj);\n};\nexport const fastWeakSerialize = (obj) => {\n    return weakSerializeSet.has(obj);\n};\n// <docs markdown=\"../readme.md#noSerialize\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#noSerialize instead)\n/**\n * Marks a property on a store as non-serializable.\n *\n * At times it is necessary to store values on a store that are non-serializable. Normally this is a\n * runtime error as Store wants to eagerly report when a non-serializable property is assigned to\n * it.\n *\n * You can use `noSerialize()` to mark a value as non-serializable. The value is persisted in the\n * Store but does not survive serialization. The implication is that when your application is\n * resumed, the value of this object will be `undefined`. You will be responsible for recovering\n * from this.\n *\n * See: [noSerialize Tutorial](http://qwik.dev/tutorial/store/no-serialize)\n *\n * @public\n */\n// </docs>\nexport const noSerialize = (input) => {\n    if (input != null) {\n        noSerializeSet.add(input);\n    }\n    return input;\n};\n/** @internal */\nexport const _weakSerialize = (input) => {\n    weakSerializeSet.add(input);\n    return input;\n};\nexport const isConnected = (sub) => {\n    if (isSubscriberDescriptor(sub)) {\n        return isConnected(sub.$el$);\n    }\n    else {\n        return !!tryGetContext(sub) || sub.isConnected;\n    }\n};\n/** @public */\nexport const unwrapProxy = (proxy) => {\n    return isObject(proxy) ? (getProxyTarget(proxy) ?? proxy) : proxy;\n};\nexport const getProxyTarget = (obj) => {\n    return obj[QObjectTargetSymbol];\n};\nexport const getSubscriptionManager = (obj) => {\n    return obj[QObjectManagerSymbol];\n};\nexport const getProxyFlags = (obj) => {\n    return obj[QObjectFlagsSymbol];\n};\n/** @internal */\nexport var SubscriptionType;\n(function (SubscriptionType) {\n    SubscriptionType[SubscriptionType[\"HOST\"] = 0] = \"HOST\";\n    SubscriptionType[SubscriptionType[\"PROP_IMMUTABLE\"] = 1] = \"PROP_IMMUTABLE\";\n    SubscriptionType[SubscriptionType[\"PROP_MUTABLE\"] = 2] = \"PROP_MUTABLE\";\n    SubscriptionType[SubscriptionType[\"TEXT_IMMUTABLE\"] = 3] = \"TEXT_IMMUTABLE\";\n    SubscriptionType[SubscriptionType[\"TEXT_MUTABLE\"] = 4] = \"TEXT_MUTABLE\";\n})(SubscriptionType || (SubscriptionType = {}));\nexport var SubscriptionProp;\n(function (SubscriptionProp) {\n    SubscriptionProp[SubscriptionProp[\"TYPE\"] = 0] = \"TYPE\";\n    SubscriptionProp[SubscriptionProp[\"HOST\"] = 1] = \"HOST\";\n    SubscriptionProp[SubscriptionProp[\"SIGNAL\"] = 2] = \"SIGNAL\";\n    SubscriptionProp[SubscriptionProp[\"ELEMENT\"] = 3] = \"ELEMENT\";\n    SubscriptionProp[SubscriptionProp[\"ELEMENT_PROP\"] = 4] = \"ELEMENT_PROP\";\n    SubscriptionProp[SubscriptionProp[\"STYLE_ID\"] = 5] = \"STYLE_ID\";\n})(SubscriptionProp || (SubscriptionProp = {}));\nexport const serializeSubscription = (sub, getObjId) => {\n    const type = sub[SubscriptionProp.TYPE];\n    const host = typeof sub[SubscriptionProp.HOST] === 'string'\n        ? sub[SubscriptionProp.HOST]\n        : getObjId(sub[SubscriptionProp.HOST]);\n    if (!host) {\n        return undefined;\n    }\n    let base = type + ' ' + host;\n    let key;\n    if (type === SubscriptionType.HOST) {\n        key = sub[SubscriptionProp.SIGNAL];\n    }\n    else {\n        const signalID = getObjId(sub[SubscriptionProp.SIGNAL]);\n        if (!signalID) {\n            return undefined;\n        }\n        if (type <= SubscriptionType.PROP_MUTABLE) {\n            key = sub[SubscriptionProp.ELEMENT_PROP];\n            base += ` ${signalID} ${must(getObjId(sub[SubscriptionProp.ELEMENT]))} ${sub[SubscriptionProp.ELEMENT_PROP]}`;\n        }\n        else if (type <= SubscriptionType.TEXT_MUTABLE) {\n            key =\n                sub.length > SubscriptionProp.ELEMENT_PROP ? sub[SubscriptionProp.ELEMENT_PROP] : undefined;\n            const nodeID = typeof sub[SubscriptionProp.ELEMENT] === 'string'\n                ? sub[SubscriptionProp.ELEMENT]\n                : must(getObjId(sub[SubscriptionProp.ELEMENT]));\n            base += ` ${signalID} ${nodeID}`;\n        }\n        else {\n            assertFail('Should not get here: ' + type);\n        }\n    }\n    if (key) {\n        base += ` ${encodeURI(key)}`;\n    }\n    return base;\n};\nexport const parseSubscription = (sub, getObject) => {\n    const parts = sub.split(' ');\n    const type = parseInt(parts[0], 10);\n    assertTrue(parts.length >= 2, 'At least 2 parts');\n    const host = getObject(parts[1]);\n    if (!host) {\n        return undefined;\n    }\n    if (isSubscriberDescriptor(host) && !host.$el$) {\n        return undefined;\n    }\n    if (type === SubscriptionType.HOST) {\n        assertTrue(parts.length <= 3, 'Max 3 parts');\n        return [type, host, parts.length === 3 ? safeDecode(parts[2]) : undefined];\n    }\n    else if (type <= 2) {\n        assertTrue(parts.length === 6 || parts.length === 7, 'Type B has 5');\n        return [\n            type,\n            host,\n            getObject(parts[2]),\n            getObject(parts[3]),\n            parts[4],\n            safeDecode(parts[5]),\n            safeDecode(parts[6]),\n        ];\n    }\n    assertTrue(type <= 4 && (parts.length === 4 || parts.length === 5), 'Type C has 4');\n    return [\n        type,\n        host,\n        getObject(parts[2]),\n        getObject(parts[3]),\n        safeDecode(parts[4]),\n    ];\n};\nconst safeDecode = (str) => {\n    if (str !== undefined) {\n        return decodeURI(str);\n    }\n    return undefined;\n};\nexport const createSubscriptionManager = (containerState) => {\n    const groupToManagers = new Map();\n    const manager = {\n        $groupToManagers$: groupToManagers,\n        $createManager$: (initialMap) => {\n            return new LocalSubscriptionManager(groupToManagers, containerState, initialMap);\n        },\n        $clearSub$: (group) => {\n            const managers = groupToManagers.get(group);\n            if (managers) {\n                for (const manager of managers) {\n                    manager.$unsubGroup$(group);\n                }\n                groupToManagers.delete(group);\n                managers.length = 0;\n            }\n        },\n        $clearSignal$: (signal) => {\n            const managers = groupToManagers.get(signal[SubscriptionProp.HOST]);\n            if (managers) {\n                for (const manager of managers) {\n                    manager.$unsubEntry$(signal);\n                }\n            }\n        },\n    };\n    seal(manager);\n    return manager;\n};\nexport class LocalSubscriptionManager {\n    constructor($groupToManagers$, $containerState$, initialMap) {\n        this.$groupToManagers$ = $groupToManagers$;\n        this.$containerState$ = $containerState$;\n        this.$subs$ = [];\n        if (initialMap) {\n            this.$addSubs$(initialMap);\n        }\n        seal(this);\n    }\n    $addSubs$(subs) {\n        this.$subs$.push(...subs);\n        for (const sub of this.$subs$) {\n            this.$addToGroup$(sub[SubscriptionProp.HOST], this);\n        }\n    }\n    $addToGroup$(group, manager) {\n        let managers = this.$groupToManagers$.get(group);\n        if (!managers) {\n            this.$groupToManagers$.set(group, (managers = []));\n        }\n        if (!managers.includes(manager)) {\n            managers.push(manager);\n        }\n    }\n    $unsubGroup$(group) {\n        const subs = this.$subs$;\n        for (let i = 0; i < subs.length; i++) {\n            const found = subs[i][SubscriptionProp.HOST] === group;\n            if (found) {\n                subs.splice(i, 1);\n                i--;\n            }\n        }\n    }\n    $unsubEntry$(entry) {\n        const [type, group, signal, elm] = entry;\n        const subs = this.$subs$;\n        if (type === SubscriptionType.PROP_IMMUTABLE || type === SubscriptionType.PROP_MUTABLE) {\n            const prop = entry[SubscriptionProp.ELEMENT_PROP];\n            for (let i = 0; i < subs.length; i++) {\n                const sub = subs[i];\n                const match = sub[SubscriptionProp.TYPE] === type &&\n                    sub[SubscriptionProp.HOST] === group &&\n                    sub[SubscriptionProp.SIGNAL] === signal &&\n                    sub[SubscriptionProp.ELEMENT] === elm &&\n                    sub[SubscriptionProp.ELEMENT_PROP] === prop;\n                if (match) {\n                    subs.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n        else if (type === SubscriptionType.TEXT_IMMUTABLE || type === SubscriptionType.TEXT_MUTABLE) {\n            for (let i = 0; i < subs.length; i++) {\n                const sub = subs[i];\n                const match = sub[SubscriptionProp.TYPE] === type &&\n                    sub[SubscriptionProp.HOST] === group &&\n                    sub[SubscriptionProp.SIGNAL] === signal &&\n                    sub[SubscriptionProp.ELEMENT] === elm;\n                if (match) {\n                    subs.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n    }\n    $addSub$(sub, key) {\n        const subs = this.$subs$;\n        const group = sub[SubscriptionProp.HOST];\n        if (sub[SubscriptionProp.TYPE] === SubscriptionType.HOST &&\n            subs.some(([_type, _group, _key]) => _type === SubscriptionType.HOST && _group === group && _key === key)) {\n            return;\n        }\n        subs.push((__lastSubscription = [...sub, key]));\n        this.$addToGroup$(group, this);\n    }\n    $notifySubs$(key) {\n        // TODO(HACK): we are resubscribing to the signal, so we are removing a sub, we need to iterate over a copy of subs\n        const subs = [...this.$subs$];\n        for (const sub of subs) {\n            const compare = sub[sub.length - 1];\n            if (key && compare && compare !== key) {\n                continue;\n            }\n            if (isContainer2(this.$containerState$)) {\n                const type = sub[SubscriptionProp.TYPE];\n                const host = sub[SubscriptionProp.HOST];\n                const scheduler = this.$containerState$.$scheduler$;\n                if (type == SubscriptionType.HOST) {\n                    if (isTask(host)) {\n                        if (isComputedTask(host)) {\n                            scheduler(ChoreType.COMPUTED, host);\n                        }\n                        else if (isResourceTask(host)) {\n                            scheduler(ChoreType.RESOURCE, host);\n                        }\n                        else {\n                            const task = host;\n                            scheduler(task.$flags$ & TaskFlags.VISIBLE_TASK ? ChoreType.VISIBLE : ChoreType.TASK, task);\n                        }\n                    }\n                    else {\n                        const componentQrl = this.$containerState$.getHostProp(host, OnRenderProp);\n                        assertDefined(componentQrl, 'No Component found at this location');\n                        const componentProps = this.$containerState$.getHostProp(host, ELEMENT_PROPS);\n                        scheduler(ChoreType.COMPONENT, host, componentQrl, componentProps);\n                    }\n                }\n                else {\n                    const signal = sub[SubscriptionProp.SIGNAL];\n                    /**\n                     * TODO(HACK): we need to resubscribe to the value. Example:\n                     *\n                     * ```\n                     * component$(() => {\n                     *  const first = useSignal('');\n                     *  const second = useSignal('');\n                     *\n                     *  return (\n                     *  <>\n                     *     <button\n                     *       onClick$={() => {\n                     *         first.value = 'foo';\n                     *         second.value = 'foo';\n                     *       }}\n                     *     ></button>\n                     *     <div>\n                     *       {first.value && second.value && first.value === second.value ? 'equal' : 'not-equal'}\n                     *      </div>\n                     *   </>\n                     *  );\n                     * });\n                     * ```\n                     *\n                     * If the first value is falsy then the `second.value` is never executing, so the\n                     * subscription is not created.\n                     */\n                    this.$containerState$.$subsManager$.$clearSignal$(sub);\n                    const value = trackSignal(signal, sub);\n                    // end HACK\n                    if (type == SubscriptionType.PROP_IMMUTABLE || type == SubscriptionType.PROP_MUTABLE) {\n                        const target = sub[SubscriptionProp.ELEMENT];\n                        const propKey = sub[SubscriptionProp.ELEMENT_PROP];\n                        const styleScopedId = sub[SubscriptionProp.STYLE_ID];\n                        updateNodeProp(this.$containerState$, styleScopedId || null, target, propKey, \n                        // untrack(() => signal.value),\n                        value, type == SubscriptionType.PROP_IMMUTABLE);\n                    }\n                    else {\n                        scheduler(ChoreType.NODE_DIFF, host, sub[SubscriptionProp.ELEMENT], \n                        // untrack(() => signal.value)\n                        value);\n                    }\n                }\n            }\n            else {\n                notifyChange(sub, this.$containerState$);\n            }\n        }\n    }\n}\nfunction updateNodeProp(container, styleScopedId, target, propKey, propValue, immutable) {\n    let value = propValue;\n    value = serializeAttribute(propKey, value, styleScopedId);\n    if (!immutable) {\n        vnode_setAttr(container.$journal$, target, propKey, value);\n    }\n    else {\n        // the immutable attr/prop should not be saved into vnode props, so just push to the journal\n        const element = target[ElementVNodeProps.element];\n        container.$journal$.push(VNodeJournalOpCode.SetAttribute, element, propKey, value);\n    }\n    container.$scheduler$(ChoreType.JOURNAL_FLUSH);\n}\nlet __lastSubscription;\nexport function getLastSubscription() {\n    // HACK(misko): This is a hack to get the last subscription.\n    // It is used by `executeSignalOperation` to update the target element\n    // after the subscription has been created.\n    return __lastSubscription;\n}\nconst must = (a) => {\n    if (a == null) {\n        throw logError('must be non null', a);\n    }\n    return a;\n};\n//# sourceMappingURL=data:application/json;base64,","import { isDev } from '@builder.io/qwik/build';\nimport { assertDefined } from '../error/assert';\nimport { qError, QError_qrlIsNotFunction } from '../error/error';\nimport { getPlatform, isServerPlatform } from '../platform/platform';\nimport { verifySerializable } from '../state/common';\nimport { isSignal } from '../state/signal';\nimport { invoke, newInvokeContext, newInvokeContextFromTuple, tryGetInvokeContext, } from '../use/use-core';\nimport { getQFuncs, QInstanceAttr } from '../util/markers';\nimport { maybeThen } from '../util/promises';\nimport { qDev, qSerialize, qTest, seal } from '../util/qdev';\nimport { isArray, isFunction } from '../util/types';\nexport const isQrl = (value) => {\n    return typeof value === 'function' && typeof value.getSymbol === 'function';\n};\n// Make sure this value is same as value in `platform.ts`\nexport const SYNC_QRL = '<sync>';\n/** Sync QRL is a function which is serialized into `<script q:func=\"qwik/json\">` tag. */\nexport const isSyncQrl = (value) => {\n    return isQrl(value) && value.$symbol$ == SYNC_QRL;\n};\nexport const createQRL = (chunk, symbol, symbolRef, symbolFn, capture, captureRef, refSymbol) => {\n    if (qDev && qSerialize) {\n        if (captureRef) {\n            for (const item of captureRef) {\n                verifySerializable(item, 'Captured variable in the closure can not be serialized');\n            }\n        }\n    }\n    let _containerEl;\n    const qrl = async function (...args) {\n        const fn = invokeFn.call(this, tryGetInvokeContext());\n        const result = await fn(...args);\n        return result;\n    };\n    const setContainer = (el) => {\n        if (!_containerEl) {\n            _containerEl = el;\n        }\n        return _containerEl;\n    };\n    // Wrap functions to provide their lexical scope\n    const wrapFn = (fn) => {\n        if (typeof fn !== 'function' || (!capture?.length && !captureRef?.length)) {\n            return fn;\n        }\n        return function (...args) {\n            let context = tryGetInvokeContext();\n            if (context) {\n                return fn.apply(this, args);\n            }\n            context = newInvokeContext();\n            context.$qrl$ = qrl;\n            context.$event$ = this;\n            return invoke.call(this, context, fn, ...args);\n        };\n    };\n    const resolve = async (containerEl) => {\n        if (symbolRef !== null) {\n            // Resolving (Promise) or already resolved (value)\n            return symbolRef;\n        }\n        if (containerEl) {\n            setContainer(containerEl);\n        }\n        if (chunk === '') {\n            // Sync QRL\n            assertDefined(_containerEl, 'Sync QRL must have container element');\n            const hash = _containerEl.getAttribute(QInstanceAttr);\n            const doc = _containerEl.ownerDocument;\n            const qFuncs = getQFuncs(doc, hash);\n            // No need to wrap, syncQRLs can't have captured scope\n            return (qrl.resolved = symbolRef = qFuncs[Number(symbol)]);\n        }\n        const start = now();\n        const ctx = tryGetInvokeContext();\n        if (symbolFn !== null) {\n            symbolRef = symbolFn().then((module) => (qrl.resolved = symbolRef = wrapFn(module[symbol])));\n        }\n        else {\n            const imported = getPlatform().importSymbol(_containerEl, chunk, symbol);\n            symbolRef = maybeThen(imported, (ref) => (qrl.resolved = symbolRef = wrapFn(ref)));\n        }\n        symbolRef.finally(() => emitUsedSymbol(symbol, ctx?.$element$, start));\n        return symbolRef;\n    };\n    const resolveLazy = (containerEl) => {\n        return symbolRef !== null ? symbolRef : resolve(containerEl);\n    };\n    function invokeFn(currentCtx, beforeFn) {\n        // Note that we bind the current `this`\n        return (...args) => maybeThen(resolveLazy(), (f) => {\n            if (!isFunction(f)) {\n                throw qError(QError_qrlIsNotFunction);\n            }\n            if (beforeFn && beforeFn() === false) {\n                return;\n            }\n            const context = createOrReuseInvocationContext(currentCtx);\n            const prevQrl = context.$qrl$;\n            const prevEvent = context.$event$;\n            // Note that we set the qrl here instead of in wrapFn because\n            // it is possible we're called on a copied qrl\n            context.$qrl$ = qrl;\n            context.$event$ || (context.$event$ = this);\n            try {\n                return invoke.call(this, context, f, ...args);\n            }\n            finally {\n                context.$qrl$ = prevQrl;\n                context.$event$ = prevEvent;\n            }\n        });\n    }\n    const createOrReuseInvocationContext = (invoke) => {\n        if (invoke == null) {\n            return newInvokeContext();\n        }\n        else if (isArray(invoke)) {\n            return newInvokeContextFromTuple(invoke);\n        }\n        else {\n            return invoke;\n        }\n    };\n    const resolvedSymbol = refSymbol ?? symbol;\n    const hash = getSymbolHash(resolvedSymbol);\n    Object.assign(qrl, {\n        getSymbol: () => resolvedSymbol,\n        getHash: () => hash,\n        getCaptured: () => captureRef,\n        resolve,\n        $resolveLazy$: resolveLazy,\n        $setContainer$: setContainer,\n        $chunk$: chunk,\n        $symbol$: symbol,\n        $refSymbol$: refSymbol,\n        $hash$: hash,\n        getFn: invokeFn,\n        $capture$: capture,\n        $captureRef$: captureRef,\n        dev: null,\n        resolved: undefined,\n    });\n    if (symbolRef) {\n        // Replace symbolRef with (a promise for) the value or wrapped function\n        symbolRef = maybeThen(symbolRef, (resolved) => (qrl.resolved = symbolRef = wrapFn(resolved)));\n    }\n    if (isDev) {\n        Object.defineProperty(qrl, '_devOnlySymbolRef', {\n            get() {\n                return symbolRef;\n            },\n        });\n    }\n    if (qDev) {\n        seal(qrl);\n    }\n    return qrl;\n};\nexport const getSymbolHash = (symbolName) => {\n    const index = symbolName.lastIndexOf('_');\n    if (index > -1) {\n        return symbolName.slice(index + 1);\n    }\n    return symbolName;\n};\nexport function assertQrl(qrl) {\n    if (qDev) {\n        if (!isQrl(qrl)) {\n            throw new Error('Not a QRL');\n        }\n    }\n}\nexport function assertSignal(obj) {\n    if (qDev) {\n        if (!isSignal(obj)) {\n            throw new Error('Not a Signal');\n        }\n    }\n}\nconst EMITTED = /*#__PURE__*/ new Set();\nexport const emitUsedSymbol = (symbol, element, reqTime) => {\n    if (!EMITTED.has(symbol)) {\n        EMITTED.add(symbol);\n        emitEvent('qsymbol', {\n            symbol,\n            element,\n            reqTime,\n        });\n    }\n};\nexport const emitEvent = (eventName, detail) => {\n    if (!qTest && !isServerPlatform() && typeof document === 'object') {\n        document.dispatchEvent(new CustomEvent(eventName, {\n            bubbles: false,\n            detail,\n        }));\n    }\n};\nconst now = () => {\n    if (qTest || isServerPlatform()) {\n        return 0;\n    }\n    if (typeof performance === 'object') {\n        return performance.now();\n    }\n    return 0;\n};\n//# sourceMappingURL=data:application/json;base64,","import { implicit$FirstArg } from '../util/implicit_dollar';\nimport { qDev, qRuntimeQrl } from '../util/qdev';\nimport { SYNC_QRL, createQRL } from './qrl-class';\nlet runtimeSymbolId = 0;\n// <docs markdown=\"../readme.md#$\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#$ instead)\n/**\n * Qwik Optimizer marker function.\n *\n * Use `$(...)` to tell Qwik Optimizer to extract the expression in `$(...)` into a lazy-loadable\n * resource referenced by `QRL`.\n *\n * @param expression - Expression which should be lazy loaded\n * @public\n * @see `implicit$FirstArg` for additional `____$(...)` rules.\n *\n * In this example, `$(...)` is used to capture the callback function of `onmousemove` into a\n * lazy-loadable reference. This allows the code to refer to the function without actually\n * loading the function. In this example, the callback function does not get loaded until\n * `mousemove` event fires.\n *\n * ```tsx\n * useOnDocument(\n *   'mousemove',\n *   $((event) => console.log('mousemove', event))\n * );\n * ```\n *\n * In this code, the Qwik Optimizer detects `$(...)` and transforms the code into:\n *\n * ```tsx\n * // FILE: <current file>\n * useOnDocument('mousemove', qrl('./chunk-abc.js', 'onMousemove'));\n *\n * // FILE: chunk-abc.js\n * export const onMousemove = () => console.log('mousemove');\n * ```\n *\n * ## Special Rules\n *\n * The Qwik Optimizer places special rules on functions that can be lazy-loaded.\n *\n * 1. The expression of the `$(expression)` function must be importable by the system.\n * (expression shows up in `import` or has `export`)\n * 2. If inlined function, then all lexically captured values must be:\n *    - importable (vars show up in `import`s or `export`s)\n *    - const (The capturing process differs from JS capturing in that writing to captured\n * variables does not update them, and therefore writes are forbidden. The best practice is that\n * all captured variables are constants.)\n *    - Must be runtime serializable.\n *\n * ```tsx\n *\n * import { createContextId, useContext, useContextProvider } from './use/use-context';\n * import { Resource, useResource$ } from './use/use-resource';\n * import { useSignal } from './use/use-signal';\n *\n * export const greet = () => console.log('greet');\n * function topLevelFn() {}\n *\n * function myCode() {\n *   const store = useStore({});\n *   function localFn() {}\n *   // Valid Examples\n *   $(greet); // greet is importable\n *   $(() => greet()); // greet is importable;\n *   $(() => console.log(store)); // store is serializable.\n *\n *   // Compile time errors\n *   $(topLevelFn); // ERROR: `topLevelFn` not importable\n *   $(() => topLevelFn()); // ERROR: `topLevelFn` not importable\n *\n *   // Runtime errors\n *   $(localFn); // ERROR: `localFn` fails serialization\n *   $(() => localFn()); // ERROR: `localFn` fails serialization\n * }\n *\n * ```\n */\n// </docs>\nexport const $ = (expression) => {\n    if (!qRuntimeQrl && qDev) {\n        throw new Error('Optimizer should replace all usages of $() with some special syntax. If you need to create a QRL manually, use inlinedQrl() instead.');\n    }\n    return createQRL(null, 's' + runtimeSymbolId++, expression, null, null, null, null);\n};\n/** @private Use To avoid optimizer replacement */\nexport const dollar = $;\n/** @public */\nexport const eventQrl = (qrl) => {\n    return qrl;\n};\n/** @public */\nexport const event$ = implicit$FirstArg(eventQrl);\n/**\n * Extract function into a synchronously loadable QRL.\n *\n * NOTE: Synchronous QRLs functions can't close over any variables, including exports.\n *\n * @param fn - Function to extract.\n * @returns\n * @alpha\n */\nexport const sync$ = (fn) => {\n    if (!qRuntimeQrl && qDev) {\n        throw new Error('Optimizer should replace all usages of sync$() with some special syntax. If you need to create a QRL manually, use inlinedSyncQrl() instead.');\n    }\n    if (qDev) {\n        // To make sure that in dev mode we don't accidentally capture context in `sync$()` we serialize and deserialize the function.\n        // eslint-disable-next-line no-new-func\n        fn = new Function('return ' + fn.toString())();\n    }\n    return createQRL('', SYNC_QRL, fn, null, null, null, null);\n};\n/**\n * Extract function into a synchronously loadable QRL.\n *\n * NOTE: Synchronous QRLs functions can't close over any variables, including exports.\n *\n * @param fn - Extracted function\n * @param serializedFn - Serialized function in string form.\n * @returns\n * @alpha\n */\nexport const _qrlSync = function (fn, serializedFn) {\n    if (serializedFn === undefined) {\n        serializedFn = fn.toString();\n    }\n    return createQRL('', SYNC_QRL, fn, null, null, null, null);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXJsLnB1YmxpYy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9xcmwvcXJsLnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUVqRCxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQXdLbEQsSUFBSSxlQUFlLEdBQUcsQ0FBQyxDQUFDO0FBU3hCLG1DQUFtQztBQUNuQyx5Q0FBeUM7QUFDekMsZ0NBQWdDO0FBQ2hDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F3RUc7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUksVUFBYSxFQUFVLEVBQUU7SUFDNUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUN6QixNQUFNLElBQUksS0FBSyxDQUNiLHNJQUFzSSxDQUN2SSxDQUFDO0lBQ0osQ0FBQztJQUVELE9BQU8sU0FBUyxDQUFJLElBQUksRUFBRSxHQUFHLEdBQUcsZUFBZSxFQUFFLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3pGLENBQUMsQ0FBQztBQUNGLGtEQUFrRDtBQUNsRCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBRXhCLGNBQWM7QUFDZCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBSSxHQUFXLEVBQVUsRUFBRTtJQUNqRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMsQ0FBQztBQUVGLGNBQWM7QUFDZCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7QUFvQmxEOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQXFCLEVBQUssRUFBYyxFQUFFO0lBQzdELElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxFQUFFLENBQUM7UUFDekIsTUFBTSxJQUFJLEtBQUssQ0FDYiw4SUFBOEksQ0FDL0ksQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ1QsOEhBQThIO1FBQzlILHVDQUF1QztRQUN2QyxFQUFFLEdBQUcsSUFBSSxRQUFRLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFTLENBQUM7SUFDeEQsQ0FBQztJQUVELE9BQU8sU0FBUyxDQUFJLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBUSxDQUFDO0FBQ3ZFLENBQUMsQ0FBQztBQUVGOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxVQUN0QixFQUFRLEVBQ1IsWUFBcUI7SUFFckIsSUFBSSxZQUFZLEtBQUssU0FBUyxFQUFFLENBQUM7UUFDL0IsWUFBWSxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBQ0QsT0FBTyxTQUFTLENBQU8sRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFRLENBQUM7QUFDMUUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW1wbGljaXQkRmlyc3RBcmcgfSBmcm9tICcuLi91dGlsL2ltcGxpY2l0X2RvbGxhcic7XG5pbXBvcnQgeyBxRGV2LCBxUnVudGltZVFybCB9IGZyb20gJy4uL3V0aWwvcWRldic7XG5pbXBvcnQgdHlwZSB7IFFSTERldiB9IGZyb20gJy4vcXJsJztcbmltcG9ydCB7IFNZTkNfUVJMLCBjcmVhdGVRUkwgfSBmcm9tICcuL3FybC1jbGFzcyc7XG5cbi8vIFdlIHVzZSBgdW5rbm93bmAgaW5zdGVhZCBvZiBgbmV2ZXJgIHdoZW4gaXQncyBub3QgYSBmdW5jdGlvbiBzbyB3ZSBhbGxvdyBhc3NpZ25pbmcgUVJMPGZ1bmN0aW9uPiB0byBRUkw8YW55PlxuZXhwb3J0IHR5cGUgUXJsQXJnczxUPiA9IFQgZXh0ZW5kcyAoLi4uYXJnczogaW5mZXIgQVJHUykgPT4gYW55ID8gQVJHUyA6IHVua25vd25bXTtcbmV4cG9ydCB0eXBlIFFybFJldHVybjxUPiA9IFQgZXh0ZW5kcyAoLi4uYXJnczogYW55KSA9PiBpbmZlciBSID8gQXdhaXRlZDxSPiA6IHVua25vd247XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI1FSTFwiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCNRUkwgaW5zdGVhZClcbi8qKlxuICogVGhlIGBRUkxgIHR5cGUgcmVwcmVzZW50cyBhIGxhenktbG9hZGFibGUgQU5EIHNlcmlhbGl6YWJsZSByZXNvdXJjZS5cbiAqXG4gKiBRUkwgc3RhbmRzIGZvciBRd2lrIFVSTC5cbiAqXG4gKiBVc2UgYFFSTGAgd2hlbiB5b3Ugd2FudCB0byByZWZlciB0byBhIGxhenktbG9hZGVkIHJlc291cmNlLiBgUVJMYHMgYXJlIG1vc3Qgb2Z0ZW4gdXNlZCBmb3IgY29kZVxuICogKGZ1bmN0aW9ucykgYnV0IGNhbiBhbHNvIGJlIHVzZWQgZm9yIG90aGVyIHJlc291cmNlcyBzdWNoIGFzIGBzdHJpbmdgcyBpbiB0aGUgY2FzZSBvZiBzdHlsZXMuXG4gKlxuICogYFFSTGAgaXMgYW4gb3BhcXVlIHRva2VuIHRoYXQgaXMgZ2VuZXJhdGVkIGJ5IHRoZSBRd2lrIE9wdGltaXplci4gKERvIG5vdCByZWx5IG9uIGFueSBwcm9wZXJ0aWVzXG4gKiBpbiBgUVJMYCBhcyBpdCBtYXkgY2hhbmdlIGJldHdlZW4gdmVyc2lvbnMuKVxuICpcbiAqICMjIENyZWF0aW5nIGBRUkxgIHJlZmVyZW5jZXNcbiAqXG4gKiBDcmVhdGluZyBgUVJMYCBpcyBkb25lIHVzaW5nIGAkKC4uLilgIGZ1bmN0aW9uLiBgJCguLi4pYCBpcyBhIHNwZWNpYWwgbWFya2VyIGZvciB0aGUgUXdpa1xuICogT3B0aW1pemVyIHRoYXQgbWFya3MgdGhhdCB0aGUgY29kZSBzaG91bGQgYmUgZXh0cmFjdGVkIGludG8gYSBsYXp5LWxvYWRlZCBzeW1ib2wuXG4gKlxuICogYGBgdHN4XG4gKiB1c2VPbkRvY3VtZW50KFxuICogICAnbW91c2Vtb3ZlJyxcbiAqICAgJCgoZXZlbnQpID0+IGNvbnNvbGUubG9nKCdtb3VzZW1vdmUnLCBldmVudCkpXG4gKiApO1xuICogYGBgXG4gKlxuICogSW4gdGhlIGFib3ZlIGNvZGUsIHRoZSBRd2lrIE9wdGltaXplciBkZXRlY3RzIGAkKC4uLilgIGFuZCB0cmFuc2Zvcm1zIHRoZSBjb2RlIGFzIHNob3duIGJlbG93OlxuICpcbiAqIGBgYHRzeFxuICogLy8gRklMRTogPGN1cnJlbnQgZmlsZT5cbiAqIHVzZU9uRG9jdW1lbnQoJ21vdXNlbW92ZScsIHFybCgnLi9jaHVuay1hYmMuanMnLCAnb25Nb3VzZW1vdmUnKSk7XG4gKlxuICogLy8gRklMRTogY2h1bmstYWJjLmpzXG4gKiBleHBvcnQgY29uc3Qgb25Nb3VzZW1vdmUgPSAoKSA9PiBjb25zb2xlLmxvZygnbW91c2Vtb3ZlJyk7XG4gKiBgYGBcbiAqXG4gKiBOT1RFOiBgcXJsKC4uLilgIGlzIGEgcmVzdWx0IG9mIFF3aWsgT3B0aW1pemVyIHRyYW5zZm9ybWF0aW9uLiBZb3Ugc2hvdWxkIG5ldmVyIGhhdmUgdG8gaW52b2tlXG4gKiB0aGlzIGZ1bmN0aW9uIGRpcmVjdGx5IGluIHlvdXIgYXBwbGljYXRpb24uIFRoZSBgcXJsKC4uLilgIGZ1bmN0aW9uIHNob3VsZCBiZSBpbnZva2VkIG9ubHkgYWZ0ZXJcbiAqIHRoZSBRd2lrIE9wdGltaXplciB0cmFuc2Zvcm1hdGlvbi5cbiAqXG4gKiAjIyBVc2luZyBgUVJMYHNcbiAqXG4gKiBVc2UgYFFSTGAgdHlwZSBpbiB5b3VyIGFwcGxpY2F0aW9uIHdoZW4geW91IHdhbnQgdG8gZ2V0IGEgbGF6eS1sb2FkYWJsZSByZWZlcmVuY2UgdG8gYSByZXNvdXJjZVxuICogKG1vc3QgbGlrZWx5IGEgZnVuY3Rpb24pLlxuICpcbiAqIGBgYHRzeFxuICogLy8gRXhhbXBsZSBvZiBkZWNsYXJpbmcgYSBjdXN0b20gZnVuY3Rpb25zIHdoaWNoIHRha2VzIGNhbGxiYWNrIGFzIFFSTC5cbiAqIGV4cG9ydCBmdW5jdGlvbiB1c2VNeUZ1bmN0aW9uKGNhbGxiYWNrOiBRUkw8KCkgPT4gdm9pZD4pIHtcbiAqICAgZG9FeHRyYVN0dWZmKCk7XG4gKiAgIC8vIFRoZSBjYWxsYmFjayBwYXNzZWQgdG8gYG9uRG9jdW1lbnRgIHJlcXVpcmVzIGBRUkxgLlxuICogICB1c2VPbkRvY3VtZW50KCdtb3VzZW1vdmUnLCBjYWxsYmFjayk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBJbiB0aGUgYWJvdmUgZXhhbXBsZSwgdGhlIHdheSB0byB0aGluayBhYm91dCB0aGUgY29kZSBpcyB0aGF0IHlvdSBhcmUgbm90IGFza2luZyBmb3IgYSBjYWxsYmFja1xuICogZnVuY3Rpb24gYnV0IHJhdGhlciBhIHJlZmVyZW5jZSB0byBhIGxhenktbG9hZGFibGUgY2FsbGJhY2sgZnVuY3Rpb24uIFNwZWNpZmljYWxseSwgdGhlIGZ1bmN0aW9uXG4gKiBsb2FkaW5nIHNob3VsZCBiZSBkZWxheWVkIHVudGlsIGl0IGlzIGFjdHVhbGx5IG5lZWRlZC4gSW4gdGhlIGFib3ZlIGV4YW1wbGUsIHRoZSBmdW5jdGlvbiB3b3VsZFxuICogbm90IGxvYWQgdW50aWwgYWZ0ZXIgYSBgbW91c2Vtb3ZlYCBldmVudCBvbiBgZG9jdW1lbnRgIGZpcmVzLlxuICpcbiAqICMjIFJlc29sdmluZyBgUVJMYCByZWZlcmVuY2VzXG4gKlxuICogQXQgdGltZXMgaXQgbWF5IGJlIG5lY2Vzc2FyeSB0byByZXNvbHZlIGEgYFFSTGAgcmVmZXJlbmNlIHRvIHRoZSBhY3R1YWwgdmFsdWUuIFRoaXMgY2FuIGJlXG4gKiBwZXJmb3JtZWQgdXNpbmcgYFFSTC5yZXNvbHZlKC4uKWAgZnVuY3Rpb24uXG4gKlxuICogYGBgdHN4XG4gKiAvLyBBc3N1bWUgeW91IGhhdmUgUVJMIHJlZmVyZW5jZSB0byBhIGdyZWV0IGZ1bmN0aW9uXG4gKiBjb25zdCBsYXp5R3JlZXQ6IFFSTDwoKSA9PiB2b2lkPiA9ICQoKCkgPT4gY29uc29sZS5sb2coJ0hlbGxvIFdvcmxkIScpKTtcbiAqXG4gKiAvLyBVc2UgYHFybEltcG9ydGAgdG8gbG9hZCAvIHJlc29sdmUgdGhlIHJlZmVyZW5jZS5cbiAqIGNvbnN0IGdyZWV0OiAoKSA9PiB2b2lkID0gYXdhaXQgbGF6eUdyZWV0LnJlc29sdmUoKTtcbiAqXG4gKiAvLyAgSW52b2tlIGl0XG4gKiBncmVldCgpO1xuICogYGBgXG4gKlxuICogTk9URTogYGVsZW1lbnRgIGlzIG5lZWRlZCBiZWNhdXNlIGBRUkxgcyBhcmUgcmVsYXRpdmUgYW5kIG5lZWQgYSBiYXNlIGxvY2F0aW9uIHRvIHJlc29sdmVcbiAqIGFnYWluc3QuIFRoZSBiYXNlIGxvY2F0aW9uIGlzIGVuY29kZWQgaW4gdGhlIEhUTUwgaW4gdGhlIGZvcm0gb2YgYDxkaXYgcTpiYXNlPVwiL3VybFwiPmAuXG4gKlxuICogIyMgYFFSTC5yZXNvbHZlZGBcbiAqXG4gKiBPbmNlIGBRUkwucmVzb2x2ZSgpYCByZXR1cm5zLCB0aGUgdmFsdWUgaXMgc3RvcmVkIHVuZGVyIGBRUkwucmVzb2x2ZWRgLiBUaGlzIGFsbG93cyB0aGUgdmFsdWUgdG9cbiAqIGJlIHVzZWQgd2l0aG91dCBoYXZpbmcgdG8gYXdhaXQgYFFSTC5yZXNvbHZlKClgIGFnYWluLlxuICpcbiAqICMjIFF1ZXN0aW9uOiBXaHkgbm90IGp1c3QgdXNlIGBpbXBvcnQoKWA/XG4gKlxuICogQXQgZmlyc3QgZ2xhbmNlLCBgUVJMYCBzZXJ2ZXMgdGhlIHNhbWUgcHVycG9zZSBhcyBgaW1wb3J0KClgLiBIb3dldmVyLCB0aGVyZSBhcmUgdGhyZWUgc3VidGxlXG4gKiBkaWZmZXJlbmNlcyB0aGF0IG5lZWQgdG8gYmUgdGFrZW4gaW50byBhY2NvdW50LlxuICpcbiAqIDEuIGBRUkxgcyBtdXN0IGJlIHNlcmlhbGl6YWJsZSBpbnRvIEhUTUwuXG4gKiAyLiBgUVJMYHMgbXVzdCBiZSByZXNvbHZlZCBieSBmcmFtZXdvcmsgcmVsYXRpdmUgdG8gYHE6YmFzZWAuXG4gKiAzLiBgUVJMYHMgbXVzdCBiZSBhYmxlIHRvIGNhcHR1cmUgbGV4aWNhbGx5IHNjb3BlZCB2YXJpYWJsZXMuXG4gKiA0LiBgUVJMYHMgZW5jYXBzdWxhdGUgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBydW5uaW5nIHdpdGggYW5kIHdpdGhvdXQgUXdpayBPcHRpbWl6ZXIuXG4gKiA1LiBgUVJMYHMgYWxsb3cgZXhwcmVzc2luZyBsYXp5LWxvYWRlZCBib3VuZGFyaWVzIHdpdGhvdXQgdGhpbmtpbmcgYWJvdXQgY2h1bmsgYW5kIHN5bWJvbCBuYW1lcy5cbiAqXG4gKiBMZXQncyBhc3N1bWUgdGhhdCB5b3UgaW50ZW5kIHRvIHdyaXRlIGNvZGUgc3VjaCBhcyB0aGlzOlxuICpcbiAqIGBgYHRzeFxuICogcmV0dXJuIDxidXR0b24gb25DbGljaz17KCkgPT4gKGF3YWl0IGltcG9ydCgnLi9jaHVuay1hYmMuanMnKSkub25DbGlja30+XG4gKiBgYGBcbiAqXG4gKiBUaGUgYWJvdmUgY29kZSBuZWVkcyB0byBiZSBzZXJpYWxpemVkIGludG8gRE9NIHN1Y2ggYXM6XG4gKlxuICogYGBgXG4gKiA8ZGl2IHE6YmFzZT1cIi9idWlsZC9cIj5cbiAqICAgPGJ1dHRvbiBvbjpjbGljaz1cIi4vY2h1bmstYWJjLmpzI29uQ2xpY2tcIj4uLi48L2J1dHRvbj5cbiAqIDwvZGl2PlxuICogYGBgXG4gKlxuICogMS4gTm90aWNlIHRoZXJlIGlzIG5vIGVhc3kgd2F5IHRvIGV4dHJhY3QgY2h1bmsgKGAuL2NodW5rLWFiYy5qc2ApIGFuZCBzeW1ib2wgKGBvbkNsaWNrYCkgaW50byBIVE1MLlxuICogMi4gTm90aWNlIHRoYXQgZXZlbiBpZiB5b3UgY291bGQgZXh0cmFjdCBpdCwgdGhlIGBpbXBvcnQoJy4vY2h1bmstYWJjLmpzJylgIHdvdWxkIGJlY29tZSByZWxhdGl2ZSB0b1xuICogICAgd2hlcmUgdGhlIGBpbXBvcnQoKWAgZmlsZSBpcyBkZWNsYXJlZC4gQmVjYXVzZSBpdCBpcyBvdXIgZnJhbWV3b3JrIGRvaW5nIHRoZSBsb2FkLCB0aGVcbiAqICAgIGAuL2NodW5rLWFiYy5qc2Agd291bGQgYmVjb21lIHJlbGF0aXZlIHRvIHRoZSBmcmFtZXdvcmsgZmlsZS4gVGhpcyBpcyBub3QgY29ycmVjdCwgYXMgaXRcbiAqICAgIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgb3JpZ2luYWwgZmlsZSBnZW5lcmF0ZWQgYnkgdGhlIGJ1bmRsZXIuXG4gKiAzLiBOZXh0LCB0aGUgZnJhbWV3b3JrIG5lZWRzIHRvIHJlc29sdmUgdGhlIGAuL2NodW5rLWFiYy5qc2AgYW5kIG5lZWRzIGEgYmFzZSBsb2NhdGlvbiB0aGF0IGlzXG4gKiAgICBlbmNvZGVkIGluIHRoZSBIVE1MLlxuICogNC4gVGhlIFFSTCBuZWVkcyB0byBiZSBhYmxlIHRvIGNhcHR1cmUgbGV4aWNhbGx5IHNjb3BlZCB2YXJpYWJsZXMuIChgaW1wb3J0KClgIG9ubHkgYWxsb3dzIGxvYWRpbmdcbiAqICAgIHRvcC1sZXZlbCBzeW1ib2xzIHdoaWNoIGRvbid0IGNhcHR1cmUgdmFyaWFibGVzLilcbiAqIDUuIEFzIGEgZGV2ZWxvcGVyLCB5b3UgZG9uJ3Qgd2FudCB0byB0aGluayBhYm91dCBgaW1wb3J0YCBhbmQgbmFtaW5nIHRoZSBjaHVua3MgYW5kIHN5bWJvbHMuIFlvdVxuICogICAganVzdCB3YW50IHRvIHNheTogXCJ0aGlzIHNob3VsZCBiZSBsYXp5LlwiXG4gKlxuICogVGhlc2UgYXJlIHRoZSBtYWluIHJlYXNvbnMgd2h5IFF3aWsgaW50cm9kdWNlcyBpdHMgb3duIGNvbmNlcHQgb2YgYFFSTGAuXG4gKlxuICogQHB1YmxpY1xuICogQHNlZSBgJGBcbiAqL1xuLy8gPC9kb2NzPlxuZXhwb3J0IHR5cGUgUVJMPFRZUEUgPSB1bmtub3duPiA9IHtcbiAgLy8gU3BlY2lhbCB0eXBlIGJyYW5kIHRvIGxldCBlc2xpbnQgdGhhdCB0aGUgVHlwZSBpcyBzZXJpYWxpemFibGVcbiAgX19xd2lrX3NlcmlhbGl6YWJsZV9fPzogYW55O1xuICBfX2JyYW5kX19RUkxfXzogVFlQRTtcblxuICAvKiogUmVzb2x2ZSB0aGUgUVJMIGFuZCByZXR1cm4gdGhlIGFjdHVhbCB2YWx1ZS4gKi9cbiAgcmVzb2x2ZSgpOiBQcm9taXNlPFRZUEU+O1xuICAvKiogVGhlIHJlc29sdmVkIHZhbHVlLCBvbmNlIGByZXNvbHZlKClgIHJldHVybnMuICovXG4gIHJlc29sdmVkOiB1bmRlZmluZWQgfCBUWVBFO1xuXG4gIGdldENhcHR1cmVkKCk6IHVua25vd25bXSB8IG51bGw7XG4gIGdldFN5bWJvbCgpOiBzdHJpbmc7XG4gIGdldEhhc2goKTogc3RyaW5nO1xuICBkZXY6IFFSTERldiB8IG51bGw7XG59ICYgQml2YXJpYW50UXJsRm48UXJsQXJnczxUWVBFPiwgUXJsUmV0dXJuPFRZUEU+PjtcblxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTI2Njc5NTkvd2hhdC1pcy10aGUtcHVycG9zZS1vZi1iaXZhcmlhbmNlaGFjay1pbi10eXBlc2NyaXB0LXR5cGVzLzUyNjY4MTMzIzUyNjY4MTMzXG50eXBlIEJpdmFyaWFudFFybEZuPEFSR1MgZXh0ZW5kcyBhbnlbXSwgUkVUVVJOPiA9IHtcbiAgLyoqXG4gICAqIFJlc29sdmUgdGhlIFFSTCBvZiBjbG9zdXJlIGFuZCBpbnZva2UgaXQuXG4gICAqXG4gICAqIEBwYXJhbSBhcmdzIC0gQ2xvc3VyZSBhcmd1bWVudHMuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSBvZiB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBjbG9zdXJlLlxuICAgKi9cbiAgYml2YXJpYW5jZUhhY2soLi4uYXJnczogQVJHUyk6IFByb21pc2U8UkVUVVJOPjtcbn1bJ2JpdmFyaWFuY2VIYWNrJ107XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIGBRUkw8PmAgaW5zdGVhZFxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBQcm9wRm5JbnRlcmZhY2U8QVJHUyBleHRlbmRzIGFueVtdLCBSRVQ+ID0ge1xuICBfX3F3aWtfc2VyaWFsaXphYmxlX18/OiBhbnk7XG4gICguLi5hcmdzOiBBUkdTKTogUHJvbWlzZTxSRVQ+O1xufTtcblxubGV0IHJ1bnRpbWVTeW1ib2xJZCA9IDA7XG5cbi8qKlxuICogQWxpYXMgZm9yIGBRUkw8VD5gLiBPZiBoaXN0b3JpYyByZWxldmFuY2Ugb25seS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIFByb3BGdW5jdGlvbjxUPiA9IFFSTDxUPjtcblxuLy8gPGRvY3MgbWFya2Rvd249XCIuLi9yZWFkbWUubWQjJFwiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCMkIGluc3RlYWQpXG4vKipcbiAqIFF3aWsgT3B0aW1pemVyIG1hcmtlciBmdW5jdGlvbi5cbiAqXG4gKiBVc2UgYCQoLi4uKWAgdG8gdGVsbCBRd2lrIE9wdGltaXplciB0byBleHRyYWN0IHRoZSBleHByZXNzaW9uIGluIGAkKC4uLilgIGludG8gYSBsYXp5LWxvYWRhYmxlXG4gKiByZXNvdXJjZSByZWZlcmVuY2VkIGJ5IGBRUkxgLlxuICpcbiAqIEBwYXJhbSBleHByZXNzaW9uIC0gRXhwcmVzc2lvbiB3aGljaCBzaG91bGQgYmUgbGF6eSBsb2FkZWRcbiAqIEBwdWJsaWNcbiAqIEBzZWUgYGltcGxpY2l0JEZpcnN0QXJnYCBmb3IgYWRkaXRpb25hbCBgX19fXyQoLi4uKWAgcnVsZXMuXG4gKlxuICogSW4gdGhpcyBleGFtcGxlLCBgJCguLi4pYCBpcyB1c2VkIHRvIGNhcHR1cmUgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIG9mIGBvbm1vdXNlbW92ZWAgaW50byBhXG4gKiBsYXp5LWxvYWRhYmxlIHJlZmVyZW5jZS4gVGhpcyBhbGxvd3MgdGhlIGNvZGUgdG8gcmVmZXIgdG8gdGhlIGZ1bmN0aW9uIHdpdGhvdXQgYWN0dWFsbHlcbiAqIGxvYWRpbmcgdGhlIGZ1bmN0aW9uLiBJbiB0aGlzIGV4YW1wbGUsIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBkb2VzIG5vdCBnZXQgbG9hZGVkIHVudGlsXG4gKiBgbW91c2Vtb3ZlYCBldmVudCBmaXJlcy5cbiAqXG4gKiBgYGB0c3hcbiAqIHVzZU9uRG9jdW1lbnQoXG4gKiAgICdtb3VzZW1vdmUnLFxuICogICAkKChldmVudCkgPT4gY29uc29sZS5sb2coJ21vdXNlbW92ZScsIGV2ZW50KSlcbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBJbiB0aGlzIGNvZGUsIHRoZSBRd2lrIE9wdGltaXplciBkZXRlY3RzIGAkKC4uLilgIGFuZCB0cmFuc2Zvcm1zIHRoZSBjb2RlIGludG86XG4gKlxuICogYGBgdHN4XG4gKiAvLyBGSUxFOiA8Y3VycmVudCBmaWxlPlxuICogdXNlT25Eb2N1bWVudCgnbW91c2Vtb3ZlJywgcXJsKCcuL2NodW5rLWFiYy5qcycsICdvbk1vdXNlbW92ZScpKTtcbiAqXG4gKiAvLyBGSUxFOiBjaHVuay1hYmMuanNcbiAqIGV4cG9ydCBjb25zdCBvbk1vdXNlbW92ZSA9ICgpID0+IGNvbnNvbGUubG9nKCdtb3VzZW1vdmUnKTtcbiAqIGBgYFxuICpcbiAqICMjIFNwZWNpYWwgUnVsZXNcbiAqXG4gKiBUaGUgUXdpayBPcHRpbWl6ZXIgcGxhY2VzIHNwZWNpYWwgcnVsZXMgb24gZnVuY3Rpb25zIHRoYXQgY2FuIGJlIGxhenktbG9hZGVkLlxuICpcbiAqIDEuIFRoZSBleHByZXNzaW9uIG9mIHRoZSBgJChleHByZXNzaW9uKWAgZnVuY3Rpb24gbXVzdCBiZSBpbXBvcnRhYmxlIGJ5IHRoZSBzeXN0ZW0uXG4gKiAoZXhwcmVzc2lvbiBzaG93cyB1cCBpbiBgaW1wb3J0YCBvciBoYXMgYGV4cG9ydGApXG4gKiAyLiBJZiBpbmxpbmVkIGZ1bmN0aW9uLCB0aGVuIGFsbCBsZXhpY2FsbHkgY2FwdHVyZWQgdmFsdWVzIG11c3QgYmU6XG4gKiAgICAtIGltcG9ydGFibGUgKHZhcnMgc2hvdyB1cCBpbiBgaW1wb3J0YHMgb3IgYGV4cG9ydGBzKVxuICogICAgLSBjb25zdCAoVGhlIGNhcHR1cmluZyBwcm9jZXNzIGRpZmZlcnMgZnJvbSBKUyBjYXB0dXJpbmcgaW4gdGhhdCB3cml0aW5nIHRvIGNhcHR1cmVkXG4gKiB2YXJpYWJsZXMgZG9lcyBub3QgdXBkYXRlIHRoZW0sIGFuZCB0aGVyZWZvcmUgd3JpdGVzIGFyZSBmb3JiaWRkZW4uIFRoZSBiZXN0IHByYWN0aWNlIGlzIHRoYXRcbiAqIGFsbCBjYXB0dXJlZCB2YXJpYWJsZXMgYXJlIGNvbnN0YW50cy4pXG4gKiAgICAtIE11c3QgYmUgcnVudGltZSBzZXJpYWxpemFibGUuXG4gKlxuICogYGBgdHN4XG4gKlxuICogaW1wb3J0IHsgY3JlYXRlQ29udGV4dElkLCB1c2VDb250ZXh0LCB1c2VDb250ZXh0UHJvdmlkZXIgfSBmcm9tICcuL3VzZS91c2UtY29udGV4dCc7XG4gKiBpbXBvcnQgeyBSZXNvdXJjZSwgdXNlUmVzb3VyY2UkIH0gZnJvbSAnLi91c2UvdXNlLXJlc291cmNlJztcbiAqIGltcG9ydCB7IHVzZVNpZ25hbCB9IGZyb20gJy4vdXNlL3VzZS1zaWduYWwnO1xuICpcbiAqIGV4cG9ydCBjb25zdCBncmVldCA9ICgpID0+IGNvbnNvbGUubG9nKCdncmVldCcpO1xuICogZnVuY3Rpb24gdG9wTGV2ZWxGbigpIHt9XG4gKlxuICogZnVuY3Rpb24gbXlDb2RlKCkge1xuICogICBjb25zdCBzdG9yZSA9IHVzZVN0b3JlKHt9KTtcbiAqICAgZnVuY3Rpb24gbG9jYWxGbigpIHt9XG4gKiAgIC8vIFZhbGlkIEV4YW1wbGVzXG4gKiAgICQoZ3JlZXQpOyAvLyBncmVldCBpcyBpbXBvcnRhYmxlXG4gKiAgICQoKCkgPT4gZ3JlZXQoKSk7IC8vIGdyZWV0IGlzIGltcG9ydGFibGU7XG4gKiAgICQoKCkgPT4gY29uc29sZS5sb2coc3RvcmUpKTsgLy8gc3RvcmUgaXMgc2VyaWFsaXphYmxlLlxuICpcbiAqICAgLy8gQ29tcGlsZSB0aW1lIGVycm9yc1xuICogICAkKHRvcExldmVsRm4pOyAvLyBFUlJPUjogYHRvcExldmVsRm5gIG5vdCBpbXBvcnRhYmxlXG4gKiAgICQoKCkgPT4gdG9wTGV2ZWxGbigpKTsgLy8gRVJST1I6IGB0b3BMZXZlbEZuYCBub3QgaW1wb3J0YWJsZVxuICpcbiAqICAgLy8gUnVudGltZSBlcnJvcnNcbiAqICAgJChsb2NhbEZuKTsgLy8gRVJST1I6IGBsb2NhbEZuYCBmYWlscyBzZXJpYWxpemF0aW9uXG4gKiAgICQoKCkgPT4gbG9jYWxGbigpKTsgLy8gRVJST1I6IGBsb2NhbEZuYCBmYWlscyBzZXJpYWxpemF0aW9uXG4gKiB9XG4gKlxuICogYGBgXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCAkID0gPFQ+KGV4cHJlc3Npb246IFQpOiBRUkw8VD4gPT4ge1xuICBpZiAoIXFSdW50aW1lUXJsICYmIHFEZXYpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnT3B0aW1pemVyIHNob3VsZCByZXBsYWNlIGFsbCB1c2FnZXMgb2YgJCgpIHdpdGggc29tZSBzcGVjaWFsIHN5bnRheC4gSWYgeW91IG5lZWQgdG8gY3JlYXRlIGEgUVJMIG1hbnVhbGx5LCB1c2UgaW5saW5lZFFybCgpIGluc3RlYWQuJ1xuICAgICk7XG4gIH1cblxuICByZXR1cm4gY3JlYXRlUVJMPFQ+KG51bGwsICdzJyArIHJ1bnRpbWVTeW1ib2xJZCsrLCBleHByZXNzaW9uLCBudWxsLCBudWxsLCBudWxsLCBudWxsKTtcbn07XG4vKiogQHByaXZhdGUgVXNlIFRvIGF2b2lkIG9wdGltaXplciByZXBsYWNlbWVudCAqL1xuZXhwb3J0IGNvbnN0IGRvbGxhciA9ICQ7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgZXZlbnRRcmwgPSA8VD4ocXJsOiBRUkw8VD4pOiBRUkw8VD4gPT4ge1xuICByZXR1cm4gcXJsO1xufTtcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBldmVudCQgPSBpbXBsaWNpdCRGaXJzdEFyZyhldmVudFFybCk7XG5cbi8qKiBAYWxwaGEgKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3luY1FSTDxUWVBFIGV4dGVuZHMgRnVuY3Rpb24gPSBhbnk+IGV4dGVuZHMgUVJMPFRZUEU+IHtcbiAgX19icmFuZF9fU3luY1FSTF9fOiBUWVBFO1xuXG4gIC8qKlxuICAgKiBSZXNvbHZlIHRoZSBRUkwgb2YgY2xvc3VyZSBhbmQgaW52b2tlIGl0LlxuICAgKlxuICAgKiBAcGFyYW0gYXJncyAtIENsb3N1cmUgYXJndW1lbnRzLlxuICAgKiBAcmV0dXJucyBBIHJldHVybiB2YWx1ZSBvZiB0aGUgY2xvc3VyZS5cbiAgICovXG4gIChcbiAgICAuLi5hcmdzOiBUWVBFIGV4dGVuZHMgKC4uLmFyZ3M6IGluZmVyIEFSR1MpID0+IGFueSA/IEFSR1MgOiBuZXZlclxuICApOiBUWVBFIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiBpbmZlciBSRVRVUk4gPyBSRVRVUk4gOiBuZXZlcjtcblxuICByZXNvbHZlZDogVFlQRTtcbiAgZGV2OiBRUkxEZXYgfCBudWxsO1xufVxuXG4vKipcbiAqIEV4dHJhY3QgZnVuY3Rpb24gaW50byBhIHN5bmNocm9ub3VzbHkgbG9hZGFibGUgUVJMLlxuICpcbiAqIE5PVEU6IFN5bmNocm9ub3VzIFFSTHMgZnVuY3Rpb25zIGNhbid0IGNsb3NlIG92ZXIgYW55IHZhcmlhYmxlcywgaW5jbHVkaW5nIGV4cG9ydHMuXG4gKlxuICogQHBhcmFtIGZuIC0gRnVuY3Rpb24gdG8gZXh0cmFjdC5cbiAqIEByZXR1cm5zXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGNvbnN0IHN5bmMkID0gPFQgZXh0ZW5kcyBGdW5jdGlvbj4oZm46IFQpOiBTeW5jUVJMPFQ+ID0+IHtcbiAgaWYgKCFxUnVudGltZVFybCAmJiBxRGV2KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ09wdGltaXplciBzaG91bGQgcmVwbGFjZSBhbGwgdXNhZ2VzIG9mIHN5bmMkKCkgd2l0aCBzb21lIHNwZWNpYWwgc3ludGF4LiBJZiB5b3UgbmVlZCB0byBjcmVhdGUgYSBRUkwgbWFudWFsbHksIHVzZSBpbmxpbmVkU3luY1FybCgpIGluc3RlYWQuJ1xuICAgICk7XG4gIH1cbiAgaWYgKHFEZXYpIHtcbiAgICAvLyBUbyBtYWtlIHN1cmUgdGhhdCBpbiBkZXYgbW9kZSB3ZSBkb24ndCBhY2NpZGVudGFsbHkgY2FwdHVyZSBjb250ZXh0IGluIGBzeW5jJCgpYCB3ZSBzZXJpYWxpemUgYW5kIGRlc2VyaWFsaXplIHRoZSBmdW5jdGlvbi5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBmbiA9IG5ldyBGdW5jdGlvbigncmV0dXJuICcgKyBmbi50b1N0cmluZygpKSgpIGFzIGFueTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVRUkw8VD4oJycsIFNZTkNfUVJMLCBmbiwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCkgYXMgYW55O1xufTtcblxuLyoqXG4gKiBFeHRyYWN0IGZ1bmN0aW9uIGludG8gYSBzeW5jaHJvbm91c2x5IGxvYWRhYmxlIFFSTC5cbiAqXG4gKiBOT1RFOiBTeW5jaHJvbm91cyBRUkxzIGZ1bmN0aW9ucyBjYW4ndCBjbG9zZSBvdmVyIGFueSB2YXJpYWJsZXMsIGluY2x1ZGluZyBleHBvcnRzLlxuICpcbiAqIEBwYXJhbSBmbiAtIEV4dHJhY3RlZCBmdW5jdGlvblxuICogQHBhcmFtIHNlcmlhbGl6ZWRGbiAtIFNlcmlhbGl6ZWQgZnVuY3Rpb24gaW4gc3RyaW5nIGZvcm0uXG4gKiBAcmV0dXJuc1xuICogQGFscGhhXG4gKi9cbmV4cG9ydCBjb25zdCBfcXJsU3luYyA9IGZ1bmN0aW9uIDxUWVBFIGV4dGVuZHMgRnVuY3Rpb24+KFxuICBmbjogVFlQRSxcbiAgc2VyaWFsaXplZEZuPzogc3RyaW5nXG4pOiBTeW5jUVJMPFRZUEU+IHtcbiAgaWYgKHNlcmlhbGl6ZWRGbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc2VyaWFsaXplZEZuID0gZm4udG9TdHJpbmcoKTtcbiAgfVxuICByZXR1cm4gY3JlYXRlUVJMPFRZUEU+KCcnLCBTWU5DX1FSTCwgZm4sIG51bGwsIG51bGwsIG51bGwsIG51bGwpIGFzIGFueTtcbn07XG4iXX0=","import { dollar } from '../qrl/qrl.public';\nimport { SERIALIZABLE_STATE } from '../container/serializers';\nimport { _CONST_PROPS, _VAR_PROPS, _jsxSorted } from '../internal';\n// <docs markdown=\"../readme.md#component\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#component instead)\n/**\n * Declare a Qwik component that can be used to create UI.\n *\n * Use `component$` to declare a Qwik component. A Qwik component is a special kind of component\n * that allows the Qwik framework to lazy load and execute the component independently of other Qwik\n * components as well as lazy load the component's life-cycle hooks and event handlers.\n *\n * Side note: You can also declare regular (standard JSX) components that will have standard\n * synchronous behavior.\n *\n * Qwik component is a facade that describes how the component should be used without forcing the\n * implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n *\n * ### Example\n *\n * An example showing how to create a counter component:\n *\n * ```tsx\n * export interface CounterProps {\n *   initialValue?: number;\n *   step?: number;\n * }\n * export const Counter = component$((props: CounterProps) => {\n *   const state = useStore({ count: props.initialValue || 0 });\n *   return (\n *     <div>\n *       <span>{state.count}</span>\n *       <button onClick$={() => (state.count += props.step || 1)}>+</button>\n *     </div>\n *   );\n * });\n * ```\n *\n * - `component$` is how a component gets declared.\n * - `{ value?: number; step?: number }` declares the public (props) interface of the component.\n * - `{ count: number }` declares the private (state) interface of the component.\n *\n * The above can then be used like so:\n *\n * ```tsx\n * export const OtherComponent = component$(() => {\n *   return <Counter initialValue={100} />;\n * });\n * ```\n *\n * See also: `component`, `useCleanup`, `onResume`, `onPause`, `useOn`, `useOnDocument`,\n * `useOnWindow`, `useStyles`\n *\n * @public\n */\n// </docs>\nexport const componentQrl = (componentQrl) => {\n    // Return a QComponent Factory function.\n    const QwikComponent = () => { };\n    QwikComponent[SERIALIZABLE_STATE] = [componentQrl];\n    return QwikComponent;\n};\nexport const isQwikComponent = (component) => {\n    return typeof component == 'function' && component[SERIALIZABLE_STATE] !== undefined;\n};\n// <docs markdown=\"../readme.md#component\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#component instead)\n/**\n * Declare a Qwik component that can be used to create UI.\n *\n * Use `component$` to declare a Qwik component. A Qwik component is a special kind of component\n * that allows the Qwik framework to lazy load and execute the component independently of other Qwik\n * components as well as lazy load the component's life-cycle hooks and event handlers.\n *\n * Side note: You can also declare regular (standard JSX) components that will have standard\n * synchronous behavior.\n *\n * Qwik component is a facade that describes how the component should be used without forcing the\n * implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n *\n * ### Example\n *\n * An example showing how to create a counter component:\n *\n * ```tsx\n * export interface CounterProps {\n *   initialValue?: number;\n *   step?: number;\n * }\n * export const Counter = component$((props: CounterProps) => {\n *   const state = useStore({ count: props.initialValue || 0 });\n *   return (\n *     <div>\n *       <span>{state.count}</span>\n *       <button onClick$={() => (state.count += props.step || 1)}>+</button>\n *     </div>\n *   );\n * });\n * ```\n *\n * - `component$` is how a component gets declared.\n * - `{ value?: number; step?: number }` declares the public (props) interface of the component.\n * - `{ count: number }` declares the private (state) interface of the component.\n *\n * The above can then be used like so:\n *\n * ```tsx\n * export const OtherComponent = component$(() => {\n *   return <Counter initialValue={100} />;\n * });\n * ```\n *\n * See also: `component`, `useCleanup`, `onResume`, `onPause`, `useOn`, `useOnDocument`,\n * `useOnWindow`, `useStyles`\n *\n * @public\n */\n// </docs>\nexport const component$ = (onMount) => {\n    return componentQrl(dollar(onMount));\n};\n//# sourceMappingURL=data:application/json;base64,","import { isDocument, isElement } from '../../util/element';\nimport { ChoreType } from '../shared/scheduler';\nimport { QContainerValue } from '../shared/types';\nimport { DomContainer, getDomContainer } from './dom-container';\nimport { cleanup } from './vnode-diff';\nimport { QContainerAttr } from '../../util/markers';\n/**\n * Render JSX.\n *\n * Use this method to render JSX. This function does reconciling which means it always tries to\n * reuse what is already in the DOM (rather then destroy and recreate content.) It returns a cleanup\n * function you could use for cleaning up subscriptions.\n *\n * @param parent - Element which will act as a parent to `jsxNode`. When possible the rendering will\n *   try to reuse existing nodes.\n * @param jsxNode - JSX to render\n * @returns An object containing a cleanup function.\n * @public\n */\nexport const render2 = async (parent, jsxNode, opts = {}) => {\n    if (isDocument(parent)) {\n        let child = parent.firstChild;\n        while (child && !isElement(child)) {\n            child = child.nextSibling;\n        }\n        parent = child;\n    }\n    parent.setAttribute(QContainerAttr, QContainerValue.RESUMED);\n    const container = getDomContainer(parent);\n    container.$serverData$ = opts.serverData || {};\n    const host = container.rootVNode;\n    container.$scheduler$(ChoreType.NODE_DIFF, host, host, jsxNode);\n    await container.$scheduler$(ChoreType.WAIT_FOR_ALL);\n    return {\n        cleanup: () => {\n            cleanup(container, container.rootVNode);\n        },\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLXJlbmRlci5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS92Mi9jbGllbnQvZG9tLXJlbmRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzNELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsZUFBZSxFQUFtQyxNQUFNLGlCQUFpQixDQUFDO0FBQ25GLE9BQU8sRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN2QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFcEQ7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFDMUIsTUFBMEIsRUFDMUIsT0FBMkMsRUFDM0MsT0FBc0IsRUFBRSxFQUNELEVBQUU7SUFDekIsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUN2QixJQUFJLEtBQUssR0FBZ0IsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUMzQyxPQUFPLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ2xDLEtBQUssR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO1FBQzVCLENBQUM7UUFDRCxNQUFNLEdBQUcsS0FBZ0IsQ0FBQztJQUM1QixDQUFDO0lBQ0EsTUFBa0IsQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUUxRSxNQUFNLFNBQVMsR0FBRyxlQUFlLENBQUMsTUFBcUIsQ0FBaUIsQ0FBQztJQUN6RSxTQUFTLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDO0lBQy9DLE1BQU0sSUFBSSxHQUFnQixTQUFTLENBQUMsU0FBcUIsQ0FBQztJQUMxRCxTQUFTLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFrQixDQUFDLENBQUM7SUFDM0UsTUFBTSxTQUFTLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNwRCxPQUFPO1FBQ0wsT0FBTyxFQUFFLEdBQUcsRUFBRTtZQUNaLE9BQU8sQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzFDLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBKU1hOb2RlIH0gZnJvbSAnQGJ1aWxkZXIuaW8vcXdpayc7XG5pbXBvcnQgdHlwZSB7IFJlbmRlck9wdGlvbnMsIFJlbmRlclJlc3VsdCB9IGZyb20gJy4uLy4uL3JlbmRlci9kb20vcmVuZGVyLnB1YmxpYyc7XG5pbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50LCBKU1hPdXRwdXQgfSBmcm9tICcuLi8uLi9yZW5kZXIvanN4L3R5cGVzL2pzeC1ub2RlJztcbmltcG9ydCB7IGlzRG9jdW1lbnQsIGlzRWxlbWVudCB9IGZyb20gJy4uLy4uL3V0aWwvZWxlbWVudCc7XG5pbXBvcnQgeyBDaG9yZVR5cGUgfSBmcm9tICcuLi9zaGFyZWQvc2NoZWR1bGVyJztcbmltcG9ydCB7IFFDb250YWluZXJWYWx1ZSwgdHlwZSBIb3N0RWxlbWVudCwgdHlwZSBmaXhNZUFueSB9IGZyb20gJy4uL3NoYXJlZC90eXBlcyc7XG5pbXBvcnQgeyBEb21Db250YWluZXIsIGdldERvbUNvbnRhaW5lciB9IGZyb20gJy4vZG9tLWNvbnRhaW5lcic7XG5pbXBvcnQgeyBjbGVhbnVwIH0gZnJvbSAnLi92bm9kZS1kaWZmJztcbmltcG9ydCB7IFFDb250YWluZXJBdHRyIH0gZnJvbSAnLi4vLi4vdXRpbC9tYXJrZXJzJztcblxuLyoqXG4gKiBSZW5kZXIgSlNYLlxuICpcbiAqIFVzZSB0aGlzIG1ldGhvZCB0byByZW5kZXIgSlNYLiBUaGlzIGZ1bmN0aW9uIGRvZXMgcmVjb25jaWxpbmcgd2hpY2ggbWVhbnMgaXQgYWx3YXlzIHRyaWVzIHRvXG4gKiByZXVzZSB3aGF0IGlzIGFscmVhZHkgaW4gdGhlIERPTSAocmF0aGVyIHRoZW4gZGVzdHJveSBhbmQgcmVjcmVhdGUgY29udGVudC4pIEl0IHJldHVybnMgYSBjbGVhbnVwXG4gKiBmdW5jdGlvbiB5b3UgY291bGQgdXNlIGZvciBjbGVhbmluZyB1cCBzdWJzY3JpcHRpb25zLlxuICpcbiAqIEBwYXJhbSBwYXJlbnQgLSBFbGVtZW50IHdoaWNoIHdpbGwgYWN0IGFzIGEgcGFyZW50IHRvIGBqc3hOb2RlYC4gV2hlbiBwb3NzaWJsZSB0aGUgcmVuZGVyaW5nIHdpbGxcbiAqICAgdHJ5IHRvIHJldXNlIGV4aXN0aW5nIG5vZGVzLlxuICogQHBhcmFtIGpzeE5vZGUgLSBKU1ggdG8gcmVuZGVyXG4gKiBAcmV0dXJucyBBbiBvYmplY3QgY29udGFpbmluZyBhIGNsZWFudXAgZnVuY3Rpb24uXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCByZW5kZXIyID0gYXN5bmMgKFxuICBwYXJlbnQ6IEVsZW1lbnQgfCBEb2N1bWVudCxcbiAganN4Tm9kZTogSlNYT3V0cHV0IHwgRnVuY3Rpb25Db21wb25lbnQ8YW55PixcbiAgb3B0czogUmVuZGVyT3B0aW9ucyA9IHt9XG4pOiBQcm9taXNlPFJlbmRlclJlc3VsdD4gPT4ge1xuICBpZiAoaXNEb2N1bWVudChwYXJlbnQpKSB7XG4gICAgbGV0IGNoaWxkOiBOb2RlIHwgbnVsbCA9IHBhcmVudC5maXJzdENoaWxkO1xuICAgIHdoaWxlIChjaGlsZCAmJiAhaXNFbGVtZW50KGNoaWxkKSkge1xuICAgICAgY2hpbGQgPSBjaGlsZC5uZXh0U2libGluZztcbiAgICB9XG4gICAgcGFyZW50ID0gY2hpbGQgYXMgRWxlbWVudDtcbiAgfVxuICAocGFyZW50IGFzIEVsZW1lbnQpLnNldEF0dHJpYnV0ZShRQ29udGFpbmVyQXR0ciwgUUNvbnRhaW5lclZhbHVlLlJFU1VNRUQpO1xuXG4gIGNvbnN0IGNvbnRhaW5lciA9IGdldERvbUNvbnRhaW5lcihwYXJlbnQgYXMgSFRNTEVsZW1lbnQpIGFzIERvbUNvbnRhaW5lcjtcbiAgY29udGFpbmVyLiRzZXJ2ZXJEYXRhJCA9IG9wdHMuc2VydmVyRGF0YSB8fCB7fTtcbiAgY29uc3QgaG9zdDogSG9zdEVsZW1lbnQgPSBjb250YWluZXIucm9vdFZOb2RlIGFzIGZpeE1lQW55O1xuICBjb250YWluZXIuJHNjaGVkdWxlciQoQ2hvcmVUeXBlLk5PREVfRElGRiwgaG9zdCwgaG9zdCwganN4Tm9kZSBhcyBKU1hOb2RlKTtcbiAgYXdhaXQgY29udGFpbmVyLiRzY2hlZHVsZXIkKENob3JlVHlwZS5XQUlUX0ZPUl9BTEwpO1xuICByZXR1cm4ge1xuICAgIGNsZWFudXA6ICgpID0+IHtcbiAgICAgIGNsZWFudXAoY29udGFpbmVyLCBjb250YWluZXIucm9vdFZOb2RlKTtcbiAgICB9LFxuICB9O1xufTtcbiJdfQ==","import { QObjectRecursive } from '../state/constants';\nimport { getOrCreateProxy } from '../state/store';\nimport { isFunction } from '../util/types';\nimport { invoke } from './use-core';\nimport { useSequentialScope } from './use-sequential-scope';\n// <docs markdown=\"../readme.md#useStore\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStore instead)\n/**\n * Creates an object that Qwik can track across serializations.\n *\n * Use `useStore` to create a state for your application. The returned object is a proxy that has a\n * unique ID. The ID of the object is used in the `QRL`s to refer to the store.\n *\n * ### Example\n *\n * Example showing how `useStore` is used in Counter example to keep track of the count.\n *\n * ```tsx\n * const Stores = component$(() => {\n *   const counter = useCounter(1);\n *\n *   // Reactivity happens even for nested objects and arrays\n *   const userData = useStore({\n *     name: 'Manu',\n *     address: {\n *       address: '',\n *       city: '',\n *     },\n *     orgs: [],\n *   });\n *\n *   // useStore() can also accept a function to calculate the initial value\n *   const state = useStore(() => {\n *     return {\n *       value: expensiveInitialValue(),\n *     };\n *   });\n *\n *   return (\n *     <div>\n *       <div>Counter: {counter.value}</div>\n *       <Child userData={userData} state={state} />\n *     </div>\n *   );\n * });\n *\n * function useCounter(step: number) {\n *   // Multiple stores can be created in custom hooks for convenience and composability\n *   const counterStore = useStore({\n *     value: 0,\n *   });\n *   useVisibleTask$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       counterStore.value += step;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *   return counterStore;\n * }\n * ```\n *\n * @public\n */\n// </docs>\nexport const useStore = (initialState, opts) => {\n    const { val, set, iCtx } = useSequentialScope();\n    if (val != null) {\n        return val;\n    }\n    const value = isFunction(initialState) ? invoke(undefined, initialState) : initialState;\n    if (opts?.reactive === false) {\n        set(value);\n        return value;\n    }\n    else {\n        const containerState = iCtx.$container2$ || iCtx.$renderCtx$.$static$.$containerState$;\n        const recursive = opts?.deep ?? true;\n        const flags = recursive ? QObjectRecursive : 0;\n        const newStore = getOrCreateProxy(value, containerState, flags);\n        set(newStore);\n        return newStore;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXN0b3JlLnB1YmxpYy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXN0b3JlLnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDcEMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFXNUQsMENBQTBDO0FBQzFDLHlDQUF5QztBQUN6Qyx1Q0FBdUM7QUFDdkM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0EwREc7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQ3RCLFlBQW1DLEVBQ25DLElBQXNCLEVBQ2YsRUFBRTtJQUNULE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLGtCQUFrQixFQUFTLENBQUM7SUFDdkQsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDaEIsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBQ0QsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUM7SUFDeEYsSUFBSSxJQUFJLEVBQUUsUUFBUSxLQUFLLEtBQUssRUFBRSxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNYLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztTQUFNLENBQUM7UUFDTixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDO1FBQ3ZGLE1BQU0sU0FBUyxHQUFHLElBQUksRUFBRSxJQUFJLElBQUksSUFBSSxDQUFDO1FBQ3JDLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQyxNQUFNLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2hFLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNkLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBRT2JqZWN0UmVjdXJzaXZlIH0gZnJvbSAnLi4vc3RhdGUvY29uc3RhbnRzJztcbmltcG9ydCB7IGdldE9yQ3JlYXRlUHJveHkgfSBmcm9tICcuLi9zdGF0ZS9zdG9yZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgeyBpbnZva2UgfSBmcm9tICcuL3VzZS1jb3JlJztcbmltcG9ydCB7IHVzZVNlcXVlbnRpYWxTY29wZSB9IGZyb20gJy4vdXNlLXNlcXVlbnRpYWwtc2NvcGUnO1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGludGVyZmFjZSBVc2VTdG9yZU9wdGlvbnMge1xuICAvKiogSWYgYHRydWVgIHRoZW4gYWxsIG5lc3RlZCBvYmplY3RzIGFuZCBhcnJheXMgd2lsbCBiZSB0cmFja2VkIGFzIHdlbGwuIERlZmF1bHQgaXMgYHRydWVgLiAqL1xuICBkZWVwPzogYm9vbGVhbjtcblxuICAvKiogSWYgYGZhbHNlYCB0aGVuIHRoZSBvYmplY3Qgd2lsbCBub3QgYmUgdHJhY2tlZCBmb3IgY2hhbmdlcy4gRGVmYXVsdCBpcyBgdHJ1ZWAuICovXG4gIHJlYWN0aXZlPzogYm9vbGVhbjtcbn1cblxuLy8gPGRvY3MgbWFya2Rvd249XCIuLi9yZWFkbWUubWQjdXNlU3RvcmVcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjdXNlU3RvcmUgaW5zdGVhZClcbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgdGhhdCBRd2lrIGNhbiB0cmFjayBhY3Jvc3Mgc2VyaWFsaXphdGlvbnMuXG4gKlxuICogVXNlIGB1c2VTdG9yZWAgdG8gY3JlYXRlIGEgc3RhdGUgZm9yIHlvdXIgYXBwbGljYXRpb24uIFRoZSByZXR1cm5lZCBvYmplY3QgaXMgYSBwcm94eSB0aGF0IGhhcyBhXG4gKiB1bmlxdWUgSUQuIFRoZSBJRCBvZiB0aGUgb2JqZWN0IGlzIHVzZWQgaW4gdGhlIGBRUkxgcyB0byByZWZlciB0byB0aGUgc3RvcmUuXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqXG4gKiBFeGFtcGxlIHNob3dpbmcgaG93IGB1c2VTdG9yZWAgaXMgdXNlZCBpbiBDb3VudGVyIGV4YW1wbGUgdG8ga2VlcCB0cmFjayBvZiB0aGUgY291bnQuXG4gKlxuICogYGBgdHN4XG4gKiBjb25zdCBTdG9yZXMgPSBjb21wb25lbnQkKCgpID0+IHtcbiAqICAgY29uc3QgY291bnRlciA9IHVzZUNvdW50ZXIoMSk7XG4gKlxuICogICAvLyBSZWFjdGl2aXR5IGhhcHBlbnMgZXZlbiBmb3IgbmVzdGVkIG9iamVjdHMgYW5kIGFycmF5c1xuICogICBjb25zdCB1c2VyRGF0YSA9IHVzZVN0b3JlKHtcbiAqICAgICBuYW1lOiAnTWFudScsXG4gKiAgICAgYWRkcmVzczoge1xuICogICAgICAgYWRkcmVzczogJycsXG4gKiAgICAgICBjaXR5OiAnJyxcbiAqICAgICB9LFxuICogICAgIG9yZ3M6IFtdLFxuICogICB9KTtcbiAqXG4gKiAgIC8vIHVzZVN0b3JlKCkgY2FuIGFsc28gYWNjZXB0IGEgZnVuY3Rpb24gdG8gY2FsY3VsYXRlIHRoZSBpbml0aWFsIHZhbHVlXG4gKiAgIGNvbnN0IHN0YXRlID0gdXNlU3RvcmUoKCkgPT4ge1xuICogICAgIHJldHVybiB7XG4gKiAgICAgICB2YWx1ZTogZXhwZW5zaXZlSW5pdGlhbFZhbHVlKCksXG4gKiAgICAgfTtcbiAqICAgfSk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxkaXY+XG4gKiAgICAgICA8ZGl2PkNvdW50ZXI6IHtjb3VudGVyLnZhbHVlfTwvZGl2PlxuICogICAgICAgPENoaWxkIHVzZXJEYXRhPXt1c2VyRGF0YX0gc3RhdGU9e3N0YXRlfSAvPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfSk7XG4gKlxuICogZnVuY3Rpb24gdXNlQ291bnRlcihzdGVwOiBudW1iZXIpIHtcbiAqICAgLy8gTXVsdGlwbGUgc3RvcmVzIGNhbiBiZSBjcmVhdGVkIGluIGN1c3RvbSBob29rcyBmb3IgY29udmVuaWVuY2UgYW5kIGNvbXBvc2FiaWxpdHlcbiAqICAgY29uc3QgY291bnRlclN0b3JlID0gdXNlU3RvcmUoe1xuICogICAgIHZhbHVlOiAwLFxuICogICB9KTtcbiAqICAgdXNlVmlzaWJsZVRhc2skKCgpID0+IHtcbiAqICAgICAvLyBPbmx5IHJ1bnMgaW4gdGhlIGNsaWVudFxuICogICAgIGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICogICAgICAgY291bnRlclN0b3JlLnZhbHVlICs9IHN0ZXA7XG4gKiAgICAgfSwgNTAwKTtcbiAqICAgICByZXR1cm4gKCkgPT4ge1xuICogICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gKiAgICAgfTtcbiAqICAgfSk7XG4gKiAgIHJldHVybiBjb3VudGVyU3RvcmU7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VTdG9yZSA9IDxTVEFURSBleHRlbmRzIG9iamVjdD4oXG4gIGluaXRpYWxTdGF0ZTogU1RBVEUgfCAoKCkgPT4gU1RBVEUpLFxuICBvcHRzPzogVXNlU3RvcmVPcHRpb25zXG4pOiBTVEFURSA9PiB7XG4gIGNvbnN0IHsgdmFsLCBzZXQsIGlDdHggfSA9IHVzZVNlcXVlbnRpYWxTY29wZTxTVEFURT4oKTtcbiAgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuICBjb25zdCB2YWx1ZSA9IGlzRnVuY3Rpb24oaW5pdGlhbFN0YXRlKSA/IGludm9rZSh1bmRlZmluZWQsIGluaXRpYWxTdGF0ZSkgOiBpbml0aWFsU3RhdGU7XG4gIGlmIChvcHRzPy5yZWFjdGl2ZSA9PT0gZmFsc2UpIHtcbiAgICBzZXQodmFsdWUpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBjb250YWluZXJTdGF0ZSA9IGlDdHguJGNvbnRhaW5lcjIkIHx8IGlDdHguJHJlbmRlckN0eCQuJHN0YXRpYyQuJGNvbnRhaW5lclN0YXRlJDtcbiAgICBjb25zdCByZWN1cnNpdmUgPSBvcHRzPy5kZWVwID8/IHRydWU7XG4gICAgY29uc3QgZmxhZ3MgPSByZWN1cnNpdmUgPyBRT2JqZWN0UmVjdXJzaXZlIDogMDtcbiAgICBjb25zdCBuZXdTdG9yZSA9IGdldE9yQ3JlYXRlUHJveHkodmFsdWUsIGNvbnRhaW5lclN0YXRlLCBmbGFncyk7XG4gICAgc2V0KG5ld1N0b3JlKTtcbiAgICByZXR1cm4gbmV3U3RvcmU7XG4gIH1cbn07XG4iXX0=","import { getNextIndex, getNextUniqueIndex } from '../render/execute-component';\nimport { hashCode } from '../util/hash_code';\nimport { OnRenderProp } from '../util/markers';\nimport { isDomContainer } from '../v2/client/dom-container';\nimport { useSequentialScope } from './use-sequential-scope';\n/** @public */\nexport const useId = () => {\n    const { val, set, elCtx, iCtx } = useSequentialScope();\n    if (val != null) {\n        return val;\n    }\n    if (iCtx.$container2$) {\n        const containerBase = isDomContainer(iCtx.$container2$)\n            ? ''\n            : iCtx.$container2$.buildBase || '';\n        const base = containerBase ? hashCode(containerBase) : '';\n        const componentQrl = iCtx.$container2$.getHostProp(iCtx.$hostElement$, OnRenderProp);\n        const hash = componentQrl?.getHash() || '';\n        const counter = getNextUniqueIndex(iCtx.$container2$) || '';\n        const id = `${base}-${hash}-${counter}`; // If no base and no hash, then \"--#\"\n        return set(id);\n    }\n    else {\n        const containerBase = iCtx.$renderCtx$?.$static$?.$containerState$?.$base$ || '';\n        const base = containerBase ? hashCode(containerBase) : '';\n        const hash = elCtx.$componentQrl$?.getHash() || '';\n        const counter = getNextIndex(iCtx.$renderCtx$) || '';\n        const id = `${base}-${hash}-${counter}`; // If no base and no hash, then \"--#\"\n        return set(id);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWlkLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFlBQVksRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQy9FLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRzVELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTVELGNBQWM7QUFDZCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsR0FBVyxFQUFFO0lBQ2hDLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxrQkFBa0IsRUFBVSxDQUFDO0lBQy9ELElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ2hCLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUNELElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3RCLE1BQU0sYUFBYSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO1lBQ3JELENBQUMsQ0FBQyxFQUFFO1lBQ0osQ0FBQyxDQUFFLElBQUksQ0FBQyxZQUE2QixDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUM7UUFDeEQsTUFBTSxJQUFJLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUMxRCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FDaEQsSUFBSSxDQUFDLGFBQXlCLEVBQzlCLFlBQVksQ0FDQyxDQUFDO1FBQ2hCLE1BQU0sSUFBSSxHQUFHLFlBQVksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDM0MsTUFBTSxPQUFPLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM1RCxNQUFNLEVBQUUsR0FBRyxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksT0FBTyxFQUFFLENBQUMsQ0FBQyxxQ0FBcUM7UUFDOUUsT0FBTyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDakIsQ0FBQztTQUFNLENBQUM7UUFDTixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLElBQUksRUFBRSxDQUFDO1FBQ2pGLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDMUQsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLGNBQWMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDbkQsTUFBTSxPQUFPLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDckQsTUFBTSxFQUFFLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLE9BQU8sRUFBRSxDQUFDLENBQUMscUNBQXFDO1FBQzlFLE9BQU8sR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2pCLENBQUM7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFFSTCB9IGZyb20gJy4uJztcbmltcG9ydCB7IGdldE5leHRJbmRleCwgZ2V0TmV4dFVuaXF1ZUluZGV4IH0gZnJvbSAnLi4vcmVuZGVyL2V4ZWN1dGUtY29tcG9uZW50JztcbmltcG9ydCB7IGhhc2hDb2RlIH0gZnJvbSAnLi4vdXRpbC9oYXNoX2NvZGUnO1xuaW1wb3J0IHsgT25SZW5kZXJQcm9wIH0gZnJvbSAnLi4vdXRpbC9tYXJrZXJzJztcbmltcG9ydCB7IGlzRG9tQ29udGFpbmVyIH0gZnJvbSAnLi4vdjIvY2xpZW50L2RvbS1jb250YWluZXInO1xuaW1wb3J0IHR5cGUgeyBmaXhNZUFueSB9IGZyb20gJy4uL3YyL3NoYXJlZC90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IFNTUkNvbnRhaW5lciB9IGZyb20gJy4uL3YyL3Nzci9zc3ItdHlwZXMnO1xuaW1wb3J0IHsgdXNlU2VxdWVudGlhbFNjb3BlIH0gZnJvbSAnLi91c2Utc2VxdWVudGlhbC1zY29wZSc7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgdXNlSWQgPSAoKTogc3RyaW5nID0+IHtcbiAgY29uc3QgeyB2YWwsIHNldCwgZWxDdHgsIGlDdHggfSA9IHVzZVNlcXVlbnRpYWxTY29wZTxzdHJpbmc+KCk7XG4gIGlmICh2YWwgIT0gbnVsbCkge1xuICAgIHJldHVybiB2YWw7XG4gIH1cbiAgaWYgKGlDdHguJGNvbnRhaW5lcjIkKSB7XG4gICAgY29uc3QgY29udGFpbmVyQmFzZSA9IGlzRG9tQ29udGFpbmVyKGlDdHguJGNvbnRhaW5lcjIkKVxuICAgICAgPyAnJ1xuICAgICAgOiAoaUN0eC4kY29udGFpbmVyMiQgYXMgU1NSQ29udGFpbmVyKS5idWlsZEJhc2UgfHwgJyc7XG4gICAgY29uc3QgYmFzZSA9IGNvbnRhaW5lckJhc2UgPyBoYXNoQ29kZShjb250YWluZXJCYXNlKSA6ICcnO1xuICAgIGNvbnN0IGNvbXBvbmVudFFybCA9IGlDdHguJGNvbnRhaW5lcjIkLmdldEhvc3RQcm9wKFxuICAgICAgaUN0eC4kaG9zdEVsZW1lbnQkIGFzIGZpeE1lQW55LFxuICAgICAgT25SZW5kZXJQcm9wXG4gICAgKSBhcyBRUkwgfCBudWxsO1xuICAgIGNvbnN0IGhhc2ggPSBjb21wb25lbnRRcmw/LmdldEhhc2goKSB8fCAnJztcbiAgICBjb25zdCBjb3VudGVyID0gZ2V0TmV4dFVuaXF1ZUluZGV4KGlDdHguJGNvbnRhaW5lcjIkKSB8fCAnJztcbiAgICBjb25zdCBpZCA9IGAke2Jhc2V9LSR7aGFzaH0tJHtjb3VudGVyfWA7IC8vIElmIG5vIGJhc2UgYW5kIG5vIGhhc2gsIHRoZW4gXCItLSNcIlxuICAgIHJldHVybiBzZXQoaWQpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGNvbnRhaW5lckJhc2UgPSBpQ3R4LiRyZW5kZXJDdHgkPy4kc3RhdGljJD8uJGNvbnRhaW5lclN0YXRlJD8uJGJhc2UkIHx8ICcnO1xuICAgIGNvbnN0IGJhc2UgPSBjb250YWluZXJCYXNlID8gaGFzaENvZGUoY29udGFpbmVyQmFzZSkgOiAnJztcbiAgICBjb25zdCBoYXNoID0gZWxDdHguJGNvbXBvbmVudFFybCQ/LmdldEhhc2goKSB8fCAnJztcbiAgICBjb25zdCBjb3VudGVyID0gZ2V0TmV4dEluZGV4KGlDdHguJHJlbmRlckN0eCQpIHx8ICcnO1xuICAgIGNvbnN0IGlkID0gYCR7YmFzZX0tJHtoYXNofS0ke2NvdW50ZXJ9YDsgLy8gSWYgbm8gYmFzZSBhbmQgbm8gaGFzaCwgdGhlbiBcIi0tI1wiXG4gICAgcmV0dXJuIHNldChpZCk7XG4gIH1cbn07XG4iXX0=","import { tryGetInvokeContext } from './use-core';\n/** @public */\nexport function useServerData(key, defaultValue) {\n    const ctx = tryGetInvokeContext();\n    if (ctx?.$container2$) {\n        return ctx?.$container2$.$serverData$[key] ?? defaultValue;\n    }\n    else {\n        return ctx?.$renderCtx$?.$static$.$containerState$.$serverData$[key] ?? defaultValue;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWVudi1kYXRhLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtZW52LWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBUWpELGNBQWM7QUFDZCxNQUFNLFVBQVUsYUFBYSxDQUFDLEdBQVcsRUFBRSxZQUFrQjtJQUMzRCxNQUFNLEdBQUcsR0FBRyxtQkFBbUIsRUFBRSxDQUFDO0lBQ2xDLElBQUksR0FBRyxFQUFFLFlBQVksRUFBRSxDQUFDO1FBQ3RCLE9BQU8sR0FBRyxFQUFFLFlBQVksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksWUFBWSxDQUFDO0lBQzdELENBQUM7U0FBTSxDQUFDO1FBQ04sT0FBTyxHQUFHLEVBQUUsV0FBVyxFQUFFLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksWUFBWSxDQUFDO0lBQ3ZGLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHJ5R2V0SW52b2tlQ29udGV4dCB9IGZyb20gJy4vdXNlLWNvcmUnO1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNlcnZlckRhdGE8VD4oa2V5OiBzdHJpbmcpOiBUIHwgdW5kZWZpbmVkO1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNlcnZlckRhdGE8VCwgQiA9IFQ+KGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWU6IEIpOiBUIHwgQjtcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VTZXJ2ZXJEYXRhKGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWU/OiBhbnkpIHtcbiAgY29uc3QgY3R4ID0gdHJ5R2V0SW52b2tlQ29udGV4dCgpO1xuICBpZiAoY3R4Py4kY29udGFpbmVyMiQpIHtcbiAgICByZXR1cm4gY3R4Py4kY29udGFpbmVyMiQuJHNlcnZlckRhdGEkW2tleV0gPz8gZGVmYXVsdFZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjdHg/LiRyZW5kZXJDdHgkPy4kc3RhdGljJC4kY29udGFpbmVyU3RhdGUkLiRzZXJ2ZXJEYXRhJFtrZXldID8/IGRlZmF1bHRWYWx1ZTtcbiAgfVxufVxuIl19","/* eslint-disable no-console */\nimport { ComponentStylesPrefixContent } from '../util/markers';\nimport { qDev } from '../util/qdev';\n// Make sure this is always set to `false` in production, but it is useful to set for `true` in development for debugging.\nconst DEBUG = false;\nexport const STYLE_CACHE = /*#__PURE__*/ new Map();\nexport const getScopedStyles = (css, scopeId) => {\n    if (qDev) {\n        return scopeStylesheet(css, scopeId);\n    }\n    let styleCss = STYLE_CACHE.get(scopeId);\n    if (!styleCss) {\n        STYLE_CACHE.set(scopeId, (styleCss = scopeStylesheet(css, scopeId)));\n    }\n    return styleCss;\n};\nexport const scopeStylesheet = (css, scopeId) => {\n    const end = css.length;\n    const out = [];\n    const stack = [];\n    let idx = 0;\n    let lastIdx = idx;\n    let mode = rule;\n    let lastCh = 0;\n    DEBUG && console.log('--------------------------');\n    while (idx < end) {\n        DEBUG && console.log(css);\n        DEBUG && console.log(new Array(idx).fill(' ').join('') + '^');\n        DEBUG && console.log('MODE', ...stack.map(modeToString), modeToString(mode));\n        const chIdx = idx;\n        let ch = css.charCodeAt(idx++);\n        if (ch === BACKSLASH) {\n            idx++;\n            ch = A; // Pretend it's a letter\n        }\n        const arcs = STATE_MACHINE[mode];\n        for (let i = 0; i < arcs.length; i++) {\n            const arc = arcs[i];\n            const [expectLastCh, expectCh, newMode] = arc;\n            if (expectLastCh === lastCh ||\n                expectLastCh === ANY ||\n                (expectLastCh === IDENT && isIdent(lastCh)) ||\n                (expectLastCh === WHITESPACE && isWhiteSpace(lastCh))) {\n                if (expectCh === ch ||\n                    expectCh === ANY ||\n                    (expectCh === IDENT && isIdent(ch)) ||\n                    (expectCh === NOT_IDENT && !isIdent(ch) && ch !== DOT) ||\n                    (expectCh === WHITESPACE && isWhiteSpace(ch))) {\n                    if (arc.length == 3 || lookAhead(arc)) {\n                        if (arc.length > 3) {\n                            // If matched on lookAhead than we we have to update current `ch`\n                            ch = css.charCodeAt(idx - 1);\n                        }\n                        DEBUG &&\n                            console.log('MATCH', charToString(expectLastCh), charToString(expectCh), modeToString(newMode));\n                        // We found a match!\n                        if (newMode === EXIT || newMode == EXIT_INSERT_SCOPE) {\n                            if (newMode === EXIT_INSERT_SCOPE) {\n                                if (mode === starSelector && !shouldNotInsertScoping()) {\n                                    // Replace `*` with the scoping elementClassIdSelector.\n                                    if (isChainedSelector(ch)) {\n                                        // *foo\n                                        flush(idx - 2);\n                                    }\n                                    else {\n                                        // * (by itself)\n                                        insertScopingSelector(idx - 2);\n                                    }\n                                    lastIdx++;\n                                }\n                                else {\n                                    if (!isChainedSelector(ch)) {\n                                        // We are exiting one of the Selector so we may need to\n                                        const offset = expectCh == NOT_IDENT ? 1 : expectCh == CLOSE_PARENTHESIS ? 2 : 0;\n                                        insertScopingSelector(idx - offset);\n                                    }\n                                }\n                            }\n                            if (expectCh === NOT_IDENT) {\n                                // NOT_IDENT is not a real character more like lack of what we expected.\n                                // if pseudoGlobal we need to give it a chance to exit as well.\n                                // For this reason we need to reparse the last character again.\n                                idx--;\n                                ch = lastCh;\n                            }\n                            do {\n                                mode = stack.pop() || rule;\n                                if (mode === pseudoGlobal) {\n                                    // Skip over the `)` in `:global(...)`.\n                                    flush(idx - 1);\n                                    lastIdx++;\n                                }\n                            } while (isSelfClosingRule(mode));\n                        }\n                        else {\n                            stack.push(mode);\n                            if (mode === pseudoGlobal && newMode === rule) {\n                                flush(idx - 8); // `:global(`.length\n                                lastIdx = idx; // skip over \":global(\"\n                            }\n                            else if (newMode === pseudoElement) {\n                                // We are entering pseudoElement `::foo`; insert scoping in front of it.\n                                insertScopingSelector(chIdx);\n                            }\n                            mode = newMode;\n                            ch == SPACE; // Pretend not an identifier so that we don't flush again on elementClassIdSelector\n                        }\n                        break; // get out of the for loop as we found a match\n                    }\n                }\n            }\n        }\n        lastCh = ch;\n    }\n    flush(idx);\n    return out.join('');\n    function flush(idx) {\n        out.push(css.substring(lastIdx, idx));\n        DEBUG && console.log('FLUSH', out.join(''));\n        lastIdx = idx;\n    }\n    function insertScopingSelector(idx) {\n        if (mode === pseudoGlobal || shouldNotInsertScoping()) {\n            return;\n        }\n        flush(idx);\n        out.push('.', ComponentStylesPrefixContent, scopeId);\n        DEBUG && console.log('INSERT', out.join(''));\n    }\n    function lookAhead(arc) {\n        let prefix = 0; // Ignore vendor prefixes such as `-webkit-`.\n        if (css.charCodeAt(idx) === DASH) {\n            for (let i = 1; i < 10; i++) {\n                // give up after 10 characters\n                if (css.charCodeAt(idx + i) === DASH) {\n                    prefix = i + 1;\n                    break;\n                }\n            }\n        }\n        words: for (let arcIndx = 3; arcIndx < arc.length; arcIndx++) {\n            const txt = arc[arcIndx];\n            for (let i = 0; i < txt.length; i++) {\n                if ((css.charCodeAt(idx + i + prefix) | LOWERCASE) !== txt.charCodeAt(i)) {\n                    continue words;\n                }\n            }\n            // we found a match;\n            idx += txt.length + prefix;\n            return true;\n        }\n        return false;\n    }\n    function shouldNotInsertScoping() {\n        return stack.indexOf(pseudoGlobal) !== -1 || stack.indexOf(atRuleSelector) !== -1;\n    }\n};\nconst isIdent = (ch) => {\n    return ((ch >= _0 && ch <= _9) ||\n        (ch >= A && ch <= Z) ||\n        (ch >= a && ch <= z) ||\n        ch >= 0x80 ||\n        ch === UNDERSCORE ||\n        ch === DASH);\n};\nconst isChainedSelector = (ch) => {\n    return ch === COLON || ch === DOT || ch === OPEN_BRACKET || ch === HASH || isIdent(ch);\n};\nconst isSelfClosingRule = (mode) => {\n    return (mode === atRuleBlock || mode === atRuleSelector || mode === atRuleInert || mode === pseudoGlobal);\n};\nconst isWhiteSpace = (ch) => {\n    return ch === SPACE || ch === TAB || ch === NEWLINE || ch === CARRIAGE_RETURN;\n};\nconst modeToString = (mode) => {\n    return [\n        'rule',\n        'elementClassIdSelector',\n        'starSelector',\n        'pseudoClassWithSelector',\n        'pseudoClass',\n        'pseudoGlobal',\n        'pseudoElement',\n        'attrSelector',\n        'inertParenthesis',\n        'inertBlock',\n        'atRuleSelector',\n        'atRuleBlock',\n        'atInert',\n        'body',\n        'stringSingle',\n        'stringDouble',\n        'commentMultiline',\n        'EXIT',\n        'EXIT_INSERT_SCOPE',\n    ][mode];\n};\nconst charToString = (ch) => {\n    return ['ANY', 'IDENT', 'NOT_IDENT', 'WHITESPACE'][ch] || String.fromCharCode(ch);\n};\nconst rule = 0; // top level initial space.\nconst elementClassIdSelector = 1; // .elementClassIdSelector {}\nconst starSelector = 2; // * {}\nconst pseudoClassWithSelector = 3; // :pseudoClass(elementClassIdSelector) {}\nconst pseudoClass = 4; // :pseudoClass {}\nconst pseudoGlobal = 5; // :global(elementClassIdSelector)\nconst pseudoElement = 6; // ::pseudoElement {}\nconst attrSelector = 7; // [attr] {}\nconst inertParenthesis = 8; // (ignored)\nconst inertBlock = 9; // {ignored}\nconst atRuleSelector = 10; // @keyframe elementClassIdSelector {}\nconst atRuleBlock = 11; // @media {elementClassIdSelector {}}\nconst atRuleInert = 12; // @atRule something;\nconst body = 13; // .elementClassIdSelector {body}\nconst stringSingle = 14; // 'text'\nconst stringDouble = 15; // 'text'\nconst commentMultiline = 16; // /* ... */\n// NOT REAL MODES\nconst EXIT = 17; // Exit the mode\nconst EXIT_INSERT_SCOPE = 18; // Exit the mode INSERT SCOPE\nconst ANY = 0;\nconst IDENT = 1;\nconst NOT_IDENT = 2;\nconst WHITESPACE = 3;\nconst TAB = 9; // `\\t`.charCodeAt(0);\nconst NEWLINE = 10; // `\\n`.charCodeAt(0);\nconst CARRIAGE_RETURN = 13; // `\\r`.charCodeAt(0);\nconst SPACE = 32; // ` `.charCodeAt(0);\nconst DOUBLE_QUOTE = 34; // `\"`.charCodeAt(0);\nconst HASH = 35; // `#`.charCodeAt(0);\nconst SINGLE_QUOTE = 39; // `'`.charCodeAt(0);\nconst OPEN_PARENTHESIS = 40; // `(`.charCodeAt(0);\nconst CLOSE_PARENTHESIS = 41; // `)`.charCodeAt(0);\nconst STAR = 42; // `*`.charCodeAt(0);\n// const COMMA = 44; // `,`.charCodeAt(0);\nconst DASH = 45; // `-`.charCodeAt(0);\nconst DOT = 46; // `.`.charCodeAt(0);\nconst FORWARD_SLASH = 47; // `/`.charCodeAt(0);\nconst _0 = 48; // `0`.charCodeAt(0);\nconst _9 = 57; // `9`.charCodeAt(0);\nconst COLON = 58; // `:`.charCodeAt(0);\nconst SEMICOLON = 59; // `;`.charCodeAt(0);\n// const LESS_THAN = 60; // `<`.charCodeAt(0);\nconst AT = 64; // `@`.charCodeAt(0);\nconst A = 65; // `A`.charCodeAt(0);\nconst Z = 90; // `Z`.charCodeAt(0);\nconst OPEN_BRACKET = 91; // `[`.charCodeAt(0);\nconst CLOSE_BRACKET = 93; // `]`.charCodeAt(0);\nconst BACKSLASH = 92; // `\\\\`.charCodeAt(0);\nconst UNDERSCORE = 95; // `_`.charCodeAt(0);\nconst LOWERCASE = 0x20; // `a`.charCodeAt(0);\nconst a = 97; // `a`.charCodeAt(0);\n// const d = 100; // `d`.charCodeAt(0);\n// const g = 103; // 'g'.charCodeAt(0);\n// const h = 104; // `h`.charCodeAt(0);\n// const i = 105; // `i`.charCodeAt(0);\n// const l = 108; // `l`.charCodeAt(0);\n// const t = 116; // `t`.charCodeAt(0);\nconst z = 122; // `z`.charCodeAt(0);\nconst OPEN_BRACE = 123; // `{`.charCodeAt(0);\nconst CLOSE_BRACE = 125; // `}`.charCodeAt(0);\nconst STRINGS_COMMENTS = /*__PURE__*/ (() => [\n    [ANY, SINGLE_QUOTE, stringSingle],\n    [ANY, DOUBLE_QUOTE, stringDouble],\n    [ANY, FORWARD_SLASH, commentMultiline, '*'],\n])();\nconst STATE_MACHINE = /*__PURE__*/ (() => [\n    [\n        /// rule\n        [ANY, STAR, starSelector],\n        [ANY, OPEN_BRACKET, attrSelector],\n        [ANY, COLON, pseudoElement, ':', 'before', 'after', 'first-letter', 'first-line'],\n        [ANY, COLON, pseudoGlobal, 'global'],\n        [\n            ANY,\n            COLON,\n            pseudoClassWithSelector,\n            'has',\n            'host-context',\n            'not',\n            'where',\n            'is',\n            'matches',\n            'any',\n        ],\n        [ANY, COLON, pseudoClass],\n        [ANY, IDENT, elementClassIdSelector],\n        [ANY, DOT, elementClassIdSelector],\n        [ANY, HASH, elementClassIdSelector],\n        [ANY, AT, atRuleSelector, 'keyframe'],\n        [ANY, AT, atRuleBlock, 'media', 'supports', 'container'],\n        [ANY, AT, atRuleInert],\n        [ANY, OPEN_BRACE, body],\n        [FORWARD_SLASH, STAR, commentMultiline],\n        [ANY, SEMICOLON, EXIT],\n        [ANY, CLOSE_BRACE, EXIT],\n        [ANY, CLOSE_PARENTHESIS, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// elementClassIdSelector\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// starSelector\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoClassWithSelector\n        [ANY, OPEN_PARENTHESIS, rule],\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoClass\n        [ANY, OPEN_PARENTHESIS, inertParenthesis],\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoGlobal\n        [ANY, OPEN_PARENTHESIS, rule],\n        [ANY, NOT_IDENT, EXIT],\n    ],\n    [\n        /// pseudoElement\n        [ANY, NOT_IDENT, EXIT],\n    ],\n    [\n        /// attrSelector\n        [ANY, CLOSE_BRACKET, EXIT_INSERT_SCOPE],\n        [ANY, SINGLE_QUOTE, stringSingle],\n        [ANY, DOUBLE_QUOTE, stringDouble],\n    ],\n    [\n        /// inertParenthesis\n        [ANY, CLOSE_PARENTHESIS, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// inertBlock\n        [ANY, CLOSE_BRACE, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleSelector\n        [ANY, CLOSE_BRACE, EXIT],\n        [WHITESPACE, IDENT, elementClassIdSelector],\n        [ANY, COLON, pseudoGlobal, 'global'],\n        [ANY, OPEN_BRACE, body],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleBlock\n        [ANY, OPEN_BRACE, rule],\n        [ANY, SEMICOLON, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleInert\n        [ANY, SEMICOLON, EXIT],\n        [ANY, OPEN_BRACE, inertBlock],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// body\n        [ANY, CLOSE_BRACE, EXIT],\n        [ANY, OPEN_BRACE, body],\n        [ANY, OPEN_PARENTHESIS, inertParenthesis],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// stringSingle\n        [ANY, SINGLE_QUOTE, EXIT],\n    ],\n    [\n        /// stringDouble\n        [ANY, DOUBLE_QUOTE, EXIT],\n    ],\n    [\n        /// commentMultiline\n        [STAR, FORWARD_SLASH, EXIT],\n    ],\n])();\n//# sourceMappingURL=data:application/json;base64,","import { styleContent, styleKey } from '../style/qrl-styles';\nimport {} from '../qrl/qrl.public';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { getScopedStyles } from '../style/scoped-stylesheet';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { assertQrl } from '../qrl/qrl-class';\nimport { isPromise } from '../util/promises';\nimport { assertDefined } from '../error/assert';\nimport { ComponentStylesPrefixContent } from '../util/markers';\n// <docs markdown=\"../readme.md#useStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStyles instead)\n/**\n * A lazy-loadable reference to a component's styles.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import styles from './code-block.css?inline';\n *\n * export const CmpStyles = component$(() => {\n *   useStyles$(styles);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @public\n * @see `useStylesScoped`\n */\n// </docs>\nexport const useStylesQrl = (styles) => {\n    return {\n        styleId: _useStyles(styles, (str) => str, false),\n    };\n};\n// <docs markdown=\"../readme.md#useStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStyles instead)\n/**\n * A lazy-loadable reference to a component's styles.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import styles from './code-block.css?inline';\n *\n * export const CmpStyles = component$(() => {\n *   useStyles$(styles);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @public\n * @see `useStylesScoped`\n */\n// </docs>\nexport const useStyles$ = /*#__PURE__*/ implicit$FirstArg(useStylesQrl);\n// <docs markdown=\"../readme.md#useStylesScoped\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStylesScoped instead)\n/**\n * A lazy-loadable reference to a component's styles, that is scoped to the component.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import scoped from './code-block.css?inline';\n *\n * export const CmpScopedStyles = component$(() => {\n *   useStylesScoped$(scoped);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @public\n * @see `useStyles`\n */\n// </docs>\nexport const useStylesScopedQrl = (styles) => {\n    return {\n        scopeId: ComponentStylesPrefixContent + _useStyles(styles, getScopedStyles, true),\n    };\n};\n// <docs markdown=\"../readme.md#useStylesScoped\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStylesScoped instead)\n/**\n * A lazy-loadable reference to a component's styles, that is scoped to the component.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import scoped from './code-block.css?inline';\n *\n * export const CmpScopedStyles = component$(() => {\n *   useStylesScoped$(scoped);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @public\n * @see `useStyles`\n */\n// </docs>\nexport const useStylesScoped$ = /*#__PURE__*/ implicit$FirstArg(useStylesScopedQrl);\nconst _useStyles = (styleQrl, transform, scoped) => {\n    assertQrl(styleQrl);\n    const { val, set, iCtx, i, elCtx } = useSequentialScope();\n    if (val) {\n        return val;\n    }\n    if (iCtx.$container2$) {\n        const styleId = styleKey(styleQrl, i);\n        const host = iCtx.$hostElement$;\n        set(styleId);\n        const value = styleQrl.$resolveLazy$(host);\n        if (isPromise(value)) {\n            value.then((val) => iCtx.$container2$.$appendStyle$(transform(val, styleId), styleId, host, scoped));\n            throw value;\n        }\n        else {\n            iCtx.$container2$.$appendStyle$(transform(value, styleId), styleId, host, scoped);\n        }\n        return styleId;\n    }\n    else {\n        const styleId = styleKey(styleQrl, i);\n        const containerState = iCtx.$renderCtx$.$static$.$containerState$;\n        set(styleId);\n        if (!elCtx.$appendStyles$) {\n            elCtx.$appendStyles$ = [];\n        }\n        if (!elCtx.$scopeIds$) {\n            elCtx.$scopeIds$ = [];\n        }\n        if (scoped) {\n            elCtx.$scopeIds$.push(styleContent(styleId));\n        }\n        if (containerState.$styleIds$.has(styleId)) {\n            return styleId;\n        }\n        containerState.$styleIds$.add(styleId);\n        const value = styleQrl.$resolveLazy$(containerState.$containerEl$);\n        const appendStyle = (styleText) => {\n            assertDefined(elCtx.$appendStyles$, 'appendStyles must be defined');\n            elCtx.$appendStyles$.push({\n                styleId,\n                content: transform(styleText, styleId),\n            });\n        };\n        if (isPromise(value)) {\n            iCtx.$waitOn$.push(value.then(appendStyle));\n        }\n        else {\n            appendStyle(value);\n        }\n        return styleId;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { isQwikComponent } from '../component/component.public';\nimport { _createSignal } from '../state/signal';\nimport { isFunction } from '../util/types';\nimport { invoke, useInvokeContext } from './use-core';\nimport { useSequentialScope } from './use-sequential-scope';\n/**\n * Creates a signal.\n *\n * If the initial state is a function, the function is invoked to calculate the actual initial\n * state.\n *\n * @deprecated This is a technology preview\n * @public\n */\nexport const createSignal = (initialState) => {\n    const iCtx = useInvokeContext();\n    const subsManager = iCtx.$container2$?.$subsManager$ || iCtx.$renderCtx$.$static$.$containerState$.$subsManager$;\n    const value = isFunction(initialState) && !isQwikComponent(initialState)\n        ? invoke(undefined, initialState)\n        : initialState;\n    return _createSignal(value, subsManager, 0, undefined);\n};\n/**\n * Stores a value which is retained for the lifetime of the component.\n *\n * If the value is a function, the function is invoked to calculate the actual value.\n *\n * @deprecated This is a technology preview\n * @public\n */\nexport const useConstant = (value) => {\n    const { val, set } = useSequentialScope();\n    if (val != null) {\n        return val;\n    }\n    // Note: We are not using `invoke` here because we don't want to clear the context\n    value = isFunction(value) && !isQwikComponent(value) ? value() : value;\n    return set(value);\n};\n/**\n * Hook that creates a signal that is retained for the lifetime of the component.\n *\n * @public\n */\nexport const useSignal = (initialState) => {\n    return useConstant(() => createSignal(initialState));\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXNpZ25hbC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXNpZ25hbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGFBQWEsRUFBZSxNQUFNLGlCQUFpQixDQUFDO0FBQzdELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN0RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQVE1RDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBYyxDQUFRLFlBQW9CLEVBQWlCLEVBQUU7SUFDcEYsTUFBTSxJQUFJLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztJQUNoQyxNQUFNLFdBQVcsR0FDZixJQUFJLENBQUMsWUFBWSxFQUFFLGFBQWEsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUM7SUFDL0YsTUFBTSxLQUFLLEdBQ1QsVUFBVSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQztRQUN4RCxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxZQUFtQixDQUFDO1FBQ3hDLENBQUMsQ0FBQyxZQUFZLENBQUM7SUFDbkIsT0FBTyxhQUFhLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFrQixDQUFDO0FBQzFFLENBQUMsQ0FBQztBQUVGOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBSSxLQUFvQixFQUFLLEVBQUU7SUFDeEQsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxrQkFBa0IsRUFBSyxDQUFDO0lBQzdDLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ2hCLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUNELGtGQUFrRjtJQUNsRixLQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ3ZFLE9BQU8sR0FBRyxDQUFDLEtBQVUsQ0FBQyxDQUFDO0FBQ3pCLENBQUMsQ0FBQztBQUVGOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQWMsQ0FBQyxZQUFrQixFQUFFLEVBQUU7SUFDekQsT0FBTyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7QUFDdkQsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNRd2lrQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50L2NvbXBvbmVudC5wdWJsaWMnO1xuaW1wb3J0IHsgX2NyZWF0ZVNpZ25hbCwgdHlwZSBTaWduYWwgfSBmcm9tICcuLi9zdGF0ZS9zaWduYWwnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuaW1wb3J0IHsgaW52b2tlLCB1c2VJbnZva2VDb250ZXh0IH0gZnJvbSAnLi91c2UtY29yZSc7XG5pbXBvcnQgeyB1c2VTZXF1ZW50aWFsU2NvcGUgfSBmcm9tICcuL3VzZS1zZXF1ZW50aWFsLXNjb3BlJztcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXNlU2lnbmFsIHtcbiAgPFQ+KCk6IFNpZ25hbDxUIHwgdW5kZWZpbmVkPjtcbiAgPFQ+KHZhbHVlOiBUIHwgKCgpID0+IFQpKTogU2lnbmFsPFQ+O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzaWduYWwuXG4gKlxuICogSWYgdGhlIGluaXRpYWwgc3RhdGUgaXMgYSBmdW5jdGlvbiwgdGhlIGZ1bmN0aW9uIGlzIGludm9rZWQgdG8gY2FsY3VsYXRlIHRoZSBhY3R1YWwgaW5pdGlhbFxuICogc3RhdGUuXG4gKlxuICogQGRlcHJlY2F0ZWQgVGhpcyBpcyBhIHRlY2hub2xvZ3kgcHJldmlld1xuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgY3JlYXRlU2lnbmFsOiBVc2VTaWduYWwgPSA8U1RBVEU+KGluaXRpYWxTdGF0ZT86IFNUQVRFKTogU2lnbmFsPFNUQVRFPiA9PiB7XG4gIGNvbnN0IGlDdHggPSB1c2VJbnZva2VDb250ZXh0KCk7XG4gIGNvbnN0IHN1YnNNYW5hZ2VyID1cbiAgICBpQ3R4LiRjb250YWluZXIyJD8uJHN1YnNNYW5hZ2VyJCB8fCBpQ3R4LiRyZW5kZXJDdHgkLiRzdGF0aWMkLiRjb250YWluZXJTdGF0ZSQuJHN1YnNNYW5hZ2VyJDtcbiAgY29uc3QgdmFsdWUgPVxuICAgIGlzRnVuY3Rpb24oaW5pdGlhbFN0YXRlKSAmJiAhaXNRd2lrQ29tcG9uZW50KGluaXRpYWxTdGF0ZSlcbiAgICAgID8gaW52b2tlKHVuZGVmaW5lZCwgaW5pdGlhbFN0YXRlIGFzIGFueSlcbiAgICAgIDogaW5pdGlhbFN0YXRlO1xuICByZXR1cm4gX2NyZWF0ZVNpZ25hbCh2YWx1ZSwgc3Vic01hbmFnZXIsIDAsIHVuZGVmaW5lZCkgYXMgU2lnbmFsPFNUQVRFPjtcbn07XG5cbi8qKlxuICogU3RvcmVzIGEgdmFsdWUgd2hpY2ggaXMgcmV0YWluZWQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LlxuICpcbiAqIElmIHRoZSB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCB0aGUgZnVuY3Rpb24gaXMgaW52b2tlZCB0byBjYWxjdWxhdGUgdGhlIGFjdHVhbCB2YWx1ZS5cbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGlzIGEgdGVjaG5vbG9neSBwcmV2aWV3XG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VDb25zdGFudCA9IDxUPih2YWx1ZTogKCgpID0+IFQpIHwgVCk6IFQgPT4ge1xuICBjb25zdCB7IHZhbCwgc2V0IH0gPSB1c2VTZXF1ZW50aWFsU2NvcGU8VD4oKTtcbiAgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuICAvLyBOb3RlOiBXZSBhcmUgbm90IHVzaW5nIGBpbnZva2VgIGhlcmUgYmVjYXVzZSB3ZSBkb24ndCB3YW50IHRvIGNsZWFyIHRoZSBjb250ZXh0XG4gIHZhbHVlID0gaXNGdW5jdGlvbih2YWx1ZSkgJiYgIWlzUXdpa0NvbXBvbmVudCh2YWx1ZSkgPyB2YWx1ZSgpIDogdmFsdWU7XG4gIHJldHVybiBzZXQodmFsdWUgYXMgVCk7XG59O1xuXG4vKipcbiAqIEhvb2sgdGhhdCBjcmVhdGVzIGEgc2lnbmFsIHRoYXQgaXMgcmV0YWluZWQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZVNpZ25hbDogVXNlU2lnbmFsID0gKGluaXRpYWxTdGF0ZT86IGFueSkgPT4ge1xuICByZXR1cm4gdXNlQ29uc3RhbnQoKCkgPT4gY3JlYXRlU2lnbmFsKGluaXRpYWxTdGF0ZSkpO1xufTtcbiJdfQ==","import { qrl } from '../qrl/qrl';\nimport { ERROR_CONTEXT } from '../render/error-handling';\nimport { useContextProvider } from './use-context';\nimport { useOn } from './use-on';\nimport { useStore } from './use-store.public';\n/** @public */\nexport const useErrorBoundary = () => {\n    const store = useStore({\n        error: undefined,\n    });\n    useOn('error-boundary', qrl('/runtime', 'error', [store]));\n    useContextProvider(ERROR_CONTEXT, store);\n    return store;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWVycm9yLWJvdW5kYXJ5LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtZXJyb3ItYm91bmRhcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNqQyxPQUFPLEVBQTJCLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2xGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUU5QyxjQUFjO0FBQ2QsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBaUMsRUFBRTtJQUNqRSxNQUFNLEtBQUssR0FBdUIsUUFBUSxDQUFDO1FBQ3pDLEtBQUssRUFBRSxTQUFTO0tBQ2pCLENBQUMsQ0FBQztJQUNILEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsVUFBVSxFQUFFLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzRCxrQkFBa0IsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFekMsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBxcmwgfSBmcm9tICcuLi9xcmwvcXJsJztcbmltcG9ydCB7IHR5cGUgRXJyb3JCb3VuZGFyeVN0b3JlLCBFUlJPUl9DT05URVhUIH0gZnJvbSAnLi4vcmVuZGVyL2Vycm9yLWhhbmRsaW5nJztcbmltcG9ydCB7IHVzZUNvbnRleHRQcm92aWRlciB9IGZyb20gJy4vdXNlLWNvbnRleHQnO1xuaW1wb3J0IHsgdXNlT24gfSBmcm9tICcuL3VzZS1vbic7XG5pbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJy4vdXNlLXN0b3JlLnB1YmxpYyc7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgdXNlRXJyb3JCb3VuZGFyeSA9ICgpOiBSZWFkb25seTxFcnJvckJvdW5kYXJ5U3RvcmU+ID0+IHtcbiAgY29uc3Qgc3RvcmU6IEVycm9yQm91bmRhcnlTdG9yZSA9IHVzZVN0b3JlKHtcbiAgICBlcnJvcjogdW5kZWZpbmVkLFxuICB9KTtcbiAgdXNlT24oJ2Vycm9yLWJvdW5kYXJ5JywgcXJsKCcvcnVudGltZScsICdlcnJvcicsIFtzdG9yZV0pKTtcbiAgdXNlQ29udGV4dFByb3ZpZGVyKEVSUk9SX0NPTlRFWFQsIHN0b3JlKTtcblxuICByZXR1cm4gc3RvcmU7XG59O1xuIl19","import { isDev } from '@builder.io/qwik/build';\nimport { _jsxSorted } from '../internal';\nimport { useServerData } from '../use/use-env-data';\nimport { QBaseAttr, QManifestHashAttr } from '../util/markers';\n/**\n * Install a service worker which will prefetch the bundles.\n *\n * There can only be one service worker per page. Because there can be many separate Qwik Containers\n * on the page each container needs to load its prefetch graph using `PrefetchGraph` component.\n *\n * @param opts - Options for the prefetch service worker.\n *\n *   - `base` - Base URL for the service worker. Default is `import.meta.env.BASE_URL`, which is defined\n *       by Vite's `config.base` and defaults to `/`.\n *   - `scope` - Base URL for when the service-worker will activate. Default is `/`\n *   - `path` - Path to the service worker. Default is `qwik-prefetch-service-worker.js` unless you pass\n *       a path that starts with a `/` then the base is ignored. Default is\n *       `qwik-prefetch-service-worker.js`\n *   - `verbose` - Verbose logging for the service worker installation. Default is `false`\n *   - `nonce` - Optional nonce value for security purposes, defaults to `undefined`.\n *\n * @alpha\n */\nexport const PrefetchServiceWorker = (opts) => {\n    const isTest = import.meta.env.TEST;\n    if (isDev && !isTest) {\n        const props = {\n            dangerouslySetInnerHTML: '<!-- PrefetchServiceWorker is disabled in dev mode. -->',\n        };\n        return _jsxSorted('script', null, props, null, 0, 'prefetch-service-worker');\n    }\n    const serverData = useServerData('containerAttributes', {});\n    // if an MFE app has a custom BASE_URL then this will be the correct value\n    // if you're not using MFE from another codebase then you want to override this value to your custom setup\n    const baseUrl = import.meta.env.BASE_URL || '/';\n    const resolvedOpts = {\n        base: serverData['q:base'],\n        manifestHash: serverData['q:manifest-hash'],\n        scope: '/',\n        verbose: false,\n        path: 'qwik-prefetch-service-worker.js',\n        ...opts,\n    };\n    if (opts?.path?.startsWith?.('/')) {\n        // allow different path and base\n        resolvedOpts.path = opts.path;\n    }\n    else {\n        // baseUrl: '/'\n        // path: 'qwik-prefetch-service-worker.js'\n        // the file 'qwik-prefetch-service-worker.js' is not located in /build/\n        resolvedOpts.path = baseUrl + resolvedOpts.path;\n    }\n    let code = PREFETCH_CODE.replace('URL', resolvedOpts.path).replace('SCOPE', resolvedOpts.scope);\n    if (!isDev) {\n        code = code.replaceAll(/\\s+/gm, '');\n    }\n    const props = {\n        dangerouslySetInnerHTML: [\n            '(' + code + ')(',\n            [\n                JSON.stringify(resolvedOpts.base),\n                JSON.stringify(resolvedOpts.manifestHash),\n                'navigator.serviceWorker',\n                'window.qwikPrefetchSW||(window.qwikPrefetchSW=[])',\n                resolvedOpts.verbose,\n            ].join(','),\n            ');',\n        ].join(''),\n        nonce: resolvedOpts.nonce,\n    };\n    return _jsxSorted('script', null, props, null, 0, 'prefetch-service-worker');\n};\nconst PREFETCH_CODE = /*#__PURE__*/ ((b, // base\nh, // manifest hash\nc, // Service worker container\nq, // Queue of messages to send to the service worker.\nv // Verbose mode\n) => {\n    c.register('URL', { scope: 'SCOPE' }).then((sw, onReady) => {\n        onReady = () => q.forEach((q.push = (v) => sw.active.postMessage(v)));\n        sw.installing\n            ? sw.installing.addEventListener('statechange', (e) => e.target.state == 'activated' && onReady())\n            : onReady();\n    });\n    v && q.push(['verbose']);\n    document.addEventListener('qprefetch', (e) => e.detail.bundles && q.push(['prefetch', b, ...e.detail.bundles]));\n}).toString();\n/**\n * Load the prefetch graph for the container.\n *\n * Each Qwik container needs to include its own prefetch graph.\n *\n * @param opts - Options for the loading prefetch graph.\n *\n *   - `base` - Base of the graph. For a default installation this will default to the q:base value\n *       `/build/`. But if more than one MFE is installed on the page, then each MFE needs to have\n *       its own base.\n *   - `manifestHash` - Hash of the manifest file to load. If not provided the hash will be extracted\n *       from the container attribute `q:manifest-hash` and assume the default build file\n *       `${base}/q-bundle-graph-${manifestHash}.json`.\n *   - `manifestURL` - URL of the manifest file to load if non-standard bundle graph location name.\n *\n * @alpha\n */\nexport const PrefetchGraph = (opts = {}) => {\n    const isTest = import.meta.env.TEST;\n    if (isDev && !isTest) {\n        const props = {\n            dangerouslySetInnerHTML: '<!-- PrefetchGraph is disabled in dev mode. -->',\n        };\n        return _jsxSorted('script', null, props, null, 0, 'prefetch-graph');\n    }\n    const serverData = useServerData('containerAttributes', {});\n    const resolvedOpts = {\n        // /build/q-bundle-graph-${manifestHash}.json is always within the q:base location /build/\n        base: serverData[QBaseAttr],\n        manifestHash: serverData[QManifestHashAttr],\n        scope: '/',\n        verbose: false,\n        path: 'qwik-prefetch-service-worker.js',\n        ...opts,\n    };\n    const args = JSON.stringify([\n        'graph-url',\n        resolvedOpts.base,\n        `q-bundle-graph-${resolvedOpts.manifestHash}.json`,\n    ]);\n    const code = `(window.qwikPrefetchSW||(window.qwikPrefetchSW=[])).push(${args})`;\n    const props = {\n        dangerouslySetInnerHTML: code,\n        nonce: opts.nonce,\n    };\n    return _jsxSorted('script', null, props, null, 0, 'prefetch-graph');\n};\n//# sourceMappingURL=data:application/json;base64,"],"names":["isElement","tryGetContext","isServer","SVG_NS","FLUSH_COMMENT","fromCamelToKebabCase","emitEvent","isBrowser","setEvent","SubscriptionType","isDev","getKey","parseQRL","_a","IS_HEAD","IS_IMMUTABLE","processData","setComponentProps","registerQwikEvent","getSlotName","isContainer","SHOW_COMMENT","isTask","isResourceTask","FILTER_REJECT"],"mappings":"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U,EAAE,EAAE,YAAY,EAAE;IACpD,IAAI,IAAI,YAAY,KAAK,SAAS,EAAE;IACpC,QAAQ,YAAY,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC;IACrC,KAAK;IACL,IAAI,OAAO,SAAS,CAAC,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAC/D;;IC/HA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,YAAY,GAAG,CAAC,YAAY,KAAK;IAC9C;IACA,IAAI,MAAM,aAAa,GAAG,MAAM,GAAG,CAAC;IACpC,IAAI,aAAa,CAAC,kBAAkB,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IACvD,IAAI,OAAO,aAAa,CAAC;IACzB,EAAE;IACK,MAAM,eAAe,GAAG,CAAC,SAAS,KAAK;IAC9C,IAAI,OAAO,OAAO,SAAS,IAAI,UAAU,IAAI,SAAS,CAAC,kBAAkB,CAAC,KAAK,SAAS,CAAC;IACzF,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,UAAU,GAAG,CAAC,OAAO,KAAK;IACvC,IAAI,OAAO,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;IACzC;;ICpHA;IACA;IACA;IACA;IACA;IACA;IAC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"}