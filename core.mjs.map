{"version":3,"file":"core.mjs","sources":["../../../dist-dev/tsc-out/packages/qwik/src/core/shared/utils/qdev.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/utils/log.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/error/assert.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/error/error.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/platform/platform.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/utils/element.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/utils/promises.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/utils/types.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/types.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/utils/markers.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-locale.js","../../../dist-dev/tsc-out/packages/qwik/src/server/prefetch-strategy.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/utils/flyweight.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/qrl/qrl.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/jsx/slot.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/jsx/utils.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/utils/async-generator.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/utils/event-names.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/utils/unitless_number.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/utils/hash_code.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/utils/styles.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/utils/scoped-styles.js","../../../dist-dev/tsc-out/packages/qwik/src/core/signal/store.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-sequential-scope.js","../../../dist-dev/tsc-out/packages/qwik/src/core/signal/signal-subscriber.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-resource.js","../../../dist-dev/tsc-out/packages/qwik/src/core/client/types.js","../../../dist-dev/tsc-out/packages/qwik/src/core/client/vnode-namespace.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-on.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/component-execution.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/utils/prop.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/utils/character-escaping.js","../../../dist-dev/tsc-out/packages/qwik/src/core/client/vnode-diff.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/qrl/implicit_dollar.js","../../../dist-dev/tsc-out/packages/qwik/src/core/signal/signal-api.js","../../../dist-dev/tsc-out/packages/qwik/src/core/signal/signal.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/scheduler.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-lexical-scope.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-task.js","../../../dist-dev/tsc-out/packages/qwik/src/core/signal/signal.js","../../../dist-dev/tsc-out/packages/qwik/src/core/ssr/ssr-render-component.js","../../../dist-dev/tsc-out/packages/qwik/src/core/ssr/ssr-render-jsx.js","../../../dist-dev/tsc-out/packages/qwik/src/core/version.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/shared-container.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/utils/constants.js","../../../dist-dev/tsc-out/packages/qwik/src/core/signal/signal-utils.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/qrl/inlined-fn.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared-types.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/jsx/jsx-runtime.js","../../../dist-dev/tsc-out/packages/qwik/src/core/debug.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/vnode-data-types.js","../../../dist-dev/tsc-out/packages/qwik/src/core/client/vnode.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-core.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-context.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/error/error-handling.js","../../../dist-dev/tsc-out/packages/qwik/src/core/client/process-vnode-data.js","../../../dist-dev/tsc-out/packages/qwik/src/core/client/dom-container.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/shared-serialization.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/utils/serialize-utils.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/qrl/qrl-class.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/qrl/qrl.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/component.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/qrl/qrl.public.dollar.js","../../../dist-dev/tsc-out/packages/qwik/src/core/client/dom-render.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-store.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/utils/unique-index-generator.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-id.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-env-data.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/utils/scoped-stylesheet.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-styles.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-signal.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-computed.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-visible-task.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-resource-dollar.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-task-dollar.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-visible-task-dollar.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-computed-dollar.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-error-boundary.js","../../../dist-dev/tsc-out/packages/qwik/src/core/shared/prefetch-service-worker/prefetch.js"],"sourcesContent":["// same as isDev but separate so we can test\nexport const qDev = globalThis.qDev !== false;\nexport const qInspector = globalThis.qInspector === true;\nexport const qSerialize = globalThis.qSerialize !== false;\nexport const qDynamicPlatform = globalThis.qDynamicPlatform !== false;\nexport const qTest = globalThis.qTest === true;\nexport const qRuntimeQrl = globalThis.qRuntimeQrl === true;\nexport const seal = (obj) => {\n    if (qDev) {\n        Object.seal(obj);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicWRldi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9zaGFyZWQvdXRpbHMvcWRldi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw0Q0FBNEM7QUFDNUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsVUFBVSxLQUFLLElBQUksQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLFVBQVUsS0FBSyxLQUFLLENBQUM7QUFDMUQsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLGdCQUFnQixLQUFLLEtBQUssQ0FBQztBQUN0RSxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUM7QUFDL0MsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxXQUFXLEtBQUssSUFBSSxDQUFDO0FBRTNELE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLEdBQVEsRUFBRSxFQUFFO0lBQy9CLElBQUksSUFBSSxFQUFFLENBQUM7UUFDVCxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25CLENBQUM7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzYW1lIGFzIGlzRGV2IGJ1dCBzZXBhcmF0ZSBzbyB3ZSBjYW4gdGVzdFxuZXhwb3J0IGNvbnN0IHFEZXYgPSBnbG9iYWxUaGlzLnFEZXYgIT09IGZhbHNlO1xuZXhwb3J0IGNvbnN0IHFJbnNwZWN0b3IgPSBnbG9iYWxUaGlzLnFJbnNwZWN0b3IgPT09IHRydWU7XG5leHBvcnQgY29uc3QgcVNlcmlhbGl6ZSA9IGdsb2JhbFRoaXMucVNlcmlhbGl6ZSAhPT0gZmFsc2U7XG5leHBvcnQgY29uc3QgcUR5bmFtaWNQbGF0Zm9ybSA9IGdsb2JhbFRoaXMucUR5bmFtaWNQbGF0Zm9ybSAhPT0gZmFsc2U7XG5leHBvcnQgY29uc3QgcVRlc3QgPSBnbG9iYWxUaGlzLnFUZXN0ID09PSB0cnVlO1xuZXhwb3J0IGNvbnN0IHFSdW50aW1lUXJsID0gZ2xvYmFsVGhpcy5xUnVudGltZVFybCA9PT0gdHJ1ZTtcblxuZXhwb3J0IGNvbnN0IHNlYWwgPSAob2JqOiBhbnkpID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBPYmplY3Quc2VhbChvYmopO1xuICB9XG59O1xuXG5kZWNsYXJlIGNvbnN0IGdsb2JhbFRoaXM6IGFueTtcbiJdfQ==","import { qDev, qTest } from './qdev';\nconst STYLE = qDev\n    ? `background: #564CE0; color: white; padding: 2px 3px; border-radius: 2px; font-size: 0.8em;`\n    : '';\nexport const logError = (message, ...optionalParams) => {\n    return createAndLogError(false, message, ...optionalParams);\n};\nexport const throwErrorAndStop = (message, ...optionalParams) => {\n    const error = createAndLogError(false, message, ...optionalParams);\n    // eslint-disable-next-line no-debugger\n    debugger;\n    throw error;\n};\nexport const logErrorAndStop = (message, ...optionalParams) => {\n    const err = createAndLogError(true, message, ...optionalParams);\n    // eslint-disable-next-line no-debugger\n    debugger;\n    return err;\n};\nconst _printed = /*#__PURE__*/ new Set();\nexport const logOnceWarn = (message, ...optionalParams) => {\n    if (qDev) {\n        const key = 'warn' + String(message);\n        if (!_printed.has(key)) {\n            _printed.add(key);\n            logWarn(message, ...optionalParams);\n        }\n    }\n};\nexport const logWarn = (message, ...optionalParams) => {\n    if (qDev) {\n        console.warn('%cQWIK WARN', STYLE, message, ...optionalParams);\n    }\n};\nexport const logDebug = (message, ...optionalParams) => {\n    if (qDev) {\n        // eslint-disable-next-line no-console\n        console.debug('%cQWIK', STYLE, message, ...optionalParams);\n    }\n};\nconst createAndLogError = (asyncThrow, message, ...optionalParams) => {\n    const err = message instanceof Error ? message : new Error(message);\n    // display the error message first, then the optional params, and finally the stack trace\n    // the stack needs to be displayed last because the given params will be lost among large stack traces so it will\n    // provide a bad developer experience\n    console.error('%cQWIK ERROR', STYLE, err.message, ...optionalParams, err.stack);\n    asyncThrow &&\n        !qTest &&\n        setTimeout(() => {\n            // throwing error asynchronously to avoid breaking the current call stack.\n            // We throw so that the error is delivered to the global error handler for\n            // reporting it to a third-party tools such as Qwik Insights, Sentry or New Relic.\n            throw err;\n        }, 0);\n    return err;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3NoYXJlZC91dGlscy9sb2cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFckMsTUFBTSxLQUFLLEdBQUcsSUFBSTtJQUNoQixDQUFDLENBQUMsNEZBQTRGO0lBQzlGLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFFUCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxPQUFhLEVBQUUsR0FBRyxjQUFxQixFQUFFLEVBQUU7SUFDbEUsT0FBTyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLEdBQUcsY0FBYyxDQUFDLENBQUM7QUFDOUQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxPQUFhLEVBQUUsR0FBRyxjQUFxQixFQUFTLEVBQUU7SUFDbEYsTUFBTSxLQUFLLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxHQUFHLGNBQWMsQ0FBQyxDQUFDO0lBQ25FLHVDQUF1QztJQUN2QyxRQUFRLENBQUM7SUFDVCxNQUFNLEtBQUssQ0FBQztBQUNkLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxDQUFDLE9BQWEsRUFBRSxHQUFHLGNBQXFCLEVBQUUsRUFBRTtJQUN6RSxNQUFNLEdBQUcsR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsY0FBYyxDQUFDLENBQUM7SUFDaEUsdUNBQXVDO0lBQ3ZDLFFBQVEsQ0FBQztJQUNULE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyxDQUFDO0FBRUYsTUFBTSxRQUFRLEdBQUcsYUFBYSxDQUFDLElBQUksR0FBRyxFQUFVLENBQUM7QUFFakQsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsT0FBYSxFQUFFLEdBQUcsY0FBcUIsRUFBRSxFQUFFO0lBQ3JFLElBQUksSUFBSSxFQUFFLENBQUM7UUFDVCxNQUFNLEdBQUcsR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDdkIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNsQixPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsY0FBYyxDQUFDLENBQUM7UUFDdEMsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxPQUFhLEVBQUUsR0FBRyxjQUFxQixFQUFFLEVBQUU7SUFDakUsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNULE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsR0FBRyxjQUFjLENBQUMsQ0FBQztJQUNqRSxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsT0FBZ0IsRUFBRSxHQUFHLGNBQXFCLEVBQUUsRUFBRTtJQUNyRSxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ1Qsc0NBQXNDO1FBQ3RDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsR0FBRyxjQUFjLENBQUMsQ0FBQztJQUM3RCxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLFVBQW1CLEVBQUUsT0FBYSxFQUFFLEdBQUcsY0FBcUIsRUFBRSxFQUFFO0lBQ3pGLE1BQU0sR0FBRyxHQUFHLE9BQU8sWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFcEUseUZBQXlGO0lBQ3pGLGlIQUFpSDtJQUNqSCxxQ0FBcUM7SUFDckMsT0FBTyxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxjQUFjLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRWhGLFVBQVU7UUFDUixDQUFDLEtBQUs7UUFDTixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsMEVBQTBFO1lBQzFFLDBFQUEwRTtZQUMxRSxrRkFBa0Y7WUFDbEYsTUFBTSxHQUFHLENBQUM7UUFDWixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDUixPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHFEZXYsIHFUZXN0IH0gZnJvbSAnLi9xZGV2JztcblxuY29uc3QgU1RZTEUgPSBxRGV2XG4gID8gYGJhY2tncm91bmQ6ICM1NjRDRTA7IGNvbG9yOiB3aGl0ZTsgcGFkZGluZzogMnB4IDNweDsgYm9yZGVyLXJhZGl1czogMnB4OyBmb250LXNpemU6IDAuOGVtO2BcbiAgOiAnJztcblxuZXhwb3J0IGNvbnN0IGxvZ0Vycm9yID0gKG1lc3NhZ2U/OiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSkgPT4ge1xuICByZXR1cm4gY3JlYXRlQW5kTG9nRXJyb3IoZmFsc2UsIG1lc3NhZ2UsIC4uLm9wdGlvbmFsUGFyYW1zKTtcbn07XG5cbmV4cG9ydCBjb25zdCB0aHJvd0Vycm9yQW5kU3RvcCA9IChtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pOiBuZXZlciA9PiB7XG4gIGNvbnN0IGVycm9yID0gY3JlYXRlQW5kTG9nRXJyb3IoZmFsc2UsIG1lc3NhZ2UsIC4uLm9wdGlvbmFsUGFyYW1zKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWRlYnVnZ2VyXG4gIGRlYnVnZ2VyO1xuICB0aHJvdyBlcnJvcjtcbn07XG5cbmV4cG9ydCBjb25zdCBsb2dFcnJvckFuZFN0b3AgPSAobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB7XG4gIGNvbnN0IGVyciA9IGNyZWF0ZUFuZExvZ0Vycm9yKHRydWUsIG1lc3NhZ2UsIC4uLm9wdGlvbmFsUGFyYW1zKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWRlYnVnZ2VyXG4gIGRlYnVnZ2VyO1xuICByZXR1cm4gZXJyO1xufTtcblxuY29uc3QgX3ByaW50ZWQgPSAvKiNfX1BVUkVfXyovIG5ldyBTZXQ8c3RyaW5nPigpO1xuXG5leHBvcnQgY29uc3QgbG9nT25jZVdhcm4gPSAobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB7XG4gIGlmIChxRGV2KSB7XG4gICAgY29uc3Qga2V5ID0gJ3dhcm4nICsgU3RyaW5nKG1lc3NhZ2UpO1xuICAgIGlmICghX3ByaW50ZWQuaGFzKGtleSkpIHtcbiAgICAgIF9wcmludGVkLmFkZChrZXkpO1xuICAgICAgbG9nV2FybihtZXNzYWdlLCAuLi5vcHRpb25hbFBhcmFtcyk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgY29uc3QgbG9nV2FybiA9IChtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBjb25zb2xlLndhcm4oJyVjUVdJSyBXQVJOJywgU1RZTEUsIG1lc3NhZ2UsIC4uLm9wdGlvbmFsUGFyYW1zKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGxvZ0RlYnVnID0gKG1lc3NhZ2U/OiBzdHJpbmcsIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSkgPT4ge1xuICBpZiAocURldikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5kZWJ1ZygnJWNRV0lLJywgU1RZTEUsIG1lc3NhZ2UsIC4uLm9wdGlvbmFsUGFyYW1zKTtcbiAgfVxufTtcblxuY29uc3QgY3JlYXRlQW5kTG9nRXJyb3IgPSAoYXN5bmNUaHJvdzogYm9vbGVhbiwgbWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB7XG4gIGNvbnN0IGVyciA9IG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvciA/IG1lc3NhZ2UgOiBuZXcgRXJyb3IobWVzc2FnZSk7XG5cbiAgLy8gZGlzcGxheSB0aGUgZXJyb3IgbWVzc2FnZSBmaXJzdCwgdGhlbiB0aGUgb3B0aW9uYWwgcGFyYW1zLCBhbmQgZmluYWxseSB0aGUgc3RhY2sgdHJhY2VcbiAgLy8gdGhlIHN0YWNrIG5lZWRzIHRvIGJlIGRpc3BsYXllZCBsYXN0IGJlY2F1c2UgdGhlIGdpdmVuIHBhcmFtcyB3aWxsIGJlIGxvc3QgYW1vbmcgbGFyZ2Ugc3RhY2sgdHJhY2VzIHNvIGl0IHdpbGxcbiAgLy8gcHJvdmlkZSBhIGJhZCBkZXZlbG9wZXIgZXhwZXJpZW5jZVxuICBjb25zb2xlLmVycm9yKCclY1FXSUsgRVJST1InLCBTVFlMRSwgZXJyLm1lc3NhZ2UsIC4uLm9wdGlvbmFsUGFyYW1zLCBlcnIuc3RhY2spO1xuXG4gIGFzeW5jVGhyb3cgJiZcbiAgICAhcVRlc3QgJiZcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIC8vIHRocm93aW5nIGVycm9yIGFzeW5jaHJvbm91c2x5IHRvIGF2b2lkIGJyZWFraW5nIHRoZSBjdXJyZW50IGNhbGwgc3RhY2suXG4gICAgICAvLyBXZSB0aHJvdyBzbyB0aGF0IHRoZSBlcnJvciBpcyBkZWxpdmVyZWQgdG8gdGhlIGdsb2JhbCBlcnJvciBoYW5kbGVyIGZvclxuICAgICAgLy8gcmVwb3J0aW5nIGl0IHRvIGEgdGhpcmQtcGFydHkgdG9vbHMgc3VjaCBhcyBRd2lrIEluc2lnaHRzLCBTZW50cnkgb3IgTmV3IFJlbGljLlxuICAgICAgdGhyb3cgZXJyO1xuICAgIH0sIDApO1xuICByZXR1cm4gZXJyO1xufTtcbiJdfQ==","import { throwErrorAndStop } from '../utils/log';\nimport { qDev } from '../utils/qdev';\nconst ASSERT_DISCLAIMER = 'Internal assert, this is likely caused by a bug in Qwik: ';\nexport function assertDefined(value, text, ...parts) {\n    if (qDev) {\n        if (value != null) {\n            return;\n        }\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertEqual(value1, value2, text, ...parts) {\n    if (qDev) {\n        if (value1 === value2) {\n            return;\n        }\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertFail(text, ...parts) {\n    if (qDev) {\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertTrue(value1, text, ...parts) {\n    if (qDev) {\n        if (value1 === true) {\n            return;\n        }\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertFalse(value1, text, ...parts) {\n    if (qDev) {\n        if (value1 === false) {\n            return;\n        }\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertNumber(value1, text, ...parts) {\n    if (qDev) {\n        if (typeof value1 === 'number') {\n            return;\n        }\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertString(value1, text, ...parts) {\n    if (qDev) {\n        if (typeof value1 === 'string') {\n            return;\n        }\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3NoYXJlZC9lcnJvci9hc3NlcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ2pELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckMsTUFBTSxpQkFBaUIsR0FBRywyREFBMkQsQ0FBQztBQUV0RixNQUFNLFVBQVUsYUFBYSxDQUMzQixLQUFRLEVBQ1IsSUFBWSxFQUNaLEdBQUcsS0FBWTtJQUVmLElBQUksSUFBSSxFQUFFLENBQUM7UUFDVCxJQUFJLEtBQUssSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUNsQixPQUFPO1FBQ1QsQ0FBQztRQUNELGlCQUFpQixDQUFDLGlCQUFpQixHQUFHLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQ3hELENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FDekIsTUFBVyxFQUNYLE1BQVcsRUFDWCxJQUFZLEVBQ1osR0FBRyxLQUFZO0lBRWYsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNULElBQUksTUFBTSxLQUFLLE1BQU0sRUFBRSxDQUFDO1lBQ3RCLE9BQU87UUFDVCxDQUFDO1FBQ0QsaUJBQWlCLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDeEQsQ0FBQztBQUNILENBQUM7QUFHRCxNQUFNLFVBQVUsVUFBVSxDQUFDLElBQVksRUFBRSxHQUFHLEtBQVk7SUFDdEQsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNULGlCQUFpQixDQUFDLGlCQUFpQixHQUFHLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQ3hELENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxNQUFXLEVBQUUsSUFBWSxFQUFFLEdBQUcsS0FBWTtJQUNuRSxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ1QsSUFBSSxNQUFNLEtBQUssSUFBSSxFQUFFLENBQUM7WUFDcEIsT0FBTztRQUNULENBQUM7UUFDRCxpQkFBaUIsQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUN4RCxDQUFDO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQUMsTUFBVyxFQUFFLElBQVksRUFBRSxHQUFHLEtBQVk7SUFDcEUsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNULElBQUksTUFBTSxLQUFLLEtBQUssRUFBRSxDQUFDO1lBQ3JCLE9BQU87UUFDVCxDQUFDO1FBQ0QsaUJBQWlCLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDeEQsQ0FBQztBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLE1BQVcsRUFBRSxJQUFZLEVBQUUsR0FBRyxLQUFZO0lBQ3JFLElBQUksSUFBSSxFQUFFLENBQUM7UUFDVCxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQy9CLE9BQU87UUFDVCxDQUFDO1FBQ0QsaUJBQWlCLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDeEQsQ0FBQztBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLE1BQVcsRUFBRSxJQUFZLEVBQUUsR0FBRyxLQUFZO0lBQ3JFLElBQUksSUFBSSxFQUFFLENBQUM7UUFDVCxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQy9CLE9BQU87UUFDVCxDQUFDO1FBQ0QsaUJBQWlCLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDeEQsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0aHJvd0Vycm9yQW5kU3RvcCB9IGZyb20gJy4uL3V0aWxzL2xvZyc7XG5pbXBvcnQgeyBxRGV2IH0gZnJvbSAnLi4vdXRpbHMvcWRldic7XG5cbmNvbnN0IEFTU0VSVF9ESVNDTEFJTUVSID0gJ0ludGVybmFsIGFzc2VydCwgdGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFF3aWs6ICc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnREZWZpbmVkPFQ+KFxuICB2YWx1ZTogVCxcbiAgdGV4dDogc3RyaW5nLFxuICAuLi5wYXJ0czogYW55W11cbik6IGFzc2VydHMgdmFsdWUgaXMgTm9uTnVsbGFibGU8VD4ge1xuICBpZiAocURldikge1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93RXJyb3JBbmRTdG9wKEFTU0VSVF9ESVNDTEFJTUVSICsgdGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRFcXVhbChcbiAgdmFsdWUxOiBhbnksXG4gIHZhbHVlMjogYW55LFxuICB0ZXh0OiBzdHJpbmcsXG4gIC4uLnBhcnRzOiBhbnlbXVxuKTogYXNzZXJ0cyB2YWx1ZTEgaXMgdHlwZW9mIHZhbHVlMiB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKHZhbHVlMSA9PT0gdmFsdWUyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93RXJyb3JBbmRTdG9wKEFTU0VSVF9ESVNDTEFJTUVSICsgdGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRGYWlsKHRleHQ6IHN0cmluZywgLi4ucGFydHM6IGFueVtdKTogbmV2ZXI7XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RmFpbCh0ZXh0OiBzdHJpbmcsIC4uLnBhcnRzOiBhbnlbXSkge1xuICBpZiAocURldikge1xuICAgIHRocm93RXJyb3JBbmRTdG9wKEFTU0VSVF9ESVNDTEFJTUVSICsgdGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRUcnVlKHZhbHVlMTogYW55LCB0ZXh0OiBzdHJpbmcsIC4uLnBhcnRzOiBhbnlbXSk6IGFzc2VydHMgdmFsdWUxIGlzIHRydWUge1xuICBpZiAocURldikge1xuICAgIGlmICh2YWx1ZTEgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhyb3dFcnJvckFuZFN0b3AoQVNTRVJUX0RJU0NMQUlNRVIgKyB0ZXh0LCAuLi5wYXJ0cyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEZhbHNlKHZhbHVlMTogYW55LCB0ZXh0OiBzdHJpbmcsIC4uLnBhcnRzOiBhbnlbXSk6IGFzc2VydHMgdmFsdWUxIGlzIHRydWUge1xuICBpZiAocURldikge1xuICAgIGlmICh2YWx1ZTEgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93RXJyb3JBbmRTdG9wKEFTU0VSVF9ESVNDTEFJTUVSICsgdGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnROdW1iZXIodmFsdWUxOiBhbnksIHRleHQ6IHN0cmluZywgLi4ucGFydHM6IGFueVtdKTogYXNzZXJ0cyB2YWx1ZTEgaXMgbnVtYmVyIHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlMSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhyb3dFcnJvckFuZFN0b3AoQVNTRVJUX0RJU0NMQUlNRVIgKyB0ZXh0LCAuLi5wYXJ0cyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFN0cmluZyh2YWx1ZTE6IGFueSwgdGV4dDogc3RyaW5nLCAuLi5wYXJ0czogYW55W10pOiBhc3NlcnRzIHZhbHVlMSBpcyBzdHJpbmcge1xuICBpZiAocURldikge1xuICAgIGlmICh0eXBlb2YgdmFsdWUxID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aHJvd0Vycm9yQW5kU3RvcChBU1NFUlRfRElTQ0xBSU1FUiArIHRleHQsIC4uLnBhcnRzKTtcbiAgfVxufVxuIl19","import { logErrorAndStop } from '../utils/log';\nimport { qDev } from '../utils/qdev';\nexport const codeToText = (code, ...parts) => {\n    if (qDev) {\n        // Keep one error, one line to make it easier to search for the error message.\n        const MAP = [\n            'Error while serializing class or style attributes', // 0\n            'Can not serialize a HTML Node that is not an Element', // 1\n            'Runtime but no instance found on element.', // 2\n            'Only primitive and object literals can be serialized', // 3\n            'Crash while rendering', // 4\n            'You can render over a existing q:container. Skipping render().', // 5\n            'Set property {{0}}', // 6\n            \"Only function's and 'string's are supported.\", // 7\n            \"Only objects can be wrapped in 'QObject'\", // 8\n            `Only objects literals can be wrapped in 'QObject'`, // 9\n            'QRL is not a function', // 10\n            'Dynamic import not found', // 11\n            'Unknown type argument', // 12\n            `Actual value for useContext({{0}}) can not be found, make sure some ancestor component has set a value using useContextProvider(). In the browser make sure that the context was used during SSR so its state was serialized.`, // 13\n            \"Invoking 'use*()' method outside of invocation context.\", // 14\n            'Cant access renderCtx for existing context', // 15\n            'Cant access document for existing context', // 16\n            'props are immutable', // 17\n            '<div> component can only be used at the root of a Qwik component$()', // 18\n            'Props are immutable by default.', // 19\n            `Calling a 'use*()' method outside 'component$(() => { HERE })' is not allowed. 'use*()' methods provide hooks to the 'component$' state and lifecycle, ie 'use' hooks can only be called synchronously within the 'component$' function or another 'use' method.\\nSee https://qwik.dev/docs/components/tasks/#use-method-rules`, // 20\n            'Container is already paused. Skipping', // 21\n            '', // 22 -- unused\n            'When rendering directly on top of Document, the root node must be a <html>', // 23\n            'A <html> node must have 2 children. The first one <head> and the second one a <body>', // 24\n            'Invalid JSXNode type \"{{0}}\". It must be either a function or a string. Found:', // 25\n            'Tracking value changes can only be done to useStore() objects and component props', // 26\n            'Missing Object ID for captured object', // 27\n            'The provided Context reference \"{{0}}\" is not a valid context created by createContextId()', // 28\n            '<html> is the root container, it can not be rendered inside a component', // 29\n            'QRLs can not be resolved because it does not have an attached container. This means that the QRL does not know where it belongs inside the DOM, so it cant dynamically import() from a relative path.', // 30\n            'QRLs can not be dynamically resolved, because it does not have a chunk path', // 31\n            'The JSX ref attribute must be a Signal', // 32\n        ];\n        let text = MAP[code] ?? '';\n        if (parts.length) {\n            text = text.replaceAll(/{{(\\d+)}}/g, (_, index) => {\n                let v = parts[index];\n                if (v && typeof v === 'object' && v.constructor === Object) {\n                    v = JSON.stringify(v).slice(0, 50);\n                }\n                return v;\n            });\n        }\n        return `Code(${code}): ${text}`;\n    }\n    else {\n        // cute little hack to give roughly the correct line number. Update the line number if it shifts.\n        return `Code(${code}) https://github.com/QwikDev/qwik/blob/main/packages/qwik/src/core/error/error.ts#L${8 + code}`;\n    }\n};\nexport const QError_stringifyClassOrStyle = 0;\nexport const QError_cannotSerializeNode = 1;\nexport const QError_runtimeQrlNoElement = 2;\nexport const QError_verifySerializable = 3;\nexport const QError_errorWhileRendering = 4;\nexport const QError_cannotRenderOverExistingContainer = 5;\nexport const QError_setProperty = 6;\nexport const QError_qrlOrError = 7;\nexport const QError_onlyObjectWrapped = 8;\nexport const QError_onlyLiteralWrapped = 9;\nexport const QError_qrlIsNotFunction = 10;\nexport const QError_dynamicImportFailed = 11;\nexport const QError_unknownTypeArgument = 12;\nexport const QError_notFoundContext = 13;\nexport const QError_useMethodOutsideContext = 14;\nexport const QError_missingRenderCtx = 15;\nexport const QError_missingDoc = 16;\nexport const QError_immutableProps = 17;\nexport const QError_hostCanOnlyBeAtRoot = 18;\nexport const QError_immutableJsxProps = 19;\nexport const QError_useInvokeContext = 20;\nexport const QError_containerAlreadyPaused = 21;\nexport const QError_unused_please_reuse = 22;\nexport const QError_rootNodeMustBeHTML = 23;\nexport const QError_strictHTMLChildren = 24;\nexport const QError_invalidJsxNodeType = 25;\nexport const QError_trackUseStore = 26;\nexport const QError_missingObjectId = 27;\nexport const QError_invalidContext = 28;\nexport const QError_canNotRenderHTML = 29;\nexport const QError_qrlMissingContainer = 30;\nexport const QError_qrlMissingChunk = 31;\nexport const QError_invalidRefValue = 32;\nexport const qError = (code, ...parts) => {\n    const text = codeToText(code, ...parts);\n    return logErrorAndStop(text, ...parts);\n};\n//# sourceMappingURL=data:application/json;base64,","import { isServer } from '@builder.io/qwik/build';\nimport { qError, QError_qrlMissingChunk, QError_qrlMissingContainer } from '../error/error';\nimport { getSymbolHash } from '../qrl/qrl-class';\nimport { qDynamicPlatform } from '../utils/qdev';\nexport const createPlatform = () => {\n    return {\n        isServer,\n        importSymbol(containerEl, url, symbolName) {\n            if (isServer) {\n                const hash = getSymbolHash(symbolName);\n                const regSym = globalThis.__qwik_reg_symbols?.get(hash);\n                if (regSym) {\n                    return regSym;\n                }\n            }\n            if (!url) {\n                throw qError(QError_qrlMissingChunk, symbolName);\n            }\n            if (!containerEl) {\n                throw qError(QError_qrlMissingContainer, url, symbolName);\n            }\n            const urlDoc = toUrl(containerEl.ownerDocument, containerEl, url).toString();\n            const urlCopy = new URL(urlDoc);\n            urlCopy.hash = '';\n            const importURL = urlCopy.href;\n            return import(/* @vite-ignore */ importURL).then((mod) => {\n                return mod[symbolName];\n            });\n        },\n        raf: (fn) => {\n            return new Promise((resolve) => {\n                requestAnimationFrame(() => {\n                    resolve(fn());\n                });\n            });\n        },\n        nextTick: (fn) => {\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(fn());\n                });\n            });\n        },\n        chunkForSymbol(symbolName, chunk) {\n            return [symbolName, chunk ?? '_'];\n        },\n    };\n};\n/**\n * Convert relative base URI and relative URL into a fully qualified URL.\n *\n * @param base -`QRL`s are relative, and therefore they need a base for resolution.\n *\n *   - `Element` use `base.ownerDocument.baseURI`\n *   - `Document` use `base.baseURI`\n *   - `string` use `base` as is\n *   - `QConfig` use `base.baseURI`\n *\n * @param url - Relative URL\n * @returns Fully qualified URL.\n */\nexport const toUrl = (doc, containerEl, url) => {\n    const baseURI = doc.baseURI;\n    const base = new URL(containerEl.getAttribute('q:base') ?? baseURI, baseURI);\n    return new URL(url, base);\n};\nlet _platform = /*#__PURE__ */ createPlatform();\n// <docs markdown=\"./readme.md#setPlatform\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ./readme.md#setPlatform instead)\n/**\n * Sets the `CorePlatform`.\n *\n * This is useful to override the platform in tests to change the behavior of,\n * `requestAnimationFrame`, and import resolution.\n *\n * @param doc - The document of the application for which the platform is needed.\n * @param platform - The platform to use.\n * @public\n */\n// </docs>\nexport const setPlatform = (plt) => (_platform = plt);\n// <docs markdown=\"./readme.md#getPlatform\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ./readme.md#getPlatform instead)\n/**\n * Retrieve the `CorePlatform`.\n *\n * The `CorePlatform` is also responsible for retrieving the Manifest, that contains mappings from\n * symbols to javascript import chunks. For this reason, `CorePlatform` can't be global, but is\n * specific to the application currently running. On server it is possible that many different\n * applications are running in a single server instance, and for this reason the `CorePlatform` is\n * associated with the application document.\n *\n * @param docOrNode - The document (or node) of the application for which the platform is needed.\n * @public\n */\n// </docs>\nexport const getPlatform = () => {\n    return _platform;\n};\nexport const isServerPlatform = () => {\n    if (qDynamicPlatform) {\n        return _platform.isServer;\n    }\n    return false;\n};\n//# sourceMappingURL=data:application/json;base64,","export const isNode = (value) => {\n    return value && typeof value.nodeType === 'number';\n};\nexport const isDocument = (value) => {\n    return value.nodeType === 9;\n};\nexport const isElement = (value) => {\n    return value.nodeType === 1;\n};\nexport const isText = (value) => {\n    return value.nodeType === 3;\n};\nexport const isComment = (value) => {\n    return value.nodeType === 8;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9zaGFyZWQvdXRpbHMvZWxlbWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFVLEVBQWlCLEVBQUU7SUFDbEQsT0FBTyxLQUFLLElBQUksT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQztBQUNyRCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUFXLEVBQXFCLEVBQUU7SUFDM0QsT0FBUSxLQUFhLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQztBQUN2QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxLQUFhLEVBQW9CLEVBQUU7SUFDM0QsT0FBUSxLQUFhLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQztBQUN2QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFxQixFQUFpQixFQUFFO0lBQzdELE9BQVEsS0FBYSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDdkMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBcUIsRUFBb0IsRUFBRTtJQUNuRSxPQUFRLEtBQWEsQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDO0FBQ3ZDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBpc05vZGUgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIE5vZGUgPT4ge1xuICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLm5vZGVUeXBlID09PSAnbnVtYmVyJztcbn07XG5cbmV4cG9ydCBjb25zdCBpc0RvY3VtZW50ID0gKHZhbHVlOiBOb2RlKTogdmFsdWUgaXMgRG9jdW1lbnQgPT4ge1xuICByZXR1cm4gKHZhbHVlIGFzIGFueSkubm9kZVR5cGUgPT09IDk7XG59O1xuXG5leHBvcnQgY29uc3QgaXNFbGVtZW50ID0gKHZhbHVlOiBvYmplY3QpOiB2YWx1ZSBpcyBFbGVtZW50ID0+IHtcbiAgcmV0dXJuICh2YWx1ZSBhcyBhbnkpLm5vZGVUeXBlID09PSAxO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzVGV4dCA9ICh2YWx1ZTogTm9kZSB8IEVsZW1lbnQpOiB2YWx1ZSBpcyBUZXh0ID0+IHtcbiAgcmV0dXJuICh2YWx1ZSBhcyBhbnkpLm5vZGVUeXBlID09PSAzO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzQ29tbWVudCA9ICh2YWx1ZTogTm9kZSB8IEVsZW1lbnQpOiB2YWx1ZSBpcyBDb21tZW50ID0+IHtcbiAgcmV0dXJuICh2YWx1ZSBhcyBhbnkpLm5vZGVUeXBlID09PSA4O1xufTtcbiJdfQ==","import { throwErrorAndStop } from './log';\nexport const isPromise = (value) => {\n    // not using \"value instanceof Promise\" to have zone.js support\n    return !!value && typeof value == 'object' && typeof value.then === 'function';\n};\nexport const safeCall = (call, thenFn, rejectFn) => {\n    try {\n        const result = call();\n        if (isPromise(result)) {\n            return result.then(thenFn, rejectFn);\n        }\n        else {\n            return thenFn(result);\n        }\n    }\n    catch (e) {\n        return rejectFn(e);\n    }\n};\nexport const maybeThen = (valueOrPromise, thenFn) => {\n    return isPromise(valueOrPromise)\n        ? valueOrPromise.then(thenFn, shouldNotError)\n        : thenFn(valueOrPromise);\n};\nexport const maybeThenPassError = (valueOrPromise, thenFn) => {\n    return isPromise(valueOrPromise)\n        ? valueOrPromise.then(thenFn)\n        : thenFn(valueOrPromise);\n};\nexport const shouldNotError = (reason) => {\n    throwErrorAndStop('QWIK ERROR:', reason);\n};\nexport const maybeThenMap = (array, thenMapFn, thenFn) => {\n    const length = array.length;\n    const mappedArray = [];\n    let idx = 0;\n    const drain = () => {\n        let result;\n        do {\n            const item = array[idx];\n            result = isPromise(item) ? item.then(thenMapFn) : thenMapFn(item);\n            if (isPromise(result)) {\n                return result.then((value) => {\n                    mappedArray[idx] = value;\n                    return drain();\n                });\n            }\n            else {\n                mappedArray[idx] = result;\n                idx++;\n            }\n        } while (idx < length);\n        return mappedArray;\n    };\n    return maybeThen(drain(), thenFn);\n};\nexport const promiseAll = (promises) => {\n    const hasPromise = promises.some(isPromise);\n    if (hasPromise) {\n        return Promise.all(promises);\n    }\n    return promises;\n};\nexport const promiseAllLazy = (promises) => {\n    if (promises.length > 0) {\n        return Promise.all(promises);\n    }\n    return promises;\n};\nexport const isNotNullable = (v) => {\n    return v != null;\n};\nexport const delay = (timeout) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, timeout);\n    });\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbWlzZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvc2hhcmVkL3V0aWxzL3Byb21pc2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUsxQyxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxLQUFVLEVBQXlCLEVBQUU7SUFDN0QsK0RBQStEO0lBQy9ELE9BQU8sQ0FBQyxDQUFDLEtBQUssSUFBSSxPQUFPLEtBQUssSUFBSSxRQUFRLElBQUksT0FBTyxLQUFLLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQztBQUNqRixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FDdEIsSUFBNkIsRUFDN0IsTUFBc0QsRUFDdEQsUUFBb0QsRUFDN0IsRUFBRTtJQUN6QixJQUFJLENBQUM7UUFDSCxNQUFNLE1BQU0sR0FBRyxJQUFJLEVBQUUsQ0FBQztRQUN0QixJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1lBQ3RCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDOUMsQ0FBQzthQUFNLENBQUM7WUFDTixPQUFPLE1BQU0sQ0FBQyxNQUFhLENBQUMsQ0FBQztRQUMvQixDQUFDO0lBQ0gsQ0FBQztJQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDWCxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyQixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQ3ZCLGNBQWlDLEVBQ2pDLE1BQThDLEVBQzNCLEVBQUU7SUFDckIsT0FBTyxTQUFTLENBQUMsY0FBYyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQWEsRUFBRSxjQUFjLENBQUM7UUFDcEQsQ0FB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O1FBQzdCLFVBQVUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDL0IsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0aHJvd0Vycm9yQW5kU3RvcCB9IGZyb20gJy4vbG9nJztcbmltcG9ydCB0eXBlIHsgVmFsdWVPclByb21pc2UgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IHR5cGUgUHJvbWlzZVRyZWU8VD4gPSBUIHwgUHJvbWlzZTxUPiB8IFByb21pc2U8VFtdPiB8IEFycmF5PFByb21pc2VUcmVlPFQ+PjtcblxuZXhwb3J0IGNvbnN0IGlzUHJvbWlzZSA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgUHJvbWlzZTxhbnk+ID0+IHtcbiAgLy8gbm90IHVzaW5nIFwidmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlXCIgdG8gaGF2ZSB6b25lLmpzIHN1cHBvcnRcbiAgcmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nO1xufTtcblxuZXhwb3J0IGNvbnN0IHNhZmVDYWxsID0gPFQsIEIsIEM+KFxuICBjYWxsOiAoKSA9PiBWYWx1ZU9yUHJvbWlzZTxUPixcbiAgdGhlbkZuOiB7IGYoYXJnOiBBd2FpdGVkPFQ+KTogVmFsdWVPclByb21pc2U8Qj4gfVsnZiddLFxuICByZWplY3RGbjogeyBmKHJlYXNvbjogYW55KTogVmFsdWVPclByb21pc2U8Qz4gfVsnZiddXG4pOiBWYWx1ZU9yUHJvbWlzZTxCIHwgQz4gPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGNhbGwoKTtcbiAgICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQudGhlbih0aGVuRm4gYXMgYW55LCByZWplY3RGbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGVuRm4ocmVzdWx0IGFzIGFueSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHJlamVjdEZuKGUpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgbWF5YmVUaGVuID0gPFQsIEI+KFxuICB2YWx1ZU9yUHJvbWlzZTogVmFsdWVPclByb21pc2U8VD4sXG4gIHRoZW5GbjogKGFyZzogQXdhaXRlZDxUPikgPT4gVmFsdWVPclByb21pc2U8Qj5cbik6IFZhbHVlT3JQcm9taXNlPEI+ID0+IHtcbiAgcmV0dXJuIGlzUHJvbWlzZSh2YWx1ZU9yUHJvbWlzZSlcbiAgICA/IHZhbHVlT3JQcm9taXNlLnRoZW4odGhlbkZuIGFzIGFueSwgc2hvdWxkTm90RXJyb3IpXG4gICAgOiB0aGVuRm4odmFsdWVPclByb21pc2UgYXMgYW55KTtcbn07XG5cbmV4cG9ydCBjb25zdCBtYXliZVRoZW5QYXNzRXJyb3IgPSA8VCwgQj4oXG4gIHZhbHVlT3JQcm9taXNlOiBWYWx1ZU9yUHJvbWlzZTxUPixcbiAgdGhlbkZuOiAoYXJnOiBBd2FpdGVkPFQ+KSA9PiBWYWx1ZU9yUHJvbWlzZTxCPlxuKTogVmFsdWVPclByb21pc2U8Qj4gPT4ge1xuICByZXR1cm4gaXNQcm9taXNlKHZhbHVlT3JQcm9taXNlKVxuICAgID8gdmFsdWVPclByb21pc2UudGhlbih0aGVuRm4gYXMgYW55KVxuICAgIDogdGhlbkZuKHZhbHVlT3JQcm9taXNlIGFzIGFueSk7XG59O1xuXG5leHBvcnQgY29uc3Qgc2hvdWxkTm90RXJyb3IgPSAocmVhc29uOiBhbnkpOiBhbnkgPT4ge1xuICB0aHJvd0Vycm9yQW5kU3RvcCgnUVdJSyBFUlJPUjonLCByZWFzb24pO1xufTtcblxuZXhwb3J0IGNvbnN0IG1heWJlVGhlbk1hcCA9IDxULCBNQVBfUkVULCBSRVQ+KFxuICBhcnJheTogVmFsdWVPclByb21pc2U8VD5bXSxcbiAgdGhlbk1hcEZuOiAoaXRlbTogVCkgPT4gVmFsdWVPclByb21pc2U8TUFQX1JFVD4sXG4gIHRoZW5GbjogKGl0ZW1zOiBNQVBfUkVUW10pID0+IFZhbHVlT3JQcm9taXNlPFJFVD5cbik6IFZhbHVlT3JQcm9taXNlPFJFVD4gPT4ge1xuICBjb25zdCBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIGNvbnN0IG1hcHBlZEFycmF5OiBNQVBfUkVUW10gPSBbXTtcbiAgbGV0IGlkeCA9IDA7XG4gIGNvbnN0IGRyYWluID0gKCk6IFZhbHVlT3JQcm9taXNlPE1BUF9SRVRbXT4gPT4ge1xuICAgIGxldCByZXN1bHQ6IFZhbHVlT3JQcm9taXNlPE1BUF9SRVQ+O1xuICAgIGRvIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBhcnJheVtpZHhdO1xuICAgICAgcmVzdWx0ID0gaXNQcm9taXNlKGl0ZW0pID8gaXRlbS50aGVuKHRoZW5NYXBGbikgOiB0aGVuTWFwRm4oaXRlbSk7XG4gICAgICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgIG1hcHBlZEFycmF5W2lkeF0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gZHJhaW4oKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXBwZWRBcnJheVtpZHhdID0gcmVzdWx0O1xuICAgICAgICBpZHgrKztcbiAgICAgIH1cbiAgICB9IHdoaWxlIChpZHggPCBsZW5ndGgpO1xuICAgIHJldHVybiBtYXBwZWRBcnJheTtcbiAgfTtcbiAgcmV0dXJuIG1heWJlVGhlbihkcmFpbigpLCB0aGVuRm4pO1xufTtcblxuZXhwb3J0IGNvbnN0IHByb21pc2VBbGwgPSA8VCBleHRlbmRzIHJlYWRvbmx5IHVua25vd25bXSB8IFtdPihcbiAgcHJvbWlzZXM6IFRcbik6IFZhbHVlT3JQcm9taXNlPHsgLXJlYWRvbmx5IFtQIGluIGtleW9mIFRdOiBBd2FpdGVkPFRbUF0+IH0+ID0+IHtcbiAgY29uc3QgaGFzUHJvbWlzZSA9IHByb21pc2VzLnNvbWUoaXNQcm9taXNlKTtcbiAgaWYgKGhhc1Byb21pc2UpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICB9XG4gIHJldHVybiBwcm9taXNlcyBhcyBhbnk7XG59O1xuXG5leHBvcnQgY29uc3QgcHJvbWlzZUFsbExhenkgPSA8VCBleHRlbmRzIHJlYWRvbmx5IHVua25vd25bXSB8IFtdPihcbiAgcHJvbWlzZXM6IFRcbik6IFZhbHVlT3JQcm9taXNlPHZvaWQ+ID0+IHtcbiAgaWYgKHByb21pc2VzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpIGFzIGFueTtcbiAgfVxuICByZXR1cm4gcHJvbWlzZXMgYXMgYW55O1xufTtcblxuZXhwb3J0IGNvbnN0IGlzTm90TnVsbGFibGUgPSA8VD4odjogVCk6IHYgaXMgTm9uTnVsbGFibGU8VD4gPT4ge1xuICByZXR1cm4gdiAhPSBudWxsO1xufTtcblxuZXhwb3J0IGNvbnN0IGRlbGF5ID0gKHRpbWVvdXQ6IG51bWJlcikgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVvdXQpO1xuICB9KTtcbn07XG4iXX0=","/** @private */\nexport const isHtmlElement = (node) => {\n    return node ? node.nodeType === 1 : false;\n};\nexport const isSerializableObject = (v) => {\n    const proto = Object.getPrototypeOf(v);\n    return proto === Object.prototype || proto === Array.prototype || proto === null;\n};\nexport const isObject = (v) => {\n    return !!v && typeof v === 'object';\n};\nexport const isArray = (v) => {\n    return Array.isArray(v);\n};\nexport const isString = (v) => {\n    return typeof v === 'string';\n};\nexport const isFunction = (v) => {\n    return typeof v === 'function';\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvc2hhcmVkL3V0aWxzL3R5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGVBQWU7QUFDZixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxJQUFhLEVBQW1CLEVBQUU7SUFDOUQsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFFLElBQWEsQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDdEQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxDQUFVLEVBQWdDLEVBQUU7SUFDL0UsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2QyxPQUFPLEtBQUssS0FBSyxNQUFNLENBQUMsU0FBUyxJQUFJLEtBQUssS0FBSyxLQUFLLENBQUMsU0FBUyxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUM7QUFDbkYsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBVSxFQUFlLEVBQUU7SUFDbEQsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsQ0FBQztBQUN0QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFVLEVBQWtCLEVBQUU7SUFDcEQsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQVUsRUFBZSxFQUFFO0lBQ2xELE9BQU8sT0FBTyxDQUFDLEtBQUssUUFBUSxDQUFDO0FBQy9CLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFrQyxDQUFVLEVBQVUsRUFBRTtJQUNoRixPQUFPLE9BQU8sQ0FBQyxLQUFLLFVBQVUsQ0FBQztBQUNqQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQHByaXZhdGUgKi9cbmV4cG9ydCBjb25zdCBpc0h0bWxFbGVtZW50ID0gKG5vZGU6IHVua25vd24pOiBub2RlIGlzIEVsZW1lbnQgPT4ge1xuICByZXR1cm4gbm9kZSA/IChub2RlIGFzIE5vZGUpLm5vZGVUeXBlID09PSAxIDogZmFsc2U7XG59O1xuXG5leHBvcnQgY29uc3QgaXNTZXJpYWxpemFibGVPYmplY3QgPSAodjogdW5rbm93bik6IHYgaXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4gPT4ge1xuICBjb25zdCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2KTtcbiAgcmV0dXJuIHByb3RvID09PSBPYmplY3QucHJvdG90eXBlIHx8IHByb3RvID09PSBBcnJheS5wcm90b3R5cGUgfHwgcHJvdG8gPT09IG51bGw7XG59O1xuXG5leHBvcnQgY29uc3QgaXNPYmplY3QgPSAodjogdW5rbm93bik6IHYgaXMgb2JqZWN0ID0+IHtcbiAgcmV0dXJuICEhdiAmJiB0eXBlb2YgdiA9PT0gJ29iamVjdCc7XG59O1xuXG5leHBvcnQgY29uc3QgaXNBcnJheSA9ICh2OiB1bmtub3duKTogdiBpcyB1bmtub3duW10gPT4ge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2KTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc1N0cmluZyA9ICh2OiB1bmtub3duKTogdiBpcyBzdHJpbmcgPT4ge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdzdHJpbmcnO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzRnVuY3Rpb24gPSA8VCBleHRlbmRzICguLi5hcmdzOiBhbnkpID0+IGFueT4odjogdW5rbm93bik6IHYgaXMgVCA9PiB7XG4gIHJldHVybiB0eXBlb2YgdiA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbi8qKlxuICogVHlwZSByZXByZXNlbnRpbmcgYSB2YWx1ZSB3aGljaCBpcyBlaXRoZXIgcmVzb2x2ZSBvciBhIHByb21pc2UuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBWYWx1ZU9yUHJvbWlzZTxUPiA9IFQgfCBQcm9taXNlPFQ+O1xuIl19","export const isContainer = (container) => {\n    return container && typeof container === 'object' && typeof container.setHostProp === 'function';\n};\n/**\n * A friendly name tag for a VirtualVNode.\n *\n * Theses are used to give a name to a VirtualVNode. This is useful for debugging and testing.\n *\n * The name is only added in development mode and is not included in production builds.\n */\nexport const DEBUG_TYPE = 'q:type';\nexport var VirtualType;\n(function (VirtualType) {\n    VirtualType[\"Virtual\"] = \"V\";\n    VirtualType[\"Fragment\"] = \"F\";\n    VirtualType[\"WrappedSignal\"] = \"S\";\n    VirtualType[\"Awaited\"] = \"A\";\n    VirtualType[\"Component\"] = \"C\";\n    VirtualType[\"InlineComponent\"] = \"I\";\n    VirtualType[\"Projection\"] = \"P\";\n})(VirtualType || (VirtualType = {}));\nconst START = '\\x1b[34m';\nconst END = '\\x1b[0m';\nexport const VirtualTypeName = {\n    [VirtualType.Virtual]: /* ********* */ START + 'Virtual' + END, //\n    [VirtualType.Fragment]: /* ******** */ START + 'Fragment' + END, //\n    [VirtualType.WrappedSignal]: /* *** */ START + 'Signal' + END, //\n    [VirtualType.Awaited]: /* ********* */ START + 'Awaited' + END, //\n    [VirtualType.Component]: /* ******* */ START + 'Component' + END, //\n    [VirtualType.InlineComponent]: /* * */ START + 'InlineComponent' + END, //\n    [VirtualType.Projection]: /* ****** */ START + 'Projection' + END, //\n};\nexport var QContainerValue;\n(function (QContainerValue) {\n    QContainerValue[\"PAUSED\"] = \"paused\";\n    QContainerValue[\"RESUMED\"] = \"resumed\";\n    // these values below are used in the qwik loader as a plain text for the q:container selector\n    // standard dangerouslySetInnerHTML\n    QContainerValue[\"HTML\"] = \"html\";\n    // textarea\n    QContainerValue[\"TEXT\"] = \"text\";\n})(QContainerValue || (QContainerValue = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvc2hhcmVkL3R5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNFQSxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxTQUFjLEVBQTBCLEVBQUU7SUFDcEUsT0FBTyxTQUFTLElBQUksT0FBTyxTQUFTLEtBQUssUUFBUSxJQUFJLE9BQU8sU0FBUyxDQUFDLFdBQVcsS0FBSyxVQUFVLENBQUM7QUFDbkcsQ0FBQyxDQUFDO0FBRUY7Ozs7OztHQU1HO0FBQ0gsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQztBQUVuQyxNQUFNLENBQU4sSUFBWSxXQVFYO0FBUkQsV0FBWSxXQUFXO0lBQ3JCLDRCQUFhLENBQUE7SUFDYiw2QkFBYyxDQUFBO0lBQ2Qsa0NBQW1CLENBQUE7SUFDbkIsNEJBQWEsQ0FBQTtJQUNiLDhCQUFlLENBQUE7SUFDZixvQ0FBcUIsQ0FBQTtJQUNyQiwrQkFBZ0IsQ0FBQTtBQUNsQixDQUFDLEVBUlcsV0FBVyxLQUFYLFdBQVcsUUFRdEI7QUFFRCxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUM7QUFDekIsTUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDO0FBRXRCLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBMkI7SUFDckQsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUUsZUFBZSxDQUFDLEtBQUssR0FBRyxTQUFTLEdBQUcsR0FBRyxFQUFFLEVBQUU7SUFDbEUsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEVBQUUsY0FBYyxDQUFDLEtBQUssR0FBRyxVQUFVLEdBQUcsR0FBRyxFQUFFLEVBQUU7SUFDbkUsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLEVBQUUsU0FBUyxDQUFDLEtBQUssR0FBRyxRQUFRLEdBQUcsR0FBRyxFQUFFLEVBQUU7SUFDakUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUUsZUFBZSxDQUFDLEtBQUssR0FBRyxTQUFTLEdBQUcsR0FBRyxFQUFFLEVBQUU7SUFDbEUsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEVBQUUsYUFBYSxDQUFDLEtBQUssR0FBRyxXQUFXLEdBQUcsR0FBRyxFQUFFLEVBQUU7SUFDcEUsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLEVBQUUsT0FBTyxDQUFDLEtBQUssR0FBRyxpQkFBaUIsR0FBRyxHQUFHLEVBQUUsRUFBRTtJQUMxRSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsS0FBSyxHQUFHLFlBQVksR0FBRyxHQUFHLEVBQUUsRUFBRTtDQUN0RSxDQUFDO0FBRUYsTUFBTSxDQUFOLElBQWtCLGVBUWpCO0FBUkQsV0FBa0IsZUFBZTtJQUMvQixvQ0FBaUIsQ0FBQTtJQUNqQixzQ0FBbUIsQ0FBQTtJQUNuQiw4RkFBOEY7SUFDOUYsbUNBQW1DO0lBQ25DLGdDQUFhLENBQUE7SUFDYixXQUFXO0lBQ1gsZ0NBQWEsQ0FBQTtBQUNmLENBQUMsRUFSaUIsZUFBZSxLQUFmLGVBQWUsUUFRaEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEpTWE91dHB1dCB9IGZyb20gJy4vanN4L3R5cGVzL2pzeC1ub2RlJztcbmltcG9ydCB0eXBlIHsgQ29udGV4dElkIH0gZnJvbSAnLi4vdXNlL3VzZS1jb250ZXh0JztcbmltcG9ydCB0eXBlIHsgVmFsdWVPclByb21pc2UgfSBmcm9tICcuL3V0aWxzL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgVk5vZGUgfSBmcm9tICcuLi9jbGllbnQvdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBJU3NyTm9kZSwgU3RyZWFtV3JpdGVyLCBTeW1ib2xUb0NodW5rUmVzb2x2ZXIgfSBmcm9tICcuLi9zc3Ivc3NyLXR5cGVzJztcbmltcG9ydCB0eXBlIHsgU2NoZWR1bGVyIH0gZnJvbSAnLi9zY2hlZHVsZXInO1xuaW1wb3J0IHR5cGUgeyBTZXJpYWxpemF0aW9uQ29udGV4dCB9IGZyb20gJy4vc2hhcmVkLXNlcmlhbGl6YXRpb24nO1xuXG5leHBvcnQgaW50ZXJmYWNlIERlc2VyaWFsaXplQ29udGFpbmVyIHtcbiAgJGdldE9iamVjdEJ5SWQkOiAoaWQ6IG51bWJlciB8IHN0cmluZykgPT4gdW5rbm93bjtcbiAgZWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsO1xuICBnZXRTeW5jRm46IChpZDogbnVtYmVyKSA9PiAoLi4uYXJnczogdW5rbm93bltdKSA9PiB1bmtub3duO1xuICAkc3RhdGUkPzogdW5rbm93bltdO1xuICAkc3RvcmVQcm94eU1hcCQ6IE9ialRvUHJveHlNYXA7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29udGFpbmVyIHtcbiAgcmVhZG9ubHkgJHZlcnNpb24kOiBzdHJpbmc7XG4gIHJlYWRvbmx5ICRzY2hlZHVsZXIkOiBTY2hlZHVsZXI7XG4gIHJlYWRvbmx5ICRzdG9yZVByb3h5TWFwJDogT2JqVG9Qcm94eU1hcDtcbiAgLy8vIEN1cnJlbnQgbGFuZ3VhZ2UgbG9jYWxlXG4gIHJlYWRvbmx5ICRsb2NhbGUkOiBzdHJpbmc7XG4gIC8vLyBSZXRyaWV2ZSBPYmplY3QgZnJvbSBwYXVzZWQgc2VyaWFsaXplZCBzdGF0ZS5cbiAgcmVhZG9ubHkgJGdldE9iamVjdEJ5SWQkOiAoaWQ6IG51bWJlciB8IHN0cmluZykgPT4gYW55O1xuICByZWFkb25seSAkc2VydmVyRGF0YSQ6IFJlY29yZDxzdHJpbmcsIGFueT47XG4gICRjdXJyZW50VW5pcXVlSWQkOiBudW1iZXI7XG5cbiAgLy8gVE9ETyhtaXNrbyk6IEkgdGhpbmsgYHByb2Nlc3NKc3hgIGNhbiBiZSBkZWxldGVkLlxuICBwcm9jZXNzSnN4KGhvc3Q6IEhvc3RFbGVtZW50LCBqc3g6IEpTWE91dHB1dCk6IFZhbHVlT3JQcm9taXNlPHZvaWQ+O1xuICBoYW5kbGVFcnJvcihlcnI6IGFueSwgJGhvc3QkOiBIb3N0RWxlbWVudCk6IHZvaWQ7XG4gIGdldFBhcmVudEhvc3QoaG9zdDogSG9zdEVsZW1lbnQpOiBIb3N0RWxlbWVudCB8IG51bGw7XG4gIHNldENvbnRleHQ8VD4oaG9zdDogSG9zdEVsZW1lbnQsIGNvbnRleHQ6IENvbnRleHRJZDxUPiwgdmFsdWU6IFQpOiB2b2lkO1xuICByZXNvbHZlQ29udGV4dDxUPihob3N0OiBIb3N0RWxlbWVudCwgY29udGV4dElkOiBDb250ZXh0SWQ8VD4pOiBUIHwgdW5kZWZpbmVkO1xuICBzZXRIb3N0UHJvcDxUPihob3N0OiBIb3N0RWxlbWVudCwgbmFtZTogc3RyaW5nLCB2YWx1ZTogVCk6IHZvaWQ7XG4gIGdldEhvc3RQcm9wPFQ+KGhvc3Q6IEhvc3RFbGVtZW50LCBuYW1lOiBzdHJpbmcpOiBUIHwgbnVsbDtcbiAgJGFwcGVuZFN0eWxlJChjb250ZW50OiBzdHJpbmcsIHN0eWxlSWQ6IHN0cmluZywgaG9zdDogSG9zdEVsZW1lbnQsIHNjb3BlZDogYm9vbGVhbik6IHZvaWQ7XG4gIC8qKlxuICAgKiBXaGVuIGNvbXBvbmVudCBpcyBhYm91dCB0byBiZSBleGVjdXRlZCwgaXQgbWF5IGFkZC9yZW1vdmUgY2hpbGRyZW4uIFRoaXMgY2FuIGNhdXNlIHByb2JsZW1zXG4gICAqIHdpdGggdGhlIHByb2plY3Rpb24gYmVjYXVzZSBkZWxldGluZyBjb250ZW50IHdpbGwgcHJldmVudCB0aGUgcHJvamVjdGlvbiByZWZlcmVuY2VzIGZyb21cbiAgICogbG9va2luZyB1cCB2bm9kZXMuIFRoZXJlZm9yZSBiZWZvcmUgd2UgZXhlY3V0ZSB0aGUgY29tcG9uZW50IHdlIG5lZWQgdG8gZW5zdXJlIHRoYXQgYWxsIG9mIGl0c1xuICAgKiByZWZlcmVuY2VzIHRvIHZub2RlIGFyZSByZXNvbHZlZC5cbiAgICpcbiAgICogQHBhcmFtIHJlbmRlckhvc3QgLSBIb3N0IGVsZW1lbnQgdG8gZW5zdXJlIHByb2plY3Rpb24gaXMgcmVzb2x2ZWQuXG4gICAqL1xuICBlbnN1cmVQcm9qZWN0aW9uUmVzb2x2ZWQoaG9zdDogSG9zdEVsZW1lbnQpOiB2b2lkO1xuICBzZXJpYWxpemF0aW9uQ3R4RmFjdG9yeShcbiAgICBOb2RlQ29uc3RydWN0b3I6IHtcbiAgICAgIG5ldyAoLi4ucmVzdDogYW55W10pOiB7IG5vZGVUeXBlOiBudW1iZXI7IGlkOiBzdHJpbmcgfTtcbiAgICB9IHwgbnVsbCxcbiAgICBzeW1ib2xUb0NodW5rUmVzb2x2ZXI6IFN5bWJvbFRvQ2h1bmtSZXNvbHZlcixcbiAgICB3cml0ZXI/OiBTdHJlYW1Xcml0ZXJcbiAgKTogU2VyaWFsaXphdGlvbkNvbnRleHQ7XG59XG5cbmV4cG9ydCB0eXBlIEhvc3RFbGVtZW50ID0gVk5vZGUgfCBJU3NyTm9kZTtcblxuZXhwb3J0IGludGVyZmFjZSBRRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgcURpc3BhdGNoRXZlbnQ/OiAoZXZlbnQ6IEV2ZW50LCBzY29wZTogUXdpa0xvYWRlckV2ZW50U2NvcGUpID0+IGJvb2xlYW47XG59XG5cbmV4cG9ydCB0eXBlIHFXaW5kb3cgPSBXaW5kb3cgJiB7XG4gIHF3aWtldmVudHM6IHtcbiAgICBldmVudHM6IFNldDxzdHJpbmc+O1xuICAgIHJvb3RzOiBTZXQ8Tm9kZT47XG4gICAgcHVzaDogKC4uLmU6IChzdHJpbmcgfCAoRXZlbnRUYXJnZXQgJiBQYXJlbnROb2RlKSlbXSkgPT4gdm9pZDtcbiAgfTtcbn07XG5cbmV4cG9ydCB0eXBlIFF3aWtMb2FkZXJFdmVudFNjb3BlID0gJy1kb2N1bWVudCcgfCAnLXdpbmRvdycgfCAnJztcblxuZXhwb3J0IGNvbnN0IGlzQ29udGFpbmVyID0gKGNvbnRhaW5lcjogYW55KTogY29udGFpbmVyIGlzIENvbnRhaW5lciA9PiB7XG4gIHJldHVybiBjb250YWluZXIgJiYgdHlwZW9mIGNvbnRhaW5lciA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGNvbnRhaW5lci5zZXRIb3N0UHJvcCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbi8qKlxuICogQSBmcmllbmRseSBuYW1lIHRhZyBmb3IgYSBWaXJ0dWFsVk5vZGUuXG4gKlxuICogVGhlc2VzIGFyZSB1c2VkIHRvIGdpdmUgYSBuYW1lIHRvIGEgVmlydHVhbFZOb2RlLiBUaGlzIGlzIHVzZWZ1bCBmb3IgZGVidWdnaW5nIGFuZCB0ZXN0aW5nLlxuICpcbiAqIFRoZSBuYW1lIGlzIG9ubHkgYWRkZWQgaW4gZGV2ZWxvcG1lbnQgbW9kZSBhbmQgaXMgbm90IGluY2x1ZGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzLlxuICovXG5leHBvcnQgY29uc3QgREVCVUdfVFlQRSA9ICdxOnR5cGUnO1xuXG5leHBvcnQgZW51bSBWaXJ0dWFsVHlwZSB7XG4gIFZpcnR1YWwgPSAnVicsXG4gIEZyYWdtZW50ID0gJ0YnLFxuICBXcmFwcGVkU2lnbmFsID0gJ1MnLFxuICBBd2FpdGVkID0gJ0EnLFxuICBDb21wb25lbnQgPSAnQycsXG4gIElubGluZUNvbXBvbmVudCA9ICdJJyxcbiAgUHJvamVjdGlvbiA9ICdQJyxcbn1cblxuY29uc3QgU1RBUlQgPSAnXFx4MWJbMzRtJztcbmNvbnN0IEVORCA9ICdcXHgxYlswbSc7XG5cbmV4cG9ydCBjb25zdCBWaXJ0dWFsVHlwZU5hbWU6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gIFtWaXJ0dWFsVHlwZS5WaXJ0dWFsXTogLyogKioqKioqKioqICovIFNUQVJUICsgJ1ZpcnR1YWwnICsgRU5ELCAvL1xuICBbVmlydHVhbFR5cGUuRnJhZ21lbnRdOiAvKiAqKioqKioqKiAqLyBTVEFSVCArICdGcmFnbWVudCcgKyBFTkQsIC8vXG4gIFtWaXJ0dWFsVHlwZS5XcmFwcGVkU2lnbmFsXTogLyogKioqICovIFNUQVJUICsgJ1NpZ25hbCcgKyBFTkQsIC8vXG4gIFtWaXJ0dWFsVHlwZS5Bd2FpdGVkXTogLyogKioqKioqKioqICovIFNUQVJUICsgJ0F3YWl0ZWQnICsgRU5ELCAvL1xuICBbVmlydHVhbFR5cGUuQ29tcG9uZW50XTogLyogKioqKioqKiAqLyBTVEFSVCArICdDb21wb25lbnQnICsgRU5ELCAvL1xuICBbVmlydHVhbFR5cGUuSW5saW5lQ29tcG9uZW50XTogLyogKiAqLyBTVEFSVCArICdJbmxpbmVDb21wb25lbnQnICsgRU5ELCAvL1xuICBbVmlydHVhbFR5cGUuUHJvamVjdGlvbl06IC8qICoqKioqKiAqLyBTVEFSVCArICdQcm9qZWN0aW9uJyArIEVORCwgLy9cbn07XG5cbmV4cG9ydCBjb25zdCBlbnVtIFFDb250YWluZXJWYWx1ZSB7XG4gIFBBVVNFRCA9ICdwYXVzZWQnLFxuICBSRVNVTUVEID0gJ3Jlc3VtZWQnLFxuICAvLyB0aGVzZSB2YWx1ZXMgYmVsb3cgYXJlIHVzZWQgaW4gdGhlIHF3aWsgbG9hZGVyIGFzIGEgcGxhaW4gdGV4dCBmb3IgdGhlIHE6Y29udGFpbmVyIHNlbGVjdG9yXG4gIC8vIHN0YW5kYXJkIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXG4gIEhUTUwgPSAnaHRtbCcsXG4gIC8vIHRleHRhcmVhXG4gIFRFWFQgPSAndGV4dCcsXG59XG5cbmV4cG9ydCB0eXBlIE9ialRvUHJveHlNYXAgPSBXZWFrTWFwPGFueSwgYW55PjtcblxuZXhwb3J0IGludGVyZmFjZSBRQ29udGFpbmVyRWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICBxRnVuY3M/OiBGdW5jdGlvbltdO1xuICBfcXdpa2pzb25fPzogYW55O1xufVxuIl19","import { QContainerValue } from '../types';\n/** State factory of the component. */\nexport const OnRenderProp = 'q:renderFn';\n/** Component style host prefix */\nexport const ComponentStylesPrefixHost = '💎';\n/** Component style content prefix */\nexport const ComponentStylesPrefixContent = '⭐️';\n/** Prefix used to identify on listeners. */\nexport const EventPrefix = 'on:';\n/** Attribute used to mark that an event listener is attached. */\nexport const EventAny = 'on:.';\n/** `<some-element q:slot=\"...\">` */\nexport const QSlot = 'q:slot';\nexport const QSlotParent = ':';\nexport const QSlotRef = 'q:sref';\nexport const QSlotS = 'q:s';\nexport const QStyle = 'q:style';\nexport const QStyleSelector = 'style[q\\\\:style]';\nexport const QStyleSSelector = 'style[q\\\\:sstyle]';\nexport const QStylesAllSelector = QStyleSelector + ',' + QStyleSSelector;\nexport const QScopedStyle = 'q:sstyle';\nexport const QCtxAttr = 'q:ctx';\nexport const QSubscribers = 'q:subs';\nexport const QManifestHash = 'q:manifest-hash';\nexport const QFuncsPrefix = 'qFuncs_';\nexport const getQFuncs = (document, hash) => {\n    return document[QFuncsPrefix + hash] || [];\n};\nexport const QRenderAttr = 'q:render';\nexport const QRuntimeAttr = 'q:runtime';\nexport const QVersionAttr = 'q:version';\nexport const QBaseAttr = 'q:base';\nexport const QLocaleAttr = 'q:locale';\nexport const QManifestHashAttr = 'q:manifest-hash';\nexport const QInstanceAttr = 'q:instance';\nexport const QContainerIsland = 'q:container-island';\nexport const QContainerIslandEnd = '/' + QContainerIsland;\nexport const QIgnore = 'q:ignore';\nexport const QIgnoreEnd = '/' + QIgnore;\nexport const QContainerAttr = 'q:container';\nexport const QContainerAttrEnd = '/' + QContainerAttr;\nexport const QShadowRoot = 'q:shadowroot';\nexport const QTemplate = 'q:template';\n// the same selector should be inside the qwik loader\n// and the same selector should be inside the qwik city spa-shim and spa-init\nexport const QContainerSelector = '[q\\\\:container]:not([q\\\\:container=' +\n    QContainerValue.HTML +\n    ']):not([q\\\\:container=' +\n    QContainerValue.TEXT +\n    '])';\nexport const HTML_NS = 'http://www.w3.org/1999/xhtml';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\nexport const MATH_NS = 'http://www.w3.org/1998/Math/MathML';\nexport const ResourceEvent = 'qResource';\nexport const ComputedEvent = 'qComputed';\nexport const RenderEvent = 'qRender';\nexport const TaskEvent = 'qTask';\n/** `<q:slot name=\"...\">` */\nexport const QSlotInertName = '\\u0000';\nexport const QDefaultSlot = '';\n/**\n * Attribute to mark that this VNode has a pointer to itself from the `qwik/json` state.\n *\n * As the VNode get materialized the vnode now becomes eligible for mutation. Once the vnode mutates\n * the `VNode` references from the `qwik/json` may become invalid. For this reason, these references\n * need to be eagerly resolved. `VNODE_REF` stores a pointer to \"this\" vnode. This allows the system\n * to eagerly resolve these pointes as the vnodes are materialized.\n */\nexport const ELEMENT_ID = 'q:id';\nexport const ELEMENT_KEY = 'q:key';\nexport const ELEMENT_PROPS = 'q:props';\nexport const ELEMENT_SEQ = 'q:seq';\nexport const ELEMENT_SEQ_IDX = 'q:seqIdx';\nexport const ELEMENT_SELF_ID = -1;\nexport const ELEMENT_ID_SELECTOR = '[q\\\\:id]';\nexport const ELEMENT_ID_PREFIX = '#';\nexport const INLINE_FN_PREFIX = '@';\n/** Non serializable markers - always begins with `:` character */\nexport const NON_SERIALIZABLE_MARKER_PREFIX = ':';\nexport const USE_ON_LOCAL = NON_SERIALIZABLE_MARKER_PREFIX + 'on';\nexport const USE_ON_LOCAL_SEQ_IDX = NON_SERIALIZABLE_MARKER_PREFIX + 'onIdx';\nexport const USE_ON_LOCAL_FLAGS = NON_SERIALIZABLE_MARKER_PREFIX + 'onFlags';\n// comment nodes\nexport const FLUSH_COMMENT = 'qkssr-f';\nexport const STREAM_BLOCK_START_COMMENT = 'qkssr-pu';\nexport const STREAM_BLOCK_END_COMMENT = 'qkssr-po';\nexport const Q_PROPS_SEPARATOR = ':';\nexport const dangerouslySetInnerHTML = 'dangerouslySetInnerHTML';\n//# sourceMappingURL=data:application/json;base64,","import { tryGetInvokeContext } from './use-core';\nlet _locale = undefined;\n/**\n * Retrieve the current locale.\n *\n * If no current locale and there is no `defaultLocale` the function throws an error.\n *\n * @returns The locale.\n * @internal\n */\nexport function getLocale(defaultLocale) {\n    if (_locale === undefined) {\n        const ctx = tryGetInvokeContext();\n        if (ctx && ctx.$locale$) {\n            return ctx.$locale$;\n        }\n        if (defaultLocale !== undefined) {\n            return defaultLocale;\n        }\n        throw new Error('Reading `locale` outside of context.');\n    }\n    return _locale;\n}\n/**\n * Override the `getLocale` with `lang` within the `fn` execution.\n *\n * @internal\n */\nexport function withLocale(locale, fn) {\n    const previousLang = _locale;\n    try {\n        _locale = locale;\n        return fn();\n    }\n    finally {\n        _locale = previousLang;\n    }\n}\n/**\n * Globally set a lang.\n *\n * This can be used only in browser. Server execution requires that each request could potentially\n * be a different lang, therefore setting a global lang would produce incorrect responses.\n *\n * @param lang\n */\nexport function setLocale(locale) {\n    _locale = locale;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWxvY2FsZS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLWxvY2FsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFakQsSUFBSSxPQUFPLEdBQXVCLFNBQVMsQ0FBQztBQUU1Qzs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFVLFNBQVMsQ0FBQyxhQUFzQjtJQUM5QyxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUUsQ0FBQztRQUMxQixNQUFNLEdBQUcsR0FBRyxtQkFBbUIsRUFBRSxDQUFDO1FBQ2xDLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN4QixPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUM7UUFDdEIsQ0FBQztRQUNELElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQ2hDLE9BQU8sYUFBYSxDQUFDO1FBQ3ZCLENBQUM7UUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUNELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FBSSxNQUFjLEVBQUUsRUFBVztJQUN2RCxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUM7SUFDN0IsSUFBSSxDQUFDO1FBQ0gsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUNqQixPQUFPLEVBQUUsRUFBRSxDQUFDO0lBQ2QsQ0FBQztZQUFTLENBQUM7UUFDVCxPQUFPLEdBQUcsWUFBWSxDQUFDO0lBQ3pCLENBQUM7QUFDSCxDQUFDO0FBRUQ7Ozs7Ozs7R0FPRztBQUNILE1BQU0sVUFBVSxTQUFTLENBQUMsTUFBYztJQUN0QyxPQUFPLEdBQUcsTUFBTSxDQUFDO0FBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0cnlHZXRJbnZva2VDb250ZXh0IH0gZnJvbSAnLi91c2UtY29yZSc7XG5cbmxldCBfbG9jYWxlOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGN1cnJlbnQgbG9jYWxlLlxuICpcbiAqIElmIG5vIGN1cnJlbnQgbG9jYWxlIGFuZCB0aGVyZSBpcyBubyBgZGVmYXVsdExvY2FsZWAgdGhlIGZ1bmN0aW9uIHRocm93cyBhbiBlcnJvci5cbiAqXG4gKiBAcmV0dXJucyBUaGUgbG9jYWxlLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhbGUoZGVmYXVsdExvY2FsZT86IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmIChfbG9jYWxlID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBjdHggPSB0cnlHZXRJbnZva2VDb250ZXh0KCk7XG4gICAgaWYgKGN0eCAmJiBjdHguJGxvY2FsZSQpIHtcbiAgICAgIHJldHVybiBjdHguJGxvY2FsZSQ7XG4gICAgfVxuICAgIGlmIChkZWZhdWx0TG9jYWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0TG9jYWxlO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlYWRpbmcgYGxvY2FsZWAgb3V0c2lkZSBvZiBjb250ZXh0LicpO1xuICB9XG4gIHJldHVybiBfbG9jYWxlO1xufVxuXG4vKipcbiAqIE92ZXJyaWRlIHRoZSBgZ2V0TG9jYWxlYCB3aXRoIGBsYW5nYCB3aXRoaW4gdGhlIGBmbmAgZXhlY3V0aW9uLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aExvY2FsZTxUPihsb2NhbGU6IHN0cmluZywgZm46ICgpID0+IFQpOiBUIHtcbiAgY29uc3QgcHJldmlvdXNMYW5nID0gX2xvY2FsZTtcbiAgdHJ5IHtcbiAgICBfbG9jYWxlID0gbG9jYWxlO1xuICAgIHJldHVybiBmbigpO1xuICB9IGZpbmFsbHkge1xuICAgIF9sb2NhbGUgPSBwcmV2aW91c0xhbmc7XG4gIH1cbn1cblxuLyoqXG4gKiBHbG9iYWxseSBzZXQgYSBsYW5nLlxuICpcbiAqIFRoaXMgY2FuIGJlIHVzZWQgb25seSBpbiBicm93c2VyLiBTZXJ2ZXIgZXhlY3V0aW9uIHJlcXVpcmVzIHRoYXQgZWFjaCByZXF1ZXN0IGNvdWxkIHBvdGVudGlhbGx5XG4gKiBiZSBhIGRpZmZlcmVudCBsYW5nLCB0aGVyZWZvcmUgc2V0dGluZyBhIGdsb2JhbCBsYW5nIHdvdWxkIHByb2R1Y2UgaW5jb3JyZWN0IHJlc3BvbnNlcy5cbiAqXG4gKiBAcGFyYW0gbGFuZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0TG9jYWxlKGxvY2FsZTogc3RyaW5nKTogdm9pZCB7XG4gIF9sb2NhbGUgPSBsb2NhbGU7XG59XG4iXX0=","import { getBuildBase } from './utils';\nexport function getPrefetchResources(qrls, opts, resolvedManifest) {\n    if (!resolvedManifest) {\n        return [];\n    }\n    const prefetchStrategy = opts.prefetchStrategy;\n    const buildBase = getBuildBase(opts);\n    if (prefetchStrategy !== null) {\n        // do nothing if opts.prefetchStrategy is explicitly set to null\n        if (!prefetchStrategy ||\n            !prefetchStrategy.symbolsToPrefetch ||\n            prefetchStrategy.symbolsToPrefetch === 'auto') {\n            // DEFAULT 'events-document'\n            // if prefetchStrategy is undefined\n            // or prefetchStrategy.symbolsToPrefetch is undefined\n            // get event QRLs used in this document\n            return getAutoPrefetch(qrls, resolvedManifest, buildBase);\n        }\n        if (typeof prefetchStrategy.symbolsToPrefetch === 'function') {\n            // call user option symbolsToPrefetch()\n            try {\n                return prefetchStrategy.symbolsToPrefetch({ manifest: resolvedManifest.manifest });\n            }\n            catch (e) {\n                console.error('getPrefetchUrls, symbolsToPrefetch()', e);\n            }\n        }\n    }\n    // no urls to prefetch\n    return [];\n}\nfunction getAutoPrefetch(qrls, resolvedManifest, buildBase) {\n    const prefetchResources = [];\n    const { mapper, manifest } = resolvedManifest;\n    const urls = new Map();\n    if (mapper && manifest) {\n        for (const qrl of qrls) {\n            const qrlSymbolName = qrl.getHash();\n            const resolvedSymbol = mapper[qrlSymbolName];\n            if (resolvedSymbol) {\n                const bundleFileName = resolvedSymbol[1];\n                addBundle(manifest, urls, prefetchResources, buildBase, bundleFileName);\n            }\n        }\n    }\n    return prefetchResources;\n}\nfunction addBundle(manifest, urls, prefetchResources, buildBase, bundleFileName) {\n    const url = buildBase + bundleFileName;\n    let prefetchResource = urls.get(url);\n    if (!prefetchResource) {\n        prefetchResource = {\n            url,\n            imports: [],\n        };\n        urls.set(url, prefetchResource);\n        const bundle = manifest.bundles[bundleFileName];\n        if (bundle) {\n            if (Array.isArray(bundle.imports)) {\n                for (const importedFilename of bundle.imports) {\n                    addBundle(manifest, urls, prefetchResource.imports, buildBase, importedFilename);\n                }\n            }\n        }\n    }\n    prefetchResources.push(prefetchResource);\n}\nexport const isQrl = (value) => {\n    return typeof value === 'function' && typeof value.getSymbol === 'function';\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlZmV0Y2gtc3RyYXRlZ3kuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL3NlcnZlci9wcmVmZXRjaC1zdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBT3ZDLE1BQU0sVUFBVSxvQkFBb0IsQ0FDbEMsSUFBVyxFQUNYLElBQTJCLEVBQzNCLGdCQUE4QztJQUU5QyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN0QixPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFDRCxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUMvQyxNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFckMsSUFBSSxnQkFBZ0IsS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUM5QixnRUFBZ0U7UUFFaEUsSUFDRSxDQUFDLGdCQUFnQjtZQUNqQixDQUFDLGdCQUFnQixDQUFDLGlCQUFpQjtZQUNuQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsS0FBSyxNQUFNLEVBQzdDLENBQUM7WUFDRCw0QkFBNEI7WUFDNUIsbUNBQW1DO1lBQ25DLHFEQUFxRDtZQUNyRCx1Q0FBdUM7WUFDdkMsT0FBTyxlQUFlLENBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzVELENBQUM7UUFFRCxJQUFJLE9BQU8sZ0JBQWdCLENBQUMsaUJBQWlCLEtBQUssVUFBVSxFQUFFLENBQUM7WUFDN0QsdUNBQXVDO1lBQ3ZDLElBQUksQ0FBQztnQkFDSCxPQUFPLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7WUFDckYsQ0FBQztZQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7Z0JBQ1gsT0FBTyxDQUFDLEtBQUssQ0FBQyxzQ0FBc0MsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMzRCxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFDRCxzQkFBc0I7SUFDdEIsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDO0FBRUQsU0FBUyxlQUFlLENBQUMsSUFBVyxFQUFFLGdCQUFrQyxFQUFFLFNBQWlCO0lBQ3pGLE1BQU0saUJBQWlCLEdBQXVCLEVBQUUsQ0FBQztJQUNqRCxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLGdCQUFnQixDQUFDO0lBQzlDLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxFQUE0QixDQUFDO0lBRWpELElBQUksTUFBTSxJQUFJLFFBQVEsRUFBRSxDQUFDO1FBQ3ZCLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7WUFDdkIsTUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3BDLE1BQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM3QyxJQUFJLGNBQWMsRUFBRSxDQUFDO2dCQUNuQixNQUFNLGNBQWMsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxjQUFjLENBQUMsQ0FBQztZQUMxRSxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFDRCxPQUFPLGlCQUFpQixDQUFDO0FBQzNCLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FDaEIsUUFBc0IsRUFDdEIsSUFBbUMsRUFDbkMsaUJBQXFDLEVBQ3JDLFNBQWlCLEVBQ2pCLGNBQXNCO0lBRXRCLE1BQU0sR0FBRyxHQUFHLFNBQVMsR0FBRyxjQUFjLENBQUM7SUFDdkMsSUFBSSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3JDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3RCLGdCQUFnQixHQUFHO1lBQ2pCLEdBQUc7WUFDSCxPQUFPLEVBQUUsRUFBRTtTQUNaLENBQUM7UUFDRixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBRWhDLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDaEQsSUFBSSxNQUFNLEVBQUUsQ0FBQztZQUNYLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztnQkFDbEMsS0FBSyxNQUFNLGdCQUFnQixJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztvQkFDOUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUNuRixDQUFDO1lBQ0gsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBQ0QsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDM0MsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQVUsRUFBd0IsRUFBRTtJQUN4RCxPQUFPLE9BQU8sS0FBSyxLQUFLLFVBQVUsSUFBSSxPQUFPLEtBQUssQ0FBQyxTQUFTLEtBQUssVUFBVSxDQUFDO0FBQzlFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEJ1aWxkQmFzZSB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHR5cGUgeyBQcmVmZXRjaFJlc291cmNlLCBRd2lrTWFuaWZlc3QsIFJlbmRlclRvU3RyaW5nT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuXG5pbXBvcnQgdHlwZSB7IFFSTEludGVybmFsIH0gZnJvbSAnLi9xd2lrLXR5cGVzJztcbmltcG9ydCB0eXBlIHsgUmVzb2x2ZWRNYW5pZmVzdCB9IGZyb20gJ0BidWlsZGVyLmlvL3F3aWsvb3B0aW1pemVyJztcbmltcG9ydCB0eXBlIHsgUVJMIH0gZnJvbSAnQGJ1aWxkZXIuaW8vcXdpayc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQcmVmZXRjaFJlc291cmNlcyhcbiAgcXJsczogUVJMW10sXG4gIG9wdHM6IFJlbmRlclRvU3RyaW5nT3B0aW9ucyxcbiAgcmVzb2x2ZWRNYW5pZmVzdDogUmVzb2x2ZWRNYW5pZmVzdCB8IHVuZGVmaW5lZFxuKTogUHJlZmV0Y2hSZXNvdXJjZVtdIHtcbiAgaWYgKCFyZXNvbHZlZE1hbmlmZXN0KSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGNvbnN0IHByZWZldGNoU3RyYXRlZ3kgPSBvcHRzLnByZWZldGNoU3RyYXRlZ3k7XG4gIGNvbnN0IGJ1aWxkQmFzZSA9IGdldEJ1aWxkQmFzZShvcHRzKTtcblxuICBpZiAocHJlZmV0Y2hTdHJhdGVneSAhPT0gbnVsbCkge1xuICAgIC8vIGRvIG5vdGhpbmcgaWYgb3B0cy5wcmVmZXRjaFN0cmF0ZWd5IGlzIGV4cGxpY2l0bHkgc2V0IHRvIG51bGxcblxuICAgIGlmIChcbiAgICAgICFwcmVmZXRjaFN0cmF0ZWd5IHx8XG4gICAgICAhcHJlZmV0Y2hTdHJhdGVneS5zeW1ib2xzVG9QcmVmZXRjaCB8fFxuICAgICAgcHJlZmV0Y2hTdHJhdGVneS5zeW1ib2xzVG9QcmVmZXRjaCA9PT0gJ2F1dG8nXG4gICAgKSB7XG4gICAgICAvLyBERUZBVUxUICdldmVudHMtZG9jdW1lbnQnXG4gICAgICAvLyBpZiBwcmVmZXRjaFN0cmF0ZWd5IGlzIHVuZGVmaW5lZFxuICAgICAgLy8gb3IgcHJlZmV0Y2hTdHJhdGVneS5zeW1ib2xzVG9QcmVmZXRjaCBpcyB1bmRlZmluZWRcbiAgICAgIC8vIGdldCBldmVudCBRUkxzIHVzZWQgaW4gdGhpcyBkb2N1bWVudFxuICAgICAgcmV0dXJuIGdldEF1dG9QcmVmZXRjaChxcmxzLCByZXNvbHZlZE1hbmlmZXN0LCBidWlsZEJhc2UpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcHJlZmV0Y2hTdHJhdGVneS5zeW1ib2xzVG9QcmVmZXRjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gY2FsbCB1c2VyIG9wdGlvbiBzeW1ib2xzVG9QcmVmZXRjaCgpXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gcHJlZmV0Y2hTdHJhdGVneS5zeW1ib2xzVG9QcmVmZXRjaCh7IG1hbmlmZXN0OiByZXNvbHZlZE1hbmlmZXN0Lm1hbmlmZXN0IH0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdnZXRQcmVmZXRjaFVybHMsIHN5bWJvbHNUb1ByZWZldGNoKCknLCBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gbm8gdXJscyB0byBwcmVmZXRjaFxuICByZXR1cm4gW107XG59XG5cbmZ1bmN0aW9uIGdldEF1dG9QcmVmZXRjaChxcmxzOiBRUkxbXSwgcmVzb2x2ZWRNYW5pZmVzdDogUmVzb2x2ZWRNYW5pZmVzdCwgYnVpbGRCYXNlOiBzdHJpbmcpIHtcbiAgY29uc3QgcHJlZmV0Y2hSZXNvdXJjZXM6IFByZWZldGNoUmVzb3VyY2VbXSA9IFtdO1xuICBjb25zdCB7IG1hcHBlciwgbWFuaWZlc3QgfSA9IHJlc29sdmVkTWFuaWZlc3Q7XG4gIGNvbnN0IHVybHMgPSBuZXcgTWFwPHN0cmluZywgUHJlZmV0Y2hSZXNvdXJjZT4oKTtcblxuICBpZiAobWFwcGVyICYmIG1hbmlmZXN0KSB7XG4gICAgZm9yIChjb25zdCBxcmwgb2YgcXJscykge1xuICAgICAgY29uc3QgcXJsU3ltYm9sTmFtZSA9IHFybC5nZXRIYXNoKCk7XG4gICAgICBjb25zdCByZXNvbHZlZFN5bWJvbCA9IG1hcHBlcltxcmxTeW1ib2xOYW1lXTtcbiAgICAgIGlmIChyZXNvbHZlZFN5bWJvbCkge1xuICAgICAgICBjb25zdCBidW5kbGVGaWxlTmFtZSA9IHJlc29sdmVkU3ltYm9sWzFdO1xuICAgICAgICBhZGRCdW5kbGUobWFuaWZlc3QsIHVybHMsIHByZWZldGNoUmVzb3VyY2VzLCBidWlsZEJhc2UsIGJ1bmRsZUZpbGVOYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHByZWZldGNoUmVzb3VyY2VzO1xufVxuXG5mdW5jdGlvbiBhZGRCdW5kbGUoXG4gIG1hbmlmZXN0OiBRd2lrTWFuaWZlc3QsXG4gIHVybHM6IE1hcDxzdHJpbmcsIFByZWZldGNoUmVzb3VyY2U+LFxuICBwcmVmZXRjaFJlc291cmNlczogUHJlZmV0Y2hSZXNvdXJjZVtdLFxuICBidWlsZEJhc2U6IHN0cmluZyxcbiAgYnVuZGxlRmlsZU5hbWU6IHN0cmluZ1xuKSB7XG4gIGNvbnN0IHVybCA9IGJ1aWxkQmFzZSArIGJ1bmRsZUZpbGVOYW1lO1xuICBsZXQgcHJlZmV0Y2hSZXNvdXJjZSA9IHVybHMuZ2V0KHVybCk7XG4gIGlmICghcHJlZmV0Y2hSZXNvdXJjZSkge1xuICAgIHByZWZldGNoUmVzb3VyY2UgPSB7XG4gICAgICB1cmwsXG4gICAgICBpbXBvcnRzOiBbXSxcbiAgICB9O1xuICAgIHVybHMuc2V0KHVybCwgcHJlZmV0Y2hSZXNvdXJjZSk7XG5cbiAgICBjb25zdCBidW5kbGUgPSBtYW5pZmVzdC5idW5kbGVzW2J1bmRsZUZpbGVOYW1lXTtcbiAgICBpZiAoYnVuZGxlKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShidW5kbGUuaW1wb3J0cykpIHtcbiAgICAgICAgZm9yIChjb25zdCBpbXBvcnRlZEZpbGVuYW1lIG9mIGJ1bmRsZS5pbXBvcnRzKSB7XG4gICAgICAgICAgYWRkQnVuZGxlKG1hbmlmZXN0LCB1cmxzLCBwcmVmZXRjaFJlc291cmNlLmltcG9ydHMsIGJ1aWxkQmFzZSwgaW1wb3J0ZWRGaWxlbmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcHJlZmV0Y2hSZXNvdXJjZXMucHVzaChwcmVmZXRjaFJlc291cmNlKTtcbn1cblxuZXhwb3J0IGNvbnN0IGlzUXJsID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBRUkxJbnRlcm5hbCA9PiB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlLmdldFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iXX0=","/** @internal */\nexport const EMPTY_ARRAY = [];\nexport const EMPTY_OBJ = {};\nObject.freeze(EMPTY_ARRAY);\nObject.freeze(EMPTY_OBJ);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmx5d2VpZ2h0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3NoYXJlZC91dGlscy9mbHl3ZWlnaHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCO0FBQ2hCLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxFQUFXLENBQUM7QUFDdkMsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLEVBQXlCLENBQUM7QUFFbkQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMzQixNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IEVNUFRZX0FSUkFZID0gW10gYXMgYW55W107XG5leHBvcnQgY29uc3QgRU1QVFlfT0JKID0ge30gYXMgUmVjb3JkPHN0cmluZywgYW55PjtcblxuT2JqZWN0LmZyZWV6ZShFTVBUWV9BUlJBWSk7XG5PYmplY3QuZnJlZXplKEVNUFRZX09CSik7XG4iXX0=","import { QError_dynamicImportFailed, QError_unknownTypeArgument, qError } from '../error/error';\nimport { EMPTY_ARRAY } from '../utils/flyweight';\nimport { qSerialize } from '../utils/qdev';\nimport { isFunction, isString } from '../utils/types';\nimport { createQRL, emitEvent, getSymbolHash } from './qrl-class';\n// https://regexr.com/68v72\nconst EXTRACT_IMPORT_PATH = /\\(\\s*(['\"])([^\\1]+)\\1\\s*\\)/;\n// https://regexr.com/690ds\nconst EXTRACT_SELF_IMPORT = /Promise\\s*\\.\\s*resolve/;\n// https://regexr.com/6a83h\nconst EXTRACT_FILE_NAME = /[\\\\/(]([\\w\\d.\\-_]+\\.(js|ts)x?):/;\nconst announcedQRL = /*#__PURE__*/ new Set();\n// <docs markdown=\"../readme.md#qrl\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#qrl instead)\n/**\n * Used by Qwik Optimizer to point to lazy-loaded resources.\n *\n * This function should be used by the Qwik Optimizer only. The function should not be directly\n * referred to in the source code of the application.\n *\n * @param chunkOrFn - Chunk name (or function which is stringified to extract chunk name)\n * @param symbol - Symbol to lazy load\n * @param lexicalScopeCapture - A set of lexically scoped variables to capture.\n * @public\n * @see `QRL`, `$(...)`\n */\n// </docs>\nexport const qrl = (chunkOrFn, symbol, lexicalScopeCapture = EMPTY_ARRAY, stackOffset = 0) => {\n    let chunk = null;\n    let symbolFn = null;\n    if (isFunction(chunkOrFn)) {\n        symbolFn = chunkOrFn;\n        if (qSerialize) {\n            let match;\n            const srcCode = String(chunkOrFn);\n            if ((match = srcCode.match(EXTRACT_IMPORT_PATH)) && match[2]) {\n                chunk = match[2];\n            }\n            else if ((match = srcCode.match(EXTRACT_SELF_IMPORT))) {\n                const ref = 'QWIK-SELF';\n                const frames = new Error(ref).stack.split('\\n');\n                const start = frames.findIndex((f) => f.includes(ref));\n                const frame = frames[start + 2 + stackOffset];\n                match = frame.match(EXTRACT_FILE_NAME);\n                if (!match) {\n                    chunk = 'main';\n                }\n                else {\n                    chunk = match[1];\n                }\n            }\n            else {\n                throw qError(QError_dynamicImportFailed, srcCode);\n            }\n        }\n    }\n    else if (isString(chunkOrFn)) {\n        chunk = chunkOrFn;\n    }\n    else {\n        throw qError(QError_unknownTypeArgument, chunkOrFn);\n    }\n    if (!announcedQRL.has(symbol)) {\n        // Emit event\n        announcedQRL.add(symbol);\n        emitEvent('qprefetch', {\n            symbols: [getSymbolHash(symbol)],\n            bundles: chunk && [chunk],\n        });\n    }\n    // Unwrap subscribers\n    return createQRL(chunk, symbol, null, symbolFn, null, lexicalScopeCapture, null);\n};\n/** @internal */\nexport const inlinedQrl = (symbol, symbolName, lexicalScopeCapture = EMPTY_ARRAY) => {\n    // Unwrap subscribers\n    return createQRL(null, symbolName, symbol, null, null, lexicalScopeCapture, null);\n};\n/** @internal */\nexport const _noopQrl = (symbolName, lexicalScopeCapture = EMPTY_ARRAY) => {\n    return createQRL(null, symbolName, null, null, null, lexicalScopeCapture, null);\n};\n/** @internal */\nexport const _noopQrlDEV = (symbolName, opts, lexicalScopeCapture = EMPTY_ARRAY) => {\n    const newQrl = _noopQrl(symbolName, lexicalScopeCapture);\n    newQrl.dev = opts;\n    return newQrl;\n};\n/** @internal */\nexport const qrlDEV = (chunkOrFn, symbol, opts, lexicalScopeCapture = EMPTY_ARRAY) => {\n    const newQrl = qrl(chunkOrFn, symbol, lexicalScopeCapture, 1);\n    newQrl.dev = opts;\n    return newQrl;\n};\n/** @internal */\nexport const inlinedQrlDEV = (symbol, symbolName, opts, lexicalScopeCapture = EMPTY_ARRAY) => {\n    const qrl = inlinedQrl(symbol, symbolName, lexicalScopeCapture);\n    qrl.dev = opts;\n    return qrl;\n};\n/** @internal */\nexport const _regSymbol = (symbol, hash) => {\n    if (typeof globalThis.__qwik_reg_symbols === 'undefined') {\n        globalThis.__qwik_reg_symbols = new Map();\n    }\n    globalThis.__qwik_reg_symbols.set(hash, symbol);\n    return symbol;\n};\n//# sourceMappingURL=data:application/json;base64,","import { QSlotS } from '../utils/markers';\nimport { Virtual, _jsxSorted } from './jsx-runtime';\n/**\n * Allows to project the children of the current component. <Slot/> can only be used within the\n * context of a component defined with `component$`.\n *\n * @public\n */\nexport const Slot = (props) => {\n    return _jsxSorted(Virtual, null, { [QSlotS]: '' }, props.children, 0, props.name ?? '');\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xvdC5wdWJsaWMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvc2hhcmVkL2pzeC9zbG90LnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDMUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJcEQ7Ozs7O0dBS0c7QUFDSCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBR1osQ0FBQyxLQUFLLEVBQUUsRUFBRTtJQUNiLE9BQU8sVUFBVSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7QUFDMUYsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUVNsb3RTIH0gZnJvbSAnLi4vdXRpbHMvbWFya2Vycyc7XG5pbXBvcnQgeyBWaXJ0dWFsLCBfanN4U29ydGVkIH0gZnJvbSAnLi9qc3gtcnVudGltZSc7XG5pbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi90eXBlcy9qc3gtbm9kZSc7XG5pbXBvcnQgdHlwZSB7IEpTWENoaWxkcmVuIH0gZnJvbSAnLi90eXBlcy9qc3gtcXdpay1hdHRyaWJ1dGVzJztcblxuLyoqXG4gKiBBbGxvd3MgdG8gcHJvamVjdCB0aGUgY2hpbGRyZW4gb2YgdGhlIGN1cnJlbnQgY29tcG9uZW50LiA8U2xvdC8+IGNhbiBvbmx5IGJlIHVzZWQgd2l0aGluIHRoZVxuICogY29udGV4dCBvZiBhIGNvbXBvbmVudCBkZWZpbmVkIHdpdGggYGNvbXBvbmVudCRgLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IFNsb3Q6IEZ1bmN0aW9uQ29tcG9uZW50PHtcbiAgbmFtZT86IHN0cmluZztcbiAgY2hpbGRyZW4/OiBKU1hDaGlsZHJlbjtcbn0+ID0gKHByb3BzKSA9PiB7XG4gIHJldHVybiBfanN4U29ydGVkKFZpcnR1YWwsIG51bGwsIHsgW1FTbG90U106ICcnIH0sIHByb3BzLmNoaWxkcmVuLCAwLCBwcm9wcy5uYW1lID8/ICcnKTtcbn07XG4iXX0=","import { STREAM_BLOCK_END_COMMENT, STREAM_BLOCK_START_COMMENT } from '../utils/markers';\nimport { jsx, RenderOnce } from './jsx-runtime';\n/** @public */\nexport const SkipRender = Symbol('skip render');\n/** @public */\nexport const SSRRaw = () => null;\n/** @public */\nexport const SSRComment = () => null;\n/** @public */\nexport const SSRStreamBlock = (props) => {\n    return [\n        jsx(SSRComment, { data: STREAM_BLOCK_START_COMMENT }),\n        props.children,\n        jsx(SSRComment, { data: STREAM_BLOCK_END_COMMENT }),\n    ];\n};\n/** @public */\nexport const SSRStream = (props, key) => jsx(RenderOnce, { children: jsx(InternalSSRStream, props) }, key);\nexport const InternalSSRStream = () => null;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMucHVibGljLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3NoYXJlZC9qc3gvdXRpbHMucHVibGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRXhGLE9BQU8sRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSWhELGNBQWM7QUFDZCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQVksTUFBTSxDQUFDLGFBQWEsQ0FBUSxDQUFDO0FBRWhFLGNBQWM7QUFDZCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQXdDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztBQUV0RSxjQUFjO0FBQ2QsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUF3QyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7QUFFMUUsY0FBYztBQUNkLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBZ0QsQ0FBQyxLQUFLLEVBQUUsRUFBRTtJQUNuRixPQUFPO1FBQ0wsR0FBRyxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSwwQkFBMEIsRUFBRSxDQUFDO1FBQ3JELEtBQUssQ0FBQyxRQUFRO1FBQ2QsR0FBRyxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxDQUFDO0tBQ3BELENBQUM7QUFDSixDQUFDLENBQUM7QUFhRixjQUFjO0FBQ2QsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFzQyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUN6RSxHQUFHLENBQUMsVUFBVSxFQUFFLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBT3BFLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFzQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTVFJFQU1fQkxPQ0tfRU5EX0NPTU1FTlQsIFNUUkVBTV9CTE9DS19TVEFSVF9DT01NRU5UIH0gZnJvbSAnLi4vdXRpbHMvbWFya2Vycyc7XG5pbXBvcnQgdHlwZSB7IFN0cmVhbVdyaXRlciB9IGZyb20gJy4uLy4uL3Nzci9zc3ItdHlwZXMnO1xuaW1wb3J0IHsganN4LCBSZW5kZXJPbmNlIH0gZnJvbSAnLi9qc3gtcnVudGltZSc7XG5pbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50LCBKU1hOb2RlLCBKU1hPdXRwdXQgfSBmcm9tICcuL3R5cGVzL2pzeC1ub2RlJztcbmltcG9ydCB0eXBlIHsgSlNYQ2hpbGRyZW4gfSBmcm9tICcuL3R5cGVzL2pzeC1xd2lrLWF0dHJpYnV0ZXMnO1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGNvbnN0IFNraXBSZW5kZXI6IEpTWE5vZGUgPSBTeW1ib2woJ3NraXAgcmVuZGVyJykgYXMgYW55O1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGNvbnN0IFNTUlJhdzogRnVuY3Rpb25Db21wb25lbnQ8eyBkYXRhOiBzdHJpbmcgfT4gPSAoKSA9PiBudWxsO1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGNvbnN0IFNTUkNvbW1lbnQ6IEZ1bmN0aW9uQ29tcG9uZW50PHsgZGF0YTogc3RyaW5nIH0+ID0gKCkgPT4gbnVsbDtcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBTU1JTdHJlYW1CbG9jazogRnVuY3Rpb25Db21wb25lbnQ8eyBjaGlsZHJlbj86IEpTWE91dHB1dCB9PiA9IChwcm9wcykgPT4ge1xuICByZXR1cm4gW1xuICAgIGpzeChTU1JDb21tZW50LCB7IGRhdGE6IFNUUkVBTV9CTE9DS19TVEFSVF9DT01NRU5UIH0pLFxuICAgIHByb3BzLmNoaWxkcmVuLFxuICAgIGpzeChTU1JDb21tZW50LCB7IGRhdGE6IFNUUkVBTV9CTE9DS19FTkRfQ09NTUVOVCB9KSxcbiAgXTtcbn07XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgdHlwZSBTU1JTdHJlYW1Qcm9wcyA9IHtcbiAgY2hpbGRyZW46IFNTUlN0cmVhbUNoaWxkcmVuO1xufTtcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCB0eXBlIFNTUlN0cmVhbUNoaWxkcmVuID1cbiAgfCBBc3luY0dlbmVyYXRvcjxKU1hDaGlsZHJlbiwgdm9pZCwgYW55PlxuICB8ICgoc3RyZWFtOiBTdHJlYW1Xcml0ZXIpID0+IFByb21pc2U8dm9pZD4pXG4gIHwgKCgpID0+IEFzeW5jR2VuZXJhdG9yPEpTWENoaWxkcmVuLCB2b2lkLCBhbnk+KTtcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBTU1JTdHJlYW06IEZ1bmN0aW9uQ29tcG9uZW50PFNTUlN0cmVhbVByb3BzPiA9IChwcm9wcywga2V5KSA9PlxuICBqc3goUmVuZGVyT25jZSwgeyBjaGlsZHJlbjoganN4KEludGVybmFsU1NSU3RyZWFtLCBwcm9wcykgfSwga2V5KTtcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCB0eXBlIFNTUkhpbnRQcm9wcyA9IHtcbiAgZHluYW1pYz86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgY29uc3QgSW50ZXJuYWxTU1JTdHJlYW06IEZ1bmN0aW9uQ29tcG9uZW50PFNTUlN0cmVhbVByb3BzPiA9ICgpID0+IG51bGw7XG4iXX0=","export function isAsyncGenerator(value) {\n    return !!value[Symbol.asyncIterator];\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXN5bmMtZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3NoYXJlZC91dGlscy9hc3luYy1nZW5lcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxVQUFVLGdCQUFnQixDQUFDLEtBQWE7SUFDNUMsT0FBTyxDQUFDLENBQUUsS0FBd0IsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDM0QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpc0FzeW5jR2VuZXJhdG9yKHZhbHVlOiBvYmplY3QpOiB2YWx1ZSBpcyBBc3luY0dlbmVyYXRvciB7XG4gIHJldHVybiAhISh2YWx1ZSBhcyBBc3luY0dlbmVyYXRvcilbU3ltYm9sLmFzeW5jSXRlcmF0b3JdO1xufVxuIl19","/**\n * Think of `-` as an escape character which makes the next character uppercase. `--` is just `-`.\n *\n * Rules for JSX property event names starting with `on`:\n *\n * - Are case insensitive: `onClick$` is same `onclick$`\n * - A `--` is `-`: `dbl--click` => `dbl-click`\n * - Become case sensitive if prefixed by `-`: `-Click` is `Click`\n * - A `-` (not at the beginning) makes next character uppercase: `dbl-click` => `dblClick`\n */\nexport const isJsxPropertyAnEventName = (name) => {\n    return ((name.startsWith('on') || name.startsWith('window:on') || name.startsWith('document:on')) &&\n        name.endsWith('$'));\n};\nexport const isHtmlAttributeAnEventName = (name) => {\n    return name.startsWith('on:') || name.startsWith('on-window:') || name.startsWith('on-document:');\n};\nexport const getEventNameFromJsxProp = (name) => {\n    if (name.endsWith('$')) {\n        let idx = -1;\n        if (name.startsWith('on')) {\n            idx = 2;\n        }\n        else if (name.startsWith('window:on')) {\n            idx = 9;\n        }\n        else if (name.startsWith('document:on')) {\n            idx = 11;\n        }\n        if (idx != -1) {\n            const isCaseSensitive = isDashAt(name, idx) && !isDashAt(name, idx + 1);\n            if (isCaseSensitive) {\n                idx++;\n            }\n            let lastIdx = idx;\n            let eventName = '';\n            while (true) {\n                idx = name.indexOf('-', lastIdx);\n                const chunk = name.substring(lastIdx, idx === -1 ? name.length - 1 /* don't include `$` */ : idx);\n                eventName += isCaseSensitive ? chunk : chunk.toLowerCase();\n                if (idx == -1) {\n                    return eventName;\n                }\n                if (isDashAt(name, idx + 1)) {\n                    eventName += '-';\n                    idx++;\n                }\n                else {\n                    eventName += name.charAt(idx + 1).toUpperCase();\n                    idx++;\n                }\n                lastIdx = idx + 1;\n            }\n        }\n    }\n    return null;\n};\nexport const getEventNameScopeFromJsxProp = (name) => {\n    const index = name.indexOf(':');\n    return index !== -1 ? name.substring(0, index) : '';\n};\nexport const getEventNameFromHtmlAttr = (name) => {\n    let idx = -1;\n    if (name.startsWith('on:')) {\n        idx = 3; // 'on:'.length\n    }\n    else if (name.startsWith('on-window:')) {\n        idx = 10; // 'on-window:'.length\n    }\n    else if (name.startsWith('on-document:')) {\n        idx = 12; // 'on-document:'.length\n    }\n    if (idx != -1) {\n        let lastIdx = idx;\n        let eventName = '';\n        while (true) {\n            idx = name.indexOf('-', lastIdx);\n            const chunk = name.substring(lastIdx, idx === -1 ? name.length : idx);\n            eventName += chunk;\n            if (idx == -1) {\n                return eventName;\n            }\n            eventName += name.charAt(idx + 1).toUpperCase();\n            idx++;\n            lastIdx = idx + 1;\n        }\n    }\n    return null;\n};\nconst isDashAt = (name, idx) => name.charCodeAt(idx) === 45; /* - */\nexport const convertEventNameFromHtmlAttrToJsxProp = (name) => {\n    let prefix = null;\n    if (name.startsWith('on:')) {\n        prefix = 'on';\n    }\n    else if (name.startsWith('on-window:')) {\n        prefix = 'window:on';\n    }\n    else if (name.startsWith('on-document:')) {\n        prefix = 'document:on';\n    }\n    if (prefix !== null) {\n        const eventName = getEventNameFromHtmlAttr(name);\n        let kebabCase = fromCamelToKebabCase(eventName);\n        if (isDashAt(kebabCase, 0) && !isDashAt(kebabCase, 1)) {\n            // special case for events which start with a `-`\n            // if we would just append it would be interpreted as a case sensitive event\n            kebabCase = '-' + kebabCase.charAt(1).toUpperCase() + kebabCase.substring(2);\n        }\n        return prefix + kebabCase + '$';\n    }\n    return null;\n};\nexport const convertEventNameFromJsxPropToHtmlAttr = (name) => {\n    if (name.endsWith('$')) {\n        let prefix = null;\n        // let idx = -1;\n        if (name.startsWith('on')) {\n            prefix = 'on:';\n            // idx = 2; // 'on'.length\n        }\n        else if (name.startsWith('window:on')) {\n            prefix = 'on-window:';\n            // idx = 9; // 'window:on'.length\n        }\n        else if (name.startsWith('document:on')) {\n            prefix = 'on-document:';\n            // idx = 11; // 'document:on'.length\n        }\n        if (prefix !== null) {\n            const eventName = getEventNameFromJsxProp(name);\n            return prefix + fromCamelToKebabCase(eventName);\n        }\n    }\n    return null;\n};\nexport const fromCamelToKebabCase = (text) => {\n    return text.replace(/([A-Z-])/g, '-$1').toLowerCase();\n};\nexport function isPreventDefault(key) {\n    return key.startsWith('preventdefault:');\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtbmFtZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvc2hhcmVkL3V0aWxzL2V2ZW50LW5hbWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7R0FTRztBQUVILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHLENBQUMsSUFBWSxFQUFXLEVBQUU7SUFDaEUsT0FBTyxDQUNMLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDekYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FDbkIsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLENBQUMsSUFBWSxFQUFXLEVBQUU7SUFDbEUsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNwRyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLElBQVksRUFBaUIsRUFBRTtJQUNyRSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUN2QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNiLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQzFCLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDVixDQUFDO2FBQU0sSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7WUFDeEMsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUNWLENBQUM7YUFB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VSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7WUFDMUMsTUFBTSxHQUFHLGNBQWMsQ0FBQztZQUN4QixvQ0FBb0M7UUFDdEMsQ0FBQztRQUNELElBQUksTUFBTSxLQUFLLElBQUksRUFBRSxDQUFDO1lBQ3BCLE1BQU0sU0FBUyxHQUFHLHVCQUF1QixDQUFDLElBQUksQ0FBRSxDQUFDO1lBQ2pELE9BQU8sTUFBTSxHQUFHLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2xELENBQUM7SUFDSCxDQUFDO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLElBQVksRUFBVSxFQUFFO0lBQzNELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDeEQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxVQUFVLGdCQUFnQixDQUFDLEdBQVc7SUFDMUMsT0FBTyxHQUFHLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDM0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpbmsgb2YgYC1gIGFzIGFuIGVzY2FwZSBjaGFyYWN0ZXIgd2hpY2ggbWFrZXMgdGhlIG5leHQgY2hhcmFjdGVyIHVwcGVyY2FzZS4gYC0tYCBpcyBqdXN0IGAtYC5cbiAqXG4gKiBSdWxlcyBmb3IgSlNYIHByb3BlcnR5IGV2ZW50IG5hbWVzIHN0YXJ0aW5nIHdpdGggYG9uYDpcbiAqXG4gKiAtIEFyZSBjYXNlIGluc2Vuc2l0aXZlOiBgb25DbGljayRgIGlzIHNhbWUgYG9uY2xpY2skYFxuICogLSBBIGAtLWAgaXMgYC1gOiBgZGJsLS1jbGlja2AgPT4gYGRibC1jbGlja2BcbiAqIC0gQmVjb21lIGNhc2Ugc2Vuc2l0aXZlIGlmIHByZWZpeGVkIGJ5IGAtYDogYC1DbGlja2AgaXMgYENsaWNrYFxuICogLSBBIGAtYCAobm90IGF0IHRoZSBiZWdpbm5pbmcpIG1ha2VzIG5leHQgY2hhcmFjdGVyIHVwcGVyY2FzZTogYGRibC1jbGlja2AgPT4gYGRibENsaWNrYFxuICovXG5cbmV4cG9ydCBjb25zdCBpc0pzeFByb3BlcnR5QW5FdmVudE5hbWUgPSAobmFtZTogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gIHJldHVybiAoXG4gICAgKG5hbWUuc3RhcnRzV2l0aCgnb24nKSB8fCBuYW1lLnN0YXJ0c1dpdGgoJ3dpbmRvdzpvbicpIHx8IG5hbWUuc3RhcnRzV2l0aCgnZG9jdW1lbnQ6b24nKSkgJiZcbiAgICBuYW1lLmVuZHNXaXRoKCckJylcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc0h0bWxBdHRyaWJ1dGVBbkV2ZW50TmFtZSA9IChuYW1lOiBzdHJpbmcpOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIG5hbWUuc3RhcnRzV2l0aCgnb246JykgfHwgbmFtZS5zdGFydHNXaXRoKCdvbi13aW5kb3c6JykgfHwgbmFtZS5zdGFydHNXaXRoKCdvbi1kb2N1bWVudDonKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRFdmVudE5hbWVGcm9tSnN4UHJvcCA9IChuYW1lOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsID0+IHtcbiAgaWYgKG5hbWUuZW5kc1dpdGgoJyQnKSkge1xuICAgIGxldCBpZHggPSAtMTtcbiAgICBpZiAobmFtZS5zdGFydHNXaXRoKCdvbicpKSB7XG4gICAgICBpZHggPSAyO1xuICAgIH0gZWxzZSBpZiAobmFtZS5zdGFydHNXaXRoKCd3aW5kb3c6b24nKSkge1xuICAgICAgaWR4ID0gOTtcbiAgICB9IGVsc2UgaWYgKG5hbWUuc3RhcnRzV2l0aCgnZG9jdW1lbnQ6b24nKSkge1xuICAgICAgaWR4ID0gMTE7XG4gICAgfVxuICAgIGlmIChpZHggIT0gLTEpIHtcbiAgICAgIGNvbnN0IGlzQ2FzZVNlbnNpdGl2ZSA9IGlzRGFzaEF0KG5hbWUsIGlkeCkgJiYgIWlzRGFzaEF0KG5hbWUsIGlkeCArIDEpO1xuICAgICAgaWYgKGlzQ2FzZVNlbnNpdGl2ZSkge1xuICAgICAgICBpZHgrKztcbiAgICAgIH1cbiAgICAgIGxldCBsYXN0SWR4ID0gaWR4O1xuICAgICAgbGV0IGV2ZW50TmFtZSA9ICcnO1xuICAgICAgd2hpbGUgKHRydWUgYXMgYm9vbGVhbikge1xuICAgICAgICBpZHggPSBuYW1lLmluZGV4T2YoJy0nLCBsYXN0SWR4KTtcbiAgICAgICAgY29uc3QgY2h1bmsgPSBuYW1lLnN1YnN0cmluZyhcbiAgICAgICAgICBsYXN0SWR4LFxuICAgICAgICAgIGlkeCA9PT0gLTEgPyBuYW1lLmxlbmd0aCAtIDEgLyogZG9uJ3QgaW5jbHVkZSBgJGAgKi8gOiBpZHhcbiAgICAgICAgKTtcbiAgICAgICAgZXZlbnROYW1lICs9IGlzQ2FzZVNlbnNpdGl2ZSA/IGNodW5rIDogY2h1bmsudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKGlkeCA9PSAtMSkge1xuICAgICAgICAgIHJldHVybiBldmVudE5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRGFzaEF0KG5hbWUsIGlkeCArIDEpKSB7XG4gICAgICAgICAgZXZlbnROYW1lICs9ICctJztcbiAgICAgICAgICBpZHgrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBldmVudE5hbWUgKz0gbmFtZS5jaGFyQXQoaWR4ICsgMSkudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICBpZHgrKztcbiAgICAgICAgfVxuICAgICAgICBsYXN0SWR4ID0gaWR4ICsgMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0RXZlbnROYW1lU2NvcGVGcm9tSnN4UHJvcCA9IChuYW1lOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICBjb25zdCBpbmRleCA9IG5hbWUuaW5kZXhPZignOicpO1xuICByZXR1cm4gaW5kZXggIT09IC0xID8gbmFtZS5zdWJzdHJpbmcoMCwgaW5kZXgpIDogJyc7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0RXZlbnROYW1lRnJvbUh0bWxBdHRyID0gKG5hbWU6IHN0cmluZyk6IHN0cmluZyB8IG51bGwgPT4ge1xuICBsZXQgaWR4ID0gLTE7XG4gIGlmIChuYW1lLnN0YXJ0c1dpdGgoJ29uOicpKSB7XG4gICAgaWR4ID0gMzsgLy8gJ29uOicubGVuZ3RoXG4gIH0gZWxzZSBpZiAobmFtZS5zdGFydHNXaXRoKCdvbi13aW5kb3c6JykpIHtcbiAgICBpZHggPSAxMDsgLy8gJ29uLXdpbmRvdzonLmxlbmd0aFxuICB9IGVsc2UgaWYgKG5hbWUuc3RhcnRzV2l0aCgnb24tZG9jdW1lbnQ6JykpIHtcbiAgICBpZHggPSAxMjsgLy8gJ29uLWRvY3VtZW50OicubGVuZ3RoXG4gIH1cbiAgaWYgKGlkeCAhPSAtMSkge1xuICAgIGxldCBsYXN0SWR4ID0gaWR4O1xuICAgIGxldCBldmVudE5hbWUgPSAnJztcbiAgICB3aGlsZSAodHJ1ZSBhcyBib29sZWFuKSB7XG4gICAgICBpZHggPSBuYW1lLmluZGV4T2YoJy0nLCBsYXN0SWR4KTtcbiAgICAgIGNvbnN0IGNodW5rID0gbmFtZS5zdWJzdHJpbmcobGFzdElkeCwgaWR4ID09PSAtMSA/IG5hbWUubGVuZ3RoIDogaWR4KTtcbiAgICAgIGV2ZW50TmFtZSArPSBjaHVuaztcbiAgICAgIGlmIChpZHggPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50TmFtZTtcbiAgICAgIH1cbiAgICAgIGV2ZW50TmFtZSArPSBuYW1lLmNoYXJBdChpZHggKyAxKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgaWR4Kys7XG4gICAgICBsYXN0SWR4ID0gaWR4ICsgMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5jb25zdCBpc0Rhc2hBdCA9IChuYW1lOiBzdHJpbmcsIGlkeDogbnVtYmVyKTogYm9vbGVhbiA9PiBuYW1lLmNoYXJDb2RlQXQoaWR4KSA9PT0gNDU7IC8qIC0gKi9cblxuZXhwb3J0IGNvbnN0IGNvbnZlcnRFdmVudE5hbWVGcm9tSHRtbEF0dHJUb0pzeFByb3AgPSAobmFtZTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCA9PiB7XG4gIGxldCBwcmVmaXg6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICBpZiAobmFtZS5zdGFydHNXaXRoKCdvbjonKSkge1xuICAgIHByZWZpeCA9ICdvbic7XG4gIH0gZWxzZSBpZiAobmFtZS5zdGFydHNXaXRoKCdvbi13aW5kb3c6JykpIHtcbiAgICBwcmVmaXggPSAnd2luZG93Om9uJztcbiAgfSBlbHNlIGlmIChuYW1lLnN0YXJ0c1dpdGgoJ29uLWRvY3VtZW50OicpKSB7XG4gICAgcHJlZml4ID0gJ2RvY3VtZW50Om9uJztcbiAgfVxuICBpZiAocHJlZml4ICE9PSBudWxsKSB7XG4gICAgY29uc3QgZXZlbnROYW1lID0gZ2V0RXZlbnROYW1lRnJvbUh0bWxBdHRyKG5hbWUpITtcbiAgICBsZXQga2ViYWJDYXNlID0gZnJvbUNhbWVsVG9LZWJhYkNhc2UoZXZlbnROYW1lKTtcbiAgICBpZiAoaXNEYXNoQXQoa2ViYWJDYXNlLCAwKSAmJiAhaXNEYXNoQXQoa2ViYWJDYXNlLCAxKSkge1xuICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciBldmVudHMgd2hpY2ggc3RhcnQgd2l0aCBhIGAtYFxuICAgICAgLy8gaWYgd2Ugd291bGQganVzdCBhcHBlbmQgaXQgd291bGQgYmUgaW50ZXJwcmV0ZWQgYXMgYSBjYXNlIHNlbnNpdGl2ZSBldmVudFxuICAgICAga2ViYWJDYXNlID0gJy0nICsga2ViYWJDYXNlLmNoYXJBdCgxKS50b1VwcGVyQ2FzZSgpICsga2ViYWJDYXNlLnN1YnN0cmluZygyKTtcbiAgICB9XG4gICAgcmV0dXJuIHByZWZpeCArIGtlYmFiQ2FzZSArICckJztcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCBjb252ZXJ0RXZlbnROYW1lRnJvbUpzeFByb3BUb0h0bWxBdHRyID0gKG5hbWU6IHN0cmluZyk6IHN0cmluZyB8IG51bGwgPT4ge1xuICBpZiAobmFtZS5lbmRzV2l0aCgnJCcpKSB7XG4gICAgbGV0IHByZWZpeDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gICAgLy8gbGV0IGlkeCA9IC0xO1xuICAgIGlmIChuYW1lLnN0YXJ0c1dpdGgoJ29uJykpIHtcbiAgICAgIHByZWZpeCA9ICdvbjonO1xuICAgICAgLy8gaWR4ID0gMjsgLy8gJ29uJy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKG5hbWUuc3RhcnRzV2l0aCgnd2luZG93Om9uJykpIHtcbiAgICAgIHByZWZpeCA9ICdvbi13aW5kb3c6JztcbiAgICAgIC8vIGlkeCA9IDk7IC8vICd3aW5kb3c6b24nLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAobmFtZS5zdGFydHNXaXRoKCdkb2N1bWVudDpvbicpKSB7XG4gICAgICBwcmVmaXggPSAnb24tZG9jdW1lbnQ6JztcbiAgICAgIC8vIGlkeCA9IDExOyAvLyAnZG9jdW1lbnQ6b24nLmxlbmd0aFxuICAgIH1cbiAgICBpZiAocHJlZml4ICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBldmVudE5hbWUgPSBnZXRFdmVudE5hbWVGcm9tSnN4UHJvcChuYW1lKSE7XG4gICAgICByZXR1cm4gcHJlZml4ICsgZnJvbUNhbWVsVG9LZWJhYkNhc2UoZXZlbnROYW1lKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnQgY29uc3QgZnJvbUNhbWVsVG9LZWJhYkNhc2UgPSAodGV4dDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIHRleHQucmVwbGFjZSgvKFtBLVotXSkvZywgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gaXNQcmV2ZW50RGVmYXVsdChrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4ga2V5LnN0YXJ0c1dpdGgoJ3ByZXZlbnRkZWZhdWx0OicpO1xufVxuIl19","/** CSS properties which accept numbers but are not in units of \"px\". */\nconst unitlessNumbers = new Set([\n    'animationIterationCount',\n    'aspectRatio',\n    'borderImageOutset',\n    'borderImageSlice',\n    'borderImageWidth',\n    'boxFlex',\n    'boxFlexGroup',\n    'boxOrdinalGroup',\n    'columnCount',\n    'columns',\n    'flex',\n    'flexGrow',\n    'flexShrink',\n    'gridArea',\n    'gridRow',\n    'gridRowEnd',\n    'gridRowStart',\n    'gridColumn',\n    'gridColumnEnd',\n    'gridColumnStart',\n    'fontWeight',\n    'lineClamp',\n    'lineHeight',\n    'opacity',\n    'order',\n    'orphans',\n    'scale',\n    'tabSize',\n    'widows',\n    'zIndex',\n    'zoom',\n    'MozAnimationIterationCount', // Known Prefixed Properties\n    'MozBoxFlex', // TODO: Remove these since they shouldn't be used in modern code\n    'msFlex',\n    'msFlexPositive',\n    'WebkitAnimationIterationCount',\n    'WebkitBoxFlex',\n    'WebkitBoxOrdinalGroup',\n    'WebkitColumnCount',\n    'WebkitColumns',\n    'WebkitFlex',\n    'WebkitFlexGrow',\n    'WebkitFlexShrink',\n    'WebkitLineClamp',\n]);\nexport const isUnitlessNumber = (name) => {\n    return unitlessNumbers.has(name);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdGxlc3NfbnVtYmVyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3NoYXJlZC91dGlscy91bml0bGVzc19udW1iZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0VBQXdFO0FBQ3hFLE1BQU0sZUFBZSxHQUFHLElBQUksR0FBRyxDQUFDO0lBQzlCLHlCQUF5QjtJQUN6QixhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsU0FBUztJQUNULGNBQWM7SUFDZCxpQkFBaUI7SUFDakIsYUFBYTtJQUNiLFNBQVM7SUFDVCxNQUFNO0lBQ04sVUFBVTtJQUNWLFlBQVk7SUFDWixVQUFVO0lBQ1YsU0FBUztJQUNULFlBQVk7SUFDWixjQUFjO0lBQ2QsWUFBWTtJQUNaLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsWUFBWTtJQUNaLFdBQVc7SUFDWCxZQUFZO0lBQ1osU0FBUztJQUNULE9BQU87SUFDUCxTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLE1BQU07SUFDTiw0QkFBNEIsRUFBRSw0QkFBNEI7SUFDMUQsWUFBWSxFQUFFLGlFQUFpRTtJQUMvRSxRQUFRO0lBQ1IsZ0JBQWdCO0lBQ2hCLCtCQUErQjtJQUMvQixlQUFlO0lBQ2YsdUJBQXVCO0lBQ3ZCLG1CQUFtQjtJQUNuQixlQUFlO0lBQ2YsWUFBWTtJQUNaLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEIsaUJBQWlCO0NBQ2xCLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsSUFBWSxFQUFXLEVBQUU7SUFDeEQsT0FBTyxlQUFlLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ25DLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDU1MgcHJvcGVydGllcyB3aGljaCBhY2NlcHQgbnVtYmVycyBidXQgYXJlIG5vdCBpbiB1bml0cyBvZiBcInB4XCIuICovXG5jb25zdCB1bml0bGVzc051bWJlcnMgPSBuZXcgU2V0KFtcbiAgJ2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50JyxcbiAgJ2FzcGVjdFJhdGlvJyxcbiAgJ2JvcmRlckltYWdlT3V0c2V0JyxcbiAgJ2JvcmRlckltYWdlU2xpY2UnLFxuICAnYm9yZGVySW1hZ2VXaWR0aCcsXG4gICdib3hGbGV4JyxcbiAgJ2JveEZsZXhHcm91cCcsXG4gICdib3hPcmRpbmFsR3JvdXAnLFxuICAnY29sdW1uQ291bnQnLFxuICAnY29sdW1ucycsXG4gICdmbGV4JyxcbiAgJ2ZsZXhHcm93JyxcbiAgJ2ZsZXhTaHJpbmsnLFxuICAnZ3JpZEFyZWEnLFxuICAnZ3JpZFJvdycsXG4gICdncmlkUm93RW5kJyxcbiAgJ2dyaWRSb3dTdGFydCcsXG4gICdncmlkQ29sdW1uJyxcbiAgJ2dyaWRDb2x1bW5FbmQnLFxuICAnZ3JpZENvbHVtblN0YXJ0JyxcbiAgJ2ZvbnRXZWlnaHQnLFxuICAnbGluZUNsYW1wJyxcbiAgJ2xpbmVIZWlnaHQnLFxuICAnb3BhY2l0eScsXG4gICdvcmRlcicsXG4gICdvcnBoYW5zJyxcbiAgJ3NjYWxlJyxcbiAgJ3RhYlNpemUnLFxuICAnd2lkb3dzJyxcbiAgJ3pJbmRleCcsXG4gICd6b29tJyxcbiAgJ01vekFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50JywgLy8gS25vd24gUHJlZml4ZWQgUHJvcGVydGllc1xuICAnTW96Qm94RmxleCcsIC8vIFRPRE86IFJlbW92ZSB0aGVzZSBzaW5jZSB0aGV5IHNob3VsZG4ndCBiZSB1c2VkIGluIG1vZGVybiBjb2RlXG4gICdtc0ZsZXgnLFxuICAnbXNGbGV4UG9zaXRpdmUnLFxuICAnV2Via2l0QW5pbWF0aW9uSXRlcmF0aW9uQ291bnQnLFxuICAnV2Via2l0Qm94RmxleCcsXG4gICdXZWJraXRCb3hPcmRpbmFsR3JvdXAnLFxuICAnV2Via2l0Q29sdW1uQ291bnQnLFxuICAnV2Via2l0Q29sdW1ucycsXG4gICdXZWJraXRGbGV4JyxcbiAgJ1dlYmtpdEZsZXhHcm93JyxcbiAgJ1dlYmtpdEZsZXhTaHJpbmsnLFxuICAnV2Via2l0TGluZUNsYW1wJyxcbl0pO1xuXG5leHBvcnQgY29uc3QgaXNVbml0bGVzc051bWJlciA9IChuYW1lOiBzdHJpbmcpOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIHVuaXRsZXNzTnVtYmVycy5oYXMobmFtZSk7XG59O1xuIl19","export const hashCode = (text, hash = 0) => {\n    for (let i = 0; i < text.length; i++) {\n        const chr = text.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n    return Number(Math.abs(hash)).toString(36);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaF9jb2RlLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3NoYXJlZC91dGlscy9oYXNoX2NvZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsSUFBWSxFQUFFLE9BQWUsQ0FBQyxFQUFFLEVBQUU7SUFDekQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNyQyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9CLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQywyQkFBMkI7SUFDeEMsQ0FBQztJQUNELE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDN0MsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGhhc2hDb2RlID0gKHRleHQ6IHN0cmluZywgaGFzaDogbnVtYmVyID0gMCkgPT4ge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjaHIgPSB0ZXh0LmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCA9IChoYXNoIDw8IDUpIC0gaGFzaCArIGNocjtcbiAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG4gIHJldHVybiBOdW1iZXIoTWF0aC5hYnMoaGFzaCkpLnRvU3RyaW5nKDM2KTtcbn07XG4iXX0=","import { QError_stringifyClassOrStyle, qError } from '../error/error';\nimport { isPreventDefault } from './event-names';\nimport { isClassAttr } from './scoped-styles';\nimport { isArray, isString } from './types';\nimport { isUnitlessNumber } from './unitless_number';\nimport { assertQrl } from '../qrl/qrl-class';\nimport { hashCode } from './hash_code';\nimport { ComponentStylesPrefixContent } from './markers';\nexport const serializeClass = (obj) => {\n    if (!obj) {\n        return '';\n    }\n    if (isString(obj)) {\n        return obj.trim();\n    }\n    const classes = [];\n    if (isArray(obj)) {\n        for (const o of obj) {\n            const classList = serializeClass(o);\n            if (classList) {\n                classes.push(classList);\n            }\n        }\n    }\n    else {\n        for (const [key, value] of Object.entries(obj)) {\n            if (value) {\n                classes.push(key.trim());\n            }\n        }\n    }\n    return classes.join(' ');\n};\n// Unlike fromCamelToKebabCase, this leaves `-` so that `background-color` stays `background-color`\nconst fromCamelToKebabCaseWithDash = (text) => {\n    return text.replace(/([A-Z])/g, '-$1').toLowerCase();\n};\nexport const stringifyStyle = (obj) => {\n    if (obj == null) {\n        return '';\n    }\n    if (typeof obj == 'object') {\n        if (isArray(obj)) {\n            throw qError(QError_stringifyClassOrStyle, obj, 'style');\n        }\n        else {\n            const chunks = [];\n            for (const key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    const value = obj[key];\n                    if (value != null && typeof value !== 'function') {\n                        if (key.startsWith('--')) {\n                            chunks.push(key + ':' + value);\n                        }\n                        else {\n                            chunks.push(fromCamelToKebabCaseWithDash(key) + ':' + setValueForStyle(key, value));\n                        }\n                    }\n                }\n            }\n            return chunks.join(';');\n        }\n    }\n    return String(obj);\n};\nexport const serializeBooleanOrNumberAttribute = (value) => {\n    return value != null ? String(value) : null;\n};\nexport function serializeAttribute(key, value, styleScopedId) {\n    if (isClassAttr(key)) {\n        const serializedClass = serializeClass(value);\n        value = styleScopedId\n            ? styleScopedId + (serializedClass.length ? ' ' + serializedClass : serializedClass)\n            : serializedClass;\n    }\n    else if (key === 'style') {\n        value = stringifyStyle(value);\n    }\n    else if (isEnumeratedBooleanAttribute(key) || typeof value === 'number') {\n        // aria attrs, tabindex etc.\n        value = serializeBooleanOrNumberAttribute(value);\n    }\n    else if (value === false || value == null) {\n        value = null;\n    }\n    else if (value === true && isPreventDefault(key)) {\n        value = '';\n    }\n    return value;\n}\nfunction isEnumeratedBooleanAttribute(key) {\n    return isAriaAttribute(key) || ['spellcheck', 'draggable', 'contenteditable'].includes(key);\n}\nexport const setValueForStyle = (styleName, value) => {\n    if (typeof value === 'number' && value !== 0 && !isUnitlessNumber(styleName)) {\n        return value + 'px';\n    }\n    return value;\n};\nexport function isAriaAttribute(prop) {\n    return prop.startsWith('aria-');\n}\nexport const styleKey = (qStyles, index) => {\n    assertQrl(qStyles);\n    return `${hashCode(qStyles.$hash$)}-${index}`;\n};\nexport const styleContent = (styleId) => {\n    return ComponentStylesPrefixContent + styleId;\n};\n//# sourceMappingURL=data:application/json;base64,","import { styleContent } from './styles';\nexport function hasClassAttr(props) {\n    for (const key in props) {\n        if (Object.prototype.hasOwnProperty.call(props, key) && isClassAttr(key)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function isClassAttr(key) {\n    return key === 'class' || key === 'className';\n}\nexport function getScopedStyleIdsAsPrefix(scopedStyleIds) {\n    return Array.from(scopedStyleIds)\n        .map((styleId) => styleContent(styleId))\n        .join(' ');\n}\nexport function convertScopedStyleIdsToArray(scopedStyleIds) {\n    return scopedStyleIds?.split(' ') ?? null;\n}\nexport function convertStyleIdsToString(scopedStyleIds) {\n    return Array.from(scopedStyleIds).join(' ');\n}\nexport const addComponentStylePrefix = (styleId) => {\n    if (styleId) {\n        let idx = 0;\n        do {\n            styleId = styleId.substring(0, idx) + styleContent(styleId.substring(idx));\n        } while ((idx = styleId.indexOf(' ', idx) + 1) !== 0);\n    }\n    return styleId || null;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NvcGVkLXN0eWxlcy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9zaGFyZWQvdXRpbHMvc2NvcGVkLXN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXhDLE1BQU0sVUFBVSxZQUFZLENBQUMsS0FBWTtJQUN2QyxLQUFLLE1BQU0sR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ3hCLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsSUFBSSxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUN6RSxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7SUFDSCxDQUFDO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxHQUFXO0lBQ3JDLE9BQU8sR0FBRyxLQUFLLE9BQU8sSUFBSSxHQUFHLEtBQUssV0FBVyxDQUFDO0FBQ2hELENBQUM7QUFFRCxNQUFNLFVBQVUseUJBQXlCLENBQUMsY0FBMkI7SUFDbkUsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQztTQUM5QixHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN2QyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDZixDQUFDO0FBRUQsTUFBTSxVQUFVLDRCQUE0QixDQUFDLGNBQThCO0lBQ3pFLE9BQU8sY0FBYyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUM7QUFDNUMsQ0FBQztBQUVELE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxjQUEyQjtJQUNqRSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzlDLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLE9BQXVCLEVBQWlCLEVBQUU7SUFDaEYsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUNaLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztRQUNaLEdBQUcsQ0FBQztZQUNGLE9BQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzdFLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7SUFDeEQsQ0FBQztJQUNELE9BQU8sT0FBTyxJQUFJLElBQUksQ0FBQztBQUN6QixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFByb3BzIH0gZnJvbSAnLi4vanN4L2pzeC1ydW50aW1lJztcbmltcG9ydCB7IHN0eWxlQ29udGVudCB9IGZyb20gJy4vc3R5bGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0NsYXNzQXR0cihwcm9wczogUHJvcHMpOiBib29sZWFuIHtcbiAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHMpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCBrZXkpICYmIGlzQ2xhc3NBdHRyKGtleSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NsYXNzQXR0cihrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4ga2V5ID09PSAnY2xhc3MnIHx8IGtleSA9PT0gJ2NsYXNzTmFtZSc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY29wZWRTdHlsZUlkc0FzUHJlZml4KHNjb3BlZFN0eWxlSWRzOiBTZXQ8c3RyaW5nPik6IHN0cmluZyB7XG4gIHJldHVybiBBcnJheS5mcm9tKHNjb3BlZFN0eWxlSWRzKVxuICAgIC5tYXAoKHN0eWxlSWQpID0+IHN0eWxlQ29udGVudChzdHlsZUlkKSlcbiAgICAuam9pbignICcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFNjb3BlZFN0eWxlSWRzVG9BcnJheShzY29wZWRTdHlsZUlkcz86IHN0cmluZyB8IG51bGwpOiBBcnJheTxzdHJpbmc+IHwgbnVsbCB7XG4gIHJldHVybiBzY29wZWRTdHlsZUlkcz8uc3BsaXQoJyAnKSA/PyBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFN0eWxlSWRzVG9TdHJpbmcoc2NvcGVkU3R5bGVJZHM6IFNldDxzdHJpbmc+KTogc3RyaW5nIHtcbiAgcmV0dXJuIEFycmF5LmZyb20oc2NvcGVkU3R5bGVJZHMpLmpvaW4oJyAnKTtcbn1cblxuZXhwb3J0IGNvbnN0IGFkZENvbXBvbmVudFN0eWxlUHJlZml4ID0gKHN0eWxlSWQ/OiBzdHJpbmcgfCBudWxsKTogc3RyaW5nIHwgbnVsbCA9PiB7XG4gIGlmIChzdHlsZUlkKSB7XG4gICAgbGV0IGlkeCA9IDA7XG4gICAgZG8ge1xuICAgICAgc3R5bGVJZCA9IHN0eWxlSWQuc3Vic3RyaW5nKDAsIGlkeCkgKyBzdHlsZUNvbnRlbnQoc3R5bGVJZC5zdWJzdHJpbmcoaWR4KSk7XG4gICAgfSB3aGlsZSAoKGlkeCA9IHN0eWxlSWQuaW5kZXhPZignICcsIGlkeCkgKyAxKSAhPT0gMCk7XG4gIH1cbiAgcmV0dXJuIHN0eWxlSWQgfHwgbnVsbDtcbn07XG4iXX0=","import { pad, qwikDebugToString } from '../debug';\nimport { assertTrue } from '../shared/error/assert';\nimport { tryGetInvokeContext } from '../use/use-core';\nimport { isSerializableObject } from '../shared/utils/types';\nimport { unwrapDeserializerProxy } from '../shared/shared-serialization';\nimport { ensureContains, ensureContainsEffect, triggerEffects, } from './signal';\nconst DEBUG = false;\n// eslint-disable-next-line no-console\nconst log = (...args) => console.log('STORE', ...args.map(qwikDebugToString));\nconst STORE_TARGET = Symbol('store.target');\nconst STORE_HANDLER = Symbol('store.handler');\nexport const STORE_ARRAY_PROP = Symbol('store.array');\nexport var StoreFlags;\n(function (StoreFlags) {\n    StoreFlags[StoreFlags[\"NONE\"] = 0] = \"NONE\";\n    StoreFlags[StoreFlags[\"RECURSIVE\"] = 1] = \"RECURSIVE\";\n    StoreFlags[StoreFlags[\"IMMUTABLE\"] = 2] = \"IMMUTABLE\";\n})(StoreFlags || (StoreFlags = {}));\nexport const getStoreHandler = (value) => {\n    return value[STORE_HANDLER];\n};\nexport const getStoreTarget = (value) => {\n    return value?.[STORE_TARGET] || null;\n};\nexport const unwrapStore = (value) => {\n    return getStoreTarget(value) || value;\n};\nexport const isStore = (value) => {\n    return STORE_TARGET in value;\n};\nexport function createStore(container, obj, flags) {\n    return new Proxy(obj, new StoreHandler(flags, container || null));\n}\nexport const getOrCreateStore = (obj, flags, container) => {\n    if (isSerializableObject(obj) && container) {\n        let store = container.$storeProxyMap$.get(obj);\n        if (!store) {\n            store = createStore(container, obj, flags);\n            container.$storeProxyMap$.set(obj, store);\n        }\n        return store;\n    }\n    return obj;\n};\nexport class StoreHandler {\n    constructor($flags$, $container$) {\n        this.$flags$ = $flags$;\n        this.$container$ = $container$;\n        this.$effects$ = null;\n    }\n    toString() {\n        return '[Store]';\n    }\n    get(target, prop) {\n        if (typeof prop === 'symbol') {\n            if (prop === STORE_TARGET) {\n                return target;\n            }\n            if (prop === STORE_HANDLER) {\n                return this;\n            }\n            return target[prop];\n        }\n        const ctx = tryGetInvokeContext();\n        const value = target[prop];\n        if (ctx) {\n            if (this.$container$ === null) {\n                if (!ctx.$container$) {\n                    return value;\n                }\n                // Grab the container now we have access to it\n                this.$container$ = ctx.$container$;\n            }\n            else {\n                assertTrue(!ctx.$container$ || ctx.$container$ === this.$container$, 'Do not use signals across containers');\n            }\n            const effectSubscriber = ctx.$effectSubscriber$;\n            if (effectSubscriber) {\n                addEffect(target, Array.isArray(target) ? STORE_ARRAY_PROP : prop, this, effectSubscriber);\n            }\n        }\n        if (prop === 'toString' && value === Object.prototype.toString) {\n            return this.toString;\n        }\n        const flags = this.$flags$;\n        if (flags & StoreFlags.RECURSIVE &&\n            typeof value === 'object' &&\n            value !== null &&\n            !Object.isFrozen(value) &&\n            !isStore(value) &&\n            !Object.isFrozen(target)) {\n            return getOrCreateStore(value, this.$flags$, this.$container$);\n        }\n        return value;\n    }\n    /** In the case of oldValue and value are the same, the effects are not triggered. */\n    set(target, prop, value) {\n        target = unwrapDeserializerProxy(target);\n        if (typeof prop === 'symbol') {\n            target[prop] = value;\n            return true;\n        }\n        const newValue = this.$flags$ & StoreFlags.RECURSIVE ? unwrapStore(value) : value;\n        if (prop in target) {\n            const oldValue = target[prop];\n            if (newValue !== oldValue) {\n                DEBUG && log('Store.set', oldValue, '->', newValue, pad('\\n' + this.toString(), '  '));\n                setNewValueAndTriggerEffects(prop, newValue, target, this);\n            }\n        }\n        else {\n            DEBUG && log('Store.set', 'create property', newValue, pad('\\n' + this.toString(), '  '));\n            setNewValueAndTriggerEffects(prop, newValue, target, this);\n        }\n        return true;\n    }\n    deleteProperty(target, prop) {\n        if (typeof prop != 'string' || !delete target[prop]) {\n            return false;\n        }\n        triggerEffects(this.$container$, this, getEffects(target, prop, this.$effects$));\n        return true;\n    }\n    has(target, prop) {\n        if (prop === STORE_TARGET) {\n            return true;\n        }\n        return Object.prototype.hasOwnProperty.call(target, prop);\n    }\n    ownKeys(target) {\n        const ctx = tryGetInvokeContext();\n        const effectSubscriber = ctx?.$effectSubscriber$;\n        if (effectSubscriber) {\n            addEffect(target, STORE_ARRAY_PROP, this, effectSubscriber);\n        }\n        return Reflect.ownKeys(target);\n    }\n    getOwnPropertyDescriptor(target, prop) {\n        if (Array.isArray(target) || typeof prop === 'symbol') {\n            return Object.getOwnPropertyDescriptor(target, prop);\n        }\n        return {\n            enumerable: true,\n            configurable: true,\n        };\n    }\n}\nfunction addEffect(target, prop, store, effectSubscriber) {\n    const effectsMap = (store.$effects$ || (store.$effects$ = {}));\n    const effects = (Object.prototype.hasOwnProperty.call(effectsMap, prop) && effectsMap[prop]) ||\n        (effectsMap[prop] = []);\n    // Let's make sure that we have a reference to this effect.\n    // Adding reference is essentially adding a subscription, so if the signal\n    // changes we know who to notify.\n    ensureContainsEffect(effects, effectSubscriber);\n    // But when effect is scheduled in needs to be able to know which signals\n    // to unsubscribe from. So we need to store the reference from the effect back\n    // to this signal.\n    ensureContains(effectSubscriber, target);\n    DEBUG && log('sub', pad('\\n' + store.$effects$.toString(), '  '));\n}\nfunction setNewValueAndTriggerEffects(prop, value, target, currentStore) {\n    target[prop] = value;\n    triggerEffects(currentStore.$container$, currentStore, getEffects(target, prop, currentStore.$effects$));\n}\nfunction getEffects(target, prop, storeEffects) {\n    let effectsToTrigger = storeEffects\n        ? Array.isArray(target)\n            ? Object.values(storeEffects).flatMap((effects) => effects)\n            : storeEffects[prop]\n        : null;\n    const storeArrayValue = storeEffects?.[STORE_ARRAY_PROP];\n    if (storeArrayValue) {\n        effectsToTrigger || (effectsToTrigger = []);\n        effectsToTrigger.push(...storeArrayValue);\n    }\n    return effectsToTrigger;\n}\n//# sourceMappingURL=data:application/json;base64,","import { verifySerializable } from '../shared/utils/serialize-utils';\nimport { ELEMENT_SEQ, ELEMENT_SEQ_IDX } from '../shared/utils/markers';\nimport { qDev, qSerialize } from '../shared/utils/qdev';\nimport { useInvokeContext } from './use-core';\n/**\n * @internal\n * The storage provider for hooks. Each invocation increases index i. Data is stored in an array.\n */\nexport const useSequentialScope = () => {\n    const iCtx = useInvokeContext();\n    const hostElement = iCtx.$hostElement$;\n    const host = hostElement;\n    let seq = iCtx.$container$.getHostProp(host, ELEMENT_SEQ);\n    if (seq === null) {\n        seq = [];\n        iCtx.$container$.setHostProp(host, ELEMENT_SEQ, seq);\n    }\n    let seqIdx = iCtx.$container$.getHostProp(host, ELEMENT_SEQ_IDX);\n    if (seqIdx === null) {\n        seqIdx = 0;\n    }\n    iCtx.$container$.setHostProp(host, ELEMENT_SEQ_IDX, seqIdx + 1);\n    while (seq.length <= seqIdx) {\n        seq.push(undefined);\n    }\n    const set = (value) => {\n        if (qDev && qSerialize) {\n            verifySerializable(value);\n        }\n        return (seq[seqIdx] = value);\n    };\n    return {\n        val: seq[seqIdx],\n        set,\n        i: seqIdx,\n        iCtx,\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXNlcXVlbnRpYWwtc2NvcGUuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXNlL3VzZS1zZXF1ZW50aWFsLXNjb3BlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdkUsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV4RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQTRCLE1BQU0sWUFBWSxDQUFDO0FBWXhFOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLEdBQTBCLEVBQUU7SUFDNUQsTUFBTSxJQUFJLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztJQUNoQyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQ3ZDLE1BQU0sSUFBSSxHQUFnQixXQUFrQixDQUFDO0lBQzdDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFRLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNqRSxJQUFJLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUNqQixHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ1QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBQ0QsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQVMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3pFLElBQUksTUFBTSxLQUFLLElBQUksRUFBRSxDQUFDO1FBQ3BCLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDYixDQUFDO0lBQ0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDaEUsT0FBTyxHQUFHLENBQUMsTUFBTSxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQzVCLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUNELE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBUSxFQUFFLEVBQUU7UUFDdkIsSUFBSSxJQUFJLElBQUksVUFBVSxFQUFFLENBQUM7WUFDdkIsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUIsQ0FBQztRQUNELE9BQU8sQ0FBQyxHQUFJLENBQUMsTUFBTyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDakMsQ0FBQyxDQUFDO0lBRUYsT0FBTztRQUNMLEdBQUcsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDO1FBQ2hCLEdBQUc7UUFDSCxDQUFDLEVBQUUsTUFBTTtRQUNULElBQUk7S0FDTCxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdmVyaWZ5U2VyaWFsaXphYmxlIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzL3NlcmlhbGl6ZS11dGlscyc7XG5pbXBvcnQgeyBFTEVNRU5UX1NFUSwgRUxFTUVOVF9TRVFfSURYIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzL21hcmtlcnMnO1xuaW1wb3J0IHsgcURldiwgcVNlcmlhbGl6ZSB9IGZyb20gJy4uL3NoYXJlZC91dGlscy9xZGV2JztcbmltcG9ydCB0eXBlIHsgSG9zdEVsZW1lbnQgfSBmcm9tICcuLi9zaGFyZWQvdHlwZXMnO1xuaW1wb3J0IHsgdXNlSW52b2tlQ29udGV4dCwgdHlwZSBSZW5kZXJJbnZva2VDb250ZXh0IH0gZnJvbSAnLi91c2UtY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VxdWVudGlhbFNjb3BlPFQ+IHtcbiAgLyoqIFRoZSBjdXJyZW50bHkgc3RvcmVkIGRhdGEgZm9yIHRoZSBob29rIHRoYXQgY2FsbHMgdGhpcyAqL1xuICByZWFkb25seSB2YWw6IFQgfCB1bmRlZmluZWQ7XG4gIC8qKiBTdG9yZSBuZXcgZGF0YSBmb3IgdGhlIGhvb2sgdGhhdCBjYWxscyB0aGlzICovXG4gIHJlYWRvbmx5IHNldDogKHY6IFQpID0+IFQ7XG4gIC8qKiBJbmRleCBvZiB0aGUgaG9vayAqL1xuICByZWFkb25seSBpOiBudW1iZXI7XG4gIHJlYWRvbmx5IGlDdHg6IFJlbmRlckludm9rZUNvbnRleHQ7XG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKiBUaGUgc3RvcmFnZSBwcm92aWRlciBmb3IgaG9va3MuIEVhY2ggaW52b2NhdGlvbiBpbmNyZWFzZXMgaW5kZXggaS4gRGF0YSBpcyBzdG9yZWQgaW4gYW4gYXJyYXkuXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VTZXF1ZW50aWFsU2NvcGUgPSA8VD4oKTogU2VxdWVudGlhbFNjb3BlPFQ+ID0+IHtcbiAgY29uc3QgaUN0eCA9IHVzZUludm9rZUNvbnRleHQoKTtcbiAgY29uc3QgaG9zdEVsZW1lbnQgPSBpQ3R4LiRob3N0RWxlbWVudCQ7XG4gIGNvbnN0IGhvc3Q6IEhvc3RFbGVtZW50ID0gaG9zdEVsZW1lbnQgYXMgYW55O1xuICBsZXQgc2VxID0gaUN0eC4kY29udGFpbmVyJC5nZXRIb3N0UHJvcDxhbnlbXT4oaG9zdCwgRUxFTUVOVF9TRVEpO1xuICBpZiAoc2VxID09PSBudWxsKSB7XG4gICAgc2VxID0gW107XG4gICAgaUN0eC4kY29udGFpbmVyJC5zZXRIb3N0UHJvcChob3N0LCBFTEVNRU5UX1NFUSwgc2VxKTtcbiAgfVxuICBsZXQgc2VxSWR4ID0gaUN0eC4kY29udGFpbmVyJC5nZXRIb3N0UHJvcDxudW1iZXI+KGhvc3QsIEVMRU1FTlRfU0VRX0lEWCk7XG4gIGlmIChzZXFJZHggPT09IG51bGwpIHtcbiAgICBzZXFJZHggPSAwO1xuICB9XG4gIGlDdHguJGNvbnRhaW5lciQuc2V0SG9zdFByb3AoaG9zdCwgRUxFTUVOVF9TRVFfSURYLCBzZXFJZHggKyAxKTtcbiAgd2hpbGUgKHNlcS5sZW5ndGggPD0gc2VxSWR4KSB7XG4gICAgc2VxLnB1c2godW5kZWZpbmVkKTtcbiAgfVxuICBjb25zdCBzZXQgPSAodmFsdWU6IFQpID0+IHtcbiAgICBpZiAocURldiAmJiBxU2VyaWFsaXplKSB7XG4gICAgICB2ZXJpZnlTZXJpYWxpemFibGUodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gKHNlcSFbc2VxSWR4IV0gPSB2YWx1ZSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICB2YWw6IHNlcVtzZXFJZHhdLFxuICAgIHNldCxcbiAgICBpOiBzZXFJZHgsXG4gICAgaUN0eCxcbiAgfTtcbn07XG4iXX0=","import { QSubscribers } from '../shared/utils/markers';\nimport { vnode_getProp } from '../client/vnode';\nimport { EffectSubscriptionsProp, WrappedSignal, isSignal } from './signal';\nexport class Subscriber {\n    constructor() {\n        this.$effectDependencies$ = null;\n    }\n}\nexport function isSubscriber(value) {\n    return value instanceof Subscriber || value instanceof WrappedSignal;\n}\nexport function clearVNodeEffectDependencies(value) {\n    const effects = vnode_getProp(value, QSubscribers, null);\n    if (!effects) {\n        return;\n    }\n    for (let i = effects.length - 1; i >= 0; i--) {\n        const subscriber = effects[i];\n        const subscriptionRemoved = clearEffects(subscriber, value);\n        if (subscriptionRemoved) {\n            effects.splice(i, 1);\n        }\n    }\n}\nexport function clearSubscriberEffectDependencies(value) {\n    if (value.$effectDependencies$) {\n        for (let i = value.$effectDependencies$.length - 1; i >= 0; i--) {\n            const subscriber = value.$effectDependencies$[i];\n            const subscriptionRemoved = clearEffects(subscriber, value);\n            if (subscriptionRemoved) {\n                value.$effectDependencies$.splice(i, 1);\n            }\n        }\n    }\n}\nfunction clearEffects(subscriber, value) {\n    if (!isSignal(subscriber)) {\n        return false;\n    }\n    const effectSubscriptions = subscriber.$effects$;\n    if (!effectSubscriptions) {\n        return false;\n    }\n    let subscriptionRemoved = false;\n    for (let i = effectSubscriptions.length - 1; i >= 0; i--) {\n        const effect = effectSubscriptions[i];\n        if (effect[EffectSubscriptionsProp.EFFECT] === value) {\n            effectSubscriptions.splice(i, 1);\n            subscriptionRemoved = true;\n        }\n    }\n    return subscriptionRemoved;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmFsLXN1YnNjcmliZXIuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvc2lnbmFsL3NpZ25hbC1zdWJzY3JpYmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUV2RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFNUUsTUFBTSxPQUFnQixVQUFVO0lBQWhDO1FBQ0UseUJBQW9CLEdBQXdCLElBQUksQ0FBQztJQUNuRCxDQUFDO0NBQUE7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEtBQWM7SUFDekMsT0FBTyxLQUFLLFlBQVksVUFBVSxJQUFJLEtBQUssWUFBWSxhQUFhLENBQUM7QUFDdkUsQ0FBQztBQUVELE1BQU0sVUFBVSw0QkFBNEIsQ0FBQyxLQUFZO0lBQ3ZELE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBZSxLQUFLLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3ZFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNiLE9BQU87SUFDVCxDQUFDO0lBQ0QsS0FBSyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDN0MsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCLE1BQU0sbUJBQW1CLEdBQUcsWUFBWSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM1RCxJQUFJLG1CQUFtQixFQUFFLENBQUM7WUFDeEIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdkIsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLGlDQUFpQyxDQUFDLEtBQWlCO0lBQ2pFLElBQUksS0FBSyxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDL0IsS0FBSyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsb0JBQW9CLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDaEUsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pELE1BQU0sbUJBQW1CLEdBQUcsWUFBWSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUM1RCxJQUFJLG1CQUFtQixFQUFFLENBQUM7Z0JBQ3hCLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzFDLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBQyxVQUFzQixFQUFFLEtBQXlCO0lBQ3JFLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztRQUMxQixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFDRCxNQUFNLG1CQUFtQixHQUFJLFVBQXFDLENBQUMsU0FBUyxDQUFDO0lBQzdFLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQ3pCLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUNELElBQUksbUJBQW1CLEdBQUcsS0FBSyxDQUFDO0lBQ2hDLEtBQUssSUFBSSxDQUFDLEdBQUcsbUJBQW1CLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDekQsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEMsSUFBSSxNQUFNLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLEtBQUssS0FBSyxFQUFFLENBQUM7WUFDckQsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNqQyxtQkFBbUIsR0FBRyxJQUFJLENBQUM7UUFDN0IsQ0FBQztJQUNILENBQUM7SUFDRCxPQUFPLG1CQUFtQixDQUFDO0FBQzdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBRU3Vic2NyaWJlcnMgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMvbWFya2Vycyc7XG5pbXBvcnQgdHlwZSB7IFZOb2RlIH0gZnJvbSAnLi4vY2xpZW50L3R5cGVzJztcbmltcG9ydCB7IHZub2RlX2dldFByb3AgfSBmcm9tICcuLi9jbGllbnQvdm5vZGUnO1xuaW1wb3J0IHsgRWZmZWN0U3Vic2NyaXB0aW9uc1Byb3AsIFdyYXBwZWRTaWduYWwsIGlzU2lnbmFsIH0gZnJvbSAnLi9zaWduYWwnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU3Vic2NyaWJlciB7XG4gICRlZmZlY3REZXBlbmRlbmNpZXMkOiBTdWJzY3JpYmVyW10gfCBudWxsID0gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3Vic2NyaWJlcih2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIFN1YnNjcmliZXIge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpYmVyIHx8IHZhbHVlIGluc3RhbmNlb2YgV3JhcHBlZFNpZ25hbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyVk5vZGVFZmZlY3REZXBlbmRlbmNpZXModmFsdWU6IFZOb2RlKTogdm9pZCB7XG4gIGNvbnN0IGVmZmVjdHMgPSB2bm9kZV9nZXRQcm9wPFN1YnNjcmliZXJbXT4odmFsdWUsIFFTdWJzY3JpYmVycywgbnVsbCk7XG4gIGlmICghZWZmZWN0cykge1xuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKGxldCBpID0gZWZmZWN0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGNvbnN0IHN1YnNjcmliZXIgPSBlZmZlY3RzW2ldO1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvblJlbW92ZWQgPSBjbGVhckVmZmVjdHMoc3Vic2NyaWJlciwgdmFsdWUpO1xuICAgIGlmIChzdWJzY3JpcHRpb25SZW1vdmVkKSB7XG4gICAgICBlZmZlY3RzLnNwbGljZShpLCAxKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyU3Vic2NyaWJlckVmZmVjdERlcGVuZGVuY2llcyh2YWx1ZTogU3Vic2NyaWJlcik6IHZvaWQge1xuICBpZiAodmFsdWUuJGVmZmVjdERlcGVuZGVuY2llcyQpIHtcbiAgICBmb3IgKGxldCBpID0gdmFsdWUuJGVmZmVjdERlcGVuZGVuY2llcyQubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGNvbnN0IHN1YnNjcmliZXIgPSB2YWx1ZS4kZWZmZWN0RGVwZW5kZW5jaWVzJFtpXTtcbiAgICAgIGNvbnN0IHN1YnNjcmlwdGlvblJlbW92ZWQgPSBjbGVhckVmZmVjdHMoc3Vic2NyaWJlciwgdmFsdWUpO1xuICAgICAgaWYgKHN1YnNjcmlwdGlvblJlbW92ZWQpIHtcbiAgICAgICAgdmFsdWUuJGVmZmVjdERlcGVuZGVuY2llcyQuc3BsaWNlKGksIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjbGVhckVmZmVjdHMoc3Vic2NyaWJlcjogU3Vic2NyaWJlciwgdmFsdWU6IFN1YnNjcmliZXIgfCBWTm9kZSk6IGJvb2xlYW4ge1xuICBpZiAoIWlzU2lnbmFsKHN1YnNjcmliZXIpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGVmZmVjdFN1YnNjcmlwdGlvbnMgPSAoc3Vic2NyaWJlciBhcyBXcmFwcGVkU2lnbmFsPHVua25vd24+KS4kZWZmZWN0cyQ7XG4gIGlmICghZWZmZWN0U3Vic2NyaXB0aW9ucykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBsZXQgc3Vic2NyaXB0aW9uUmVtb3ZlZCA9IGZhbHNlO1xuICBmb3IgKGxldCBpID0gZWZmZWN0U3Vic2NyaXB0aW9ucy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGNvbnN0IGVmZmVjdCA9IGVmZmVjdFN1YnNjcmlwdGlvbnNbaV07XG4gICAgaWYgKGVmZmVjdFtFZmZlY3RTdWJzY3JpcHRpb25zUHJvcC5FRkZFQ1RdID09PSB2YWx1ZSkge1xuICAgICAgZWZmZWN0U3Vic2NyaXB0aW9ucy5zcGxpY2UoaSwgMSk7XG4gICAgICBzdWJzY3JpcHRpb25SZW1vdmVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN1YnNjcmlwdGlvblJlbW92ZWQ7XG59XG4iXX0=","import { isServerPlatform } from '../shared/platform/platform';\nimport { assertQrl } from '../shared/qrl/qrl-class';\nimport {} from '../shared/qrl/qrl.public';\nimport { Fragment, _jsxSorted } from '../shared/jsx/jsx-runtime';\nimport { invoke, newInvokeContext, untrack, useBindInvokeContext } from './use-core';\nimport { Task, TaskFlags, cleanupTask } from './use-task';\nimport { delay, isPromise, safeCall } from '../shared/utils/promises';\nimport { isFunction, isObject } from '../shared/utils/types';\nimport { StoreFlags, createStore, getStoreTarget, unwrapStore } from '../signal/store';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { EffectProperty, isSignal } from '../signal/signal';\nimport { clearSubscriberEffectDependencies } from '../signal/signal-subscriber';\nimport { ResourceEvent } from '../shared/utils/markers';\nimport { assertDefined } from '../shared/error/assert';\nimport { noSerialize } from '../shared/utils/serialize-utils';\nconst DEBUG = false;\nfunction debugLog(...arg) {\n    // eslint-disable-next-line no-console\n    console.log(arg.join(', '));\n}\n// <docs markdown=\"../readme.md#useResource\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResource instead)\n/**\n * This method works like an async memoized function that runs whenever some tracked value changes\n * and returns some data.\n *\n * `useResource` however returns immediate a `ResourceReturn` object that contains the data and a\n * state that indicates if the data is available or not.\n *\n * The status can be one of the following:\n *\n * - `pending` - the data is not yet available.\n * - `resolved` - the data is available.\n * - `rejected` - the data is not available due to an error or timeout.\n *\n * Avoid using a `try/catch` statement in `useResource$`. If you catch the error instead of passing\n * it, the resource status will never be `rejected`.\n *\n * ### Example\n *\n * Example showing how `useResource` to perform a fetch to request the weather, whenever the input\n * city name changes.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const cityS = useSignal('');\n *\n *   const weatherResource = useResource$(async ({ track, cleanup }) => {\n *     const cityName = track(cityS);\n *     const abortController = new AbortController();\n *     cleanup(() => abortController.abort('cleanup'));\n *     const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n *       signal: abortController.signal,\n *     });\n *     const data = await res.json();\n *     return data as { temp: number };\n *   });\n *\n *   return (\n *     <div>\n *       <input name=\"city\" bind:value={cityS} />\n *       <Resource\n *         value={weatherResource}\n *         onResolved={(weather) => {\n *           return <div>Temperature: {weather.temp}</div>;\n *         }}\n *       />\n *     </div>\n *   );\n * });\n * ```\n *\n * @public\n * @see Resource\n * @see ResourceReturn\n */\n// </docs>\nexport const useResourceQrl = (qrl, opts) => {\n    const { val, set, i, iCtx } = useSequentialScope();\n    if (val != null) {\n        return val;\n    }\n    assertQrl(qrl);\n    const container = iCtx.$container$;\n    const resource = createResourceReturn(container, opts);\n    const el = iCtx.$hostElement$;\n    const task = new Task(TaskFlags.DIRTY | TaskFlags.RESOURCE, i, el, qrl, resource, null);\n    runResource(task, container, iCtx.$hostElement$);\n    set(resource);\n    return resource;\n};\n// <docs markdown=\"../readme.md#useResource\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResource instead)\n/**\n * This method works like an async memoized function that runs whenever some tracked value changes\n * and returns some data.\n *\n * `useResource` however returns immediate a `ResourceReturn` object that contains the data and a\n * state that indicates if the data is available or not.\n *\n * The status can be one of the following:\n *\n * - 'pending' - the data is not yet available.\n * - 'resolved' - the data is available.\n * - 'rejected' - the data is not available due to an error or timeout.\n *\n * ### Example\n *\n * Example showing how `useResource` to perform a fetch to request the weather, whenever the input\n * city name changes.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const cityS = useSignal('');\n *\n *   const weatherResource = useResource$(async ({ track, cleanup }) => {\n *     const cityName = track(cityS);\n *     const abortController = new AbortController();\n *     cleanup(() => abortController.abort('cleanup'));\n *     const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n *       signal: abortController.signal,\n *     });\n *     const data = await res.json();\n *     return data as { temp: number };\n *   });\n *\n *   return (\n *     <div>\n *       <input name=\"city\" bind:value={cityS} />\n *       <Resource\n *         value={weatherResource}\n *         onResolved={(weather) => {\n *           return <div>Temperature: {weather.temp}</div>;\n *         }}\n *       />\n *     </div>\n *   );\n * });\n * ```\n *\n * @public\n * @see Resource\n * @see ResourceReturn\n */\n// </docs>\nexport const Resource = (props) => {\n    // Resource path\n    return _jsxSorted(Fragment, null, null, getResourceValueAsPromise(props), 0, null);\n};\nfunction getResourceValueAsPromise(props) {\n    const resource = props.value;\n    if (isResourceReturn(resource)) {\n        const isBrowser = !isServerPlatform();\n        if (isBrowser) {\n            // create a subscription for the resource._state changes\n            const state = resource._state;\n            DEBUG && debugLog(`RESOURCE_CMP.${state}`, 'VALUE: ' + untrack(() => resource._resolved));\n            if (state === 'pending' && props.onPending) {\n                return Promise.resolve(props.onPending());\n            }\n            else if (state === 'rejected' && props.onRejected) {\n                return Promise.resolve(resource._error).then(props.onRejected);\n            }\n            else {\n                // resolved, pending without onPending prop or rejected with onRejected prop\n                return Promise.resolve(untrack(() => resource._resolved)).then(props.onResolved);\n            }\n        }\n        return resource.value.then(useBindInvokeContext(props.onResolved), useBindInvokeContext(props.onRejected));\n    }\n    else if (isPromise(resource)) {\n        return resource.then(useBindInvokeContext(props.onResolved), useBindInvokeContext(props.onRejected));\n    }\n    else if (isSignal(resource)) {\n        return Promise.resolve(resource.value).then(useBindInvokeContext(props.onResolved), useBindInvokeContext(props.onRejected));\n    }\n    else {\n        return Promise.resolve(resource).then(useBindInvokeContext(props.onResolved), useBindInvokeContext(props.onRejected));\n    }\n}\nexport const _createResourceReturn = (opts) => {\n    const resource = {\n        __brand: 'resource',\n        value: undefined,\n        loading: isServerPlatform() ? false : true,\n        _resolved: undefined,\n        _error: undefined,\n        _state: 'pending',\n        _timeout: opts?.timeout ?? -1,\n        _cache: 0,\n    };\n    return resource;\n};\nexport const createResourceReturn = (container, opts, initialPromise) => {\n    const result = _createResourceReturn(opts);\n    result.value = initialPromise;\n    return createStore(container, result, StoreFlags.RECURSIVE);\n};\nexport const getInternalResource = (resource) => {\n    return getStoreTarget(resource);\n};\nexport const isResourceReturn = (obj) => {\n    return isObject(obj) && (getStoreTarget(obj) || obj).__brand === 'resource';\n};\nexport const runResource = (task, container, host) => {\n    task.$flags$ &= ~TaskFlags.DIRTY;\n    cleanupTask(task);\n    const iCtx = newInvokeContext(container.$locale$, host, undefined, ResourceEvent);\n    iCtx.$container$ = container;\n    const taskFn = task.$qrl$.getFn(iCtx, () => clearSubscriberEffectDependencies(task));\n    const resource = task.$state$;\n    assertDefined(resource, 'useResource: when running a resource, \"task.resource\" must be a defined.', task);\n    const track = (obj, prop) => {\n        const ctx = newInvokeContext();\n        ctx.$effectSubscriber$ = [task, EffectProperty.COMPONENT];\n        ctx.$container$ = container;\n        return invoke(ctx, () => {\n            if (isFunction(obj)) {\n                return obj();\n            }\n            if (prop) {\n                return obj[prop];\n            }\n            else if (isSignal(obj)) {\n                return obj.value;\n            }\n            else {\n                return obj;\n            }\n        });\n    };\n    const handleError = (reason) => container.handleError(reason, host);\n    const cleanups = [];\n    task.$destroy$ = noSerialize(() => {\n        cleanups.forEach((fn) => {\n            try {\n                fn();\n            }\n            catch (err) {\n                handleError(err);\n            }\n        });\n        done = true;\n    });\n    const resourceTarget = unwrapStore(resource);\n    const opts = {\n        track,\n        cleanup(fn) {\n            if (typeof fn === 'function') {\n                cleanups.push(fn);\n            }\n        },\n        cache(policy) {\n            let milliseconds = 0;\n            if (policy === 'immutable') {\n                milliseconds = Infinity;\n            }\n            else {\n                milliseconds = policy;\n            }\n            resource._cache = milliseconds;\n        },\n        previous: resourceTarget._resolved,\n    };\n    let resolve;\n    let reject;\n    let done = false;\n    const setState = (resolved, value) => {\n        if (!done) {\n            done = true;\n            if (resolved) {\n                done = true;\n                resource.loading = false;\n                resource._state = 'resolved';\n                resource._resolved = value;\n                resource._error = undefined;\n                resolve(value);\n            }\n            else {\n                done = true;\n                resource.loading = false;\n                resource._state = 'rejected';\n                resource._error = value;\n                reject(value);\n            }\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Add cleanup to resolve the resource if we are trying to run the same resource again while the\n     * previous one is not resolved yet. The next `runResource` run will call this cleanup\n     */\n    cleanups.push(() => {\n        if (untrack(() => resource.loading) === true) {\n            const value = untrack(() => resource._resolved);\n            setState(true, value);\n        }\n    });\n    // Execute mutation inside empty invocation\n    invoke(iCtx, () => {\n        // console.log('RESOURCE.pending: ');\n        resource._state = 'pending';\n        resource.loading = !isServerPlatform();\n        const promise = (resource.value = new Promise((r, re) => {\n            resolve = r;\n            reject = re;\n        }));\n        promise.catch(ignoreErrorToPreventNodeFromCrashing);\n    });\n    const promise = safeCall(() => Promise.resolve(taskFn(opts)), (value) => {\n        setState(true, value);\n    }, (err) => {\n        if (isPromise(err)) {\n            return err.then(() => runResource(task, container, host));\n        }\n        else {\n            setState(false, err);\n        }\n    });\n    const timeout = resourceTarget._timeout;\n    if (timeout > 0) {\n        return Promise.race([\n            promise,\n            delay(timeout).then(() => {\n                if (setState(false, new Error('timeout'))) {\n                    cleanupTask(task);\n                }\n            }),\n        ]);\n    }\n    return promise;\n};\nconst ignoreErrorToPreventNodeFromCrashing = (err) => {\n    // ignore error to prevent node from crashing\n    // node will crash in promise is rejected and no one is listening to the rejection.\n};\n//# sourceMappingURL=data:application/json;base64,","/** @file Public types for the client deserialization */\n/**\n * Flags for VNode.\n *\n * # Materialize vs Inflation\n *\n * - Materialized: The node has all of its children. Specifically `firstChild`/`lastChild` are NOT\n *   `undefined`. Materialization creates lazy instantiation of the children. NOTE: Only\n *   ElementVNode need to be materialized.\n * - Inflation:\n *\n *   - If Text: It means that it is safe to write to the node. When Text nodes are first Deserialized\n *       multiple text nodes can share the same DOM node. On write the sibling text nodes need to be\n *       converted into separate text nodes.\n *   - If Element: It means that the element tag attributes have not yet been read from the DOM.\n *\n * Inflation and materialization are not the same, they are two independent things.\n *\n * @internal\n */\nexport var VNodeFlags;\n(function (VNodeFlags) {\n    VNodeFlags[VNodeFlags[\"Element\"] = 1] = \"Element\";\n    VNodeFlags[VNodeFlags[\"Virtual\"] = 2] = \"Virtual\";\n    VNodeFlags[VNodeFlags[\"ELEMENT_OR_VIRTUAL_MASK\"] = 3] = \"ELEMENT_OR_VIRTUAL_MASK\";\n    VNodeFlags[VNodeFlags[\"ELEMENT_OR_TEXT_MASK\"] = 5] = \"ELEMENT_OR_TEXT_MASK\";\n    VNodeFlags[VNodeFlags[\"TYPE_MASK\"] = 7] = \"TYPE_MASK\";\n    VNodeFlags[VNodeFlags[\"INFLATED_TYPE_MASK\"] = 15] = \"INFLATED_TYPE_MASK\";\n    VNodeFlags[VNodeFlags[\"Text\"] = 4] = \"Text\";\n    /// Extra flag which marks if a node needs to be inflated.\n    VNodeFlags[VNodeFlags[\"Inflated\"] = 8] = \"Inflated\";\n    /// Marks if the `ensureProjectionResolved` has been called on the node.\n    VNodeFlags[VNodeFlags[\"Resolved\"] = 16] = \"Resolved\";\n    /// Marks if the vnode is deleted.\n    VNodeFlags[VNodeFlags[\"Deleted\"] = 32] = \"Deleted\";\n    /// Flags for Namespace\n    VNodeFlags[VNodeFlags[\"NAMESPACE_MASK\"] = 192] = \"NAMESPACE_MASK\";\n    VNodeFlags[VNodeFlags[\"NEGATED_NAMESPACE_MASK\"] = -193] = \"NEGATED_NAMESPACE_MASK\";\n    VNodeFlags[VNodeFlags[\"NS_html\"] = 0] = \"NS_html\";\n    VNodeFlags[VNodeFlags[\"NS_svg\"] = 64] = \"NS_svg\";\n    VNodeFlags[VNodeFlags[\"NS_math\"] = 128] = \"NS_math\";\n})(VNodeFlags || (VNodeFlags = {}));\nexport var VNodeFlagsIndex;\n(function (VNodeFlagsIndex) {\n    VNodeFlagsIndex[VNodeFlagsIndex[\"mask\"] = -256] = \"mask\";\n    VNodeFlagsIndex[VNodeFlagsIndex[\"negated_mask\"] = 255] = \"negated_mask\";\n    VNodeFlagsIndex[VNodeFlagsIndex[\"shift\"] = 8] = \"shift\";\n})(VNodeFlagsIndex || (VNodeFlagsIndex = {}));\nexport var VNodeProps;\n(function (VNodeProps) {\n    VNodeProps[VNodeProps[\"flags\"] = 0] = \"flags\";\n    VNodeProps[VNodeProps[\"parent\"] = 1] = \"parent\";\n    VNodeProps[VNodeProps[\"previousSibling\"] = 2] = \"previousSibling\";\n    VNodeProps[VNodeProps[\"nextSibling\"] = 3] = \"nextSibling\";\n})(VNodeProps || (VNodeProps = {}));\nexport var ElementVNodeProps;\n(function (ElementVNodeProps) {\n    ElementVNodeProps[ElementVNodeProps[\"firstChild\"] = 4] = \"firstChild\";\n    ElementVNodeProps[ElementVNodeProps[\"lastChild\"] = 5] = \"lastChild\";\n    ElementVNodeProps[ElementVNodeProps[\"element\"] = 6] = \"element\";\n    ElementVNodeProps[ElementVNodeProps[\"elementName\"] = 7] = \"elementName\";\n    ElementVNodeProps[ElementVNodeProps[\"PROPS_OFFSET\"] = 8] = \"PROPS_OFFSET\";\n})(ElementVNodeProps || (ElementVNodeProps = {}));\nexport var TextVNodeProps;\n(function (TextVNodeProps) {\n    TextVNodeProps[TextVNodeProps[\"node\"] = 4] = \"node\";\n    TextVNodeProps[TextVNodeProps[\"text\"] = 5] = \"text\";\n})(TextVNodeProps || (TextVNodeProps = {}));\nexport var VirtualVNodeProps;\n(function (VirtualVNodeProps) {\n    VirtualVNodeProps[VirtualVNodeProps[\"firstChild\"] = 4] = \"firstChild\";\n    VirtualVNodeProps[VirtualVNodeProps[\"lastChild\"] = 5] = \"lastChild\";\n    VirtualVNodeProps[VirtualVNodeProps[\"PROPS_OFFSET\"] = 6] = \"PROPS_OFFSET\";\n})(VirtualVNodeProps || (VirtualVNodeProps = {}));\n//# sourceMappingURL=data:application/json;base64,","import { HTML_NS, MATH_NS, Q_PROPS_SEPARATOR, SVG_NS } from '../shared/utils/markers';\nimport { getDomContainerFromQContainerElement } from './dom-container';\nimport { ElementVNodeProps, TextVNodeProps, VNodeFlags, VNodeProps, } from './types';\nimport { ensureElementVNode, shouldIgnoreChildren, vnode_getDOMChildNodes, vnode_getDomParentVNode, vnode_getElementName, vnode_getFirstChild, vnode_getNextSibling, vnode_getParent, vnode_isElementVNode, vnode_isTextVNode, } from './vnode';\nexport const isForeignObjectElement = (elementName) => elementName.toLowerCase() === 'foreignobject';\nexport const isSvgElement = (elementName) => elementName === 'svg' || isForeignObjectElement(elementName);\nexport const isMathElement = (elementName) => elementName === 'math';\nexport const vnode_isDefaultNamespace = (vnode) => {\n    const flags = vnode[VNodeProps.flags];\n    return (flags & VNodeFlags.NAMESPACE_MASK) === 0;\n};\nexport const vnode_getElementNamespaceFlags = (elementName) => {\n    if (isSvgElement(elementName)) {\n        return VNodeFlags.NS_svg;\n    }\n    else if (isMathElement(elementName)) {\n        return VNodeFlags.NS_math;\n    }\n    else {\n        return VNodeFlags.NS_html;\n    }\n};\nexport function vnode_getDomChildrenWithCorrectNamespacesToInsert(journal, domParentVNode, newChild) {\n    const { elementNamespace, elementNamespaceFlag } = getNewElementNamespaceData(domParentVNode, newChild);\n    let domChildren = [];\n    if (elementNamespace === HTML_NS) {\n        // parent is in the default namespace, so just get the dom children. This is the fast path.\n        domChildren = vnode_getDOMChildNodes(journal, newChild);\n    }\n    else {\n        // parent is in a different namespace, so we need to clone the children with the correct namespace.\n        // The namespace cannot be changed on nodes, so we need to clone these nodes\n        const children = vnode_getDOMChildNodes(journal, newChild, true);\n        for (let i = 0; i < children.length; i++) {\n            const childVNode = children[i];\n            if (vnode_isTextVNode(childVNode)) {\n                // text nodes are always in the default namespace\n                domChildren.push(childVNode[TextVNodeProps.node]);\n                continue;\n            }\n            if ((childVNode[VNodeProps.flags] & VNodeFlags.NAMESPACE_MASK) ===\n                (domParentVNode[VNodeProps.flags] & VNodeFlags.NAMESPACE_MASK)) {\n                // if the child and parent have the same namespace, we don't need to clone the element\n                domChildren.push(childVNode[ElementVNodeProps.element]);\n                continue;\n            }\n            // clone the element with the correct namespace\n            const newChildElement = vnode_cloneElementWithNamespace(childVNode, domParentVNode, elementNamespace, elementNamespaceFlag);\n            if (newChildElement) {\n                domChildren.push(newChildElement);\n            }\n        }\n    }\n    return domChildren;\n}\n/** This function clones an element with a different namespace, but without the children. */\nfunction cloneElementWithNamespace(element, elementName, namespace) {\n    const newElement = element.ownerDocument.createElementNS(namespace, elementName);\n    const attributes = element.attributes;\n    for (const attribute of attributes) {\n        const name = attribute.name;\n        const value = attribute.value;\n        if (!name || name === Q_PROPS_SEPARATOR) {\n            continue;\n        }\n        newElement.setAttribute(name, value);\n    }\n    return newElement;\n}\n/**\n * This function clones an ElementVNode with a different namespace, including the children. This\n * traverse the tree using depth-first search and clones the elements using\n * `cloneElementWithNamespace`.\n */\nfunction vnode_cloneElementWithNamespace(elementVNode, parentVNode, namespace, namespaceFlag) {\n    ensureElementVNode(elementVNode);\n    let vCursor = elementVNode;\n    let vParent = null;\n    let rootElement = null;\n    let parentElement = null;\n    while (vCursor) {\n        let childElement = null;\n        let newChildElement = null;\n        if (vnode_isElementVNode(vCursor)) {\n            // Clone the element\n            childElement = vCursor[ElementVNodeProps.element];\n            const childElementTag = vnode_getElementName(vCursor);\n            // We need to check if the parent is a foreignObject element\n            // and get a new namespace data.\n            const vCursorParent = vnode_getParent(vCursor);\n            // For the first vNode parentNode is not parent from vNode tree, but parent from DOM tree\n            // this is because vNode is not moved yet.\n            // rootElement is null only for the first vNode\n            const vCursorDomParent = rootElement == null ? parentVNode : vCursorParent && vnode_getDomParentVNode(vCursorParent);\n            if (vCursorDomParent) {\n                const namespaceData = getNewElementNamespaceData(vCursorDomParent, vnode_getElementName(vCursor));\n                namespace = namespaceData.elementNamespace;\n                namespaceFlag = namespaceData.elementNamespaceFlag;\n            }\n            newChildElement = cloneElementWithNamespace(childElement, childElementTag, namespace);\n            childElement.remove();\n            if (rootElement == null) {\n                rootElement = newChildElement;\n            }\n            if (parentElement) {\n                parentElement.appendChild(newChildElement);\n            }\n            // Descend into children\n            // We need first get the first child, if any\n            const vFirstChild = vnode_getFirstChild(vCursor);\n            // Then we can overwrite the cursor with newly created element.\n            // This is because we need to materialize the children before we assign new element\n            vCursor[ElementVNodeProps.element] = newChildElement;\n            // Set correct namespace flag\n            vCursor[VNodeProps.flags] &= VNodeFlags.NEGATED_NAMESPACE_MASK;\n            vCursor[VNodeProps.flags] |= namespaceFlag;\n            if (vFirstChild) {\n                vCursor = vFirstChild;\n                parentElement = newChildElement;\n                continue;\n            }\n            else if (shouldIgnoreChildren(childElement)) {\n                // If we should ignore children of the element this means that the element is a container\n                // We need to get the first child of the container\n                const container = getDomContainerFromQContainerElement(childElement);\n                if (container) {\n                    const innerContainerFirstVNode = vnode_getFirstChild(container.rootVNode);\n                    if (innerContainerFirstVNode) {\n                        vCursor = innerContainerFirstVNode;\n                        parentElement = newChildElement;\n                        continue;\n                    }\n                }\n            }\n        }\n        if (vCursor === elementVNode) {\n            // we are where we started, this means that vNode has no children, so we are done.\n            return rootElement;\n        }\n        // Out of children, go to next sibling\n        const vNextSibling = vnode_getNextSibling(vCursor);\n        if (vNextSibling) {\n            vCursor = vNextSibling;\n            continue;\n        }\n        // Out of siblings, go to parent\n        vParent = vnode_getParent(vCursor);\n        while (vParent) {\n            if (vParent === elementVNode) {\n                // We are back where we started, we are done.\n                return rootElement;\n            }\n            const vNextParentSibling = vnode_getNextSibling(vParent);\n            if (vNextParentSibling) {\n                vCursor = vNextParentSibling;\n                return rootElement;\n            }\n            vParent = vnode_getParent(vParent);\n        }\n        if (vParent == null) {\n            // We are done.\n            return rootElement;\n        }\n    }\n    return rootElement;\n}\nfunction isSvg(tagOrVNode) {\n    return typeof tagOrVNode === 'string'\n        ? isSvgElement(tagOrVNode)\n        : (tagOrVNode[VNodeProps.flags] & VNodeFlags.NS_svg) !== 0;\n}\nfunction isMath(tagOrVNode) {\n    return typeof tagOrVNode === 'string'\n        ? isMathElement(tagOrVNode)\n        : (tagOrVNode[VNodeProps.flags] & VNodeFlags.NS_math) !== 0;\n}\nexport function getNewElementNamespaceData(domParentVNode, tagOrVNode) {\n    const parentIsDefaultNamespace = domParentVNode\n        ? !!vnode_getElementName(domParentVNode) && vnode_isDefaultNamespace(domParentVNode)\n        : true;\n    const parentIsForeignObject = !parentIsDefaultNamespace\n        ? isForeignObjectElement(vnode_getElementName(domParentVNode))\n        : false;\n    let elementNamespace = HTML_NS;\n    let elementNamespaceFlag = VNodeFlags.NS_html;\n    const isElementVNodeOrString = typeof tagOrVNode === 'string' || vnode_isElementVNode(tagOrVNode);\n    if (isElementVNodeOrString && isSvg(tagOrVNode)) {\n        elementNamespace = SVG_NS;\n        elementNamespaceFlag = VNodeFlags.NS_svg;\n    }\n    else if (isElementVNodeOrString && isMath(tagOrVNode)) {\n        elementNamespace = MATH_NS;\n        elementNamespaceFlag = VNodeFlags.NS_math;\n    }\n    else if (domParentVNode && !parentIsForeignObject && !parentIsDefaultNamespace) {\n        const isParentSvg = (domParentVNode[VNodeProps.flags] & VNodeFlags.NS_svg) !== 0;\n        const isParentMath = (domParentVNode[VNodeProps.flags] & VNodeFlags.NS_math) !== 0;\n        elementNamespace = isParentSvg ? SVG_NS : isParentMath ? MATH_NS : HTML_NS;\n        elementNamespaceFlag = domParentVNode[VNodeProps.flags] & VNodeFlags.NAMESPACE_MASK;\n    }\n    return {\n        elementNamespace,\n        elementNamespaceFlag,\n    };\n}\n//# sourceMappingURL=data:application/json;base64,","import { useInvokeContext } from './use-core';\nimport {} from '../shared/jsx/types/jsx-qwik-events';\nimport { USE_ON_LOCAL, USE_ON_LOCAL_FLAGS, USE_ON_LOCAL_SEQ_IDX } from '../shared/utils/markers';\n// <docs markdown=\"../readme.md#useOn\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOn instead)\n/**\n * Register a listener on the current component's host element.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX. Otherwise, it's adding a JSX listener in the `<div>` is a better idea.\n *\n * @public\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n */\n// </docs>\nexport const useOn = (event, eventQrl) => {\n    _useOn(createEventName(event, undefined), eventQrl);\n};\n// <docs markdown=\"../readme.md#useOnDocument\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOnDocument instead)\n/**\n * Register a listener on `document`.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX.\n *\n * @public\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * ```tsx\n * function useScroll() {\n *   useOnDocument(\n *     'scroll',\n *     $((event) => {\n *       console.log('body scrolled', event);\n *     })\n *   );\n * }\n *\n * const Cmp = component$(() => {\n *   useScroll();\n *   return <div>Profit!</div>;\n * });\n * ```\n */\n// </docs>\nexport const useOnDocument = (event, eventQrl) => {\n    _useOn(createEventName(event, 'document'), eventQrl);\n};\n// <docs markdown=\"../readme.md#useOnWindow\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOnWindow instead)\n/**\n * Register a listener on `window`.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX.\n *\n * @public\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * ```tsx\n * function useAnalytics() {\n *   useOnWindow(\n *     'popstate',\n *     $((event) => {\n *       console.log('navigation happened', event);\n *       // report to analytics\n *     })\n *   );\n * }\n *\n * const Cmp = component$(() => {\n *   useAnalytics();\n *   return <div>Profit!</div>;\n * });\n * ```\n */\n// </docs>\nexport const useOnWindow = (event, eventQrl) => {\n    _useOn(createEventName(event, 'window'), eventQrl);\n};\nconst createEventName = (event, eventType) => {\n    const prefix = eventType !== undefined ? eventType + ':' : '';\n    const map = (name) => prefix + 'on' + name.charAt(0).toUpperCase() + name.substring(1) + '$';\n    const res = Array.isArray(event) ? event.map(map) : map(event);\n    return res;\n};\nconst _useOn = (eventName, eventQrl) => {\n    const { isAdded, addEvent } = useOnEventsSequentialScope();\n    if (isAdded) {\n        return;\n    }\n    if (eventQrl) {\n        Array.isArray(eventName)\n            ? eventName.forEach((event) => addEvent(event, eventQrl))\n            : addEvent(eventName, eventQrl);\n    }\n};\n/**\n * This hook is like the `useSequentialScope` but it is specifically for `useOn`. This is needed\n * because we want to execute the `useOn` hooks only once and store the event listeners on the host\n * element. From Qwik V2 the component is rerunning when the promise is thrown, so we need to make\n * sure that the event listeners are not added multiple times.\n *\n * - The event listeners are stored in the `USE_ON_LOCAL` property.\n * - The `USE_ON_LOCAL_SEQ_IDX` is used to keep track of the index of the hook that calls this.\n * - The `USE_ON_LOCAL_FLAGS` is used to keep track of whether the event listener has been added or\n *   not.\n */\nconst useOnEventsSequentialScope = () => {\n    const iCtx = useInvokeContext();\n    const hostElement = iCtx.$hostElement$;\n    const host = hostElement;\n    let onMap = iCtx.$container$.getHostProp(host, USE_ON_LOCAL);\n    if (onMap === null) {\n        onMap = {};\n        iCtx.$container$.setHostProp(host, USE_ON_LOCAL, onMap);\n    }\n    let seqIdx = iCtx.$container$.getHostProp(host, USE_ON_LOCAL_SEQ_IDX);\n    if (seqIdx === null) {\n        seqIdx = 0;\n    }\n    iCtx.$container$.setHostProp(host, USE_ON_LOCAL_SEQ_IDX, seqIdx + 1);\n    let addedFlags = iCtx.$container$.getHostProp(host, USE_ON_LOCAL_FLAGS);\n    if (addedFlags === null) {\n        addedFlags = [];\n        iCtx.$container$.setHostProp(host, USE_ON_LOCAL_FLAGS, addedFlags);\n    }\n    while (addedFlags.length <= seqIdx) {\n        addedFlags.push(false);\n    }\n    const addEvent = (eventName, eventQrl) => {\n        addedFlags[seqIdx] = true;\n        let events = onMap[eventName];\n        if (!events) {\n            onMap[eventName] = events = [];\n        }\n        events.push(eventQrl);\n    };\n    return {\n        isAdded: addedFlags[seqIdx],\n        addEvent,\n    };\n};\n//# sourceMappingURL=data:application/json;base64,","import { isDev } from '@builder.io/qwik/build';\nimport { isQwikComponent } from './component.public';\nimport { assertDefined } from './error/assert';\nimport { isQrl } from './qrl/qrl-class';\nimport { JSXNodeImpl, isJSXNode } from './jsx/jsx-runtime';\nimport { invokeApply, newInvokeContext, untrack } from '../use/use-core';\nimport {} from '../use/use-on';\nimport { EMPTY_OBJ } from './utils/flyweight';\nimport { ELEMENT_PROPS, ELEMENT_SEQ_IDX, OnRenderProp, RenderEvent, USE_ON_LOCAL, USE_ON_LOCAL_SEQ_IDX, } from './utils/markers';\nimport { isPromise, maybeThen, safeCall } from './utils/promises';\nimport { logWarn } from './utils/log';\nimport { EffectProperty, isSignal } from '../signal/signal';\nimport { vnode_isVNode } from '../client/vnode';\nimport { clearVNodeEffectDependencies } from '../signal/signal-subscriber';\n/**\n * Use `executeComponent` to execute a component.\n *\n * Component execution can be complex because of:\n *\n * - It can by async\n * - It can contain many tasks which need to be awaited\n * - Each task can run multiple times if they track signals which change.\n * - The JSX may be re-generated multiple times of a task needs to be rerun due to signal change.\n * - It needs to keep track of hook state.\n *\n * For `component$`: `renderHost` === `subscriptionHost` For inlined-components: the\n * `subscriptionHost` is a parent `component$` which needs to re-execute.\n *\n * @param container\n * @param renderHost - VNode into which the component is rendered into.\n * @param subscriptionHost - VNode which will be re-executed if the component needs to re-render.\n * @param componentQRL\n * @param props\n * @returns\n */\nexport const executeComponent = (container, renderHost, subscriptionHost, componentQRL, props) => {\n    const iCtx = newInvokeContext(container.$locale$, subscriptionHost, undefined, RenderEvent);\n    iCtx.$effectSubscriber$ = [subscriptionHost, EffectProperty.COMPONENT];\n    iCtx.$container$ = container;\n    let componentFn;\n    container.ensureProjectionResolved(renderHost);\n    if (componentQRL === null) {\n        componentQRL = componentQRL || container.getHostProp(renderHost, OnRenderProp);\n        assertDefined(componentQRL, 'No Component found at this location');\n    }\n    if (isQrl(componentQRL)) {\n        props = props || container.getHostProp(renderHost, ELEMENT_PROPS) || EMPTY_OBJ;\n        if (props && props.children) {\n            delete props.children;\n        }\n        componentFn = componentQRL.getFn(iCtx);\n    }\n    else if (isQwikComponent(componentQRL)) {\n        const qComponentFn = componentQRL;\n        componentFn = () => invokeApply(iCtx, qComponentFn, [props || EMPTY_OBJ, null, 0]);\n    }\n    else {\n        const inlineComponent = componentQRL;\n        componentFn = () => invokeApply(iCtx, inlineComponent, [props || EMPTY_OBJ]);\n    }\n    const executeComponentWithPromiseExceptionRetry = () => safeCall(() => {\n        container.setHostProp(renderHost, ELEMENT_SEQ_IDX, null);\n        container.setHostProp(renderHost, USE_ON_LOCAL_SEQ_IDX, null);\n        container.setHostProp(renderHost, ELEMENT_PROPS, props);\n        if (vnode_isVNode(renderHost)) {\n            clearVNodeEffectDependencies(renderHost);\n        }\n        return componentFn(props);\n    }, (jsx) => {\n        const useOnEvents = container.getHostProp(renderHost, USE_ON_LOCAL);\n        if (useOnEvents) {\n            return maybeThen(addUseOnEvents(jsx, useOnEvents), () => jsx);\n        }\n        return jsx;\n    }, (err) => {\n        if (isPromise(err)) {\n            return err.then(executeComponentWithPromiseExceptionRetry);\n        }\n        else {\n            throw err;\n        }\n    });\n    return executeComponentWithPromiseExceptionRetry();\n};\n/**\n * Stores the JSX output of the last execution of the component.\n *\n * Component can execute multiple times because:\n *\n * - Component can have multiple tasks\n * - Tasks can track signals\n * - Task A can change signal which causes Task B to rerun.\n *\n * So when executing a component we only care about its last JSX Output.\n */\nfunction addUseOnEvents(jsx, useOnEvents) {\n    const jsxElement = findFirstStringJSX(jsx);\n    return maybeThen(jsxElement, (jsxElement) => {\n        let isInvisibleComponent = false;\n        if (!jsxElement) {\n            /**\n             * We did not find any jsx node with a string tag. This means that we should append:\n             *\n             * ```html\n             * <script type=\"placeholder\" hidden on-document:qinit=\"...\"></script>\n             * ```\n             *\n             * This is needed because use on events should have a node to attach them to.\n             */\n            isInvisibleComponent = true;\n        }\n        for (const key in useOnEvents) {\n            if (Object.prototype.hasOwnProperty.call(useOnEvents, key)) {\n                if (isInvisibleComponent) {\n                    if (key === 'onQvisible$') {\n                        jsxElement = addScriptNodeForInvisibleComponents(jsx);\n                        if (jsxElement) {\n                            addUseOnEvent(jsxElement, 'document:onQinit$', useOnEvents[key]);\n                        }\n                    }\n                    else if (key.startsWith('document:') || key.startsWith('window:')) {\n                        jsxElement = addScriptNodeForInvisibleComponents(jsx);\n                        if (jsxElement) {\n                            addUseOnEvent(jsxElement, key, useOnEvents[key]);\n                        }\n                    }\n                    else if (isDev) {\n                        logWarn('You are trying to add an event \"' +\n                            key +\n                            '\" using `useOn` hook, ' +\n                            'but a node to which you can add an event is not found. ' +\n                            'Please make sure that the component has a valid element node. ');\n                    }\n                }\n                else if (jsxElement) {\n                    addUseOnEvent(jsxElement, key, useOnEvents[key]);\n                }\n            }\n        }\n        return jsxElement;\n    });\n}\nfunction addUseOnEvent(jsxElement, key, value) {\n    let props = jsxElement.props;\n    if (props === EMPTY_OBJ) {\n        props = jsxElement.props = {};\n    }\n    let propValue = props[key];\n    if (propValue === undefined) {\n        propValue = [];\n    }\n    else if (!Array.isArray(propValue)) {\n        propValue = [propValue];\n    }\n    propValue.push(...value);\n    props[key] = propValue;\n}\nfunction findFirstStringJSX(jsx) {\n    const queue = [jsx];\n    while (queue.length) {\n        const jsx = queue.shift();\n        if (isJSXNode(jsx)) {\n            if (typeof jsx.type === 'string') {\n                return jsx;\n            }\n            queue.push(jsx.children);\n        }\n        else if (Array.isArray(jsx)) {\n            queue.push(...jsx);\n        }\n        else if (isPromise(jsx)) {\n            return maybeThen(jsx, (jsx) => findFirstStringJSX(jsx));\n        }\n        else if (isSignal(jsx)) {\n            return findFirstStringJSX(untrack(() => jsx.value));\n        }\n    }\n    return null;\n}\nfunction addScriptNodeForInvisibleComponents(jsx) {\n    if (isJSXNode(jsx)) {\n        const jsxElement = new JSXNodeImpl('script', {}, {\n            type: 'placeholder',\n            hidden: '',\n        }, null, 3);\n        if (jsx.children == null) {\n            jsx.children = jsxElement;\n        }\n        else if (Array.isArray(jsx.children)) {\n            jsx.children.push(jsxElement);\n        }\n        else {\n            jsx.children = [jsx.children, jsxElement];\n        }\n        return jsxElement;\n    }\n    else if (Array.isArray(jsx) && jsx.length) {\n        // get first element\n        return addScriptNodeForInvisibleComponents(jsx[0]);\n    }\n    return null;\n}\n//# sourceMappingURL=data:application/json;base64,","import { NON_SERIALIZABLE_MARKER_PREFIX, QSlotParent } from './markers';\nexport function isSlotProp(prop) {\n    return !prop.startsWith('q:') && !prop.startsWith(NON_SERIALIZABLE_MARKER_PREFIX);\n}\nexport function isParentSlotProp(prop) {\n    return prop.startsWith(QSlotParent);\n}\n/** @internal */\nexport const _restProps = (props, omit, target = {}) => {\n    for (const key in props) {\n        if (!omit.includes(key)) {\n            target[key] = props[key];\n        }\n    }\n    return target;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9zaGFyZWQvdXRpbHMvcHJvcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsOEJBQThCLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXhFLE1BQU0sVUFBVSxVQUFVLENBQUMsSUFBWTtJQUNyQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsOEJBQThCLENBQUMsQ0FBQztBQUNwRixDQUFDO0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUFDLElBQVk7SUFDM0MsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3RDLENBQUM7QUFFRCxnQkFBZ0I7QUFDaEIsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsS0FBMEIsRUFBRSxJQUFjLEVBQUUsTUFBTSxHQUFHLEVBQUUsRUFBRSxFQUFFO0lBQ3BGLEtBQUssTUFBTSxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUN2QixNQUFjLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLENBQUM7SUFDSCxDQUFDO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTk9OX1NFUklBTElaQUJMRV9NQVJLRVJfUFJFRklYLCBRU2xvdFBhcmVudCB9IGZyb20gJy4vbWFya2Vycyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Nsb3RQcm9wKHByb3A6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gIXByb3Auc3RhcnRzV2l0aCgncTonKSAmJiAhcHJvcC5zdGFydHNXaXRoKE5PTl9TRVJJQUxJWkFCTEVfTUFSS0VSX1BSRUZJWCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1BhcmVudFNsb3RQcm9wKHByb3A6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gcHJvcC5zdGFydHNXaXRoKFFTbG90UGFyZW50KTtcbn1cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IF9yZXN0UHJvcHMgPSAocHJvcHM6IFJlY29yZDxzdHJpbmcsIGFueT4sIG9taXQ6IHN0cmluZ1tdLCB0YXJnZXQgPSB7fSkgPT4ge1xuICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wcykge1xuICAgIGlmICghb21pdC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAodGFyZ2V0IGFzIGFueSlba2V5XSA9IHByb3BzW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIl19","export function escapeHTML(html) {\n    let escapedHTML = '';\n    const length = html.length;\n    let idx = 0;\n    let lastIdx = idx;\n    for (; idx < length; idx++) {\n        // We get the charCode NOT string. String would allocate memory.\n        const ch = html.charCodeAt(idx);\n        // Every time we concat a string we allocate memory. We want to minimize that.\n        if (ch === 60 /* < */) {\n            escapedHTML += html.substring(lastIdx, idx) + '&lt;';\n        }\n        else if (ch === 62 /* > */) {\n            escapedHTML += html.substring(lastIdx, idx) + '&gt;';\n        }\n        else if (ch === 38 /* & */) {\n            escapedHTML += html.substring(lastIdx, idx) + '&amp;';\n        }\n        else if (ch === 34 /* \" */) {\n            escapedHTML += html.substring(lastIdx, idx) + '&quot;';\n        }\n        else if (ch === 39 /* ' */) {\n            escapedHTML += html.substring(lastIdx, idx) + '&#39;';\n        }\n        else {\n            continue;\n        }\n        lastIdx = idx + 1;\n    }\n    if (lastIdx === 0) {\n        // This is most common case, just return previous string no memory allocation.\n        return html;\n    }\n    else {\n        // Add the tail of replacement.\n        return escapedHTML + html.substring(lastIdx);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmFjdGVyLWVzY2FwaW5nLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3NoYXJlZC91dGlscy9jaGFyYWN0ZXItZXNjYXBpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxVQUFVLFVBQVUsQ0FBQyxJQUFZO0lBQ3JDLElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQztJQUNyQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQzNCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNaLElBQUksT0FBTyxHQUFHLEdBQUcsQ0FBQztJQUNsQixPQUFPLEdBQUcsR0FBRyxNQUFNLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQztRQUMzQixnRUFBZ0U7UUFDaEUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoQyw4RUFBOEU7UUFDOUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3RCLFdBQVcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDdkQsQ0FBQzthQUFNLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUM3QixXQUFXLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ3ZELENBQUM7YUFBTSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDN0IsV0FBVyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQztRQUN4RCxDQUFDO2FBQU0sSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzdCLFdBQVcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUM7UUFDekQsQ0FBQzthQUFNLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUM3QixXQUFXLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDO1FBQ3hELENBQUM7YUFBTSxDQUFDO1lBQ04sU0FBUztRQUNYLENBQUM7UUFDRCxPQUFPLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBQ0QsSUFBSSxPQUFPLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDbEIsOEVBQThFO1FBQzlFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztTQUFNLENBQUM7UUFDTiwrQkFBK0I7UUFDL0IsT0FBTyxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvQyxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBlc2NhcGVIVE1MKGh0bWw6IHN0cmluZyk6IHN0cmluZyB7XG4gIGxldCBlc2NhcGVkSFRNTCA9ICcnO1xuICBjb25zdCBsZW5ndGggPSBodG1sLmxlbmd0aDtcbiAgbGV0IGlkeCA9IDA7XG4gIGxldCBsYXN0SWR4ID0gaWR4O1xuICBmb3IgKDsgaWR4IDwgbGVuZ3RoOyBpZHgrKykge1xuICAgIC8vIFdlIGdldCB0aGUgY2hhckNvZGUgTk9UIHN0cmluZy4gU3RyaW5nIHdvdWxkIGFsbG9jYXRlIG1lbW9yeS5cbiAgICBjb25zdCBjaCA9IGh0bWwuY2hhckNvZGVBdChpZHgpO1xuICAgIC8vIEV2ZXJ5IHRpbWUgd2UgY29uY2F0IGEgc3RyaW5nIHdlIGFsbG9jYXRlIG1lbW9yeS4gV2Ugd2FudCB0byBtaW5pbWl6ZSB0aGF0LlxuICAgIGlmIChjaCA9PT0gNjAgLyogPCAqLykge1xuICAgICAgZXNjYXBlZEhUTUwgKz0gaHRtbC5zdWJzdHJpbmcobGFzdElkeCwgaWR4KSArICcmbHQ7JztcbiAgICB9IGVsc2UgaWYgKGNoID09PSA2MiAvKiA+ICovKSB7XG4gICAgICBlc2NhcGVkSFRNTCArPSBodG1sLnN1YnN0cmluZyhsYXN0SWR4LCBpZHgpICsgJyZndDsnO1xuICAgIH0gZWxzZSBpZiAoY2ggPT09IDM4IC8qICYgKi8pIHtcbiAgICAgIGVzY2FwZWRIVE1MICs9IGh0bWwuc3Vic3RyaW5nKGxhc3RJZHgsIGlkeCkgKyAnJmFtcDsnO1xuICAgIH0gZWxzZSBpZiAoY2ggPT09IDM0IC8qIFwiICovKSB7XG4gICAgICBlc2NhcGVkSFRNTCArPSBodG1sLnN1YnN0cmluZyhsYXN0SWR4LCBpZHgpICsgJyZxdW90Oyc7XG4gICAgfSBlbHNlIGlmIChjaCA9PT0gMzkgLyogJyAqLykge1xuICAgICAgZXNjYXBlZEhUTUwgKz0gaHRtbC5zdWJzdHJpbmcobGFzdElkeCwgaWR4KSArICcmIzM5Oyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBsYXN0SWR4ID0gaWR4ICsgMTtcbiAgfVxuICBpZiAobGFzdElkeCA9PT0gMCkge1xuICAgIC8vIFRoaXMgaXMgbW9zdCBjb21tb24gY2FzZSwganVzdCByZXR1cm4gcHJldmlvdXMgc3RyaW5nIG5vIG1lbW9yeSBhbGxvY2F0aW9uLlxuICAgIHJldHVybiBodG1sO1xuICB9IGVsc2Uge1xuICAgIC8vIEFkZCB0aGUgdGFpbCBvZiByZXBsYWNlbWVudC5cbiAgICByZXR1cm4gZXNjYXBlZEhUTUwgKyBodG1sLnN1YnN0cmluZyhsYXN0SWR4KTtcbiAgfVxufVxuIl19","import { isDev } from '@builder.io/qwik/build';\nimport { SERIALIZABLE_STATE } from '../shared/component.public';\nimport { assertDefined, assertFalse, assertTrue } from '../shared/error/assert';\nimport { Fragment, JSXNodeImpl, directGetPropsProxyProp, isJSXNode, } from '../shared/jsx/jsx-runtime';\nimport { Slot } from '../shared/jsx/slot.public';\nimport { SSRComment, SSRRaw, SkipRender } from '../shared/jsx/utils.public';\nimport { trackSignal, untrack } from '../use/use-core';\nimport { TaskFlags, cleanupTask, isTask } from '../use/use-task';\nimport { EMPTY_OBJ } from '../shared/utils/flyweight';\nimport { ELEMENT_KEY, ELEMENT_PROPS, ELEMENT_SEQ, OnRenderProp, QContainerAttr, QDefaultSlot, QSlot, QSlotParent, QStyle, QTemplate, dangerouslySetInnerHTML, } from '../shared/utils/markers';\nimport { isPromise } from '../shared/utils/promises';\nimport {} from '../shared/utils/types';\nimport { convertEventNameFromJsxPropToHtmlAttr, getEventNameFromJsxProp, getEventNameScopeFromJsxProp, isHtmlAttributeAnEventName, isJsxPropertyAnEventName, } from '../shared/utils/event-names';\nimport { ChoreType } from '../shared/scheduler';\nimport { hasClassAttr } from '../shared/utils/scoped-styles';\nimport { DEBUG_TYPE, QContainerValue, VirtualType } from '../shared/types';\nimport { ElementVNodeProps, VNodeFlags, VNodeProps, VirtualVNodeProps, } from './types';\nimport { mapApp_findIndx, mapArray_set, vnode_ensureElementInflated, vnode_getAttr, vnode_getDomParentVNode, vnode_getElementName, vnode_getFirstChild, vnode_getNextSibling, vnode_getNode, vnode_getParent, vnode_getProjectionParentComponent, vnode_getProp, vnode_getPropStartIndex, vnode_getText, vnode_getType, vnode_insertBefore, vnode_isElementVNode, vnode_isTextVNode, vnode_isVNode, vnode_isVirtualVNode, vnode_locate, vnode_newElement, vnode_newText, vnode_newVirtual, vnode_remove, vnode_setAttr, vnode_setProp, vnode_setText, vnode_truncate, vnode_walkVNode, } from './vnode';\nimport { getNewElementNamespaceData } from './vnode-namespace';\nimport { WrappedSignal, EffectProperty, isSignal, EffectData } from '../signal/signal';\nimport { executeComponent } from '../shared/component-execution';\nimport { isParentSlotProp, isSlotProp } from '../shared/utils/prop';\nimport { escapeHTML } from '../shared/utils/character-escaping';\nimport { clearSubscriberEffectDependencies, clearVNodeEffectDependencies, } from '../signal/signal-subscriber';\nimport { throwErrorAndStop } from '../shared/utils/log';\nimport { serializeAttribute } from '../shared/utils/styles';\nexport const vnode_diff = (container, jsxNode, vStartNode, scopedStyleIdPrefix) => {\n    let journal = container.$journal$;\n    /**\n     * Stack is used to keep track of the state of the traversal.\n     *\n     * We push current state into the stack before descending into the child, and we pop the state\n     * when we are done with the child.\n     */\n    const stack = [];\n    const asyncQueue = [];\n    ////////////////////////////////\n    //// Traverse state variables\n    ////////////////////////////////\n    let vParent = null;\n    /// Current node we compare against. (Think of it as a cursor.)\n    /// (Node can be null, if we are at the end of the list.)\n    let vCurrent = null;\n    /// When we insert new node we start it here so that we can descend into it.\n    /// NOTE: it can't be stored in `vCurrent` because `vNewCurrent` is in journal\n    /// and is not connected to the tree.\n    let vNewNode = null; // TODO: delete, because journal is on vNode, the above comment no longer applies\n    /// When elements have keys they can be consumed out of order and therefore we can't use nextSibling.\n    /// In such a case this array will contain the elements after the current location.\n    /// The array even indices will contains keys and odd indices the vNode.\n    let vSiblings = null; // See: `SiblingsArray`\n    let vSiblingsIdx = -1;\n    /// Current set of JSX children.\n    let jsxChildren = null;\n    // Current JSX child.\n    let jsxValue = null;\n    let jsxIdx = 0;\n    let jsxCount = 0;\n    // When we descend into children, we need to skip advance() because we just descended.\n    let shouldAdvance = true;\n    /**\n     * When we are rendering inside a projection we don't want to process child components. Child\n     * components will be processed only if the projection is re-projected with a `<Slot>`.\n     *\n     * Example: <Parent> <div> <Child/> </div> </Parent>\n     *\n     * In the above example, the `Child` component will not be processed because it is inside a\n     * projection. Only if the `<Parent>` projects its content with `<Slot>` will the `Child`\n     * component be processed.\n     */\n    // let inContentProjection = false;\n    ////////////////////////////////\n    diff(jsxNode, vStartNode);\n    return drainAsyncQueue();\n    //////////////////////////////////////////////\n    //////////////////////////////////////////////\n    //////////////////////////////////////////////\n    function diff(jsxNode, vStartNode) {\n        assertFalse(vnode_isVNode(jsxNode), 'JSXNode should not be a VNode');\n        assertTrue(vnode_isVNode(vStartNode), 'vStartNode should be a VNode');\n        vParent = vStartNode;\n        vNewNode = null;\n        vCurrent = vnode_getFirstChild(vStartNode);\n        stackPush(jsxNode, true);\n        while (stack.length) {\n            while (jsxIdx < jsxCount) {\n                assertFalse(vParent === vCurrent, \"Parent and current can't be the same\");\n                if (typeof jsxValue === 'string') {\n                    expectText(jsxValue);\n                }\n                else if (typeof jsxValue === 'number') {\n                    expectText(String(jsxValue));\n                }\n                else if (jsxValue && typeof jsxValue === 'object') {\n                    if (Array.isArray(jsxValue)) {\n                        descend(jsxValue, false);\n                    }\n                    else if (isSignal(jsxValue)) {\n                        if (vCurrent) {\n                            clearVNodeEffectDependencies(vCurrent);\n                        }\n                        expectVirtual(VirtualType.WrappedSignal, null);\n                        descend(trackSignal(() => jsxValue.value, (vNewNode || vCurrent), EffectProperty.VNODE, container), true);\n                    }\n                    else if (isPromise(jsxValue)) {\n                        expectVirtual(VirtualType.Awaited, null);\n                        asyncQueue.push(jsxValue, vNewNode || vCurrent);\n                    }\n                    else if (isJSXNode(jsxValue)) {\n                        const type = jsxValue.type;\n                        if (typeof type === 'string') {\n                            expectNoMoreTextNodes();\n                            expectElement(jsxValue, type);\n                            descend(jsxValue.children, true);\n                        }\n                        else if (typeof type === 'function') {\n                            if (type === Fragment) {\n                                expectNoMoreTextNodes();\n                                expectVirtual(VirtualType.Fragment, jsxValue.key);\n                                descend(jsxValue.children, true);\n                            }\n                            else if (type === Slot) {\n                                expectNoMoreTextNodes();\n                                if (!expectSlot()) {\n                                    // nothing to project, so try to render the Slot default content.\n                                    descend(jsxValue.children, true);\n                                }\n                            }\n                            else if (type === Projection) {\n                                expectProjection();\n                                descend(jsxValue.children, true);\n                            }\n                            else if (type === SSRComment) {\n                                expectNoMore();\n                            }\n                            else if (type === SSRRaw) {\n                                expectNoMore();\n                            }\n                            else {\n                                // Must be a component\n                                expectNoMoreTextNodes();\n                                expectComponent(type);\n                            }\n                        }\n                    }\n                }\n                else if (jsxValue === SkipRender) {\n                    // do nothing, we are skipping this node\n                    journal = [];\n                }\n                else {\n                    expectText('');\n                }\n                advance();\n            }\n            expectNoMore();\n            ascend();\n        }\n    }\n    function advance() {\n        if (!shouldAdvance) {\n            shouldAdvance = true;\n            return;\n        }\n        jsxIdx++;\n        if (jsxIdx < jsxCount) {\n            jsxValue = jsxChildren[jsxIdx];\n        }\n        else if (stack[stack.length - 1] === false) {\n            // this was special `descendVNode === false` so pop and try again\n            return ascend();\n        }\n        if (vNewNode !== null) {\n            // We have a new Node.\n            // This means that the `vCurrent` was deemed not useful and we inserted in front of it.\n            // This means that the next node we should look at is the `vCurrent` so just clear the\n            // vNewNode  and try again.\n            vNewNode = null;\n        }\n        else {\n            advanceToNextSibling();\n        }\n    }\n    /**\n     * Advance the `vCurrent` to the next sibling.\n     *\n     * Normally this is just `vCurrent = vnode_getNextSibling(vCurrent)`. However, this gets\n     * complicated if `retrieveChildWithKey` was called, because then we are consuming nodes out of\n     * order and can't rely on `vnode_getNextSibling` and instead we need to go by `vSiblings`.\n     */\n    function peekNextSibling() {\n        if (vSiblings !== null) {\n            // We came across a key, and we moved nodes around. This means we can no longer use\n            // `vnode_getNextSibling` to look at next node and instead we have to go by `vSiblings`.\n            const idx = vSiblingsIdx + SiblingsArray.NextVNode;\n            return idx < vSiblings.length ? vSiblings[idx] : null;\n        }\n        else {\n            // If we don't have a `vNewNode`, than that means we just reconciled the current node.\n            // So advance it.\n            return vCurrent ? vnode_getNextSibling(vCurrent) : null;\n        }\n    }\n    /**\n     * Advance the `vCurrent` to the next sibling.\n     *\n     * Normally this is just `vCurrent = vnode_getNextSibling(vCurrent)`. However, this gets\n     * complicated if `retrieveChildWithKey` was called, because then we are consuming nodes out of\n     * order and can't rely on `vnode_getNextSibling` and instead we need to go by `vSiblings`.\n     */\n    function advanceToNextSibling() {\n        vCurrent = peekNextSibling();\n        if (vSiblings !== null) {\n            vSiblingsIdx += SiblingsArray.Size; // advance;\n        }\n    }\n    /**\n     * @param children\n     * @param descendVNode - If true we are descending into vNode; This is set to false if we come\n     *   across an array in jsx, and we need to descend into the array without actually descending\n     *   into the vNode.\n     *\n     *   Example:\n     *\n     *   ```\n     *   <>\n     *   before\n     *   {[1,2].map((i) => <span>{i}</span>)}\n     *   after\n     *   </>\n     * ```\n     *\n     *   In the above example all nodes are on same level so we don't `descendVNode` even thought there\n     *   is an array produced by the `map` function.\n     */\n    function descend(children, descendVNode) {\n        if (children == null) {\n            expectNoChildren();\n            return;\n        }\n        stackPush(children, descendVNode);\n        if (descendVNode) {\n            assertDefined(vCurrent || vNewNode, 'Expecting vCurrent to be defined.');\n            vSiblings = null;\n            vSiblingsIdx = -1;\n            vParent = vNewNode || vCurrent;\n            vCurrent = vnode_getFirstChild(vParent);\n            vNewNode = null;\n        }\n        shouldAdvance = false;\n    }\n    function ascend() {\n        const descendVNode = stack.pop(); // boolean: descendVNode\n        if (descendVNode) {\n            vSiblingsIdx = stack.pop();\n            vSiblings = stack.pop();\n            vNewNode = stack.pop();\n            vCurrent = stack.pop();\n            vParent = stack.pop();\n        }\n        jsxValue = stack.pop();\n        jsxCount = stack.pop();\n        jsxIdx = stack.pop();\n        jsxChildren = stack.pop();\n        advance();\n    }\n    function stackPush(children, descendVNode) {\n        stack.push(jsxChildren, jsxIdx, jsxCount, jsxValue);\n        if (descendVNode) {\n            stack.push(vParent, vCurrent, vNewNode, vSiblings, vSiblingsIdx);\n        }\n        stack.push(descendVNode);\n        if (Array.isArray(children)) {\n            jsxIdx = 0;\n            jsxCount = children.length;\n            jsxChildren = children;\n            jsxValue = jsxCount > 0 ? children[0] : null;\n        }\n        else if (children === undefined) {\n            // no children\n            jsxIdx = 0;\n            jsxValue = null;\n            jsxChildren = null;\n            jsxCount = 0;\n        }\n        else {\n            jsxIdx = 0;\n            jsxValue = children;\n            jsxChildren = null;\n            jsxCount = 1;\n        }\n    }\n    function getInsertBefore() {\n        if (vNewNode) {\n            return vCurrent;\n        }\n        else if (vSiblings !== null) {\n            const nextIdx = vSiblingsIdx + SiblingsArray.NextVNode;\n            return nextIdx < vSiblings.length ? vSiblings[nextIdx] : null;\n        }\n        else {\n            return peekNextSibling();\n        }\n    }\n    /////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////\n    function descendContentToProject(children, host) {\n        if (!Array.isArray(children)) {\n            children = [children];\n        }\n        if (children.length) {\n            const createProjectionJSXNode = (slotName) => {\n                return new JSXNodeImpl(Projection, EMPTY_OBJ, null, [], 0, slotName);\n            };\n            const projections = [];\n            if (host) {\n                // we need to create empty projections for all the slots to remove unused slots content\n                for (let i = vnode_getPropStartIndex(host); i < host.length; i = i + 2) {\n                    const prop = host[i];\n                    if (isSlotProp(prop)) {\n                        const slotName = prop;\n                        projections.push(slotName);\n                        projections.push(createProjectionJSXNode(slotName));\n                    }\n                }\n            }\n            /// STEP 1: Bucketize the children based on the projection name.\n            for (let i = 0; i < children.length; i++) {\n                const child = children[i];\n                const slotName = String((isJSXNode(child) && directGetPropsProxyProp(child, QSlot)) || QDefaultSlot);\n                const idx = mapApp_findIndx(projections, slotName, 0);\n                let jsxBucket;\n                if (idx >= 0) {\n                    jsxBucket = projections[idx + 1];\n                }\n                else {\n                    projections.splice(~idx, 0, slotName, (jsxBucket = createProjectionJSXNode(slotName)));\n                }\n                const removeProjection = child === false;\n                if (!removeProjection) {\n                    jsxBucket.children.push(child);\n                }\n            }\n            /// STEP 2: remove the names\n            for (let i = projections.length - 2; i >= 0; i = i - 2) {\n                projections.splice(i, 1);\n            }\n            descend(projections, true);\n        }\n    }\n    function expectProjection() {\n        const slotName = jsxValue.key;\n        // console.log('expectProjection', JSON.stringify(slotName));\n        vCurrent = vnode_getProp(vParent, // The parent is the component and it should have our portal.\n        slotName, (id) => vnode_locate(container.rootVNode, id));\n        if (vCurrent == null) {\n            vNewNode = vnode_newVirtual();\n            // you may be tempted to add the projection into the current parent, but\n            // that is wrong. We don't yet know if the projection will be projected, so\n            // we should leave it unattached.\n            // vNewNode[VNodeProps.parent] = vParent;\n            isDev && vnode_setProp(vNewNode, DEBUG_TYPE, VirtualType.Projection);\n            isDev && vnode_setProp(vNewNode, 'q:code', 'expectProjection');\n            vnode_setProp(vNewNode, QSlot, slotName);\n            vnode_setProp(vNewNode, QSlotParent, vParent);\n            vnode_setProp(vParent, slotName, vNewNode);\n        }\n    }\n    function expectSlot() {\n        const vHost = vnode_getProjectionParentComponent(vParent, container.rootVNode);\n        const slotNameKey = getSlotNameKey(vHost);\n        // console.log('expectSlot', JSON.stringify(slotNameKey));\n        const vProjectedNode = vHost\n            ? vnode_getProp(vHost, slotNameKey, \n            // for slots this id is vnode ref id\n            null // Projections should have been resolved through container.ensureProjectionResolved\n            //(id) => vnode_locate(container.rootVNode, id)\n            )\n            : null;\n        // console.log('   ', String(vHost), String(vProjectedNode));\n        if (vProjectedNode == null) {\n            // Nothing to project, so render content of the slot.\n            vnode_insertBefore(journal, vParent, (vNewNode = vnode_newVirtual()), vCurrent && getInsertBefore());\n            vnode_setProp(vNewNode, QSlot, slotNameKey);\n            vHost && vnode_setProp(vHost, slotNameKey, vNewNode);\n            isDev && vnode_setProp(vNewNode, DEBUG_TYPE, VirtualType.Projection);\n            isDev && vnode_setProp(vNewNode, 'q:code', 'expectSlot' + count++);\n            return false;\n        }\n        else if (vProjectedNode === vCurrent) {\n            // All is good.\n            // console.log('  NOOP', String(vCurrent));\n        }\n        else {\n            // move from q:template to the target node\n            vnode_insertBefore(journal, vParent, (vNewNode = vProjectedNode), vCurrent && getInsertBefore());\n            vnode_setProp(vNewNode, QSlot, slotNameKey);\n            vHost && vnode_setProp(vHost, slotNameKey, vNewNode);\n            isDev && vnode_setProp(vNewNode, DEBUG_TYPE, VirtualType.Projection);\n            isDev && vnode_setProp(vNewNode, 'q:code', 'expectSlot' + count++);\n        }\n        return true;\n    }\n    function getSlotNameKey(vHost) {\n        const constProps = jsxValue.constProps;\n        if (constProps && typeof constProps == 'object' && 'name' in constProps) {\n            const constValue = constProps.name;\n            if (vHost && constValue instanceof WrappedSignal) {\n                return trackSignal(() => constValue.value, vHost, EffectProperty.COMPONENT, container);\n            }\n        }\n        return directGetPropsProxyProp(jsxValue, 'name') || QDefaultSlot;\n    }\n    function drainAsyncQueue() {\n        while (asyncQueue.length) {\n            const jsxNode = asyncQueue.shift();\n            const vHostNode = asyncQueue.shift();\n            if (isPromise(jsxNode)) {\n                return jsxNode.then((jsxNode) => {\n                    diff(jsxNode, vHostNode);\n                    return drainAsyncQueue();\n                });\n            }\n            else {\n                diff(jsxNode, vHostNode);\n            }\n        }\n    }\n    function expectNoChildren() {\n        const vFirstChild = vCurrent && vnode_getFirstChild(vCurrent);\n        if (vFirstChild !== null) {\n            let vChild = vFirstChild;\n            while (vChild) {\n                cleanup(container, vChild);\n                vChild = vnode_getNextSibling(vChild);\n            }\n            vnode_truncate(journal, vCurrent, vFirstChild);\n        }\n    }\n    /** Expect no more nodes - Any nodes which are still at cursor, need to be removed. */\n    function expectNoMore() {\n        assertFalse(vParent === vCurrent, \"Parent and current can't be the same\");\n        if (vCurrent !== null) {\n            while (vCurrent) {\n                const toRemove = vCurrent;\n                advanceToNextSibling();\n                cleanup(container, toRemove);\n                if (vParent === vnode_getParent(toRemove)) {\n                    // If we are diffing projection than the parent is not the parent of the node.\n                    // If that is the case we don't want to remove the node from the parent.\n                    vnode_remove(journal, vParent, toRemove, true);\n                }\n            }\n        }\n    }\n    function expectNoMoreTextNodes() {\n        while (vCurrent !== null && vnode_isTextVNode(vCurrent)) {\n            cleanup(container, vCurrent);\n            const toRemove = vCurrent;\n            advanceToNextSibling();\n            vnode_remove(journal, vParent, toRemove, true);\n        }\n    }\n    /**\n     * Returns whether `qDispatchEvent` needs patching. This is true when one of the `jsx` argument's\n     * const props has the name of an event.\n     *\n     * @returns {boolean}\n     */\n    function createNewElement(jsx, elementName) {\n        const element = createElementWithNamespace(elementName);\n        const { constProps } = jsx;\n        let needsQDispatchEventPatch = false;\n        if (constProps) {\n            // Const props are, well, constant, they will never change!\n            // For this reason we can cheat and write them directly into the DOM.\n            // We never tell the vNode about them saving us time and memory.\n            for (const key in constProps) {\n                let value = constProps[key];\n                if (isJsxPropertyAnEventName(key)) {\n                    // So for event handlers we must add them to the vNode so that qwikloader can look them up\n                    // But we need to mark them so that they don't get pulled into the diff.\n                    const eventName = getEventNameFromJsxProp(key);\n                    const scope = getEventNameScopeFromJsxProp(key);\n                    vnode_setProp(vNewNode, HANDLER_PREFIX + ':' + scope + ':' + eventName, value);\n                    if (eventName) {\n                        registerQwikLoaderEvent(eventName);\n                    }\n                    needsQDispatchEventPatch = true;\n                    continue;\n                }\n                if (key === 'ref') {\n                    if (isSignal(value)) {\n                        value.value = element;\n                        continue;\n                    }\n                    else if (typeof value === 'function') {\n                        value(element);\n                        continue;\n                    }\n                }\n                if (isSignal(value)) {\n                    const signalData = new EffectData({\n                        $scopedStyleIdPrefix$: scopedStyleIdPrefix,\n                        $isConst$: true,\n                    });\n                    value = trackSignal(() => value.value, vNewNode, key, container, signalData);\n                }\n                if (key === dangerouslySetInnerHTML) {\n                    element.innerHTML = value;\n                    element.setAttribute(QContainerAttr, QContainerValue.HTML);\n                    continue;\n                }\n                if (elementName === 'textarea' && key === 'value') {\n                    if (typeof value !== 'string') {\n                        if (isDev) {\n                            throwErrorAndStop('The value of the textarea must be a string');\n                        }\n                        continue;\n                    }\n                    element.value = escapeHTML(value);\n                    continue;\n                }\n                value = serializeAttribute(key, value, scopedStyleIdPrefix);\n                if (value != null) {\n                    element.setAttribute(key, String(value));\n                }\n            }\n        }\n        const key = jsx.key;\n        if (key) {\n            element.setAttribute(ELEMENT_KEY, key);\n            vnode_setProp(vNewNode, ELEMENT_KEY, key);\n        }\n        // append class attribute if styleScopedId exists and there is no class attribute\n        const classAttributeExists = hasClassAttr(jsx.varProps) || (jsx.constProps && hasClassAttr(jsx.constProps));\n        if (!classAttributeExists && scopedStyleIdPrefix) {\n            element.setAttribute('class', scopedStyleIdPrefix);\n        }\n        vnode_insertBefore(journal, vParent, vNewNode, vCurrent);\n        return needsQDispatchEventPatch;\n    }\n    function createElementWithNamespace(elementName) {\n        const domParentVNode = vnode_getDomParentVNode(vParent);\n        const { elementNamespace, elementNamespaceFlag } = getNewElementNamespaceData(domParentVNode, elementName);\n        const element = container.document.createElementNS(elementNamespace, elementName);\n        vNewNode = vnode_newElement(element, elementName);\n        vNewNode[VNodeProps.flags] |= elementNamespaceFlag;\n        return element;\n    }\n    function expectElement(jsx, elementName) {\n        const isSameElementName = vCurrent && vnode_isElementVNode(vCurrent) && elementName === vnode_getElementName(vCurrent);\n        const jsxKey = jsx.key;\n        let needsQDispatchEventPatch = false;\n        if (!isSameElementName || jsxKey !== getKey(vCurrent)) {\n            // So we have a key and it does not match the current node.\n            // We need to do a forward search to find it.\n            // The complication is that once we start taking nodes out of order we can't use `vnode_getNextSibling`\n            vNewNode = retrieveChildWithKey(elementName, jsxKey);\n            if (vNewNode === null) {\n                // No existing node with key exists, just create a new one.\n                needsQDispatchEventPatch = createNewElement(jsx, elementName);\n            }\n            else {\n                // Existing keyed node\n                vnode_insertBefore(journal, vParent, vNewNode, vCurrent);\n            }\n        }\n        // reconcile attributes\n        const jsxAttrs = [];\n        const props = jsx.varProps;\n        for (const key in props) {\n            let value = props[key];\n            value = serializeAttribute(key, value, scopedStyleIdPrefix);\n            if (value != null) {\n                mapArray_set(jsxAttrs, key, value, 0);\n            }\n        }\n        if (jsxKey !== null) {\n            mapArray_set(jsxAttrs, ELEMENT_KEY, jsxKey, 0);\n        }\n        const vNode = (vNewNode || vCurrent);\n        needsQDispatchEventPatch = setBulkProps(vNode, jsxAttrs) || needsQDispatchEventPatch;\n        if (needsQDispatchEventPatch) {\n            // Event handler needs to be patched onto the element.\n            const element = vnode_getNode(vNode);\n            if (!element.qDispatchEvent) {\n                element.qDispatchEvent = (event, scope) => {\n                    const eventName = event.type;\n                    const eventProp = ':' + scope.substring(1) + ':' + eventName;\n                    const qrls = [\n                        vnode_getProp(vNode, eventProp, null),\n                        vnode_getProp(vNode, HANDLER_PREFIX + eventProp, null),\n                    ];\n                    let returnValue = false;\n                    qrls.flat(2).forEach((qrl) => {\n                        if (qrl) {\n                            const value = qrl(event, element);\n                            returnValue = returnValue || value === true;\n                        }\n                    });\n                    return returnValue;\n                };\n            }\n        }\n    }\n    /** @param tag Returns true if `qDispatchEvent` needs patching */\n    function setBulkProps(vnode, srcAttrs) {\n        vnode_ensureElementInflated(vnode);\n        const dstAttrs = vnode;\n        let srcIdx = 0;\n        const srcLength = srcAttrs.length;\n        let dstIdx = ElementVNodeProps.PROPS_OFFSET;\n        let dstLength = dstAttrs.length;\n        let srcKey = srcIdx < srcLength ? srcAttrs[srcIdx++] : null;\n        let dstKey = dstIdx < dstLength ? dstAttrs[dstIdx++] : null;\n        let patchEventDispatch = false;\n        const record = (key, value) => {\n            if (key.startsWith(':')) {\n                vnode_setProp(vnode, key, value);\n                return;\n            }\n            if (key === 'ref') {\n                const element = vnode_getNode(vnode);\n                if (isSignal(value)) {\n                    value.value = element;\n                    return;\n                }\n                else if (typeof value === 'function') {\n                    value(element);\n                    return;\n                }\n            }\n            if (isSignal(value)) {\n                value = untrack(() => value.value);\n            }\n            vnode_setAttr(journal, vnode, key, value);\n            if (value === null) {\n                // if we set `null` than attribute was removed and we need to shorten the dstLength\n                dstLength = dstAttrs.length;\n            }\n        };\n        const recordJsxEvent = (key, value) => {\n            const eventName = getEventNameFromJsxProp(key);\n            if (eventName) {\n                const scope = getEventNameScopeFromJsxProp(key);\n                record(':' + scope + ':' + eventName, value);\n            }\n            // add an event attr with empty value for qwikloader element selector.\n            // We don't need value here. For ssr this value is a QRL,\n            // but for CSR value should be just empty\n            const htmlEvent = convertEventNameFromJsxPropToHtmlAttr(key);\n            if (htmlEvent) {\n                record(htmlEvent, '');\n            }\n            // register an event for qwik loader\n            if (eventName) {\n                registerQwikLoaderEvent(eventName);\n            }\n        };\n        while (srcKey !== null || dstKey !== null) {\n            if (dstKey?.startsWith(HANDLER_PREFIX) || dstKey == ELEMENT_KEY) {\n                // These are a special keys which we use to mark the event handlers as immutable or\n                // element key we need to ignore them.\n                dstIdx++; // skip the destination value, we don't care about it.\n                dstKey = dstIdx < dstLength ? dstAttrs[dstIdx++] : null;\n            }\n            else if (srcKey == null) {\n                // Source has more keys, so we need to remove them from destination\n                if (dstKey && isHtmlAttributeAnEventName(dstKey)) {\n                    patchEventDispatch = true;\n                    dstIdx++;\n                }\n                else {\n                    record(dstKey, null);\n                    dstIdx--;\n                }\n                dstKey = dstIdx < dstLength ? dstAttrs[dstIdx++] : null;\n            }\n            else if (dstKey == null) {\n                // Destination has more keys, so we need to insert them from source.\n                const isEvent = isJsxPropertyAnEventName(srcKey);\n                if (isEvent) {\n                    // Special handling for events\n                    patchEventDispatch = true;\n                    recordJsxEvent(srcKey, srcAttrs[srcIdx]);\n                }\n                else {\n                    record(srcKey, srcAttrs[srcIdx]);\n                }\n                srcIdx++;\n                srcKey = srcIdx < srcLength ? srcAttrs[srcIdx++] : null;\n            }\n            else if (srcKey == dstKey) {\n                const srcValue = srcAttrs[srcIdx++];\n                const dstValue = dstAttrs[dstIdx++];\n                if (srcValue !== dstValue) {\n                    record(dstKey, srcValue);\n                }\n                srcKey = srcIdx < srcLength ? srcAttrs[srcIdx++] : null;\n                dstKey = dstIdx < dstLength ? dstAttrs[dstIdx++] : null;\n            }\n            else if (srcKey < dstKey) {\n                // Destination is missing the key, so we need to insert it.\n                if (isJsxPropertyAnEventName(srcKey)) {\n                    // Special handling for events\n                    patchEventDispatch = true;\n                    recordJsxEvent(srcKey, srcAttrs[srcIdx]);\n                }\n                else {\n                    record(srcKey, srcAttrs[srcIdx]);\n                }\n                srcIdx++;\n                // advance srcValue\n                srcKey = srcIdx < srcLength ? srcAttrs[srcIdx++] : null;\n                // we need to increment dstIdx too, because we added destination key and value to the VNode\n                // and dstAttrs is a reference to the VNode\n                dstIdx++;\n                dstKey = dstIdx < dstLength ? dstAttrs[dstIdx++] : null;\n            }\n            else {\n                // Source is missing the key, so we need to remove it from destination.\n                if (isHtmlAttributeAnEventName(dstKey)) {\n                    patchEventDispatch = true;\n                    dstIdx++;\n                }\n                else {\n                    record(dstKey, null);\n                    dstIdx--;\n                }\n                dstKey = dstIdx < dstLength ? dstAttrs[dstIdx++] : null;\n            }\n        }\n        return patchEventDispatch;\n    }\n    function registerQwikLoaderEvent(eventName) {\n        const window = container.document.defaultView;\n        if (window) {\n            (window.qwikevents || (window.qwikevents = [])).push(eventName);\n        }\n    }\n    /**\n     * Retrieve the child with the given key.\n     *\n     * By retrieving the child with the given key we are effectively removing it from the list of\n     * future elements. This means that we can't just use `vnode_getNextSibling` to find the next\n     * instead we have to keep track of the elements we have already seen.\n     *\n     * We call this materializing the elements.\n     *\n     * `vSiblingsIdx`:\n     *\n     * - -1: Not materialized\n     * - Positive number - the index of the next element in the `vSiblings` array.\n     *\n     * By retrieving the child with the given key we are effectively removing it from the list (hence\n     * we need to splice the `vSiblings` array).\n     *\n     * @param key\n     * @returns Array where: (see: `SiblingsArray`)\n     *\n     *   - Idx%3 == 0 nodeName\n     *   - Idx%3 == 1 key\n     *   - Idx%3 == 2 vNode\n     */\n    function retrieveChildWithKey(nodeName, key) {\n        let vNodeWithKey = null;\n        if (vSiblingsIdx === -1) {\n            // it is not materialized; so materialize it.\n            vSiblings = [];\n            vSiblingsIdx = 0;\n            let vNode = vCurrent;\n            while (vNode) {\n                const name = vnode_isElementVNode(vNode) ? vnode_getElementName(vNode) : null;\n                const vKey = getKey(vNode) || getComponentHash(vNode, container.$getObjectById$);\n                if (vNodeWithKey === null && vKey == key && name == nodeName) {\n                    vNodeWithKey = vNode;\n                }\n                else {\n                    // we only add the elements which we did not find yet.\n                    vSiblings.push(name, vKey, vNode);\n                }\n                vNode = vnode_getNextSibling(vNode);\n            }\n        }\n        else {\n            for (let idx = vSiblingsIdx; idx < vSiblings.length; idx += SiblingsArray.Size) {\n                const name = vSiblings[idx + SiblingsArray.Name];\n                const vKey = vSiblings[idx + SiblingsArray.Key];\n                if (vKey === key && name === nodeName) {\n                    vNodeWithKey = vSiblings[idx + SiblingsArray.VNode];\n                    // remove the node from the siblings array\n                    vSiblings?.splice(idx, SiblingsArray.Size);\n                    break;\n                }\n            }\n        }\n        return vNodeWithKey;\n    }\n    function expectVirtual(type, jsxKey) {\n        if (vCurrent &&\n            vnode_isVirtualVNode(vCurrent) &&\n            vnode_getProp(vCurrent, ELEMENT_KEY, null) === jsxKey) {\n            // All is good.\n            return;\n        }\n        else if (jsxKey !== null) {\n            // We have a key find it\n            vNewNode = retrieveChildWithKey(null, jsxKey);\n            if (vNewNode != null) {\n                // We found it, move it up.\n                vnode_insertBefore(journal, vParent, (vNewNode = vnode_newVirtual()), vCurrent && getInsertBefore());\n                return;\n            }\n        }\n        // Did not find it, insert a new one.\n        vnode_insertBefore(journal, vParent, (vNewNode = vnode_newVirtual()), vCurrent && getInsertBefore());\n        vnode_setProp(vNewNode, ELEMENT_KEY, jsxKey);\n        isDev && vnode_setProp((vNewNode || vCurrent), DEBUG_TYPE, type);\n    }\n    function expectComponent(component) {\n        const componentMeta = component[SERIALIZABLE_STATE];\n        let host = (vNewNode || vCurrent);\n        if (componentMeta) {\n            const jsxProps = jsxValue.props;\n            // QComponent\n            let shouldRender = false;\n            const [componentQRL] = componentMeta;\n            const componentHash = componentQRL.$hash$;\n            const vNodeComponentHash = getComponentHash(host, container.$getObjectById$);\n            const lookupKey = jsxValue.key || componentHash;\n            const vNodeLookupKey = getKey(host) || vNodeComponentHash;\n            const lookupKeysAreEqual = lookupKey === vNodeLookupKey;\n            const hashesAreEqual = componentHash === vNodeComponentHash;\n            if (!lookupKeysAreEqual) {\n                // See if we already have this component later on.\n                vNewNode = retrieveChildWithKey(null, lookupKey);\n                if (vNewNode) {\n                    // We found the component, move it up.\n                    vnode_insertBefore(journal, vParent, vNewNode, vCurrent);\n                }\n                else {\n                    // We did not find the component, create it.\n                    insertNewComponent(host, componentQRL, jsxProps);\n                }\n                host = vNewNode;\n                shouldRender = true;\n            }\n            else if (!hashesAreEqual) {\n                insertNewComponent(host, componentQRL, jsxProps);\n                if (vNewNode) {\n                    if (host) {\n                        // TODO(varixo): not sure why we need to copy flags here.\n                        vNewNode[VNodeProps.flags] = host[VNodeProps.flags];\n                    }\n                    host = vNewNode;\n                    shouldRender = true;\n                }\n            }\n            if (host) {\n                const vNodeProps = vnode_getProp(host, ELEMENT_PROPS, container.$getObjectById$);\n                shouldRender = shouldRender || propsDiffer(jsxProps, vNodeProps);\n                if (shouldRender) {\n                    container.$scheduler$(ChoreType.COMPONENT, host, componentQRL, jsxProps);\n                }\n            }\n            jsxValue.children != null && descendContentToProject(jsxValue.children, host);\n        }\n        else {\n            // Inline Component\n            vnode_insertBefore(journal, vParent, (vNewNode = vnode_newVirtual()), vCurrent && getInsertBefore());\n            isDev && vnode_setProp(vNewNode, DEBUG_TYPE, VirtualType.InlineComponent);\n            vnode_setProp(vNewNode, ELEMENT_PROPS, jsxValue.props);\n            host = vNewNode;\n            let component$Host = host;\n            // Find the closest component host which has `OnRender` prop.\n            while (component$Host &&\n                (vnode_isVirtualVNode(component$Host)\n                    ? vnode_getProp(component$Host, OnRenderProp, null) === null\n                    : true)) {\n                component$Host = vnode_getParent(component$Host);\n            }\n            const jsxOutput = executeComponent(container, host, (component$Host || container.rootVNode), component, jsxValue.props);\n            asyncQueue.push(jsxOutput, host);\n        }\n    }\n    function insertNewComponent(host, componentQRL, jsxProps) {\n        if (host) {\n            clearVNodeEffectDependencies(host);\n        }\n        vnode_insertBefore(journal, vParent, (vNewNode = vnode_newVirtual()), vCurrent && getInsertBefore());\n        isDev && vnode_setProp(vNewNode, DEBUG_TYPE, VirtualType.Component);\n        container.setHostProp(vNewNode, OnRenderProp, componentQRL);\n        container.setHostProp(vNewNode, ELEMENT_PROPS, jsxProps);\n        container.setHostProp(vNewNode, ELEMENT_KEY, jsxValue.key);\n    }\n    function expectText(text) {\n        if (vCurrent !== null) {\n            const type = vnode_getType(vCurrent);\n            if (type === 3 /* Text */) {\n                if (text !== vnode_getText(vCurrent)) {\n                    vnode_setText(journal, vCurrent, text);\n                    return;\n                }\n                return;\n            }\n        }\n        vnode_insertBefore(journal, vParent, (vNewNode = vnode_newText(container.document.createTextNode(text), text)), vCurrent);\n    }\n};\nexport const isQStyleVNode = (vNode) => {\n    return (vnode_isElementVNode(vNode) &&\n        vnode_getElementName(vNode) === 'style' &&\n        vnode_getAttr(vNode, QStyle) !== null);\n};\n/**\n * Retrieve the key from the VNode.\n *\n * @param vNode - VNode to retrieve the key from\n * @returns Key\n */\nfunction getKey(vNode) {\n    if (vNode == null) {\n        return null;\n    }\n    return vnode_getProp(vNode, ELEMENT_KEY, null);\n}\n/**\n * Retrieve the component hash from the VNode.\n *\n * @param vNode - VNode to retrieve the key from\n * @param getObject - Function to retrieve the object by id for QComponent QRL\n * @returns Hash\n */\nfunction getComponentHash(vNode, getObject) {\n    if (vNode == null) {\n        return null;\n    }\n    const qrl = vnode_getProp(vNode, OnRenderProp, getObject);\n    return qrl ? qrl.$hash$ : null;\n}\n/**\n * Marker class for JSX projection.\n *\n * Assume you have component like so\n *\n * ```\n * <SomeComponent>\n *   some-text\n *   <span q:slot=\"name\">some more text</span>\n *   more-text\n * </SomeComponent>\n * ```\n *\n * Before the `<SomeCompetent/>` is processed its children are transformed into:\n *\n * ```\n *   <Projection q:slot=\"\">\n *     some-text\n *     more-text\n *   </Projection>\n *   <Projection q:slot=\"name\">\n *     <span q:slot=\"name\">some more text</span>\n *   </Projection>\n * ```\n */\nfunction Projection() { }\nfunction propsDiffer(src, dst) {\n    if (!src || !dst) {\n        return true;\n    }\n    let srcKeys = removeChildrenKey(Object.keys(src));\n    let dstKeys = removeChildrenKey(Object.keys(dst));\n    if (srcKeys.length !== dstKeys.length) {\n        return true;\n    }\n    srcKeys = srcKeys.sort();\n    dstKeys = dstKeys.sort();\n    for (let idx = 0; idx < srcKeys.length; idx++) {\n        const srcKey = srcKeys[idx];\n        const dstKey = dstKeys[idx];\n        if (srcKey !== dstKey || src[srcKey] !== dst[dstKey]) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction removeChildrenKey(keys) {\n    const childrenIdx = keys.indexOf('children');\n    if (childrenIdx !== -1) {\n        keys.splice(childrenIdx, 1);\n    }\n    return keys;\n}\n/**\n * If vnode is removed, it is necessary to release all subscriptions associated with it.\n *\n * This function will traverse the vnode tree in depth-first order and release all subscriptions.\n *\n * The function takes into account:\n *\n * - Projection nodes by not recursing into them.\n * - Component nodes by recursing into the component content nodes (which may be projected).\n */\nexport function cleanup(container, vNode) {\n    let vCursor = vNode;\n    // Depth first traversal\n    if (vnode_isTextVNode(vNode)) {\n        // Text nodes don't have subscriptions or children;\n        return;\n    }\n    let vParent = null;\n    do {\n        const type = vCursor[VNodeProps.flags];\n        if (type & VNodeFlags.ELEMENT_OR_VIRTUAL_MASK) {\n            // Only elements and virtual nodes need to be traversed for children\n            if (type & VNodeFlags.Virtual) {\n                // Only virtual nodes have subscriptions\n                clearVNodeEffectDependencies(vCursor);\n                markVNodeAsDeleted(vCursor);\n                const seq = container.getHostProp(vCursor, ELEMENT_SEQ);\n                if (seq) {\n                    for (let i = 0; i < seq.length; i++) {\n                        const obj = seq[i];\n                        if (isTask(obj)) {\n                            const task = obj;\n                            clearSubscriberEffectDependencies(task);\n                            if (task.$flags$ & TaskFlags.VISIBLE_TASK) {\n                                container.$scheduler$(ChoreType.CLEANUP_VISIBLE, task);\n                            }\n                            else {\n                                cleanupTask(task);\n                            }\n                        }\n                    }\n                }\n            }\n            const isComponent = type & VNodeFlags.Virtual &&\n                vnode_getProp(vCursor, OnRenderProp, null) !== null;\n            if (isComponent) {\n                // SPECIAL CASE: If we are a component, we need to descend into the projected content and release the content.\n                const attrs = vCursor;\n                for (let i = VirtualVNodeProps.PROPS_OFFSET; i < attrs.length; i = i + 2) {\n                    const key = attrs[i];\n                    if (!isParentSlotProp(key) && isSlotProp(key)) {\n                        const value = attrs[i + 1];\n                        if (value) {\n                            attrs[i + 1] = null; // prevent infinite loop\n                            const projection = typeof value === 'string'\n                                ? vnode_locate(container.rootVNode, value)\n                                : value;\n                            let projectionChild = vnode_getFirstChild(projection);\n                            while (projectionChild) {\n                                cleanup(container, projectionChild);\n                                projectionChild = vnode_getNextSibling(projectionChild);\n                            }\n                            cleanupStaleUnclaimedProjection(container.$journal$, projection);\n                        }\n                    }\n                }\n            }\n            const isProjection = type & VNodeFlags.Virtual && vnode_getProp(vCursor, QSlot, null) !== null;\n            // Descend into children\n            if (!isProjection) {\n                // Only if it is not a projection\n                const vFirstChild = vnode_getFirstChild(vCursor);\n                if (vFirstChild) {\n                    vCursor = vFirstChild;\n                    continue;\n                }\n            }\n            else if (vCursor === vNode) {\n                /**\n                 * If it is a projection and we are at the root, then we should only walk the children to\n                 * materialize the projection content. This is because we could have references in the vnode\n                 * refs map which need to be materialized before cleanup.\n                 */\n                const vFirstChild = vnode_getFirstChild(vCursor);\n                if (vFirstChild) {\n                    vnode_walkVNode(vFirstChild);\n                    return;\n                }\n            }\n        }\n        // Out of children\n        if (vCursor === vNode) {\n            // we are where we started, this means that vNode has no children, so we are done.\n            return;\n        }\n        // Out of children, go to next sibling\n        const vNextSibling = vnode_getNextSibling(vCursor);\n        if (vNextSibling) {\n            vCursor = vNextSibling;\n            continue;\n        }\n        // Out of siblings, go to parent\n        vParent = vnode_getParent(vCursor);\n        while (vParent) {\n            if (vParent === vNode) {\n                // We are back where we started, we are done.\n                return;\n            }\n            const vNextParentSibling = vnode_getNextSibling(vParent);\n            if (vNextParentSibling) {\n                vCursor = vNextParentSibling;\n                break;\n            }\n            vParent = vnode_getParent(vParent);\n        }\n        if (vParent == null) {\n            // We are done.\n            return;\n        }\n    } while (true);\n}\nfunction cleanupStaleUnclaimedProjection(journal, projection) {\n    // we are removing a node where the projection would go after slot render.\n    // This is not needed, so we need to cleanup still unclaimed projection\n    const projectionParent = vnode_getParent(projection);\n    if (projectionParent) {\n        const projectionParentType = projectionParent[VNodeProps.flags];\n        if (projectionParentType & VNodeFlags.Element &&\n            vnode_getElementName(projectionParent) === QTemplate) {\n            // if parent is the q:template element then projection is still unclaimed - remove it\n            vnode_remove(journal, projectionParent, projection, true);\n        }\n    }\n}\nfunction markVNodeAsDeleted(vCursor) {\n    /**\n     * Marks vCursor as deleted. We need to do this to prevent chores from running after the vnode is\n     * removed. (for example signal subscriptions)\n     */\n    vCursor[VNodeProps.flags] |= VNodeFlags.Deleted;\n}\n/**\n * This marks the property as immutable. It is needed for the QRLs so that QwikLoader can get a hold\n * of them. This character must be `:` so that the `vnode_getAttr` can ignore them.\n */\nconst HANDLER_PREFIX = ':';\nlet count = 0;\nvar SiblingsArray;\n(function (SiblingsArray) {\n    SiblingsArray[SiblingsArray[\"Name\"] = 0] = \"Name\";\n    SiblingsArray[SiblingsArray[\"Key\"] = 1] = \"Key\";\n    SiblingsArray[SiblingsArray[\"VNode\"] = 2] = \"VNode\";\n    SiblingsArray[SiblingsArray[\"Size\"] = 3] = \"Size\";\n    SiblingsArray[SiblingsArray[\"NextVNode\"] = 5] = \"NextVNode\";\n})(SiblingsArray || (SiblingsArray = {}));\n//# sourceMappingURL=data:application/json;base64,","import { dollar } from './qrl.public';\n// <docs markdown=\"../readme.md#implicit$FirstArg\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#implicit$FirstArg instead)\n/**\n * Create a `____$(...)` convenience method from `___(...)`.\n *\n * It is very common for functions to take a lazy-loadable resource as a first argument. For this\n * reason, the Qwik Optimizer automatically extracts the first argument from any function which ends\n * in `$`.\n *\n * This means that `foo$(arg0)` and `foo($(arg0))` are equivalent with respect to Qwik Optimizer.\n * The former is just a shorthand for the latter.\n *\n * For example, these function calls are equivalent:\n *\n * - `component$(() => {...})` is same as `component($(() => {...}))`\n *\n * ```tsx\n * export function myApi(callback: QRL<() => void>): void {\n *   // ...\n * }\n *\n * export const myApi$ = implicit$FirstArg(myApi);\n * // type of myApi$: (callback: () => void): void\n *\n * // can be used as:\n * myApi$(() => console.log('callback'));\n *\n * // will be transpiled to:\n * // FILE: <current file>\n * myApi(qrl('./chunk-abc.js', 'callback'));\n *\n * // FILE: chunk-abc.js\n * export const callback = () => console.log('callback');\n * ```\n *\n * @param fn - A function that should have its first argument automatically `$`.\n * @public\n */\n// </docs>\nexport const implicit$FirstArg = (fn) => {\n    return function (first, ...rest) {\n        return fn.call(null, dollar(first), ...rest);\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wbGljaXRfZG9sbGFyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3NoYXJlZC9xcmwvaW1wbGljaXRfZG9sbGFyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQVksTUFBTSxjQUFjLENBQUM7QUFFaEQsbURBQW1EO0FBQ25ELHlDQUF5QztBQUN6QyxnREFBZ0Q7QUFDaEQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUNHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQy9CLEVBQTJDLEVBQ0wsRUFBRTtJQUN4QyxPQUFPLFVBQVUsS0FBWSxFQUFFLEdBQUcsSUFBVTtRQUMxQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQy9DLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRvbGxhciwgdHlwZSBRUkwgfSBmcm9tICcuL3FybC5wdWJsaWMnO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCNpbXBsaWNpdCRGaXJzdEFyZ1wiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCNpbXBsaWNpdCRGaXJzdEFyZyBpbnN0ZWFkKVxuLyoqXG4gKiBDcmVhdGUgYSBgX19fXyQoLi4uKWAgY29udmVuaWVuY2UgbWV0aG9kIGZyb20gYF9fXyguLi4pYC5cbiAqXG4gKiBJdCBpcyB2ZXJ5IGNvbW1vbiBmb3IgZnVuY3Rpb25zIHRvIHRha2UgYSBsYXp5LWxvYWRhYmxlIHJlc291cmNlIGFzIGEgZmlyc3QgYXJndW1lbnQuIEZvciB0aGlzXG4gKiByZWFzb24sIHRoZSBRd2lrIE9wdGltaXplciBhdXRvbWF0aWNhbGx5IGV4dHJhY3RzIHRoZSBmaXJzdCBhcmd1bWVudCBmcm9tIGFueSBmdW5jdGlvbiB3aGljaCBlbmRzXG4gKiBpbiBgJGAuXG4gKlxuICogVGhpcyBtZWFucyB0aGF0IGBmb28kKGFyZzApYCBhbmQgYGZvbygkKGFyZzApKWAgYXJlIGVxdWl2YWxlbnQgd2l0aCByZXNwZWN0IHRvIFF3aWsgT3B0aW1pemVyLlxuICogVGhlIGZvcm1lciBpcyBqdXN0IGEgc2hvcnRoYW5kIGZvciB0aGUgbGF0dGVyLlxuICpcbiAqIEZvciBleGFtcGxlLCB0aGVzZSBmdW5jdGlvbiBjYWxscyBhcmUgZXF1aXZhbGVudDpcbiAqXG4gKiAtIGBjb21wb25lbnQkKCgpID0+IHsuLi59KWAgaXMgc2FtZSBhcyBgY29tcG9uZW50KCQoKCkgPT4gey4uLn0pKWBcbiAqXG4gKiBgYGB0c3hcbiAqIGV4cG9ydCBmdW5jdGlvbiBteUFwaShjYWxsYmFjazogUVJMPCgpID0+IHZvaWQ+KTogdm9pZCB7XG4gKiAgIC8vIC4uLlxuICogfVxuICpcbiAqIGV4cG9ydCBjb25zdCBteUFwaSQgPSBpbXBsaWNpdCRGaXJzdEFyZyhteUFwaSk7XG4gKiAvLyB0eXBlIG9mIG15QXBpJDogKGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogdm9pZFxuICpcbiAqIC8vIGNhbiBiZSB1c2VkIGFzOlxuICogbXlBcGkkKCgpID0+IGNvbnNvbGUubG9nKCdjYWxsYmFjaycpKTtcbiAqXG4gKiAvLyB3aWxsIGJlIHRyYW5zcGlsZWQgdG86XG4gKiAvLyBGSUxFOiA8Y3VycmVudCBmaWxlPlxuICogbXlBcGkocXJsKCcuL2NodW5rLWFiYy5qcycsICdjYWxsYmFjaycpKTtcbiAqXG4gKiAvLyBGSUxFOiBjaHVuay1hYmMuanNcbiAqIGV4cG9ydCBjb25zdCBjYWxsYmFjayA9ICgpID0+IGNvbnNvbGUubG9nKCdjYWxsYmFjaycpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIGZuIC0gQSBmdW5jdGlvbiB0aGF0IHNob3VsZCBoYXZlIGl0cyBmaXJzdCBhcmd1bWVudCBhdXRvbWF0aWNhbGx5IGAkYC5cbiAqIEBwdWJsaWNcbiAqL1xuLy8gPC9kb2NzPlxuZXhwb3J0IGNvbnN0IGltcGxpY2l0JEZpcnN0QXJnID0gPEZJUlNULCBSRVNUIGV4dGVuZHMgYW55W10sIFJFVD4oXG4gIGZuOiAocXJsOiBRUkw8RklSU1Q+LCAuLi5yZXN0OiBSRVNUKSA9PiBSRVRcbik6ICgocXJsOiBGSVJTVCwgLi4ucmVzdDogUkVTVCkgPT4gUkVUKSA9PiB7XG4gIHJldHVybiBmdW5jdGlvbiAoZmlyc3Q6IEZJUlNULCAuLi5yZXN0OiBSRVNUKTogUkVUIHtcbiAgICByZXR1cm4gZm4uY2FsbChudWxsLCBkb2xsYXIoZmlyc3QpLCAuLi5yZXN0KTtcbiAgfTtcbn07XG4iXX0=","import { ComputedSignal, Signal, throwIfQRLNotResolved } from './signal';\nexport const createSignal = (value) => {\n    return new Signal(null, value);\n};\nexport const createComputedSignal = (qrl) => {\n    throwIfQRLNotResolved(qrl);\n    return new ComputedSignal(null, qrl);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmFsLWFwaS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9zaWduYWwvc2lnbmFsLWFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUV6RSxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBSSxLQUFTLEVBQUUsRUFBRTtJQUMzQyxPQUFPLElBQUksTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNqQyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUFJLEdBQWlCLEVBQUUsRUFBRTtJQUMzRCxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMzQixPQUFPLElBQUksY0FBYyxDQUFDLElBQUksRUFBRSxHQUEyQixDQUFDLENBQUM7QUFDL0QsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBRUkxJbnRlcm5hbCB9IGZyb20gJy4uL3NoYXJlZC9xcmwvcXJsLWNsYXNzJztcbmltcG9ydCB0eXBlIHsgUVJMIH0gZnJvbSAnLi4vc2hhcmVkL3FybC9xcmwucHVibGljJztcbmltcG9ydCB7IENvbXB1dGVkU2lnbmFsLCBTaWduYWwsIHRocm93SWZRUkxOb3RSZXNvbHZlZCB9IGZyb20gJy4vc2lnbmFsJztcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVNpZ25hbCA9IDxUPih2YWx1ZT86IFQpID0+IHtcbiAgcmV0dXJuIG5ldyBTaWduYWwobnVsbCwgdmFsdWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUNvbXB1dGVkU2lnbmFsID0gPFQ+KHFybDogUVJMPCgpID0+IFQ+KSA9PiB7XG4gIHRocm93SWZRUkxOb3RSZXNvbHZlZChxcmwpO1xuICByZXR1cm4gbmV3IENvbXB1dGVkU2lnbmFsKG51bGwsIHFybCBhcyBRUkxJbnRlcm5hbDwoKSA9PiBUPik7XG59O1xuIl19","import { implicit$FirstArg } from '../shared/qrl/implicit_dollar';\nimport { createSignal as _createSignal, createComputedSignal as _createComputedSignal, } from './signal-api';\nexport { isSignal } from './signal';\n/**\n * Creates a Signal with the given value. If no value is given, the signal is created with\n * `undefined`.\n *\n * @public\n */\nexport const createSignal = _createSignal;\n/** @public */\nexport const createComputedQrl = _createComputedSignal;\n/**\n * Create a computed signal which is calculated from the given QRL. A computed signal is a signal\n * which is calculated from other signals. When the signals change, the computed signal is\n * recalculated.\n *\n * The QRL must be a function which returns the value of the signal. The function must not have side\n * effects, and it mus be synchronous.\n *\n * If you need the function to be async, use `useSignal` and `useTask$` instead.\n *\n * @public\n */\nexport const createComputed$ = /*#__PURE__*/ implicit$FirstArg(createComputedQrl);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmFsLnB1YmxpYy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9zaWduYWwvc2lnbmFsLnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUVsRSxPQUFPLEVBQ0wsWUFBWSxJQUFJLGFBQWEsRUFDN0Isb0JBQW9CLElBQUkscUJBQXFCLEdBQzlDLE1BQU0sY0FBYyxDQUFDO0FBRXRCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFzQ3BDOzs7OztHQUtHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUdyQixhQUFhLENBQUM7QUFFbEIsY0FBYztBQUNkLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUU0QixxQkFBNEIsQ0FBQztBQUV2Rjs7Ozs7Ozs7Ozs7R0FXRztBQUNILE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxhQUFhLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGltcGxpY2l0JEZpcnN0QXJnIH0gZnJvbSAnLi4vc2hhcmVkL3FybC9pbXBsaWNpdF9kb2xsYXInO1xuaW1wb3J0IHR5cGUgeyBRUkwgfSBmcm9tICcuLi9zaGFyZWQvcXJsL3FybC5wdWJsaWMnO1xuaW1wb3J0IHtcbiAgY3JlYXRlU2lnbmFsIGFzIF9jcmVhdGVTaWduYWwsXG4gIGNyZWF0ZUNvbXB1dGVkU2lnbmFsIGFzIF9jcmVhdGVDb21wdXRlZFNpZ25hbCxcbn0gZnJvbSAnLi9zaWduYWwtYXBpJztcblxuZXhwb3J0IHsgaXNTaWduYWwgfSBmcm9tICcuL3NpZ25hbCc7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgaW50ZXJmYWNlIFJlYWRvbmx5U2lnbmFsPFQgPSB1bmtub3duPiB7XG4gIHJlYWRvbmx5IHZhbHVlOiBUO1xufVxuXG4vKipcbiAqIEEgc2lnbmFsIGlzIGEgcmVhY3RpdmUgdmFsdWUgd2hpY2ggY2FuIGJlIHJlYWQgYW5kIHdyaXR0ZW4uIFdoZW4gdGhlIHNpZ25hbCBpcyB3cml0dGVuLCBhbGwgdGFza3NcbiAqIHdoaWNoIGFyZSB0cmFja2luZyB0aGUgc2lnbmFsIHdpbGwgYmUgcmUtcnVuIGFuZCBhbGwgY29tcG9uZW50cyB0aGF0IHJlYWQgdGhlIHNpZ25hbCB3aWxsIGJlXG4gKiByZS1yZW5kZXJlZC5cbiAqXG4gKiBGdXJ0aGVybW9yZSwgd2hlbiBhIHNpZ25hbCB2YWx1ZSBpcyBwYXNzZWQgYXMgYSBwcm9wIHRvIGEgY29tcG9uZW50LCB0aGUgb3B0aW1pemVyIHdpbGxcbiAqIGF1dG9tYXRpY2FsbHkgZm9yd2FyZCB0aGUgc2lnbmFsLiBUaGlzIG1lYW5zIHRoYXQgYHJldHVybiA8ZGl2IHRpdGxlPXtzaWduYWwudmFsdWV9PmhpPC9kaXY+YFxuICogd2lsbCB1cGRhdGUgdGhlIGB0aXRsZWAgYXR0cmlidXRlIHdoZW4gdGhlIHNpZ25hbCBjaGFuZ2VzIHdpdGhvdXQgaGF2aW5nIHRvIHJlLXJlbmRlciB0aGVcbiAqIGNvbXBvbmVudC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2lnbmFsPFQgPSBhbnk+IGV4dGVuZHMgUmVhZG9ubHlTaWduYWw8VD4ge1xuICB2YWx1ZTogVDtcbn1cblxuLyoqXG4gKiBBIGNvbXB1dGVkIHNpZ25hbCBpcyBhIHNpZ25hbCB3aGljaCBpcyBjYWxjdWxhdGVkIGZyb20gb3RoZXIgc2lnbmFscy4gV2hlbiB0aGUgc2lnbmFscyBjaGFuZ2UsXG4gKiB0aGUgY29tcHV0ZWQgc2lnbmFsIGlzIHJlY2FsY3VsYXRlZCwgYW5kIGlmIHRoZSByZXN1bHQgY2hhbmdlZCwgYWxsIHRhc2tzIHdoaWNoIGFyZSB0cmFja2luZyB0aGVcbiAqIHNpZ25hbCB3aWxsIGJlIHJlLXJ1biBhbmQgYWxsIGNvbXBvbmVudHMgdGhhdCByZWFkIHRoZSBzaWduYWwgd2lsbCBiZSByZS1yZW5kZXJlZC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcHV0ZWRTaWduYWw8VD4gZXh0ZW5kcyBSZWFkb25seVNpZ25hbDxUPiB7XG4gIC8qKlxuICAgKiBVc2UgdGhpcyB0byBmb3JjZSByZWNhbGN1bGF0aW9uIGFuZCBydW5uaW5nIHN1YnNjcmliZXJzLCBmb3IgZXhhbXBsZSB3aGVuIHRoZSBjYWxjdWxhdGVkIHZhbHVlXG4gICAqIG11dGF0ZXMgYnV0IHJlbWFpbnMgdGhlIHNhbWUgb2JqZWN0LiBVc2VmdWwgZm9yIHRoaXJkLXBhcnR5IGxpYnJhcmllcy5cbiAgICovXG4gIGZvcmNlKCk6IHZvaWQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFNpZ25hbCB3aXRoIHRoZSBnaXZlbiB2YWx1ZS4gSWYgbm8gdmFsdWUgaXMgZ2l2ZW4sIHRoZSBzaWduYWwgaXMgY3JlYXRlZCB3aXRoXG4gKiBgdW5kZWZpbmVkYC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVTaWduYWw6IHtcbiAgPFQ+KCk6IFNpZ25hbDxUIHwgdW5kZWZpbmVkPjtcbiAgPFQ+KHZhbHVlOiBUKTogU2lnbmFsPFQ+O1xufSA9IF9jcmVhdGVTaWduYWw7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgY3JlYXRlQ29tcHV0ZWRRcmw6IDxUPihcbiAgcXJsOiBRUkw8KCkgPT4gVD5cbikgPT4gVCBleHRlbmRzIFByb21pc2U8YW55PiA/IG5ldmVyIDogQ29tcHV0ZWRTaWduYWw8VD4gPSBfY3JlYXRlQ29tcHV0ZWRTaWduYWwgYXMgYW55O1xuXG4vKipcbiAqIENyZWF0ZSBhIGNvbXB1dGVkIHNpZ25hbCB3aGljaCBpcyBjYWxjdWxhdGVkIGZyb20gdGhlIGdpdmVuIFFSTC4gQSBjb21wdXRlZCBzaWduYWwgaXMgYSBzaWduYWxcbiAqIHdoaWNoIGlzIGNhbGN1bGF0ZWQgZnJvbSBvdGhlciBzaWduYWxzLiBXaGVuIHRoZSBzaWduYWxzIGNoYW5nZSwgdGhlIGNvbXB1dGVkIHNpZ25hbCBpc1xuICogcmVjYWxjdWxhdGVkLlxuICpcbiAqIFRoZSBRUkwgbXVzdCBiZSBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBzaWduYWwuIFRoZSBmdW5jdGlvbiBtdXN0IG5vdCBoYXZlIHNpZGVcbiAqIGVmZmVjdHMsIGFuZCBpdCBtdXMgYmUgc3luY2hyb25vdXMuXG4gKlxuICogSWYgeW91IG5lZWQgdGhlIGZ1bmN0aW9uIHRvIGJlIGFzeW5jLCB1c2UgYHVzZVNpZ25hbGAgYW5kIGB1c2VUYXNrJGAgaW5zdGVhZC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVDb21wdXRlZCQgPSAvKiNfX1BVUkVfXyovIGltcGxpY2l0JEZpcnN0QXJnKGNyZWF0ZUNvbXB1dGVkUXJsKTtcbiJdfQ==","/**\n * Scheduler is responsible for running application code in predictable order.\n *\n * ## What is a Chore?\n *\n * A Chore is a unit of work that needs to be done. It can be:\n *\n * - Task / Resource\n * - Visible Task\n * - Component\n * - Computed\n * - Node Diff\n *\n * ## Order of execution\n *\n * - Parent component chores should run before child component chores.\n * - Visible Tasks should run after journal flush (visible tasks often read DOM layout.)\n *\n * ## Example\n *\n * ```typescript\n * const Child = component$(() => {\n *   useTask$(() => {\n *     console.log('Child task');\n *   });\n *   useVisibleTask$(() => {\n *     console.log('Child visible-task');\n *   });\n *   console.log('Child render');\n *   return <div>Child</div>;\n * });\n *\n * const Parent = component$(() => {\n *   const count = useSignal(0);\n *   useTask$(() => {\n *     console.log('Parent task', count.value);\n *   });\n *   useVisibleTask$(() => {\n *     console.log('Parent visible-task', count.value);\n *     count.value++;\n *   });\n *   console.log('Parent render', count.value);\n *   return <Child/>;\n * });\n * ```\n *\n * ## In the above example, the order of execution is:\n *\n * 1. Parent task 0\n * 2. Parent render 0\n * 3. Child task 0\n * 4. Child render 0\n * 5. Journal flush\n * 6. Parent visible-task 0\n * 7. Parent render 1\n * 8. Journal flush\n * 9. Child visible-task\n *\n * If at any point a new chore is scheduled it will insert itself into the correct order.\n *\n * ## Implementation\n *\n * Chores are kept in a sorted array. When a new chore is scheduled it is inserted into the correct\n * location. Processing of the chores always starts from the beginning of the array. This ensures\n * that parent chores are processed before child chores.\n *\n * ## Sorting\n *\n * Chores are sorted in three levels:\n *\n * - Macro: beforeJournalFlush, journalFlush, afterJournalFlush\n * - Component: depth first order of components\n * - Micro: order of chores within a component.\n *\n * Example of sorting:\n *\n * - Tasks are beforeJournalFlush, than depth first on component and finally in declaration order\n *   within component.\n * - Visible Tasks are sorted afterJournalFlush, than depth first on component and finally in\n *   declaration order within component.\n */\nimport { assertEqual } from './error/assert';\nimport { Task, TaskFlags, cleanupTask, runTask } from '../use/use-task';\nimport { runResource } from '../use/use-resource';\nimport { logWarn, throwErrorAndStop } from './utils/log';\nimport { isPromise, maybeThen, maybeThenPassError, safeCall } from './utils/promises';\nimport { isDomContainer } from '../client/dom-container';\nimport { ElementVNodeProps, VNodeFlags, VNodeProps, } from '../client/types';\nimport { vnode_documentPosition, vnode_isVNode, vnode_setAttr, VNodeJournalOpCode, } from '../client/vnode';\nimport { vnode_diff } from '../client/vnode-diff';\nimport { executeComponent } from './component-execution';\nimport { isSignal } from '../signal/signal.public';\nimport {} from '../client/dom-container';\nimport { serializeAttribute } from './utils/styles';\n// Turn this on to get debug output of what the scheduler is doing.\nconst DEBUG = false;\nexport var ChoreType;\n(function (ChoreType) {\n    /// MASKS defining three levels of sorting\n    ChoreType[ChoreType[\"MACRO\"] = 112] = \"MACRO\";\n    /* order of elements (not encoded here) */\n    ChoreType[ChoreType[\"MICRO\"] = 15] = \"MICRO\";\n    /** Ensure tha the QRL promise is resolved before processing next chores in the queue */\n    ChoreType[ChoreType[\"QRL_RESOLVE\"] = 1] = \"QRL_RESOLVE\";\n    ChoreType[ChoreType[\"RESOURCE\"] = 2] = \"RESOURCE\";\n    ChoreType[ChoreType[\"TASK\"] = 3] = \"TASK\";\n    ChoreType[ChoreType[\"NODE_DIFF\"] = 4] = \"NODE_DIFF\";\n    ChoreType[ChoreType[\"NODE_PROP\"] = 5] = \"NODE_PROP\";\n    ChoreType[ChoreType[\"COMPONENT_SSR\"] = 6] = \"COMPONENT_SSR\";\n    ChoreType[ChoreType[\"COMPONENT\"] = 7] = \"COMPONENT\";\n    ChoreType[ChoreType[\"WAIT_FOR_COMPONENTS\"] = 16] = \"WAIT_FOR_COMPONENTS\";\n    ChoreType[ChoreType[\"JOURNAL_FLUSH\"] = 48] = \"JOURNAL_FLUSH\";\n    ChoreType[ChoreType[\"VISIBLE\"] = 64] = \"VISIBLE\";\n    ChoreType[ChoreType[\"CLEANUP_VISIBLE\"] = 80] = \"CLEANUP_VISIBLE\";\n    ChoreType[ChoreType[\"WAIT_FOR_ALL\"] = 127] = \"WAIT_FOR_ALL\";\n})(ChoreType || (ChoreType = {}));\nexport const createScheduler = (container, scheduleDrain, journalFlush) => {\n    const choreQueue = [];\n    let currentChore = null;\n    let journalFlushScheduled = false;\n    return schedule;\n    ///// IMPLEMENTATION /////\n    function schedule(type, hostOrTask = null, targetOrQrl = null, payload = null) {\n        const runLater = type !== ChoreType.WAIT_FOR_ALL &&\n            type !== ChoreType.WAIT_FOR_COMPONENTS &&\n            type !== ChoreType.COMPONENT_SSR;\n        const isTask = type === ChoreType.TASK ||\n            type === ChoreType.VISIBLE ||\n            type === ChoreType.RESOURCE ||\n            type === ChoreType.CLEANUP_VISIBLE;\n        if (isTask) {\n            hostOrTask.$flags$ |= TaskFlags.DIRTY;\n        }\n        let chore = {\n            $type$: type,\n            $idx$: isTask\n                ? hostOrTask.$index$\n                : typeof targetOrQrl === 'string'\n                    ? targetOrQrl\n                    : 0,\n            $host$: isTask ? hostOrTask.$el$ : hostOrTask,\n            $target$: targetOrQrl,\n            $payload$: isTask ? hostOrTask : payload,\n            $resolve$: null,\n            $promise$: null,\n            $returnValue$: null,\n            $executed$: false,\n        };\n        chore.$promise$ = new Promise((resolve) => (chore.$resolve$ = resolve));\n        DEBUG && debugTrace('schedule', chore, currentChore, choreQueue);\n        chore = sortedInsert(choreQueue, chore);\n        if (!journalFlushScheduled && runLater) {\n            // If we are not currently draining, we need to schedule a drain.\n            journalFlushScheduled = true;\n            schedule(ChoreType.JOURNAL_FLUSH);\n            scheduleDrain();\n        }\n        if (runLater) {\n            return chore.$promise$;\n        }\n        else {\n            return drainUpTo(chore);\n        }\n    }\n    /**\n     * Execute all of the chores up to and including the given chore.\n     *\n     * @param runUptoChore\n     */\n    function drainUpTo(runUptoChore) {\n        // If it already ran, it's not in the queue\n        if (runUptoChore.$executed$) {\n            return runUptoChore.$returnValue$;\n        }\n        if (currentChore) {\n            // Already running chore, which means we're waiting for async completion\n            return runUptoChore.$promise$;\n        }\n        while (choreQueue.length) {\n            const nextChore = choreQueue.shift();\n            const order = choreComparator(nextChore, runUptoChore, false);\n            if (order === null) {\n                continue;\n            }\n            if (order > 0) {\n                // we have processed all of the chores up to and including the given chore.\n                break;\n            }\n            const isDeletedVNode = vNodeAlreadyDeleted(nextChore);\n            if (isDeletedVNode &&\n                // we need to process cleanup tasks for deleted nodes\n                nextChore.$type$ !== ChoreType.CLEANUP_VISIBLE) {\n                DEBUG && debugTrace('skip chore', nextChore, currentChore, choreQueue);\n                continue;\n            }\n            const returnValue = executeChore(nextChore);\n            if (isPromise(returnValue)) {\n                const promise = returnValue.then(() => drainUpTo(runUptoChore));\n                return promise;\n            }\n        }\n        return runUptoChore.$returnValue$;\n    }\n    function executeChore(chore) {\n        const host = chore.$host$;\n        DEBUG && debugTrace('execute', chore, currentChore, choreQueue);\n        assertEqual(currentChore, null, 'Chore already running.');\n        currentChore = chore;\n        let returnValue = null;\n        switch (chore.$type$) {\n            case ChoreType.JOURNAL_FLUSH:\n                returnValue = journalFlush();\n                journalFlushScheduled = false;\n                break;\n            case ChoreType.COMPONENT:\n            case ChoreType.COMPONENT_SSR:\n                returnValue = safeCall(() => executeComponent(container, host, host, chore.$target$, chore.$payload$), (jsx) => {\n                    return chore.$type$ === ChoreType.COMPONENT\n                        ? maybeThen(container.processJsx(host, jsx), () => jsx)\n                        : jsx;\n                }, (err) => container.handleError(err, host));\n                break;\n            case ChoreType.RESOURCE:\n                // Don't await the return value of the resource, because async resources should not be awaited.\n                // The reason for this is that we should be able to update for example a node with loading\n                // text. If we await the resource, the loading text will not be displayed until the resource\n                // is loaded.\n                const result = runResource(chore.$payload$, container, host);\n                returnValue = isDomContainer(container) ? null : result;\n                break;\n            case ChoreType.TASK:\n                returnValue = runTask(chore.$payload$, container, host);\n                break;\n            case ChoreType.VISIBLE:\n                returnValue = runTask(chore.$payload$, container, host);\n                break;\n            case ChoreType.CLEANUP_VISIBLE:\n                const task = chore.$payload$;\n                cleanupTask(task);\n                break;\n            case ChoreType.NODE_DIFF:\n                const parentVirtualNode = chore.$target$;\n                let jsx = chore.$payload$;\n                if (isSignal(jsx)) {\n                    jsx = jsx.value;\n                }\n                returnValue = vnode_diff(container, jsx, parentVirtualNode, null);\n                break;\n            case ChoreType.NODE_PROP:\n                const virtualNode = chore.$host$;\n                const payload = chore.$payload$;\n                let value = payload.$value$;\n                if (isSignal(value)) {\n                    value = value.value;\n                }\n                const isConst = payload.$isConst$;\n                const journal = container.$journal$;\n                const property = chore.$idx$;\n                value = serializeAttribute(property, value, payload.$scopedStyleIdPrefix$);\n                if (isConst) {\n                    const element = virtualNode[ElementVNodeProps.element];\n                    journal.push(VNodeJournalOpCode.SetAttribute, element, property, value);\n                }\n                else {\n                    vnode_setAttr(journal, virtualNode, property, value);\n                }\n                break;\n            case ChoreType.QRL_RESOLVE: {\n                const target = chore.$target$;\n                returnValue = !target.resolved ? target.resolve() : null;\n                break;\n            }\n        }\n        return maybeThenPassError(returnValue, (value) => {\n            DEBUG && debugTrace('execute.DONE', null, currentChore, choreQueue);\n            if (currentChore) {\n                currentChore.$executed$ = true;\n                currentChore.$resolve$?.(value);\n            }\n            currentChore = null;\n            return (chore.$returnValue$ = value);\n        });\n    }\n};\nconst toNumber = (value) => {\n    return typeof value === 'number' ? value : -1;\n};\n/**\n * When a derived signal is update we need to run vnode_diff. However the signal can update multiple\n * times during component execution. For this reason it is necessary for us to update the schedule\n * work with the latest result of the signal.\n */\nconst choreUpdate = (existing, newChore) => {\n    if (existing.$type$ === ChoreType.NODE_DIFF) {\n        existing.$payload$ = newChore.$payload$;\n    }\n};\nfunction vNodeAlreadyDeleted(chore) {\n    return !!(chore.$host$ &&\n        vnode_isVNode(chore.$host$) &&\n        chore.$host$[VNodeProps.flags] & VNodeFlags.Deleted);\n}\nfunction choreComparator(a, b, shouldThrowOnHostMismatch) {\n    const macroTypeDiff = (a.$type$ & ChoreType.MACRO) - (b.$type$ & ChoreType.MACRO);\n    if (macroTypeDiff !== 0) {\n        return macroTypeDiff;\n    }\n    // JOURNAL_FLUSH does not have a host or $idx$, so we can't compare it.\n    if (a.$type$ !== ChoreType.JOURNAL_FLUSH) {\n        const aHost = a.$host$;\n        const bHost = b.$host$;\n        // QRL_RESOLVE does not have a host.\n        if (aHost !== bHost && aHost !== null && bHost !== null) {\n            if (vnode_isVNode(aHost) && vnode_isVNode(bHost)) {\n                // we are running on the client.\n                const hostDiff = vnode_documentPosition(aHost, bHost);\n                if (hostDiff !== 0) {\n                    return hostDiff;\n                }\n            }\n            else {\n                // we are running on the server.\n                // On server we can't schedule task for a different host!\n                // Server is SSR, and therefore scheduling for anything but the current host\n                // implies that things need to be re-run nad that is not supported because of streaming.\n                const errorMessage = 'SERVER: during HTML streaming, it is not possible to cause a re-run of tasks on a different host';\n                if (shouldThrowOnHostMismatch) {\n                    throwErrorAndStop(errorMessage);\n                }\n                logWarn(errorMessage);\n                return null;\n            }\n        }\n        const microTypeDiff = (a.$type$ & ChoreType.MICRO) - (b.$type$ & ChoreType.MICRO);\n        if (microTypeDiff !== 0) {\n            return microTypeDiff;\n        }\n        const idxDiff = toNumber(a.$idx$) - toNumber(b.$idx$);\n        if (idxDiff !== 0) {\n            return idxDiff;\n        }\n        // If the host is the same, we need to compare the target.\n        if (a.$target$ !== b.$target$ &&\n            ((a.$type$ === ChoreType.QRL_RESOLVE && b.$type$ === ChoreType.QRL_RESOLVE) ||\n                (a.$type$ === ChoreType.NODE_PROP && b.$type$ === ChoreType.NODE_PROP))) {\n            // 1 means that we are going to process chores as FIFO\n            return 1;\n        }\n    }\n    return 0;\n}\nfunction sortedFindIndex(sortedArray, value) {\n    /// We need to ensure that the `queue` is sorted by priority.\n    /// 1. Find a place where to insert into.\n    let bottom = 0;\n    let top = sortedArray.length;\n    while (bottom < top) {\n        const middle = bottom + ((top - bottom) >> 1);\n        const midChore = sortedArray[middle];\n        const comp = choreComparator(value, midChore, true);\n        if (comp < 0) {\n            top = middle;\n        }\n        else if (comp > 0) {\n            bottom = middle + 1;\n        }\n        else {\n            // We already have the host in the queue.\n            return middle;\n        }\n    }\n    return ~bottom;\n}\nfunction sortedInsert(sortedArray, value) {\n    /// We need to ensure that the `queue` is sorted by priority.\n    /// 1. Find a place where to insert into.\n    const idx = sortedFindIndex(sortedArray, value);\n    if (idx < 0) {\n        /// 2. Insert the chore into the queue.\n        sortedArray.splice(~idx, 0, value);\n        return value;\n    }\n    const existing = sortedArray[idx];\n    choreUpdate(existing, value);\n    return existing;\n}\nfunction debugChoreToString(chore) {\n    const type = {\n        [ChoreType.QRL_RESOLVE]: 'QRL_RESOLVE',\n        [ChoreType.RESOURCE]: 'RESOURCE',\n        [ChoreType.TASK]: 'TASK',\n        [ChoreType.NODE_DIFF]: 'NODE_DIFF',\n        [ChoreType.NODE_PROP]: 'NODE_PROP',\n        [ChoreType.COMPONENT]: 'COMPONENT',\n        [ChoreType.COMPONENT_SSR]: 'COMPONENT_SSR',\n        [ChoreType.JOURNAL_FLUSH]: 'JOURNAL_FLUSH',\n        [ChoreType.VISIBLE]: 'VISIBLE',\n        [ChoreType.CLEANUP_VISIBLE]: 'CLEANUP_VISIBLE',\n        [ChoreType.WAIT_FOR_ALL]: 'WAIT_FOR_ALL',\n        [ChoreType.WAIT_FOR_COMPONENTS]: 'WAIT_FOR_COMPONENTS',\n    }[chore.$type$] || 'UNKNOWN: ' + chore.$type$;\n    const host = String(chore.$host$).replaceAll(/\\n.*/gim, '');\n    const qrlTarget = chore.$target$?.$symbol$;\n    return `Chore(${type} ${chore.$type$ === ChoreType.QRL_RESOLVE ? qrlTarget : host} ${chore.$idx$})`;\n}\nfunction debugTrace(action, arg, currentChore, queue) {\n    const lines = ['Scheduler: ' + action];\n    if (arg) {\n        lines.push('    arg: ' +\n            ('$type$' in arg ? debugChoreToString(arg) : String(arg).replaceAll(/\\n.*/gim, '')));\n    }\n    if (currentChore) {\n        lines.push('running: ' + debugChoreToString(currentChore));\n    }\n    if (queue) {\n        queue.forEach((chore, idx) => {\n            lines.push((idx == 0 ? '  queue: ' : '         ') + debugChoreToString(chore));\n        });\n    }\n    // eslint-disable-next-line no-console\n    console.log(lines.join('\\n  ') + '\\n');\n}\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined } from '../shared/error/assert';\nimport { getInvokeContext } from './use-core';\nimport { assertQrl } from '../shared/qrl/qrl-class';\nimport { _getQContainerElement, getDomContainer } from '../client/dom-container';\n// <docs markdown=\"../readme.md#useLexicalScope\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useLexicalScope instead)\n/**\n * Used by the Qwik Optimizer to restore the lexically scoped variables.\n *\n * This method should not be present in the application source code.\n *\n * NOTE: `useLexicalScope` method can only be used in the synchronous portion of the callback\n * (before any `await` statements.)\n *\n * @internal\n */\n// </docs>\nexport const useLexicalScope = () => {\n    const context = getInvokeContext();\n    let qrl = context.$qrl$;\n    if (!qrl) {\n        const el = context.$element$;\n        assertDefined(el, 'invoke: element must be defined inside useLexicalScope()', context);\n        const containerElement = _getQContainerElement(el);\n        assertDefined(containerElement, `invoke: cant find parent q:container of`, el);\n        const container = getDomContainer(containerElement);\n        qrl = container.parseQRL(decodeURIComponent(String(context.$url$)));\n    }\n    else {\n        assertQrl(qrl);\n        assertDefined(qrl.$captureRef$, 'invoke: qrl $captureRef$ must be defined inside useLexicalScope()', qrl);\n    }\n    return qrl.$captureRef$;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWxleGljYWwtc2NvcGUucHVibGljLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtbGV4aWNhbC1zY29wZS5wdWJsaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUM5QyxPQUFPLEVBQUUsU0FBUyxFQUFvQixNQUFNLHlCQUF5QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxlQUFlLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUVqRixpREFBaUQ7QUFDakQseUNBQXlDO0FBQ3pDLDhDQUE4QztBQUM5Qzs7Ozs7Ozs7O0dBU0c7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLEdBQTZCLEVBQUU7SUFDNUQsTUFBTSxPQUFPLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztJQUNuQyxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBeUMsQ0FBQztJQUM1RCxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDVCxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQzdCLGFBQWEsQ0FBQyxFQUFFLEVBQUUsMERBQTBELEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkYsTUFBTSxnQkFBZ0IsR0FBRyxxQkFBcUIsQ0FBQyxFQUFFLENBQWdCLENBQUM7UUFDbEUsYUFBYSxDQUFDLGdCQUFnQixFQUFFLHlDQUF5QyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQy9FLE1BQU0sU0FBUyxHQUFHLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3BELEdBQUcsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBeUIsQ0FBQztJQUM5RixDQUFDO1NBQU0sQ0FBQztRQUNOLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNmLGFBQWEsQ0FDWCxHQUFHLENBQUMsWUFBWSxFQUNoQixtRUFBbUUsRUFDbkUsR0FBRyxDQUNKLENBQUM7SUFDSixDQUFDO0lBQ0QsT0FBTyxHQUFJLENBQUMsWUFBb0IsQ0FBQztBQUNuQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnREZWZpbmVkIH0gZnJvbSAnLi4vc2hhcmVkL2Vycm9yL2Fzc2VydCc7XG5pbXBvcnQgeyBnZXRJbnZva2VDb250ZXh0IH0gZnJvbSAnLi91c2UtY29yZSc7XG5pbXBvcnQgeyBhc3NlcnRRcmwsIHR5cGUgUVJMSW50ZXJuYWwgfSBmcm9tICcuLi9zaGFyZWQvcXJsL3FybC1jbGFzcyc7XG5pbXBvcnQgeyBfZ2V0UUNvbnRhaW5lckVsZW1lbnQsIGdldERvbUNvbnRhaW5lciB9IGZyb20gJy4uL2NsaWVudC9kb20tY29udGFpbmVyJztcblxuLy8gPGRvY3MgbWFya2Rvd249XCIuLi9yZWFkbWUubWQjdXNlTGV4aWNhbFNjb3BlXCI+XG4vLyAhIURPIE5PVCBFRElUIFRISVMgQ09NTUVOVCBESVJFQ1RMWSEhIVxuLy8gKGVkaXQgLi4vcmVhZG1lLm1kI3VzZUxleGljYWxTY29wZSBpbnN0ZWFkKVxuLyoqXG4gKiBVc2VkIGJ5IHRoZSBRd2lrIE9wdGltaXplciB0byByZXN0b3JlIHRoZSBsZXhpY2FsbHkgc2NvcGVkIHZhcmlhYmxlcy5cbiAqXG4gKiBUaGlzIG1ldGhvZCBzaG91bGQgbm90IGJlIHByZXNlbnQgaW4gdGhlIGFwcGxpY2F0aW9uIHNvdXJjZSBjb2RlLlxuICpcbiAqIE5PVEU6IGB1c2VMZXhpY2FsU2NvcGVgIG1ldGhvZCBjYW4gb25seSBiZSB1c2VkIGluIHRoZSBzeW5jaHJvbm91cyBwb3J0aW9uIG9mIHRoZSBjYWxsYmFja1xuICogKGJlZm9yZSBhbnkgYGF3YWl0YCBzdGF0ZW1lbnRzLilcbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuLy8gPC9kb2NzPlxuZXhwb3J0IGNvbnN0IHVzZUxleGljYWxTY29wZSA9IDxWQVJTIGV4dGVuZHMgYW55W10+KCk6IFZBUlMgPT4ge1xuICBjb25zdCBjb250ZXh0ID0gZ2V0SW52b2tlQ29udGV4dCgpO1xuICBsZXQgcXJsID0gY29udGV4dC4kcXJsJCBhcyBRUkxJbnRlcm5hbDx1bmtub3duPiB8IHVuZGVmaW5lZDtcbiAgaWYgKCFxcmwpIHtcbiAgICBjb25zdCBlbCA9IGNvbnRleHQuJGVsZW1lbnQkO1xuICAgIGFzc2VydERlZmluZWQoZWwsICdpbnZva2U6IGVsZW1lbnQgbXVzdCBiZSBkZWZpbmVkIGluc2lkZSB1c2VMZXhpY2FsU2NvcGUoKScsIGNvbnRleHQpO1xuICAgIGNvbnN0IGNvbnRhaW5lckVsZW1lbnQgPSBfZ2V0UUNvbnRhaW5lckVsZW1lbnQoZWwpIGFzIEhUTUxFbGVtZW50O1xuICAgIGFzc2VydERlZmluZWQoY29udGFpbmVyRWxlbWVudCwgYGludm9rZTogY2FudCBmaW5kIHBhcmVudCBxOmNvbnRhaW5lciBvZmAsIGVsKTtcbiAgICBjb25zdCBjb250YWluZXIgPSBnZXREb21Db250YWluZXIoY29udGFpbmVyRWxlbWVudCk7XG4gICAgcXJsID0gY29udGFpbmVyLnBhcnNlUVJMKGRlY29kZVVSSUNvbXBvbmVudChTdHJpbmcoY29udGV4dC4kdXJsJCkpKSBhcyBRUkxJbnRlcm5hbDx1bmtub3duPjtcbiAgfSBlbHNlIHtcbiAgICBhc3NlcnRRcmwocXJsKTtcbiAgICBhc3NlcnREZWZpbmVkKFxuICAgICAgcXJsLiRjYXB0dXJlUmVmJCxcbiAgICAgICdpbnZva2U6IHFybCAkY2FwdHVyZVJlZiQgbXVzdCBiZSBkZWZpbmVkIGluc2lkZSB1c2VMZXhpY2FsU2NvcGUoKScsXG4gICAgICBxcmxcbiAgICApO1xuICB9XG4gIHJldHVybiBxcmwhLiRjYXB0dXJlUmVmJCBhcyBWQVJTO1xufTtcbiJdfQ==","import { getDomContainer } from '../client/dom-container';\nimport { isServerPlatform } from '../shared/platform/platform';\nimport { assertQrl, createQRL } from '../shared/qrl/qrl-class';\nimport { ChoreType } from '../shared/scheduler';\nimport {} from '../shared/types';\nimport { logError } from '../shared/utils/log';\nimport { TaskEvent } from '../shared/utils/markers';\nimport { isPromise, safeCall } from '../shared/utils/promises';\nimport { noSerialize } from '../shared/utils/serialize-utils';\nimport { isFunction } from '../shared/utils/types';\nimport { EffectProperty, isSignal } from '../signal/signal';\nimport { Subscriber, clearSubscriberEffectDependencies } from '../signal/signal-subscriber';\nimport {} from '../signal/signal.public';\nimport { invoke, newInvokeContext } from './use-core';\nimport { useLexicalScope } from './use-lexical-scope.public';\nimport { useOn, useOnDocument } from './use-on';\nimport { useSequentialScope } from './use-sequential-scope';\nexport var TaskFlags;\n(function (TaskFlags) {\n    TaskFlags[TaskFlags[\"VISIBLE_TASK\"] = 1] = \"VISIBLE_TASK\";\n    TaskFlags[TaskFlags[\"TASK\"] = 2] = \"TASK\";\n    TaskFlags[TaskFlags[\"RESOURCE\"] = 4] = \"RESOURCE\";\n    TaskFlags[TaskFlags[\"DIRTY\"] = 8] = \"DIRTY\";\n})(TaskFlags || (TaskFlags = {}));\n// <docs markdown=\"../readme.md#useTask\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useTask instead)\n/**\n * Reruns the `taskFn` when the observed inputs change.\n *\n * Use `useTask` to observe changes on a set of inputs, and then re-execute the `taskFn` when those\n * inputs change.\n *\n * The `taskFn` only executes if the observed inputs change. To observe the inputs, use the `obs`\n * function to wrap property reads. This creates subscriptions that will trigger the `taskFn` to\n * rerun.\n *\n * @param task - Function which should be re-executed when changes to the inputs are detected\n * @public\n *\n * ### Example\n *\n * The `useTask` function is used to observe the `store.count` property. Any changes to the\n * `store.count` cause the `taskFn` to execute which in turn updates the `store.doubleCount` to\n * the double of `store.count`.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *     doubleCount: 0,\n *     debounced: 0,\n *   });\n *\n *   // Double count task\n *   useTask$(({ track }) => {\n *     const count = track(() => store.count);\n *     store.doubleCount = 2 * count;\n *   });\n *\n *   // Debouncer task\n *   useTask$(({ track }) => {\n *     const doubleCount = track(() => store.doubleCount);\n *     const timer = setTimeout(() => {\n *       store.debounced = doubleCount;\n *     }, 2000);\n *     return () => {\n *       clearTimeout(timer);\n *     };\n *   });\n *   return (\n *     <div>\n *       <div>\n *         {store.count} / {store.doubleCount}\n *       </div>\n *       <div>{store.debounced}</div>\n *     </div>\n *   );\n * });\n * ```\n *\n * @public\n * @see `Tracker`\n */\n// </docs>\nexport const useTaskQrl = (qrl, opts) => {\n    const { val, set, iCtx, i } = useSequentialScope();\n    if (val) {\n        return;\n    }\n    assertQrl(qrl);\n    set(1);\n    const host = iCtx.$hostElement$;\n    const task = new Task(TaskFlags.DIRTY | TaskFlags.TASK, i, iCtx.$hostElement$, qrl, undefined, null);\n    // In V2 we add the task to the sequential scope. We need to do this\n    // in order to be able to retrieve it later when the parent element is\n    // deleted and we need to be able to release the task subscriptions.\n    set(task);\n    const result = runTask(task, iCtx.$container$, host);\n    if (isPromise(result)) {\n        throw result;\n    }\n    qrl.$resolveLazy$(iCtx.$element$);\n    if (isServerPlatform()) {\n        useRunTask(task, opts?.eagerness);\n    }\n};\nexport const runTask = (task, container, host) => {\n    task.$flags$ &= ~TaskFlags.DIRTY;\n    cleanupTask(task);\n    const iCtx = newInvokeContext(container.$locale$, host, undefined, TaskEvent);\n    iCtx.$container$ = container;\n    const taskFn = task.$qrl$.getFn(iCtx, () => clearSubscriberEffectDependencies(task));\n    const track = (obj, prop) => {\n        const ctx = newInvokeContext();\n        ctx.$effectSubscriber$ = [task, EffectProperty.COMPONENT];\n        ctx.$container$ = container;\n        return invoke(ctx, () => {\n            if (isFunction(obj)) {\n                return obj();\n            }\n            if (prop) {\n                return obj[prop];\n            }\n            else if (isSignal(obj)) {\n                return obj.value;\n            }\n            else {\n                return obj;\n            }\n        });\n    };\n    const handleError = (reason) => container.handleError(reason, host);\n    let cleanupFns = null;\n    const cleanup = (fn) => {\n        if (typeof fn == 'function') {\n            if (!cleanupFns) {\n                cleanupFns = [];\n                task.$destroy$ = noSerialize(() => {\n                    task.$destroy$ = null;\n                    cleanupFns.forEach((fn) => {\n                        try {\n                            fn();\n                        }\n                        catch (err) {\n                            handleError(err);\n                        }\n                    });\n                });\n            }\n            cleanupFns.push(fn);\n        }\n    };\n    const taskApi = { track, cleanup };\n    const result = safeCall(() => taskFn(taskApi), cleanup, (err) => {\n        if (isPromise(err)) {\n            return err.then(() => runTask(task, container, host));\n        }\n        else {\n            return handleError(err);\n        }\n    });\n    return result;\n};\nexport const cleanupTask = (task) => {\n    const destroy = task.$destroy$;\n    if (destroy) {\n        task.$destroy$ = null;\n        try {\n            destroy();\n        }\n        catch (err) {\n            logError(err);\n        }\n    }\n};\nexport const useRunTask = (task, eagerness) => {\n    if (eagerness === 'visible' || eagerness === 'intersection-observer') {\n        useOn('qvisible', getTaskHandlerQrl(task));\n    }\n    else if (eagerness === 'load' || eagerness === 'document-ready') {\n        useOnDocument('qinit', getTaskHandlerQrl(task));\n    }\n    else if (eagerness === 'idle' || eagerness === 'document-idle') {\n        useOnDocument('qidle', getTaskHandlerQrl(task));\n    }\n};\nconst getTaskHandlerQrl = (task) => {\n    const taskQrl = task.$qrl$;\n    const taskHandler = createQRL(taskQrl.$chunk$, '_hW', _hW, null, null, [task], taskQrl.$symbol$);\n    // Needed for chunk lookup in dev mode\n    if (taskQrl.dev) {\n        taskHandler.dev = taskQrl.dev;\n    }\n    return taskHandler;\n};\nexport class Task extends Subscriber {\n    constructor($flags$, $index$, $el$, $qrl$, $state$, $destroy$) {\n        super();\n        this.$flags$ = $flags$;\n        this.$index$ = $index$;\n        this.$el$ = $el$;\n        this.$qrl$ = $qrl$;\n        this.$state$ = $state$;\n        this.$destroy$ = $destroy$;\n    }\n}\nexport const isTask = (value) => {\n    return value instanceof Task;\n};\n/**\n * Low-level API used by the Optimizer to process `useTask$()` API. This method is not intended to\n * be used by developers.\n *\n * @internal\n */\nexport const _hW = () => {\n    const [task] = useLexicalScope();\n    const container = getDomContainer(task.$el$);\n    const type = task.$flags$ & TaskFlags.VISIBLE_TASK ? ChoreType.VISIBLE : ChoreType.TASK;\n    container.$scheduler$(type, task);\n};\n//# sourceMappingURL=data:application/json;base64,","/**\n * @file\n *\n *   Signals come in two types:\n *\n *   1. `Signal` - A storage of data\n *   2. `ComputedSignal` - A signal which is computed from other signals.\n *\n *   ## Why is `ComputedSignal` different?\n *\n *   - It needs to store a function which needs to re-run.\n *   - It is `Readonly` because it is computed.\n */\nimport { pad, qwikDebugToString } from '../debug';\nimport { assertDefined, assertFalse, assertTrue } from '../shared/error/assert';\nimport {} from '../shared/qrl/qrl-class';\nimport { trackSignal, tryGetInvokeContext } from '../use/use-core';\nimport { Task, TaskFlags, isTask } from '../use/use-task';\nimport { logError, throwErrorAndStop } from '../shared/utils/log';\nimport { ELEMENT_PROPS, OnRenderProp, QSubscribers } from '../shared/utils/markers';\nimport { isPromise } from '../shared/utils/promises';\nimport { qDev } from '../shared/utils/qdev';\nimport { vnode_getProp, vnode_isVirtualVNode, vnode_isVNode, vnode_setProp } from '../client/vnode';\nimport { ChoreType } from '../shared/scheduler';\nimport { isSubscriber, Subscriber } from './signal-subscriber';\nconst DEBUG = false;\n/**\n * Special value used to mark that a given signal needs to be computed. This is essentially a\n * \"marked as dirty\" flag.\n */\nexport const NEEDS_COMPUTATION = Symbol('invalid');\n// eslint-disable-next-line no-console\nconst log = (...args) => console.log('SIGNAL', ...args.map(qwikDebugToString));\nexport const throwIfQRLNotResolved = (qrl) => {\n    const resolved = qrl.resolved;\n    if (!resolved) {\n        // When we are creating a signal using a use method, we need to ensure\n        // that the computation can be lazy and therefore we need to unsure\n        // that the QRL is resolved.\n        // When we re-create the signal from serialization (we don't create the signal\n        // using useMethod) it is OK to not resolve it until the graph is marked as dirty.\n        throw qrl.resolve();\n    }\n};\n/** @public */\nexport const isSignal = (value) => {\n    return value instanceof Signal;\n};\n/** @internal */\nexport class EffectData {\n    constructor(data) {\n        this.data = data;\n    }\n}\nexport var EffectSubscriptionsProp;\n(function (EffectSubscriptionsProp) {\n    EffectSubscriptionsProp[EffectSubscriptionsProp[\"EFFECT\"] = 0] = \"EFFECT\";\n    EffectSubscriptionsProp[EffectSubscriptionsProp[\"PROPERTY\"] = 1] = \"PROPERTY\";\n    EffectSubscriptionsProp[EffectSubscriptionsProp[\"FIRST_BACK_REF_OR_DATA\"] = 2] = \"FIRST_BACK_REF_OR_DATA\";\n})(EffectSubscriptionsProp || (EffectSubscriptionsProp = {}));\nexport var EffectProperty;\n(function (EffectProperty) {\n    EffectProperty[\"COMPONENT\"] = \":\";\n    EffectProperty[\"VNODE\"] = \".\";\n})(EffectProperty || (EffectProperty = {}));\nexport class Signal {\n    constructor(container, value) {\n        /** Store a list of effects which are dependent on this signal. */\n        this.$effects$ = null;\n        this.$container$ = null;\n        this.$container$ = container;\n        this.$untrackedValue$ = value;\n        DEBUG && log('new', this);\n    }\n    get untrackedValue() {\n        return this.$untrackedValue$;\n    }\n    // TODO: should we disallow setting the value directly?\n    set untrackedValue(value) {\n        this.$untrackedValue$ = value;\n    }\n    get value() {\n        const ctx = tryGetInvokeContext();\n        if (ctx) {\n            if (this.$container$ === null) {\n                if (!ctx.$container$) {\n                    return this.untrackedValue;\n                }\n                // Grab the container now we have access to it\n                this.$container$ = ctx.$container$;\n            }\n            else {\n                assertTrue(!ctx.$container$ || ctx.$container$ === this.$container$, 'Do not use signals across containers');\n            }\n            const effectSubscriber = ctx.$effectSubscriber$;\n            if (effectSubscriber) {\n                const effects = (this.$effects$ || (this.$effects$ = []));\n                // Let's make sure that we have a reference to this effect.\n                // Adding reference is essentially adding a subscription, so if the signal\n                // changes we know who to notify.\n                ensureContainsEffect(effects, effectSubscriber);\n                // But when effect is scheduled in needs to be able to know which signals\n                // to unsubscribe from. So we need to store the reference from the effect back\n                // to this signal.\n                ensureContains(effectSubscriber, this);\n                if (isSubscriber(this)) {\n                    // We need to add the subscriber to the effect so that we can clean it up later\n                    ensureEffectContainsSubscriber(effectSubscriber[EffectSubscriptionsProp.EFFECT], this, this.$container$);\n                }\n                DEBUG && log('read->sub', pad('\\n' + this.toString(), '  '));\n            }\n        }\n        return this.untrackedValue;\n    }\n    set value(value) {\n        if (value !== this.$untrackedValue$) {\n            DEBUG &&\n                log('Signal.set', this.$untrackedValue$, '->', value, pad('\\n' + this.toString(), '  '));\n            this.$untrackedValue$ = value;\n            triggerEffects(this.$container$, this, this.$effects$);\n        }\n    }\n    // prevent accidental use as value\n    valueOf() {\n        if (qDev) {\n            return throwErrorAndStop('Cannot coerce a Signal, use `.value` instead');\n        }\n    }\n    toString() {\n        return (`[${this.constructor.name}${this.$invalid$ ? ' INVALID' : ''} ${String(this.$untrackedValue$)}]` +\n            (this.$effects$?.map((e) => '\\n -> ' + pad(qwikDebugToString(e[0]), '    ')).join('\\n') || ''));\n    }\n    toJSON() {\n        return { value: this.$untrackedValue$ };\n    }\n}\n/** Ensure the item is in array (do nothing if already there) */\nexport const ensureContains = (array, value) => {\n    const isMissing = array.indexOf(value) === -1;\n    if (isMissing) {\n        array.push(value);\n    }\n};\nexport const ensureContainsEffect = (array, effectSubscriptions) => {\n    for (let i = 0; i < array.length; i++) {\n        const existingEffect = array[i];\n        if (existingEffect[0] === effectSubscriptions[0] &&\n            existingEffect[1] === effectSubscriptions[1]) {\n            return;\n        }\n    }\n    array.push(effectSubscriptions);\n};\nexport const ensureEffectContainsSubscriber = (effect, subscriber, container) => {\n    if (isSubscriber(effect)) {\n        effect.$effectDependencies$ || (effect.$effectDependencies$ = []);\n        if (subscriberExistInSubscribers(effect.$effectDependencies$, subscriber)) {\n            return;\n        }\n        effect.$effectDependencies$.push(subscriber);\n    }\n    else if (vnode_isVNode(effect) && vnode_isVirtualVNode(effect)) {\n        let subscribers = vnode_getProp(effect, QSubscribers, container ? container.$getObjectById$ : null);\n        subscribers || (subscribers = []);\n        if (subscriberExistInSubscribers(subscribers, subscriber)) {\n            return;\n        }\n        subscribers.push(subscriber);\n        vnode_setProp(effect, QSubscribers, subscribers);\n    }\n    else if (isSSRNode(effect)) {\n        let subscribers = effect.getProp(QSubscribers);\n        subscribers || (subscribers = []);\n        if (subscriberExistInSubscribers(subscribers, subscriber)) {\n            return;\n        }\n        subscribers.push(subscriber);\n        effect.setProp(QSubscribers, subscribers);\n    }\n};\nconst isSSRNode = (effect) => {\n    return 'setProp' in effect && 'getProp' in effect && 'removeProp' in effect && 'id' in effect;\n};\nconst subscriberExistInSubscribers = (subscribers, subscriber) => {\n    for (let i = 0; i < subscribers.length; i++) {\n        if (subscribers[i] === subscriber) {\n            return true;\n        }\n    }\n    return false;\n};\nexport const triggerEffects = (container, signal, effects) => {\n    if (effects) {\n        const scheduleEffect = (effectSubscriptions) => {\n            const effect = effectSubscriptions[EffectSubscriptionsProp.EFFECT];\n            const property = effectSubscriptions[EffectSubscriptionsProp.PROPERTY];\n            assertDefined(container, 'Container must be defined.');\n            if (isTask(effect)) {\n                effect.$flags$ |= TaskFlags.DIRTY;\n                DEBUG && log('schedule.effect.task', pad('\\n' + String(effect), '  '));\n                let choreType = ChoreType.TASK;\n                if (effect.$flags$ & TaskFlags.VISIBLE_TASK) {\n                    choreType = ChoreType.VISIBLE;\n                }\n                else if (effect.$flags$ & TaskFlags.RESOURCE) {\n                    choreType = ChoreType.RESOURCE;\n                }\n                container.$scheduler$(choreType, effect);\n            }\n            else if (effect instanceof Signal) {\n                // we don't schedule ComputedSignal/DerivedSignal directly, instead we invalidate it and\n                // and schedule the signals effects (recursively)\n                if (effect instanceof ComputedSignal) {\n                    // Ensure that the computed signal's QRL is resolved.\n                    // If not resolved schedule it to be resolved.\n                    if (!effect.$computeQrl$.resolved) {\n                        container.$scheduler$(ChoreType.QRL_RESOLVE, null, effect.$computeQrl$);\n                    }\n                }\n                effect.$invalid$ = true;\n                const previousSignal = signal;\n                try {\n                    signal = effect;\n                    effect.$effects$?.forEach(scheduleEffect);\n                }\n                catch (e) {\n                    logError(e);\n                }\n                finally {\n                    signal = previousSignal;\n                }\n            }\n            else if (property === EffectProperty.COMPONENT) {\n                const host = effect;\n                const qrl = container.getHostProp(host, OnRenderProp);\n                assertDefined(qrl, 'Component must have QRL');\n                const props = container.getHostProp(host, ELEMENT_PROPS);\n                container.$scheduler$(ChoreType.COMPONENT, host, qrl, props);\n            }\n            else if (property === EffectProperty.VNODE) {\n                const host = effect;\n                const target = host;\n                container.$scheduler$(ChoreType.NODE_DIFF, host, target, signal);\n            }\n            else {\n                const host = effect;\n                let effectData = effectSubscriptions[EffectSubscriptionsProp.FIRST_BACK_REF_OR_DATA];\n                if (effectData instanceof EffectData) {\n                    effectData = effectData;\n                    const data = effectData.data;\n                    const payload = {\n                        ...data,\n                        $value$: signal,\n                    };\n                    container.$scheduler$(ChoreType.NODE_PROP, host, property, payload);\n                }\n            }\n        };\n        effects.forEach(scheduleEffect);\n    }\n    DEBUG && log('done scheduling');\n};\n/**\n * A signal which is computed from other signals.\n *\n * The value is available synchronously, but the computation is done lazily.\n */\nexport class ComputedSignal extends Signal {\n    constructor(container, fn) {\n        // The value is used for comparison when signals trigger, which can only happen\n        // when it was calculated before. Therefore we can pass whatever we like.\n        super(container, NEEDS_COMPUTATION);\n        // We need a separate flag to know when the computation needs running because\n        // we need the old value to know if effects need running after computation\n        this.$invalid$ = true;\n        this.$computeQrl$ = fn;\n    }\n    $invalidate$() {\n        this.$invalid$ = true;\n        if (!this.$effects$?.length) {\n            return;\n        }\n        // We should only call subscribers if the calculation actually changed.\n        // Therefore, we need to calculate the value now.\n        // TODO move this calculation to the beginning of the next tick, add chores to that tick if necessary. New chore type?\n        if (this.$computeIfNeeded$()) {\n            triggerEffects(this.$container$, this, this.$effects$);\n        }\n    }\n    /**\n     * Use this to force running subscribers, for example when the calculated value has mutated but\n     * remained the same object\n     */\n    force() {\n        this.$invalid$ = true;\n        triggerEffects(this.$container$, this, this.$effects$);\n    }\n    get untrackedValue() {\n        this.$computeIfNeeded$();\n        assertFalse(this.$untrackedValue$ === NEEDS_COMPUTATION, 'Invalid state');\n        return this.$untrackedValue$;\n    }\n    $computeIfNeeded$() {\n        if (!this.$invalid$) {\n            return false;\n        }\n        const computeQrl = this.$computeQrl$;\n        throwIfQRLNotResolved(computeQrl);\n        const ctx = tryGetInvokeContext();\n        const previousEffectSubscription = ctx?.$effectSubscriber$;\n        ctx && (ctx.$effectSubscriber$ = [this, EffectProperty.VNODE]);\n        try {\n            const untrackedValue = computeQrl.getFn(ctx)();\n            if (isPromise(untrackedValue)) {\n                throwErrorAndStop(`useComputedSignal$ QRL ${computeQrl.dev ? `${computeQrl.dev.file} ` : ''}${computeQrl.$hash$} returned a Promise`);\n            }\n            DEBUG && log('Signal.$compute$', untrackedValue);\n            this.$invalid$ = false;\n            const didChange = untrackedValue !== this.$untrackedValue$;\n            this.$untrackedValue$ = untrackedValue;\n            return didChange;\n        }\n        finally {\n            if (ctx) {\n                ctx.$effectSubscriber$ = previousEffectSubscription;\n            }\n        }\n    }\n    // Getters don't get inherited\n    get value() {\n        return super.value;\n    }\n    set value(_) {\n        throwErrorAndStop('ComputedSignal is read-only');\n    }\n}\nexport class WrappedSignal extends Signal {\n    constructor(container, fn, args, fnStr) {\n        super(container, NEEDS_COMPUTATION);\n        // We need a separate flag to know when the computation needs running because\n        // we need the old value to know if effects need running after computation\n        this.$invalid$ = true;\n        this.$effectDependencies$ = null;\n        this.$args$ = args;\n        this.$func$ = fn;\n        this.$funcStr$ = fnStr;\n    }\n    $invalidate$() {\n        this.$invalid$ = true;\n        if (!this.$effects$?.length) {\n            return;\n        }\n        // We should only call subscribers if the calculation actually changed.\n        // Therefore, we need to calculate the value now.\n        // TODO move this calculation to the beginning of the next tick, add chores to that tick if necessary. New chore type?\n        if (this.$computeIfNeeded$()) {\n            triggerEffects(this.$container$, this, this.$effects$);\n        }\n    }\n    /**\n     * Use this to force running subscribers, for example when the calculated value has mutated but\n     * remained the same object\n     */\n    force() {\n        this.$invalid$ = true;\n        triggerEffects(this.$container$, this, this.$effects$);\n    }\n    get untrackedValue() {\n        this.$computeIfNeeded$();\n        assertFalse(this.$untrackedValue$ === NEEDS_COMPUTATION, 'Invalid state');\n        return this.$untrackedValue$;\n    }\n    $computeIfNeeded$() {\n        if (!this.$invalid$) {\n            return false;\n        }\n        this.$untrackedValue$ = trackSignal(() => this.$func$(...this.$args$), this, EffectProperty.VNODE, this.$container$);\n    }\n    // Getters don't get inherited\n    get value() {\n        return super.value;\n    }\n    set value(_) {\n        throwErrorAndStop('WrappedSignal is read-only');\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmFsLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3NpZ25hbC9zaWduYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsT0FBTyxFQUFFLEdBQUcsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNsRCxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNoRixPQUFPLEVBQW9CLE1BQU0seUJBQXlCLENBQUM7QUFFM0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzFELE9BQU8sRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDckQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRTVDLE9BQU8sRUFBRSxhQUFhLEVBQUUsb0JBQW9CLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3BHLE9BQU8sRUFBRSxTQUFTLEVBQTJDLE1BQU0scUJBQXFCLENBQUM7QUFLekYsT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUkvRCxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUM7QUFFcEI7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQVEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRXhELHND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LENBQUMsV0FBWSxDQUNsQixDQUFDO0lBQ0osQ0FBQztJQUVELDhCQUE4QjtJQUM5QixJQUFJLEtBQUs7UUFDUCxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUVELElBQUksS0FBSyxDQUFDLENBQU07UUFDZCxpQkFBaUIsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0lBQ2xELENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVcbiAqXG4gKiAgIFNpZ25hbHMgY29tZSBpbiB0d28gdHlwZXM6XG4gKlxuICogICAxLiBgU2lnbmFsYCAtIEEgc3RvcmFnZSBvZiBkYXRhXG4gKiAgIDIuIGBDb21wdXRlZFNpZ25hbGAgLSBBIHNpZ25hbCB3aGljaCBpcyBjb21wdXRlZCBmcm9tIG90aGVyIHNpZ25hbHMuXG4gKlxuICogICAjIyBXaHkgaXMgYENvbXB1dGVkU2lnbmFsYCBkaWZmZXJlbnQ/XG4gKlxuICogICAtIEl0IG5lZWRzIHRvIHN0b3JlIGEgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gcmUtcnVuLlxuICogICAtIEl0IGlzIGBSZWFkb25seWAgYmVjYXVzZSBpdCBpcyBjb21wdXRlZC5cbiAqL1xuaW1wb3J0IHsgcGFkLCBxd2lrRGVidWdUb1N0cmluZyB9IGZyb20gJy4uL2RlYnVnJztcbmltcG9ydCB7IGFzc2VydERlZmluZWQsIGFzc2VydEZhbHNlLCBhc3NlcnRUcnVlIH0gZnJvbSAnLi4vc2hhcmVkL2Vycm9yL2Fzc2VydCc7XG5pbXBvcnQgeyB0eXBlIFFSTEludGVybmFsIH0gZnJvbSAnLi4vc2hhcmVkL3FybC9xcmwtY2xhc3MnO1xuaW1wb3J0IHR5cGUgeyBRUkwgfSBmcm9tICcuLi9zaGFyZWQvcXJsL3FybC5wdWJsaWMnO1xuaW1wb3J0IHsgdHJhY2tTaWduYWwsIHRyeUdldEludm9rZUNvbnRleHQgfSBmcm9tICcuLi91c2UvdXNlLWNvcmUnO1xuaW1wb3J0IHsgVGFzaywgVGFza0ZsYWdzLCBpc1Rhc2sgfSBmcm9tICcuLi91c2UvdXNlLXRhc2snO1xuaW1wb3J0IHsgbG9nRXJyb3IsIHRocm93RXJyb3JBbmRTdG9wIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzL2xvZyc7XG5pbXBvcnQgeyBFTEVNRU5UX1BST1BTLCBPblJlbmRlclByb3AsIFFTdWJzY3JpYmVycyB9IGZyb20gJy4uL3NoYXJlZC91dGlscy9tYXJrZXJzJztcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4uL3NoYXJlZC91dGlscy9wcm9taXNlcyc7XG5pbXBvcnQgeyBxRGV2IH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzL3FkZXYnO1xuaW1wb3J0IHR5cGUgeyBWTm9kZSB9IGZyb20gJy4uL2NsaWVudC90eXBlcyc7XG5pbXBvcnQgeyB2bm9kZV9nZXRQcm9wLCB2bm9kZV9pc1ZpcnR1YWxWTm9kZSwgdm5vZGVfaXNWTm9kZSwgdm5vZGVfc2V0UHJvcCB9IGZyb20gJy4uL2NsaWVudC92bm9kZSc7XG5pbXBvcnQgeyBDaG9yZVR5cGUsIHR5cGUgTm9kZVByb3BEYXRhLCB0eXBlIE5vZGVQcm9wUGF5bG9hZCB9IGZyb20gJy4uL3NoYXJlZC9zY2hlZHVsZXInO1xuaW1wb3J0IHR5cGUgeyBDb250YWluZXIsIEhvc3RFbGVtZW50IH0gZnJvbSAnLi4vc2hhcmVkL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgSVNzck5vZGUgfSBmcm9tICcuLi9zc3Ivc3NyLXR5cGVzJztcbmltcG9ydCB0eXBlIHsgU2lnbmFsIGFzIElTaWduYWwsIFJlYWRvbmx5U2lnbmFsIH0gZnJvbSAnLi9zaWduYWwucHVibGljJztcbmltcG9ydCB0eXBlIHsgVGFyZ2V0VHlwZSB9IGZyb20gJy4vc3RvcmUnO1xuaW1wb3J0IHsgaXNTdWJzY3JpYmVyLCBTdWJzY3JpYmVyIH0gZnJvbSAnLi9zaWduYWwtc3Vic2NyaWJlcic7XG5pbXBvcnQgdHlwZSB7IFByb3BzIH0gZnJvbSAnLi4vc2hhcmVkL2pzeC9qc3gtcnVudGltZSc7XG5pbXBvcnQgdHlwZSB7IE9uUmVuZGVyRm4gfSBmcm9tICcuLi9zaGFyZWQvY29tcG9uZW50LnB1YmxpYyc7XG5cbmNvbnN0IERFQlVHID0gZmFsc2U7XG5cbi8qKlxuICogU3BlY2lhbCB2YWx1ZSB1c2VkIHRvIG1hcmsgdGhhdCBhIGdpdmVuIHNpZ25hbCBuZWVkcyB0byBiZSBjb21wdXRlZC4gVGhpcyBpcyBlc3NlbnRpYWxseSBhXG4gKiBcIm1hcmtlZCBhcyBkaXJ0eVwiIGZsYWcuXG4gKi9cbmV4cG9ydCBjb25zdCBORUVEU19DT01QVVRBVElPTjogYW55ID0gU3ltYm9sKCdpbnZhbGlkJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5jb25zdCBsb2cgPSAoLi4uYXJnczogYW55W10pID0+IGNvbnNvbGUubG9nKCdTSUdOQUwnLCAuLi5hcmdzLm1hcChxd2lrRGVidWdUb1N0cmluZykpO1xuXG5leHBvcnQgaW50ZXJmYWNlIEludGVybmFsUmVhZG9ubHlTaWduYWw8VCA9IHVua25vd24+IGV4dGVuZHMgUmVhZG9ubHlTaWduYWw8VD4ge1xuICByZWFkb25seSB1bnRyYWNrZWRWYWx1ZTogVDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbnRlcm5hbFNpZ25hbDxUID0gYW55PiBleHRlbmRzIEludGVybmFsUmVhZG9ubHlTaWduYWw8VD4ge1xuICB2YWx1ZTogVDtcbiAgdW50cmFja2VkVmFsdWU6IFQ7XG59XG5cbmV4cG9ydCBjb25zdCB0aHJvd0lmUVJMTm90UmVzb2x2ZWQgPSA8VD4ocXJsOiBRUkw8KCkgPT4gVD4pID0+IHtcbiAgY29uc3QgcmVzb2x2ZWQgPSBxcmwucmVzb2x2ZWQ7XG4gIGlmICghcmVzb2x2ZWQpIHtcbiAgICAvLyBXaGVuIHdlIGFyZSBjcmVhdGluZyBhIHNpZ25hbCB1c2luZyBhIHVzZSBtZXRob2QsIHdlIG5lZWQgdG8gZW5zdXJlXG4gICAgLy8gdGhhdCB0aGUgY29tcHV0YXRpb24gY2FuIGJlIGxhenkgYW5kIHRoZXJlZm9yZSB3ZSBuZWVkIHRvIHVuc3VyZVxuICAgIC8vIHRoYXQgdGhlIFFSTCBpcyByZXNvbHZlZC5cbiAgICAvLyBXaGVuIHdlIHJlLWNyZWF0ZSB0aGUgc2lnbmFsIGZyb20gc2VyaWFsaXphdGlvbiAod2UgZG9uJ3QgY3JlYXRlIHRoZSBzaWduYWxcbiAgICAvLyB1c2luZyB1c2VNZXRob2QpIGl0IGlzIE9LIHRvIG5vdCByZXNvbHZlIGl0IHVudGlsIHRoZSBncmFwaCBpcyBtYXJrZWQgYXMgZGlydHkuXG4gICAgdGhyb3cgcXJsLnJlc29sdmUoKTtcbiAgfVxufTtcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBpc1NpZ25hbCA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgSVNpZ25hbDx1bmtub3duPiA9PiB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFNpZ25hbDtcbn07XG5cbi8qKlxuICogRWZmZWN0IGlzIHNvbWV0aGluZyB3aGljaCBuZWVkcyB0byBoYXBwZW4gKHNpZGUtZWZmZWN0KSBkdWUgdG8gc2lnbmFsIHZhbHVlIGNoYW5nZS5cbiAqXG4gKiBUaGVyZSBhcmUgdGhyZWUgdHlwZXMgb2YgZWZmZWN0czpcbiAqXG4gKiAtIGBUYXNrYDogYHVzZVRhc2tgLCBgdXNlVmlzaWJsZVRhc2tgLCBgdXNlUmVzb3VyY2VgXG4gKiAtIGBWTm9kZWAgYW5kIGBJU3NyTm9kZWA6IEVpdGhlciBhIGNvbXBvbmVudCBvciBgPFNpZ25hbD5gXG4gKiAtIGBTaWduYWwyYDogQSBkZXJpdmVkIHNpZ25hbCB3aGljaCBjb250YWlucyBhIGNvbXB1dGF0aW9uIGZ1bmN0aW9uLlxuICovXG5leHBvcnQgdHlwZSBFZmZlY3QgPSBUYXNrIHwgVk5vZGUgfCBJU3NyTm9kZSB8IFNpZ25hbDtcblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNsYXNzIEVmZmVjdERhdGE8VCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4gPSBSZWNvcmQ8c3RyaW5nLCBhbnk+PiB7XG4gIGRhdGE6IFQ7XG5cbiAgY29uc3RydWN0b3IoZGF0YTogVCkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gIH1cbn1cblxuLyoqXG4gKiBBbiBlZmZlY3QgcGx1cyBhIGxpc3Qgb2Ygc3Vic2NyaXB0aW9ucyBlZmZlY3QgZGVwZW5kcyBvbi5cbiAqXG4gKiBBbiBlZmZlY3QgY2FuIGJlIHRyaWdnZXIgYnkgb25lIG9yIG1vcmUgb2Ygc2lnbmFsIGlucHV0cy4gVGhlIGZpcnN0IHN0ZXAgb2YgcmUtcnVubmluZyBhbiBlZmZlY3RcbiAqIGlzIHRvIGNsZWFyIGl0cyBzdWJzY3JpcHRpb25zIHNvIHRoYXQgdGhlIGVmZmVjdCBjYW4gcmUgYWRkIG5ldyBzZXQgb2Ygc3Vic2NyaXB0aW9ucy4gSW4gb3JkZXIgdG9cbiAqIGNsZWFyIHRoZSBzdWJzY3JpcHRpb25zIHdlIG5lZWQgdG8gc3RvcmUgdGhlbSBoZXJlLlxuICpcbiAqIEltYWdpbmUgeW91IGhhdmUgZWZmZWN0IHN1Y2ggYXM6XG4gKlxuICogYGBgXG4gKiBmdW5jdGlvbiBlZmZlY3QxKCkge1xuICogICBjb25zb2xlLmxvZyhzaWduYWxBLnZhbHVlID8gc2lnbmFsQi52YWx1ZSA6ICdkZWZhdWx0Jyk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBJbiB0aGUgYWJvdmUgY2FzZSB0aGUgYHNpZ25hbEJgIG5lZWRzIHRvIGJlIHVuc3Vic2NyaWJlZCB3aGVuIGBzaWduYWxBYCBpcyBmYWxzeS4gV2UgZG8gdGhpcyBieVxuICogYWx3YXlzIGNsZWFyaW5nIGFsbCBvZiB0aGUgc3Vic2NyaXB0aW9uc1xuICpcbiAqIFRoZSBgRWZmZWN0U3Vic2NyaXB0aW9uc2Agc3RvcmVzXG4gKlxuICogYGBgXG4gKiBzdWJzY3JpcHRpb24xID0gW2VmZmVjdDEsIHNpZ25hbEEsIHNpZ25hbEJdO1xuICogYGBgXG4gKlxuICogVGhlIGBzaWduYWwxYCBhbmQgYHNpZ25hbDJgIGJhY2sgcmVmZXJlbmNlcyBhcmUgbmVlZGVkIHRvIFwiY2xlYXJcIiBleGlzdGluZyBzdWJzY3JpcHRpb25zLlxuICpcbiAqIEJvdGggYHNpZ25hbEFgIGFzIHdlbGwgYXMgYHNpZ25hbEJgIHdpbGwgaGF2ZSBhIHJlZmVyZW5jZSB0byBgc3Vic2NyaXB0aW9uYCB0byB0aGUgc28gdGhhdCB0aGVcbiAqIGVmZmVjdCBjYW4gYmUgc2NoZWR1bGVkIGlmIGVpdGhlciBgc2lnbmFsQWAgb3IgYHNpZ25hbEJgIHRyaWdnZXJzLiBUaGUgYHN1YnNjcmlwdGlvbjFgIGlzIHNoYXJlZFxuICogYmV0d2VlbiB0aGUgc2lnbmFscy5cbiAqXG4gKiBUaGUgc2Vjb25kIHBvc2l0aW9uIGBzdHJpbmd8Ym9vbGVhbmAgc3RvcmUgdGhlIHByb3BlcnR5IG5hbWUgb2YgdGhlIGVmZmVjdC5cbiAqXG4gKiAtIFByb3BlcnR5IG5hbWUgb2YgdGhlIFZOb2RlXG4gKiAtIGBFZmZlY3RQcm9wZXJ0eS5DT01QT05FTlRgIGlmIGNvbXBvbmVudFxuICogLSBgRWZmZWN0UHJvcGVydHkuVk5PREVgIGlmIFZOb2RlXG4gKi9cbmV4cG9ydCB0eXBlIEVmZmVjdFN1YnNjcmlwdGlvbnMgPSBbXG4gIC4uLltcbiAgICBFZmZlY3QsIC8vIEVmZmVjdFN1YnNjcmlwdGlvbnNQcm9wLkVGRkVDVFxuICAgIHN0cmluZywgLy8gRWZmZWN0U3Vic2NyaXB0aW9uc1Byb3AuUFJPUEVSVFlcbiAgXSxcbiAgLy8gTGlzdCBvZiBzaWduYWxzIHRvIHJlbGVhc2VcbiAgLi4uKFxuICAgIHwgRWZmZWN0RGF0YSAvLyBNZXRhZGF0YSBmb3IgdGhlIGVmZmVjdFxuICAgIHwgc3RyaW5nIC8vIExpc3Qgb2YgcHJvcGVydGllcyAoT25seSB1c2VkIHdpdGggU3RvcmUgKG5vdCB3aXRoIFNpZ25hbCkpXG4gICAgfCBTaWduYWxcbiAgICB8IFRhcmdldFR5cGVcbiAgKVtdLFxuXTtcbmV4cG9ydCBjb25zdCBlbnVtIEVmZmVjdFN1YnNjcmlwdGlvbnNQcm9wIHtcbiAgRUZGRUNUID0gMCxcbiAgUFJPUEVSVFkgPSAxLFxuICBGSVJTVF9CQUNLX1JFRl9PUl9EQVRBID0gMixcbn1cbmV4cG9ydCBjb25zdCBlbnVtIEVmZmVjdFByb3BlcnR5IHtcbiAgQ09NUE9ORU5UID0gJzonLFxuICBWTk9ERSA9ICcuJyxcbn1cblxuZXhwb3J0IGNsYXNzIFNpZ25hbDxUID0gYW55PiBpbXBsZW1lbnRzIElTaWduYWw8VD4ge1xuICAkdW50cmFja2VkVmFsdWUkOiBUO1xuXG4gIC8qKiBTdG9yZSBhIGxpc3Qgb2YgZWZmZWN0cyB3aGljaCBhcmUgZGVwZW5kZW50IG9uIHRoaXMgc2lnbmFsLiAqL1xuICAkZWZmZWN0cyQ6IG51bGwgfCBFZmZlY3RTdWJzY3JpcHRpb25zW10gPSBudWxsO1xuXG4gICRjb250YWluZXIkOiBDb250YWluZXIgfCBudWxsID0gbnVsbDtcblxuICBjb25zdHJ1Y3Rvcihjb250YWluZXI6IENvbnRhaW5lciB8IG51bGwsIHZhbHVlOiBUKSB7XG4gICAgdGhpcy4kY29udGFpbmVyJCA9IGNvbnRhaW5lcjtcbiAgICB0aGlzLiR1bnRyYWNrZWRWYWx1ZSQgPSB2YWx1ZTtcbiAgICBERUJVRyAmJiBsb2coJ25ldycsIHRoaXMpO1xuICB9XG5cbiAgZ2V0IHVudHJhY2tlZFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLiR1bnRyYWNrZWRWYWx1ZSQ7XG4gIH1cblxuICAvLyBUT0RPOiBzaG91bGQgd2UgZGlzYWxsb3cgc2V0dGluZyB0aGUgdmFsdWUgZGlyZWN0bHk/XG4gIHNldCB1bnRyYWNrZWRWYWx1ZSh2YWx1ZTogVCkge1xuICAgIHRoaXMuJHVudHJhY2tlZFZhbHVlJCA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCkge1xuICAgIGNvbnN0IGN0eCA9IHRyeUdldEludm9rZUNvbnRleHQoKTtcbiAgICBpZiAoY3R4KSB7XG4gICAgICBpZiAodGhpcy4kY29udGFpbmVyJCA9PT0gbnVsbCkge1xuICAgICAgICBpZiAoIWN0eC4kY29udGFpbmVyJCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnVudHJhY2tlZFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEdyYWIgdGhlIGNvbnRhaW5lciBub3cgd2UgaGF2ZSBhY2Nlc3MgdG8gaXRcbiAgICAgICAgdGhpcy4kY29udGFpbmVyJCA9IGN0eC4kY29udGFpbmVyJDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFzc2VydFRydWUoXG4gICAgICAgICAgIWN0eC4kY29udGFpbmVyJCB8fCBjdHguJGNvbnRhaW5lciQgPT09IHRoaXMuJGNvbnRhaW5lciQsXG4gICAgICAgICAgJ0RvIG5vdCB1c2Ugc2lnbmFscyBhY3Jvc3MgY29udGFpbmVycydcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVmZmVjdFN1YnNjcmliZXIgPSBjdHguJGVmZmVjdFN1YnNjcmliZXIkO1xuICAgICAgaWYgKGVmZmVjdFN1YnNjcmliZXIpIHtcbiAgICAgICAgY29uc3QgZWZmZWN0cyA9ICh0aGlzLiRlZmZlY3RzJCB8fD0gW10pO1xuICAgICAgICAvLyBMZXQncyBtYWtlIHN1cmUgdGhhdCB3ZSBoYXZlIGEgcmVmZXJlbmNlIHRvIHRoaXMgZWZmZWN0LlxuICAgICAgICAvLyBBZGRpbmcgcmVmZXJlbmNlIGlzIGVzc2VudGlhbGx5IGFkZGluZyBhIHN1YnNjcmlwdGlvbiwgc28gaWYgdGhlIHNpZ25hbFxuICAgICAgICAvLyBjaGFuZ2VzIHdlIGtub3cgd2hvIHRvIG5vdGlmeS5cbiAgICAgICAgZW5zdXJlQ29udGFpbnNFZmZlY3QoZWZmZWN0cywgZWZmZWN0U3Vic2NyaWJlcik7XG4gICAgICAgIC8vIEJ1dCB3aGVuIGVmZmVjdCBpcyBzY2hlZHVsZWQgaW4gbmVlZHMgdG8gYmUgYWJsZSB0byBrbm93IHdoaWNoIHNpZ25hbHNcbiAgICAgICAgLy8gdG8gdW5zdWJzY3JpYmUgZnJvbS4gU28gd2UgbmVlZCB0byBzdG9yZSB0aGUgcmVmZXJlbmNlIGZyb20gdGhlIGVmZmVjdCBiYWNrXG4gICAgICAgIC8vIHRvIHRoaXMgc2lnbmFsLlxuICAgICAgICBlbnN1cmVDb250YWlucyhlZmZlY3RTdWJzY3JpYmVyLCB0aGlzKTtcbiAgICAgICAgaWYgKGlzU3Vic2NyaWJlcih0aGlzKSkge1xuICAgICAgICAgIC8vIFdlIG5lZWQgdG8gYWRkIHRoZSBzdWJzY3JpYmVyIHRvIHRoZSBlZmZlY3Qgc28gdGhhdCB3ZSBjYW4gY2xlYW4gaXQgdXAgbGF0ZXJcbiAgICAgICAgICBlbnN1cmVFZmZlY3RDb250YWluc1N1YnNjcmliZXIoXG4gICAgICAgICAgICBlZmZlY3RTdWJzY3JpYmVyW0VmZmVjdFN1YnNjcmlwdGlvbnNQcm9wLkVGRkVDVF0sXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgdGhpcy4kY29udGFpbmVyJFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgREVCVUcgJiYgbG9nKCdyZWFkLT5zdWInLCBwYWQoJ1xcbicgKyB0aGlzLnRvU3RyaW5nKCksICcgICcpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudW50cmFja2VkVmFsdWU7XG4gIH1cblxuICBzZXQgdmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgIT09IHRoaXMuJHVudHJhY2tlZFZhbHVlJCkge1xuICAgICAgREVCVUcgJiZcbiAgICAgICAgbG9nKCdTaWduYWwuc2V0JywgdGhpcy4kdW50cmFja2VkVmFsdWUkLCAnLT4nLCB2YWx1ZSwgcGFkKCdcXG4nICsgdGhpcy50b1N0cmluZygpLCAnICAnKSk7XG4gICAgICB0aGlzLiR1bnRyYWNrZWRWYWx1ZSQgPSB2YWx1ZTtcbiAgICAgIHRyaWdnZXJFZmZlY3RzKHRoaXMuJGNvbnRhaW5lciQsIHRoaXMsIHRoaXMuJGVmZmVjdHMkKTtcbiAgICB9XG4gIH1cblxuICAvLyBwcmV2ZW50IGFjY2lkZW50YWwgdXNlIGFzIHZhbHVlXG4gIHZhbHVlT2YoKSB7XG4gICAgaWYgKHFEZXYpIHtcbiAgICAgIHJldHVybiB0aHJvd0Vycm9yQW5kU3RvcCgnQ2Fubm90IGNvZXJjZSBhIFNpZ25hbCwgdXNlIGAudmFsdWVgIGluc3RlYWQnKTtcbiAgICB9XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gKFxuICAgICAgYFske3RoaXMuY29uc3RydWN0b3IubmFtZX0keyh0aGlzIGFzIGFueSkuJGludmFsaWQkID8gJyBJTlZBTElEJyA6ICcnfSAke1N0cmluZyh0aGlzLiR1bnRyYWNrZWRWYWx1ZSQpfV1gICtcbiAgICAgICh0aGlzLiRlZmZlY3RzJD8ubWFwKChlKSA9PiAnXFxuIC0+ICcgKyBwYWQocXdpa0RlYnVnVG9TdHJpbmcoZVswXSksICcgICAgJykpLmpvaW4oJ1xcbicpIHx8ICcnKVxuICAgICk7XG4gIH1cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB0aGlzLiR1bnRyYWNrZWRWYWx1ZSQgfTtcbiAgfVxufVxuXG4vKiogRW5zdXJlIHRoZSBpdGVtIGlzIGluIGFycmF5IChkbyBub3RoaW5nIGlmIGFscmVhZHkgdGhlcmUpICovXG5leHBvcnQgY29uc3QgZW5zdXJlQ29udGFpbnMgPSAoYXJyYXk6IGFueVtdLCB2YWx1ZTogYW55KSA9PiB7XG4gIGNvbnN0IGlzTWlzc2luZyA9IGFycmF5LmluZGV4T2YodmFsdWUpID09PSAtMTtcbiAgaWYgKGlzTWlzc2luZykge1xuICAgIGFycmF5LnB1c2godmFsdWUpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZW5zdXJlQ29udGFpbnNFZmZlY3QgPSAoXG4gIGFycmF5OiBFZmZlY3RTdWJzY3JpcHRpb25zW10sXG4gIGVmZmVjdFN1YnNjcmlwdGlvbnM6IEVmZmVjdFN1YnNjcmlwdGlvbnNcbikgPT4ge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgZXhpc3RpbmdFZmZlY3QgPSBhcnJheVtpXTtcbiAgICBpZiAoXG4gICAgICBleGlzdGluZ0VmZmVjdFswXSA9PT0gZWZmZWN0U3Vic2NyaXB0aW9uc1swXSAmJlxuICAgICAgZXhpc3RpbmdFZmZlY3RbMV0gPT09IGVmZmVjdFN1YnNjcmlwdGlvbnNbMV1cbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgYXJyYXkucHVzaChlZmZlY3RTdWJzY3JpcHRpb25zKTtcbn07XG5cbmV4cG9ydCBjb25zdCBlbnN1cmVFZmZlY3RDb250YWluc1N1YnNjcmliZXIgPSAoXG4gIGVmZmVjdDogRWZmZWN0LFxuICBzdWJzY3JpYmVyOiBTdWJzY3JpYmVyLFxuICBjb250YWluZXI6IENvbnRhaW5lciB8IG51bGxcbikgPT4ge1xuICBpZiAoaXNTdWJzY3JpYmVyKGVmZmVjdCkpIHtcbiAgICBlZmZlY3QuJGVmZmVjdERlcGVuZGVuY2llcyQgfHw9IFtdO1xuXG4gICAgaWYgKHN1YnNjcmliZXJFeGlzdEluU3Vic2NyaWJlcnMoZWZmZWN0LiRlZmZlY3REZXBlbmRlbmNpZXMkLCBzdWJzY3JpYmVyKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGVmZmVjdC4kZWZmZWN0RGVwZW5kZW5jaWVzJC5wdXNoKHN1YnNjcmliZXIpO1xuICB9IGVsc2UgaWYgKHZub2RlX2lzVk5vZGUoZWZmZWN0KSAmJiB2bm9kZV9pc1ZpcnR1YWxWTm9kZShlZmZlY3QpKSB7XG4gICAgbGV0IHN1YnNjcmliZXJzID0gdm5vZGVfZ2V0UHJvcDxTdWJzY3JpYmVyW10+KFxuICAgICAgZWZmZWN0LFxuICAgICAgUVN1YnNjcmliZXJzLFxuICAgICAgY29udGFpbmVyID8gY29udGFpbmVyLiRnZXRPYmplY3RCeUlkJCA6IG51bGxcbiAgICApO1xuICAgIHN1YnNjcmliZXJzIHx8PSBbXTtcblxuICAgIGlmIChzdWJzY3JpYmVyRXhpc3RJblN1YnNjcmliZXJzKHN1YnNjcmliZXJzLCBzdWJzY3JpYmVyKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN1YnNjcmliZXJzLnB1c2goc3Vic2NyaWJlcik7XG4gICAgdm5vZGVfc2V0UHJvcChlZmZlY3QsIFFTdWJzY3JpYmVycywgc3Vic2NyaWJlcnMpO1xuICB9IGVsc2UgaWYgKGlzU1NSTm9kZShlZmZlY3QpKSB7XG4gICAgbGV0IHN1YnNjcmliZXJzID0gZWZmZWN0LmdldFByb3AoUVN1YnNjcmliZXJzKSBhcyBTdWJzY3JpYmVyW107XG4gICAgc3Vic2NyaWJlcnMgfHw9IFtdO1xuXG4gICAgaWYgKHN1YnNjcmliZXJFeGlzdEluU3Vic2NyaWJlcnMoc3Vic2NyaWJlcnMsIHN1YnNjcmliZXIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3Vic2NyaWJlcnMucHVzaChzdWJzY3JpYmVyKTtcbiAgICBlZmZlY3Quc2V0UHJvcChRU3Vic2NyaWJlcnMsIHN1YnNjcmliZXJzKTtcbiAgfVxufTtcblxuY29uc3QgaXNTU1JOb2RlID0gKGVmZmVjdDogRWZmZWN0KTogZWZmZWN0IGlzIElTc3JOb2RlID0+IHtcbiAgcmV0dXJuICdzZXRQcm9wJyBpbiBlZmZlY3QgJiYgJ2dldFByb3AnIGluIGVmZmVjdCAmJiAncmVtb3ZlUHJvcCcgaW4gZWZmZWN0ICYmICdpZCcgaW4gZWZmZWN0O1xufTtcblxuY29uc3Qgc3Vic2NyaWJlckV4aXN0SW5TdWJzY3JpYmVycyA9IChzdWJzY3JpYmVyczogU3Vic2NyaWJlcltdLCBzdWJzY3JpYmVyOiBTdWJzY3JpYmVyKSA9PiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3Vic2NyaWJlcnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3Vic2NyaWJlcnNbaV0gPT09IHN1YnNjcmliZXIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5leHBvcnQgY29uc3QgdHJpZ2dlckVmZmVjdHMgPSAoXG4gIGNvbnRhaW5lcjogQ29udGFpbmVyIHwgbnVsbCxcbiAgc2lnbmFsOiBTaWduYWwgfCBUYXJnZXRUeXBlLFxuICBlZmZlY3RzOiBFZmZlY3RTdWJzY3JpcHRpb25zW10gfCBudWxsXG4pID0+IHtcbiAgaWYgKGVmZmVjdHMpIHtcbiAgICBjb25zdCBzY2hlZHVsZUVmZmVjdCA9IChlZmZlY3RTdWJzY3JpcHRpb25zOiBFZmZlY3RTdWJzY3JpcHRpb25zKSA9PiB7XG4gICAgICBjb25zdCBlZmZlY3QgPSBlZmZlY3RTdWJzY3JpcHRpb25zW0VmZmVjdFN1YnNjcmlwdGlvbnNQcm9wLkVGRkVDVF07XG4gICAgICBjb25zdCBwcm9wZXJ0eSA9IGVmZmVjdFN1YnNjcmlwdGlvbnNbRWZmZWN0U3Vic2NyaXB0aW9uc1Byb3AuUFJPUEVSVFldO1xuICAgICAgYXNzZXJ0RGVmaW5lZChjb250YWluZXIsICdDb250YWluZXIgbXVzdCBiZSBkZWZpbmVkLicpO1xuICAgICAgaWYgKGlzVGFzayhlZmZlY3QpKSB7XG4gICAgICAgIGVmZmVjdC4kZmxhZ3MkIHw9IFRhc2tGbGFncy5ESVJUWTtcbiAgICAgICAgREVCVUcgJiYgbG9nKCdzY2hlZHVsZS5lZmZlY3QudGFzaycsIHBhZCgnXFxuJyArIFN0cmluZyhlZmZlY3QpLCAnICAnKSk7XG4gICAgICAgIGxldCBjaG9yZVR5cGUgPSBDaG9yZVR5cGUuVEFTSztcbiAgICAgICAgaWYgKGVmZmVjdC4kZmxhZ3MkICYgVGFza0ZsYWdzLlZJU0lCTEVfVEFTSykge1xuICAgICAgICAgIGNob3JlVHlwZSA9IENob3JlVHlwZS5WSVNJQkxFO1xuICAgICAgICB9IGVsc2UgaWYgKGVmZmVjdC4kZmxhZ3MkICYgVGFza0ZsYWdzLlJFU09VUkNFKSB7XG4gICAgICAgICAgY2hvcmVUeXBlID0gQ2hvcmVUeXBlLlJFU09VUkNFO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRhaW5lci4kc2NoZWR1bGVyJChjaG9yZVR5cGUsIGVmZmVjdCk7XG4gICAgICB9IGVsc2UgaWYgKGVmZmVjdCBpbnN0YW5jZW9mIFNpZ25hbCkge1xuICAgICAgICAvLyB3ZSBkb24ndCBzY2hlZHVsZSBDb21wdXRlZFNpZ25hbC9EZXJpdmVkU2lnbmFsIGRpcmVjdGx5LCBpbnN0ZWFkIHdlIGludmFsaWRhdGUgaXQgYW5kXG4gICAgICAgIC8vIGFuZCBzY2hlZHVsZSB0aGUgc2lnbmFscyBlZmZlY3RzIChyZWN1cnNpdmVseSlcbiAgICAgICAgaWYgKGVmZmVjdCBpbnN0YW5jZW9mIENvbXB1dGVkU2lnbmFsKSB7XG4gICAgICAgICAgLy8gRW5zdXJlIHRoYXQgdGhlIGNvbXB1dGVkIHNpZ25hbCdzIFFSTCBpcyByZXNvbHZlZC5cbiAgICAgICAgICAvLyBJZiBub3QgcmVzb2x2ZWQgc2NoZWR1bGUgaXQgdG8gYmUgcmVzb2x2ZWQuXG4gICAgICAgICAgaWYgKCFlZmZlY3QuJGNvbXB1dGVRcmwkLnJlc29sdmVkKSB7XG4gICAgICAgICAgICBjb250YWluZXIuJHNjaGVkdWxlciQoQ2hvcmVUeXBlLlFSTF9SRVNPTFZFLCBudWxsLCBlZmZlY3QuJGNvbXB1dGVRcmwkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgKGVmZmVjdCBhcyBDb21wdXRlZFNpZ25hbDx1bmtub3duPiB8IFdyYXBwZWRTaWduYWw8dW5rbm93bj4pLiRpbnZhbGlkJCA9IHRydWU7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzU2lnbmFsID0gc2lnbmFsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHNpZ25hbCA9IGVmZmVjdDtcbiAgICAgICAgICBlZmZlY3QuJGVmZmVjdHMkPy5mb3JFYWNoKHNjaGVkdWxlRWZmZWN0KTtcbiAgICAgICAgfSBjYXRjaCAoZTogdW5rbm93bikge1xuICAgICAgICAgIGxvZ0Vycm9yKGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHNpZ25hbCA9IHByZXZpb3VzU2lnbmFsO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHByb3BlcnR5ID09PSBFZmZlY3RQcm9wZXJ0eS5DT01QT05FTlQpIHtcbiAgICAgICAgY29uc3QgaG9zdDogSG9zdEVsZW1lbnQgPSBlZmZlY3QgYXMgYW55O1xuICAgICAgICBjb25zdCBxcmwgPSBjb250YWluZXIuZ2V0SG9zdFByb3A8UVJMSW50ZXJuYWw8T25SZW5kZXJGbjx1bmtub3duPj4+KGhvc3QsIE9uUmVuZGVyUHJvcCk7XG4gICAgICAgIGFzc2VydERlZmluZWQocXJsLCAnQ29tcG9uZW50IG11c3QgaGF2ZSBRUkwnKTtcbiAgICAgICAgY29uc3QgcHJvcHMgPSBjb250YWluZXIuZ2V0SG9zdFByb3A8UHJvcHM+KGhvc3QsIEVMRU1FTlRfUFJPUFMpO1xuICAgICAgICBjb250YWluZXIuJHNjaGVkdWxlciQoQ2hvcmVUeXBlLkNPTVBPTkVOVCwgaG9zdCwgcXJsLCBwcm9wcyk7XG4gICAgICB9IGVsc2UgaWYgKHByb3BlcnR5ID09PSBFZmZlY3RQcm9wZXJ0eS5WTk9ERSkge1xuICAgICAgICBjb25zdCBob3N0OiBIb3N0RWxlbWVudCA9IGVmZmVjdCBhcyBhbnk7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGhvc3Q7XG4gICAgICAgIGNvbnRhaW5lci4kc2NoZWR1bGVyJChDaG9yZVR5cGUuTk9ERV9ESUZGLCBob3N0LCB0YXJnZXQsIHNpZ25hbCBhcyBTaWduYWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgaG9zdDogSG9zdEVsZW1lbnQgPSBlZmZlY3QgYXMgYW55O1xuICAgICAgICBsZXQgZWZmZWN0RGF0YSA9IGVmZmVjdFN1YnNjcmlwdGlvbnNbRWZmZWN0U3Vic2NyaXB0aW9uc1Byb3AuRklSU1RfQkFDS19SRUZfT1JfREFUQV07XG4gICAgICAgIGlmIChlZmZlY3REYXRhIGluc3RhbmNlb2YgRWZmZWN0RGF0YSkge1xuICAgICAgICAgIGVmZmVjdERhdGEgPSBlZmZlY3REYXRhIGFzIEVmZmVjdERhdGE8Tm9kZVByb3BEYXRhPjtcbiAgICAgICAgICBjb25zdCBkYXRhID0gZWZmZWN0RGF0YS5kYXRhIGFzIE5vZGVQcm9wRGF0YTtcbiAgICAgICAgICBjb25zdCBwYXlsb2FkOiBOb2RlUHJvcFBheWxvYWQgPSB7XG4gICAgICAgICAgICAuLi5kYXRhLFxuICAgICAgICAgICAgJHZhbHVlJDogc2lnbmFsIGFzIFNpZ25hbCxcbiAgICAgICAgICB9O1xuICAgICAgICAgIGNvbnRhaW5lci4kc2NoZWR1bGVyJChDaG9yZVR5cGUuTk9ERV9QUk9QLCBob3N0LCBwcm9wZXJ0eSwgcGF5bG9hZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIGVmZmVjdHMuZm9yRWFjaChzY2hlZHVsZUVmZmVjdCk7XG4gIH1cblxuICBERUJVRyAmJiBsb2coJ2RvbmUgc2NoZWR1bGluZycpO1xufTtcblxuLyoqXG4gKiBBIHNpZ25hbCB3aGljaCBpcyBjb21wdXRlZCBmcm9tIG90aGVyIHNpZ25hbHMuXG4gKlxuICogVGhlIHZhbHVlIGlzIGF2YWlsYWJsZSBzeW5jaHJvbm91c2x5LCBidXQgdGhlIGNvbXB1dGF0aW9uIGlzIGRvbmUgbGF6aWx5LlxuICovXG5leHBvcnQgY2xhc3MgQ29tcHV0ZWRTaWduYWw8VD4gZXh0ZW5kcyBTaWduYWw8VD4ge1xuICAvKipcbiAgICogVGhlIGNvbXB1dGUgZnVuY3Rpb24gaXMgc3RvcmVkIGhlcmUuXG4gICAqXG4gICAqIFRoZSBjb21wdXRlZCBmdW5jdGlvbnMgbXVzdCBiZSBleGVjdXRlZCBzeW5jaHJvbm91c2x5IChiZWNhdXNlIG9mIHRoaXMgd2UgbmVlZCB0byBlYWdlcmx5XG4gICAqIHJlc29sdmUgdGhlIFFSTCBkdXJpbmcgdGhlIG1hcmsgZGlydHkgcGhhc2Ugc28gdGhhdCBhbnkgY2FsbCB0byBpdCB3aWxsIGJlIHN5bmNocm9ub3VzKS4gKVxuICAgKi9cbiAgJGNvbXB1dGVRcmwkOiBRUkxJbnRlcm5hbDwoKSA9PiBUPjtcbiAgLy8gV2UgbmVlZCBhIHNlcGFyYXRlIGZsYWcgdG8ga25vdyB3aGVuIHRoZSBjb21wdXRhdGlvbiBuZWVkcyBydW5uaW5nIGJlY2F1c2VcbiAgLy8gd2UgbmVlZCB0aGUgb2xkIHZhbHVlIHRvIGtub3cgaWYgZWZmZWN0cyBuZWVkIHJ1bm5pbmcgYWZ0ZXIgY29tcHV0YXRpb25cbiAgJGludmFsaWQkOiBib29sZWFuID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3Rvcihjb250YWluZXI6IENvbnRhaW5lciB8IG51bGwsIGZuOiBRUkxJbnRlcm5hbDwoKSA9PiBUPikge1xuICAgIC8vIFRoZSB2YWx1ZSBpcyB1c2VkIGZvciBjb21wYXJpc29uIHdoZW4gc2lnbmFscyB0cmlnZ2VyLCB3aGljaCBjYW4gb25seSBoYXBwZW5cbiAgICAvLyB3aGVuIGl0IHdhcyBjYWxjdWxhdGVkIGJlZm9yZS4gVGhlcmVmb3JlIHdlIGNhbiBwYXNzIHdoYXRldmVyIHdlIGxpa2UuXG4gICAgc3VwZXIoY29udGFpbmVyLCBORUVEU19DT01QVVRBVElPTik7XG4gICAgdGhpcy4kY29tcHV0ZVFybCQgPSBmbjtcbiAgfVxuXG4gICRpbnZhbGlkYXRlJCgpIHtcbiAgICB0aGlzLiRpbnZhbGlkJCA9IHRydWU7XG4gICAgaWYgKCF0aGlzLiRlZmZlY3RzJD8ubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFdlIHNob3VsZCBvbmx5IGNhbGwgc3Vic2NyaWJlcnMgaWYgdGhlIGNhbGN1bGF0aW9uIGFjdHVhbGx5IGNoYW5nZWQuXG4gICAgLy8gVGhlcmVmb3JlLCB3ZSBuZWVkIHRvIGNhbGN1bGF0ZSB0aGUgdmFsdWUgbm93LlxuICAgIC8vIFRPRE8gbW92ZSB0aGlzIGNhbGN1bGF0aW9uIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIG5leHQgdGljaywgYWRkIGNob3JlcyB0byB0aGF0IHRpY2sgaWYgbmVjZXNzYXJ5LiBOZXcgY2hvcmUgdHlwZT9cbiAgICBpZiAodGhpcy4kY29tcHV0ZUlmTmVlZGVkJCgpKSB7XG4gICAgICB0cmlnZ2VyRWZmZWN0cyh0aGlzLiRjb250YWluZXIkLCB0aGlzLCB0aGlzLiRlZmZlY3RzJCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVzZSB0aGlzIHRvIGZvcmNlIHJ1bm5pbmcgc3Vic2NyaWJlcnMsIGZvciBleGFtcGxlIHdoZW4gdGhlIGNhbGN1bGF0ZWQgdmFsdWUgaGFzIG11dGF0ZWQgYnV0XG4gICAqIHJlbWFpbmVkIHRoZSBzYW1lIG9iamVjdFxuICAgKi9cbiAgZm9yY2UoKSB7XG4gICAgdGhpcy4kaW52YWxpZCQgPSB0cnVlO1xuICAgIHRyaWdnZXJFZmZlY3RzKHRoaXMuJGNvbnRhaW5lciQsIHRoaXMsIHRoaXMuJGVmZmVjdHMkKTtcbiAgfVxuXG4gIGdldCB1bnRyYWNrZWRWYWx1ZSgpIHtcbiAgICB0aGlzLiRjb21wdXRlSWZOZWVkZWQkKCk7XG4gICAgYXNzZXJ0RmFsc2UodGhpcy4kdW50cmFja2VkVmFsdWUkID09PSBORUVEU19DT01QVVRBVElPTiwgJ0ludmFsaWQgc3RhdGUnKTtcbiAgICByZXR1cm4gdGhpcy4kdW50cmFja2VkVmFsdWUkO1xuICB9XG5cbiAgcHJpdmF0ZSAkY29tcHV0ZUlmTmVlZGVkJCgpIHtcbiAgICBpZiAoIXRoaXMuJGludmFsaWQkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGNvbXB1dGVRcmwgPSB0aGlzLiRjb21wdXRlUXJsJDtcbiAgICB0aHJvd0lmUVJMTm90UmVzb2x2ZWQoY29tcHV0ZVFybCk7XG5cbiAgICBjb25zdCBjdHggPSB0cnlHZXRJbnZva2VDb250ZXh0KCk7XG4gICAgY29uc3QgcHJldmlvdXNFZmZlY3RTdWJzY3JpcHRpb24gPSBjdHg/LiRlZmZlY3RTdWJzY3JpYmVyJDtcbiAgICBjdHggJiYgKGN0eC4kZWZmZWN0U3Vic2NyaWJlciQgPSBbdGhpcywgRWZmZWN0UHJvcGVydHkuVk5PREVdKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdW50cmFja2VkVmFsdWUgPSBjb21wdXRlUXJsLmdldEZuKGN0eCkoKSBhcyBUO1xuICAgICAgaWYgKGlzUHJvbWlzZSh1bnRyYWNrZWRWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3dFcnJvckFuZFN0b3AoXG4gICAgICAgICAgYHVzZUNvbXB1dGVkU2lnbmFsJCBRUkwgJHtjb21wdXRlUXJsLmRldiA/IGAke2NvbXB1dGVRcmwuZGV2LmZpbGV9IGAgOiAnJ30ke2NvbXB1dGVRcmwuJGhhc2gkfSByZXR1cm5lZCBhIFByb21pc2VgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBERUJVRyAmJiBsb2coJ1NpZ25hbC4kY29tcHV0ZSQnLCB1bnRyYWNrZWRWYWx1ZSk7XG4gICAgICB0aGlzLiRpbnZhbGlkJCA9IGZhbHNlO1xuXG4gICAgICBjb25zdCBkaWRDaGFuZ2UgPSB1bnRyYWNrZWRWYWx1ZSAhPT0gdGhpcy4kdW50cmFja2VkVmFsdWUkO1xuICAgICAgdGhpcy4kdW50cmFja2VkVmFsdWUkID0gdW50cmFja2VkVmFsdWU7XG4gICAgICByZXR1cm4gZGlkQ2hhbmdlO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoY3R4KSB7XG4gICAgICAgIGN0eC4kZWZmZWN0U3Vic2NyaWJlciQgPSBwcmV2aW91c0VmZmVjdFN1YnNjcmlwdGlvbjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBHZXR0ZXJzIGRvbid0IGdldCBpbmhlcml0ZWRcbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiBzdXBlci52YWx1ZTtcbiAgfVxuXG4gIHNldCB2YWx1ZShfOiBhbnkpIHtcbiAgICB0aHJvd0Vycm9yQW5kU3RvcCgnQ29tcHV0ZWRTaWduYWwgaXMgcmVhZC1vbmx5Jyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFdyYXBwZWRTaWduYWw8VD4gZXh0ZW5kcyBTaWduYWw8VD4gaW1wbGVtZW50cyBTdWJzY3JpYmVyIHtcbiAgJGFyZ3MkOiBhbnlbXTtcbiAgJGZ1bmMkOiAoLi4uYXJnczogYW55W10pID0+IFQ7XG4gICRmdW5jU3RyJDogc3RyaW5nIHwgbnVsbDtcblxuICAvLyBXZSBuZWVkIGEgc2VwYXJhdGUgZmxhZyB0byBrbm93IHdoZW4gdGhlIGNvbXB1dGF0aW9uIG5lZWRzIHJ1bm5pbmcgYmVjYXVzZVxuICAvLyB3ZSBuZWVkIHRoZSBvbGQgdmFsdWUgdG8ga25vdyBpZiBlZmZlY3RzIG5lZWQgcnVubmluZyBhZnRlciBjb21wdXRhdGlvblxuICAkaW52YWxpZCQ6IGJvb2xlYW4gPSB0cnVlO1xuICAkZWZmZWN0RGVwZW5kZW5jaWVzJDogU3Vic2NyaWJlcltdIHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgY29udGFpbmVyOiBDb250YWluZXIgfCBudWxsLFxuICAgIGZuOiAoLi4uYXJnczogYW55W10pID0+IFQsXG4gICAgYXJnczogYW55W10sXG4gICAgZm5TdHI6IHN0cmluZyB8IG51bGxcbiAgKSB7XG4gICAgc3VwZXIoY29udGFpbmVyLCBORUVEU19DT01QVVRBVElPTik7XG4gICAgdGhpcy4kYXJncyQgPSBhcmdzO1xuICAgIHRoaXMuJGZ1bmMkID0gZm47XG4gICAgdGhpcy4kZnVuY1N0ciQgPSBmblN0cjtcbiAgfVxuXG4gICRpbnZhbGlkYXRlJCgpIHtcbiAgICB0aGlzLiRpbnZhbGlkJCA9IHRydWU7XG4gICAgaWYgKCF0aGlzLiRlZmZlY3RzJD8ubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFdlIHNob3VsZCBvbmx5IGNhbGwgc3Vic2NyaWJlcnMgaWYgdGhlIGNhbGN1bGF0aW9uIGFjdHVhbGx5IGNoYW5nZWQuXG4gICAgLy8gVGhlcmVmb3JlLCB3ZSBuZWVkIHRvIGNhbGN1bGF0ZSB0aGUgdmFsdWUgbm93LlxuICAgIC8vIFRPRE8gbW92ZSB0aGlzIGNhbGN1bGF0aW9uIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIG5leHQgdGljaywgYWRkIGNob3JlcyB0byB0aGF0IHRpY2sgaWYgbmVjZXNzYXJ5LiBOZXcgY2hvcmUgdHlwZT9cbiAgICBpZiAodGhpcy4kY29tcHV0ZUlmTmVlZGVkJCgpKSB7XG4gICAgICB0cmlnZ2VyRWZmZWN0cyh0aGlzLiRjb250YWluZXIkLCB0aGlzLCB0aGlzLiRlZmZlY3RzJCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVzZSB0aGlzIHRvIGZvcmNlIHJ1bm5pbmcgc3Vic2NyaWJlcnMsIGZvciBleGFtcGxlIHdoZW4gdGhlIGNhbGN1bGF0ZWQgdmFsdWUgaGFzIG11dGF0ZWQgYnV0XG4gICAqIHJlbWFpbmVkIHRoZSBzYW1lIG9iamVjdFxuICAgKi9cbiAgZm9yY2UoKSB7XG4gICAgdGhpcy4kaW52YWxpZCQgPSB0cnVlO1xuICAgIHRyaWdnZXJFZmZlY3RzKHRoaXMuJGNvbnRhaW5lciQsIHRoaXMsIHRoaXMuJGVmZmVjdHMkKTtcbiAgfVxuXG4gIGdldCB1bnRyYWNrZWRWYWx1ZSgpIHtcbiAgICB0aGlzLiRjb21wdXRlSWZOZWVkZWQkKCk7XG4gICAgYXNzZXJ0RmFsc2UodGhpcy4kdW50cmFja2VkVmFsdWUkID09PSBORUVEU19DT01QVVRBVElPTiwgJ0ludmFsaWQgc3RhdGUnKTtcbiAgICByZXR1cm4gdGhpcy4kdW50cmFja2VkVmFsdWUkO1xuICB9XG5cbiAgcHJpdmF0ZSAkY29tcHV0ZUlmTmVlZGVkJCgpIHtcbiAgICBpZiAoIXRoaXMuJGludmFsaWQkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuJHVudHJhY2tlZFZhbHVlJCA9IHRyYWNrU2lnbmFsKFxuICAgICAgKCkgPT4gdGhpcy4kZnVuYyQoLi4udGhpcy4kYXJncyQpLFxuICAgICAgdGhpcyxcbiAgICAgIEVmZmVjdFByb3BlcnR5LlZOT0RFLFxuICAgICAgdGhpcy4kY29udGFpbmVyJCFcbiAgICApO1xuICB9XG5cbiAgLy8gR2V0dGVycyBkb24ndCBnZXQgaW5oZXJpdGVkXG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gc3VwZXIudmFsdWU7XG4gIH1cblxuICBzZXQgdmFsdWUoXzogYW55KSB7XG4gICAgdGhyb3dFcnJvckFuZFN0b3AoJ1dyYXBwZWRTaWduYWwgaXMgcmVhZC1vbmx5Jyk7XG4gIH1cbn1cbiJdfQ==","import { SERIALIZABLE_STATE } from '../shared/component.public';\nimport { ELEMENT_KEY, ELEMENT_PROPS, OnRenderProp } from '../shared/utils/markers';\nimport {} from './ssr-types';\nimport { executeComponent } from '../shared/component-execution';\nimport { ChoreType } from '../shared/scheduler';\nexport const applyInlineComponent = (ssr, component$Host, component, jsx) => {\n    const host = ssr.getLastNode();\n    return executeComponent(ssr, host, component$Host, component, jsx.props);\n};\nexport const applyQwikComponentBody = (ssr, jsx, component) => {\n    const host = ssr.getLastNode();\n    const [componentQrl] = component[SERIALIZABLE_STATE];\n    const srcProps = jsx.props;\n    if (srcProps && srcProps.children) {\n        delete srcProps.children;\n    }\n    const scheduler = ssr.$scheduler$;\n    host.setProp(OnRenderProp, componentQrl);\n    host.setProp(ELEMENT_PROPS, srcProps);\n    if (jsx.key !== null) {\n        host.setProp(ELEMENT_KEY, jsx.key);\n    }\n    return scheduler(ChoreType.COMPONENT_SSR, host, componentQrl, srcProps);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3NyLXJlbmRlci1jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvc3NyL3Nzci1yZW5kZXItY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxrQkFBa0IsRUFBbUMsTUFBTSw0QkFBNEIsQ0FBQztBQUVqRyxPQUFPLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNuRixPQUFPLEVBQW9DLE1BQU0sYUFBYSxDQUFDO0FBQy9ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUloRCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUNsQyxHQUFpQixFQUNqQixjQUF3QixFQUN4QixTQUEwQixFQUMxQixHQUFZLEVBQ1osRUFBRTtJQUNGLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMvQixPQUFPLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDM0UsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsQ0FDcEMsR0FBaUIsRUFDakIsR0FBWSxFQUNaLFNBQW9CLEVBQ08sRUFBRTtJQUM3QixNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDL0IsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFJLFNBQWlCLENBQUMsa0JBQWtCLENBQW1DLENBQUM7SUFDaEcsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztJQUMzQixJQUFJLFFBQVEsSUFBSSxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbEMsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFDRCxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDO0lBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLElBQUksR0FBRyxDQUFDLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUNELE9BQU8sU0FBUyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztBQUMxRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEpTWE5vZGUgfSBmcm9tICdAYnVpbGRlci5pby9xd2lrJztcbmltcG9ydCB7IFNFUklBTElaQUJMRV9TVEFURSwgdHlwZSBDb21wb25lbnQsIHR5cGUgT25SZW5kZXJGbiB9IGZyb20gJy4uL3NoYXJlZC9jb21wb25lbnQucHVibGljJztcbmltcG9ydCB0eXBlIHsgUVJMSW50ZXJuYWwgfSBmcm9tICcuLi9zaGFyZWQvcXJsL3FybC1jbGFzcyc7XG5pbXBvcnQgeyBFTEVNRU5UX0tFWSwgRUxFTUVOVF9QUk9QUywgT25SZW5kZXJQcm9wIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzL21hcmtlcnMnO1xuaW1wb3J0IHsgdHlwZSBJU3NyTm9kZSwgdHlwZSBTU1JDb250YWluZXIgfSBmcm9tICcuL3Nzci10eXBlcyc7XG5pbXBvcnQgeyBleGVjdXRlQ29tcG9uZW50IH0gZnJvbSAnLi4vc2hhcmVkL2NvbXBvbmVudC1leGVjdXRpb24nO1xuaW1wb3J0IHsgQ2hvcmVUeXBlIH0gZnJvbSAnLi4vc2hhcmVkL3NjaGVkdWxlcic7XG5pbXBvcnQgdHlwZSB7IFZhbHVlT3JQcm9taXNlIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgSlNYT3V0cHV0IH0gZnJvbSAnLi4vc2hhcmVkL2pzeC90eXBlcy9qc3gtbm9kZSc7XG5cbmV4cG9ydCBjb25zdCBhcHBseUlubGluZUNvbXBvbmVudCA9IChcbiAgc3NyOiBTU1JDb250YWluZXIsXG4gIGNvbXBvbmVudCRIb3N0OiBJU3NyTm9kZSxcbiAgY29tcG9uZW50OiBPblJlbmRlckZuPGFueT4sXG4gIGpzeDogSlNYTm9kZVxuKSA9PiB7XG4gIGNvbnN0IGhvc3QgPSBzc3IuZ2V0TGFzdE5vZGUoKTtcbiAgcmV0dXJuIGV4ZWN1dGVDb21wb25lbnQoc3NyLCBob3N0LCBjb21wb25lbnQkSG9zdCwgY29tcG9uZW50LCBqc3gucHJvcHMpO1xufTtcblxuZXhwb3J0IGNvbnN0IGFwcGx5UXdpa0NvbXBvbmVudEJvZHkgPSAoXG4gIHNzcjogU1NSQ29udGFpbmVyLFxuICBqc3g6IEpTWE5vZGUsXG4gIGNvbXBvbmVudDogQ29tcG9uZW50XG4pOiBWYWx1ZU9yUHJvbWlzZTxKU1hPdXRwdXQ+ID0+IHtcbiAgY29uc3QgaG9zdCA9IHNzci5nZXRMYXN0Tm9kZSgpO1xuICBjb25zdCBbY29tcG9uZW50UXJsXSA9IChjb21wb25lbnQgYXMgYW55KVtTRVJJQUxJWkFCTEVfU1RBVEVdIGFzIFtRUkxJbnRlcm5hbDxPblJlbmRlckZuPGFueT4+XTtcbiAgY29uc3Qgc3JjUHJvcHMgPSBqc3gucHJvcHM7XG4gIGlmIChzcmNQcm9wcyAmJiBzcmNQcm9wcy5jaGlsZHJlbikge1xuICAgIGRlbGV0ZSBzcmNQcm9wcy5jaGlsZHJlbjtcbiAgfVxuICBjb25zdCBzY2hlZHVsZXIgPSBzc3IuJHNjaGVkdWxlciQ7XG4gIGhvc3Quc2V0UHJvcChPblJlbmRlclByb3AsIGNvbXBvbmVudFFybCk7XG4gIGhvc3Quc2V0UHJvcChFTEVNRU5UX1BST1BTLCBzcmNQcm9wcyk7XG4gIGlmIChqc3gua2V5ICE9PSBudWxsKSB7XG4gICAgaG9zdC5zZXRQcm9wKEVMRU1FTlRfS0VZLCBqc3gua2V5KTtcbiAgfVxuICByZXR1cm4gc2NoZWR1bGVyKENob3JlVHlwZS5DT01QT05FTlRfU1NSLCBob3N0LCBjb21wb25lbnRRcmwsIHNyY1Byb3BzKTtcbn07XG4iXX0=","import { isDev } from '@builder.io/qwik/build';\nimport { isQwikComponent } from '../shared/component.public';\nimport { isQrl } from '../shared/qrl/qrl-class';\nimport { Fragment, directGetPropsProxyProp } from '../shared/jsx/jsx-runtime';\nimport { Slot } from '../shared/jsx/slot.public';\nimport { SSRComment, SSRRaw, SSRStream } from '../shared/jsx/utils.public';\nimport { trackSignal } from '../use/use-core';\nimport { isAsyncGenerator } from '../shared/utils/async-generator';\nimport { EMPTY_ARRAY } from '../shared/utils/flyweight';\nimport { throwErrorAndStop } from '../shared/utils/log';\nimport { ELEMENT_KEY, FLUSH_COMMENT, QDefaultSlot, QScopedStyle, QSlot, } from '../shared/utils/markers';\nimport { isPromise } from '../shared/utils/promises';\nimport { isFunction } from '../shared/utils/types';\nimport { convertEventNameFromJsxPropToHtmlAttr, getEventNameFromJsxProp, isJsxPropertyAnEventName, isPreventDefault, } from '../shared/utils/event-names';\nimport { addComponentStylePrefix, isClassAttr } from '../shared/utils/scoped-styles';\nimport { qrlToString } from '../shared/shared-serialization';\nimport { DEBUG_TYPE, VirtualType } from '../shared/types';\nimport { WrappedSignal, EffectProperty, isSignal } from '../signal/signal';\nimport { applyInlineComponent, applyQwikComponentBody } from './ssr-render-component';\nimport { qInspector } from '../shared/utils/qdev';\nimport { serializeAttribute } from '../shared/utils/styles';\nclass ParentComponentData {\n    constructor($scopedStyle$, $componentFrame$) {\n        this.$scopedStyle$ = $scopedStyle$;\n        this.$componentFrame$ = $componentFrame$;\n    }\n}\n/** @internal */\nexport function _walkJSX(ssr, value, options) {\n    const stack = [value];\n    let resolveDrain;\n    let rejectDrain;\n    const drained = options.allowPromises &&\n        new Promise((res, rej) => {\n            resolveDrain = res;\n            rejectDrain = rej;\n        });\n    const enqueue = (value) => stack.push(value);\n    const resolveValue = (value) => {\n        stack.push(value);\n        drain();\n    };\n    const drain = () => {\n        while (stack.length) {\n            const value = stack.pop();\n            if (value instanceof ParentComponentData) {\n                options.currentStyleScoped = value.$scopedStyle$;\n                options.parentComponentFrame = value.$componentFrame$;\n                continue;\n            }\n            else if (typeof value === 'function') {\n                if (value === Promise) {\n                    if (!options.allowPromises) {\n                        return throwErrorAndStop('Promises not expected here.');\n                    }\n                    stack.pop().then(resolveValue, rejectDrain);\n                    return;\n                }\n                const waitOn = value.apply(ssr);\n                if (waitOn) {\n                    if (!options.allowPromises) {\n                        return throwErrorAndStop('Promises not expected here.');\n                    }\n                    waitOn.then(drain, rejectDrain);\n                    return;\n                }\n                continue;\n            }\n            processJSXNode(ssr, enqueue, value, {\n                styleScoped: options.currentStyleScoped,\n                parentComponentFrame: options.parentComponentFrame,\n            });\n        }\n        if (stack.length === 0 && options.allowPromises) {\n            resolveDrain();\n        }\n    };\n    drain();\n    return drained;\n}\nfunction processJSXNode(ssr, enqueue, value, options) {\n    // console.log('processJSXNode', value);\n    if (value === null || value === undefined) {\n        ssr.textNode('');\n    }\n    else if (typeof value === 'boolean') {\n        ssr.textNode('');\n    }\n    else if (typeof value === 'number') {\n        ssr.textNode(String(value));\n    }\n    else if (typeof value === 'string') {\n        ssr.textNode(value);\n    }\n    else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n            for (let i = value.length - 1; i >= 0; i--) {\n                enqueue(value[i]);\n            }\n        }\n        else if (isSignal(value)) {\n            ssr.openFragment(isDev ? [DEBUG_TYPE, VirtualType.WrappedSignal] : EMPTY_ARRAY);\n            const signalNode = ssr.getLastNode();\n            enqueue(ssr.closeFragment);\n            enqueue(trackSignal(() => value.value, signalNode, EffectProperty.VNODE, ssr));\n        }\n        else if (isPromise(value)) {\n            ssr.openFragment(isDev ? [DEBUG_TYPE, VirtualType.Awaited] : EMPTY_ARRAY);\n            enqueue(ssr.closeFragment);\n            enqueue(value);\n            enqueue(Promise);\n            enqueue(() => ssr.commentNode(FLUSH_COMMENT));\n        }\n        else if (isAsyncGenerator(value)) {\n            enqueue(async () => {\n                for await (const chunk of value) {\n                    await _walkJSX(ssr, chunk, {\n                        allowPromises: true,\n                        currentStyleScoped: options.styleScoped,\n                        parentComponentFrame: options.parentComponentFrame,\n                    });\n                    ssr.commentNode(FLUSH_COMMENT);\n                }\n            });\n        }\n        else {\n            const jsx = value;\n            const type = jsx.type;\n            // Below, JSXChildren allows functions and regexes, but we assume the dev only uses those as appropriate.\n            if (typeof type === 'string') {\n                appendClassIfScopedStyleExists(jsx, options.styleScoped);\n                appendQwikInspectorAttribute(jsx);\n                const innerHTML = ssr.openElement(type, varPropsToSsrAttrs(jsx.varProps, jsx.constProps, ssr.serializationCtx, options.styleScoped, jsx.key), constPropsToSsrAttrs(jsx.constProps, jsx.varProps, ssr.serializationCtx, options.styleScoped));\n                if (innerHTML) {\n                    ssr.htmlNode(innerHTML);\n                }\n                enqueue(ssr.closeElement);\n                if (type === 'head') {\n                    enqueue(ssr.additionalHeadNodes);\n                    enqueue(ssr.emitQwikLoaderAtTopIfNeeded);\n                }\n                else if (type === 'body') {\n                    enqueue(ssr.additionalBodyNodes);\n                }\n                const children = jsx.children;\n                children != null && enqueue(children);\n            }\n            else if (isFunction(type)) {\n                if (type === Fragment) {\n                    let attrs = jsx.key != null ? [ELEMENT_KEY, jsx.key] : EMPTY_ARRAY;\n                    if (isDev) {\n                        attrs = [DEBUG_TYPE, VirtualType.Fragment, ...attrs]; // Add debug info.\n                    }\n                    ssr.openFragment(attrs);\n                    enqueue(ssr.closeFragment);\n                    // In theory we could get functions or regexes, but we assume all is well\n                    const children = jsx.children;\n                    children != null && enqueue(children);\n                }\n                else if (type === Slot) {\n                    const componentFrame = options.parentComponentFrame || ssr.unclaimedProjectionComponentFrameQueue.shift();\n                    if (componentFrame) {\n                        const compId = componentFrame.componentNode.id || '';\n                        const projectionAttrs = isDev ? [DEBUG_TYPE, VirtualType.Projection] : [];\n                        projectionAttrs.push(':', compId);\n                        ssr.openProjection(projectionAttrs);\n                        const host = componentFrame.componentNode;\n                        const node = ssr.getLastNode();\n                        const slotName = getSlotName(host, jsx, ssr);\n                        projectionAttrs.push(QSlot, slotName);\n                        enqueue(new ParentComponentData(options.styleScoped, options.parentComponentFrame));\n                        enqueue(ssr.closeProjection);\n                        const slotDefaultChildren = jsx.children || null;\n                        const slotChildren = componentFrame.consumeChildrenForSlot(node, slotName) || slotDefaultChildren;\n                        if (slotDefaultChildren && slotChildren !== slotDefaultChildren) {\n                            ssr.addUnclaimedProjection(componentFrame, QDefaultSlot, slotDefaultChildren);\n                        }\n                        enqueue(slotChildren);\n                        enqueue(new ParentComponentData(componentFrame.projectionScopedStyle, componentFrame.projectionComponentFrame));\n                    }\n                    else {\n                        // Even thought we are not projecting we still need to leave a marker for the slot.\n                        ssr.openFragment(isDev ? [DEBUG_TYPE, VirtualType.Projection] : EMPTY_ARRAY);\n                        ssr.closeFragment();\n                    }\n                }\n                else if (type === SSRComment) {\n                    ssr.commentNode(directGetPropsProxyProp(jsx, 'data') || '');\n                }\n                else if (type === SSRStream) {\n                    ssr.commentNode(FLUSH_COMMENT);\n                    const generator = jsx.children;\n                    let value;\n                    if (isFunction(generator)) {\n                        value = generator({\n                            async write(chunk) {\n                                await _walkJSX(ssr, chunk, {\n                                    allowPromises: true,\n                                    currentStyleScoped: options.styleScoped,\n                                    parentComponentFrame: options.parentComponentFrame,\n                                });\n                                ssr.commentNode(FLUSH_COMMENT);\n                            },\n                        });\n                    }\n                    else {\n                        value = generator;\n                    }\n                    enqueue(value);\n                    isPromise(value) && enqueue(Promise);\n                }\n                else if (type === SSRRaw) {\n                    ssr.htmlNode(directGetPropsProxyProp(jsx, 'data'));\n                }\n                else if (isQwikComponent(type)) {\n                    // prod: use new instance of an array for props, we always modify props for a component\n                    ssr.openComponent(isDev ? [DEBUG_TYPE, VirtualType.Component] : []);\n                    const host = ssr.getLastNode();\n                    const componentFrame = ssr.getParentComponentFrame();\n                    componentFrame.distributeChildrenIntoSlots(jsx.children, options.styleScoped, options.parentComponentFrame);\n                    const jsxOutput = applyQwikComponentBody(ssr, jsx, type);\n                    const compStyleComponentId = addComponentStylePrefix(host.getProp(QScopedStyle));\n                    enqueue(new ParentComponentData(options.styleScoped, options.parentComponentFrame));\n                    enqueue(ssr.closeComponent);\n                    enqueue(jsxOutput);\n                    isPromise(jsxOutput) && enqueue(Promise);\n                    enqueue(new ParentComponentData(compStyleComponentId, componentFrame));\n                }\n                else {\n                    ssr.openFragment(isDev ? [DEBUG_TYPE, VirtualType.InlineComponent] : EMPTY_ARRAY);\n                    enqueue(ssr.closeFragment);\n                    const component = ssr.getComponentFrame(0);\n                    const jsxOutput = applyInlineComponent(ssr, component && component.componentNode, type, jsx);\n                    enqueue(jsxOutput);\n                    isPromise(jsxOutput) && enqueue(Promise);\n                }\n            }\n        }\n    }\n}\nexport function varPropsToSsrAttrs(varProps, constProps, serializationCtx, styleScopedId, key) {\n    return toSsrAttrs(varProps, constProps, serializationCtx, true, styleScopedId, key);\n}\nexport function constPropsToSsrAttrs(constProps, varProps, serializationCtx, styleScopedId) {\n    return toSsrAttrs(constProps, varProps, serializationCtx, false, styleScopedId);\n}\nexport function toSsrAttrs(record, anotherRecord, serializationCtx, pushMergedEventProps, styleScopedId, key) {\n    if (record == null) {\n        return null;\n    }\n    const ssrAttrs = [];\n    for (const key in record) {\n        let value = record[key];\n        if (isJsxPropertyAnEventName(key)) {\n            if (anotherRecord) {\n                /**\n                 * If we have two sources of the same event like this:\n                 *\n                 * ```tsx\n                 * const Counter = component$((props: { initial: number }) => {\n                 *  const count = useSignal(props.initial);\n                 *  useOnWindow(\n                 *    'dblclick',\n                 *    $(() => count.value++)\n                 *  );\n                 *  return <button window:onDblClick$={() => count.value++}>Count: {count.value}!</button>;\n                 * });\n                 * ```\n                 *\n                 * Then we can end with the const and var props with the same (doubled) event. We process\n                 * the const and var props separately, so:\n                 *\n                 * - For the var props we need to merge them into the one value (array)\n                 * - For the const props we need to just skip, because we will handle this in the var props\n                 */\n                const anotherValue = getEventProp(anotherRecord, key);\n                if (anotherValue) {\n                    if (pushMergedEventProps) {\n                        // merge values from the const props with the var props\n                        value = getMergedEventPropValues(value, anotherValue);\n                    }\n                    else {\n                        continue;\n                    }\n                }\n            }\n            const eventValue = setEvent(serializationCtx, key, value);\n            if (eventValue) {\n                ssrAttrs.push(convertEventNameFromJsxPropToHtmlAttr(key), eventValue);\n            }\n            continue;\n        }\n        if (isSignal(value)) {\n            // write signal as is. We will track this signal inside `writeAttrs`\n            if (isClassAttr(key)) {\n                // additionally append styleScopedId for class attr\n                ssrAttrs.push(key, [value, styleScopedId]);\n            }\n            else {\n                ssrAttrs.push(key, value);\n            }\n            continue;\n        }\n        if (isPreventDefault(key)) {\n            addPreventDefaultEventToSerializationContext(serializationCtx, key);\n        }\n        value = serializeAttribute(key, value, styleScopedId);\n        ssrAttrs.push(key, value);\n    }\n    if (key != null) {\n        ssrAttrs.push(ELEMENT_KEY, key);\n    }\n    return ssrAttrs;\n}\nfunction getMergedEventPropValues(value, anotherValue) {\n    let mergedValue = value;\n    // merge values from the const props with the var props\n    if (Array.isArray(value) && Array.isArray(anotherValue)) {\n        // both values are arrays\n        mergedValue = value.concat(anotherValue);\n    }\n    else if (Array.isArray(mergedValue)) {\n        // only first value is array\n        mergedValue.push(anotherValue);\n    }\n    else if (Array.isArray(anotherValue)) {\n        // only second value is array\n        mergedValue = anotherValue;\n        mergedValue.push(value);\n    }\n    else {\n        // none of these values are array\n        mergedValue = [value, anotherValue];\n    }\n    return mergedValue;\n}\nfunction getEventProp(record, propKey) {\n    const eventProp = propKey.toLowerCase();\n    for (const prop in record) {\n        if (prop.toLowerCase() === eventProp) {\n            return record[prop];\n        }\n    }\n    return null;\n}\nfunction setEvent(serializationCtx, key, rawValue) {\n    let value = null;\n    const qrls = rawValue;\n    const appendToValue = (valueToAppend) => {\n        value = (value == null ? '' : value + '\\n') + valueToAppend;\n    };\n    if (Array.isArray(qrls)) {\n        for (let i = 0; i <= qrls.length; i++) {\n            const qrl = qrls[i];\n            if (isQrl(qrl)) {\n                appendToValue(qrlToString(serializationCtx, qrl));\n                addQwikEventToSerializationContext(serializationCtx, key, qrl);\n            }\n            else if (qrl != null) {\n                // nested arrays etc.\n                const nestedValue = setEvent(serializationCtx, key, qrl);\n                if (nestedValue) {\n                    appendToValue(nestedValue);\n                }\n            }\n        }\n    }\n    else if (isQrl(qrls)) {\n        value = qrlToString(serializationCtx, qrls);\n        addQwikEventToSerializationContext(serializationCtx, key, qrls);\n    }\n    return value;\n}\nfunction addQwikEventToSerializationContext(serializationCtx, key, qrl) {\n    const eventName = getEventNameFromJsxProp(key);\n    if (eventName) {\n        serializationCtx.$eventNames$.add(eventName);\n        serializationCtx.$eventQrls$.add(qrl);\n    }\n}\nfunction addPreventDefaultEventToSerializationContext(serializationCtx, key) {\n    // skip first 15 chars, this is length of the `preventdefault:`\n    const eventName = key.substring(15);\n    if (eventName) {\n        serializationCtx.$eventNames$.add(eventName);\n    }\n}\nfunction getSlotName(host, jsx, ssr) {\n    const constProps = jsx.constProps;\n    if (constProps && typeof constProps == 'object' && 'name' in constProps) {\n        const constValue = constProps.name;\n        if (constValue instanceof WrappedSignal) {\n            return trackSignal(() => constValue.value, host, EffectProperty.COMPONENT, ssr);\n        }\n    }\n    return directGetPropsProxyProp(jsx, 'name') || QDefaultSlot;\n}\nfunction appendQwikInspectorAttribute(jsx) {\n    if (isDev && qInspector && jsx.dev && jsx.type !== 'head') {\n        const sanitizedFileName = jsx.dev.fileName?.replace(/\\\\/g, '/');\n        const qwikInspectorAttr = 'data-qwik-inspector';\n        if (sanitizedFileName && (!jsx.constProps || !(qwikInspectorAttr in jsx.constProps))) {\n            (jsx.constProps || (jsx.constProps = {}))[qwikInspectorAttr] =\n                `${sanitizedFileName}:${jsx.dev.lineNumber}:${jsx.dev.columnNumber}`;\n        }\n    }\n}\n// append class attribute if styleScopedId exists and there is no class attribute\nfunction appendClassIfScopedStyleExists(jsx, styleScoped) {\n    const classAttributeExists = directGetPropsProxyProp(jsx, 'class') != null;\n    if (!classAttributeExists && styleScoped) {\n        if (!jsx.constProps) {\n            jsx.constProps = {};\n        }\n        jsx.constProps['class'] = '';\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * QWIK_VERSION\n *\n * @public\n */\nexport const version = globalThis.QWIK_VERSION;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS92ZXJzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUksVUFBa0IsQ0FBQyxZQUFzQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBRV0lLX1ZFUlNJT05cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB2ZXJzaW9uID0gKGdsb2JhbFRoaXMgYXMgYW55KS5RV0lLX1ZFUlNJT04gYXMgc3RyaW5nO1xuIl19","import { trackSignal } from '../use/use-core';\nimport { version } from '../version';\nimport { createScheduler } from './scheduler';\nimport { createSerializationContext } from './shared-serialization';\n/** @internal */\nexport class _SharedContainer {\n    constructor(scheduleDrain, journalFlush, serverData, locale) {\n        this.$currentUniqueId$ = 0;\n        this.$instanceHash$ = null;\n        this.$serverData$ = serverData;\n        this.$locale$ = locale;\n        this.$version$ = version;\n        this.$storeProxyMap$ = new WeakMap();\n        this.$getObjectById$ = (id) => {\n            throw Error('Not implemented');\n        };\n        this.$scheduler$ = createScheduler(this, scheduleDrain, journalFlush);\n    }\n    trackSignalValue(signal, subscriber, property, data) {\n        return trackSignal(() => signal.value, subscriber, property, this, data);\n    }\n    serializationCtxFactory(NodeConstructor, symbolToChunkResolver, writer) {\n        return createSerializationContext(NodeConstructor, symbolToChunkResolver, this.getHostProp.bind(this), this.setHostProp.bind(this), this.$storeProxyMap$, writer);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkLWNvbnRhaW5lci5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9zaGFyZWQvc2hhcmVkLWNvbnRhaW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFOUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUtyQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzlDLE9BQU8sRUFBRSwwQkFBMEIsRUFBNkIsTUFBTSx3QkFBd0IsQ0FBQztBQUcvRixnQkFBZ0I7QUFDaEIsTUFBTSxPQUFnQixnQkFBZ0I7SUFZcEMsWUFDRSxhQUF5QixFQUN6QixZQUF3QixFQUN4QixVQUErQixFQUMvQixNQUFjO1FBUGhCLHNCQUFpQixHQUFHLENBQUMsQ0FBQztRQUN0QixtQkFBYyxHQUFrQixJQUFJLENBQUM7UUFRbkMsSUFBSSxDQUFDLFlBQVksR0FBRyxVQUFVLENBQUM7UUFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUM7UUFDekIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQyxFQUFtQixFQUFFLEVBQUU7WUFDN0MsTUFBTSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUM7UUFFRixJQUFJLENBQUMsV0FBVyxHQUFHLGVBQWUsQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxnQkFBZ0IsQ0FBSSxNQUFjLEVBQUUsVUFBa0IsRUFBRSxRQUFnQixFQUFFLElBQWdCO1FBQ3hGLE9BQU8sV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVELHVCQUF1QixDQUNyQixlQUVRLEVBQ1IscUJBQTRDLEVBQzVDLE1BQXFCO1FBRXJCLE9BQU8sMEJBQTBCLENBQy9CLGVBQWUsRUFDZixxQkFBcUIsRUFDckIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQzNCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUMzQixJQUFJLENBQUMsZUFBZSxFQUNwQixNQUFNLENBQ1AsQ0FBQztJQUNKLENBQUM7Q0FnQkYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEpTWE91dHB1dCB9IGZyb20gJy4vanN4L3R5cGVzL2pzeC1ub2RlJztcbmltcG9ydCB0eXBlIHsgQ29udGV4dElkIH0gZnJvbSAnLi4vdXNlL3VzZS1jb250ZXh0JztcbmltcG9ydCB7IHRyYWNrU2lnbmFsIH0gZnJvbSAnLi4vdXNlL3VzZS1jb3JlJztcbmltcG9ydCB0eXBlIHsgVmFsdWVPclByb21pc2UgfSBmcm9tICcuL3V0aWxzL3R5cGVzJztcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tICcuLi92ZXJzaW9uJztcbmltcG9ydCB0eXBlIHsgRWZmZWN0LCBFZmZlY3REYXRhIH0gZnJvbSAnLi4vc2lnbmFsL3NpZ25hbCc7XG5pbXBvcnQgdHlwZSB7IFNpZ25hbCB9IGZyb20gJy4uL3NpZ25hbC9zaWduYWwucHVibGljJztcbmltcG9ydCB0eXBlIHsgU3RyZWFtV3JpdGVyLCBTeW1ib2xUb0NodW5rUmVzb2x2ZXIgfSBmcm9tICcuLi9zc3Ivc3NyLXR5cGVzJztcbmltcG9ydCB0eXBlIHsgU2NoZWR1bGVyIH0gZnJvbSAnLi9zY2hlZHVsZXInO1xuaW1wb3J0IHsgY3JlYXRlU2NoZWR1bGVyIH0gZnJvbSAnLi9zY2hlZHVsZXInO1xuaW1wb3J0IHsgY3JlYXRlU2VyaWFsaXphdGlvbkNvbnRleHQsIHR5cGUgU2VyaWFsaXphdGlvbkNvbnRleHQgfSBmcm9tICcuL3NoYXJlZC1zZXJpYWxpemF0aW9uJztcbmltcG9ydCB0eXBlIHsgQ29udGFpbmVyLCBIb3N0RWxlbWVudCwgT2JqVG9Qcm94eU1hcCB9IGZyb20gJy4vdHlwZXMnO1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgX1NoYXJlZENvbnRhaW5lciBpbXBsZW1lbnRzIENvbnRhaW5lciB7XG4gIHJlYWRvbmx5ICR2ZXJzaW9uJDogc3RyaW5nO1xuICByZWFkb25seSAkc2NoZWR1bGVyJDogU2NoZWR1bGVyO1xuICByZWFkb25seSAkc3RvcmVQcm94eU1hcCQ6IE9ialRvUHJveHlNYXA7XG4gIC8vLyBDdXJyZW50IGxhbmd1YWdlIGxvY2FsZVxuICByZWFkb25seSAkbG9jYWxlJDogc3RyaW5nO1xuICAvLy8gUmV0cmlldmUgT2JqZWN0IGZyb20gcGF1c2VkIHNlcmlhbGl6ZWQgc3RhdGUuXG4gIHJlYWRvbmx5ICRnZXRPYmplY3RCeUlkJDogKGlkOiBudW1iZXIgfCBzdHJpbmcpID0+IGFueTtcbiAgJHNlcnZlckRhdGEkOiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuICAkY3VycmVudFVuaXF1ZUlkJCA9IDA7XG4gICRpbnN0YW5jZUhhc2gkOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBzY2hlZHVsZURyYWluOiAoKSA9PiB2b2lkLFxuICAgIGpvdXJuYWxGbHVzaDogKCkgPT4gdm9pZCxcbiAgICBzZXJ2ZXJEYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICAgIGxvY2FsZTogc3RyaW5nXG4gICkge1xuICAgIHRoaXMuJHNlcnZlckRhdGEkID0gc2VydmVyRGF0YTtcbiAgICB0aGlzLiRsb2NhbGUkID0gbG9jYWxlO1xuICAgIHRoaXMuJHZlcnNpb24kID0gdmVyc2lvbjtcbiAgICB0aGlzLiRzdG9yZVByb3h5TWFwJCA9IG5ldyBXZWFrTWFwKCk7XG4gICAgdGhpcy4kZ2V0T2JqZWN0QnlJZCQgPSAoaWQ6IG51bWJlciB8IHN0cmluZykgPT4ge1xuICAgICAgdGhyb3cgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH07XG5cbiAgICB0aGlzLiRzY2hlZHVsZXIkID0gY3JlYXRlU2NoZWR1bGVyKHRoaXMsIHNjaGVkdWxlRHJhaW4sIGpvdXJuYWxGbHVzaCk7XG4gIH1cblxuICB0cmFja1NpZ25hbFZhbHVlPFQ+KHNpZ25hbDogU2lnbmFsLCBzdWJzY3JpYmVyOiBFZmZlY3QsIHByb3BlcnR5OiBzdHJpbmcsIGRhdGE6IEVmZmVjdERhdGEpOiBUIHtcbiAgICByZXR1cm4gdHJhY2tTaWduYWwoKCkgPT4gc2lnbmFsLnZhbHVlLCBzdWJzY3JpYmVyLCBwcm9wZXJ0eSwgdGhpcywgZGF0YSk7XG4gIH1cblxuICBzZXJpYWxpemF0aW9uQ3R4RmFjdG9yeShcbiAgICBOb2RlQ29uc3RydWN0b3I6IHtcbiAgICAgIG5ldyAoLi4ucmVzdDogYW55W10pOiB7IG5vZGVUeXBlOiBudW1iZXI7IGlkOiBzdHJpbmcgfTtcbiAgICB9IHwgbnVsbCxcbiAgICBzeW1ib2xUb0NodW5rUmVzb2x2ZXI6IFN5bWJvbFRvQ2h1bmtSZXNvbHZlcixcbiAgICB3cml0ZXI/OiBTdHJlYW1Xcml0ZXJcbiAgKTogU2VyaWFsaXphdGlvbkNvbnRleHQge1xuICAgIHJldHVybiBjcmVhdGVTZXJpYWxpemF0aW9uQ29udGV4dChcbiAgICAgIE5vZGVDb25zdHJ1Y3RvcixcbiAgICAgIHN5bWJvbFRvQ2h1bmtSZXNvbHZlcixcbiAgICAgIHRoaXMuZ2V0SG9zdFByb3AuYmluZCh0aGlzKSxcbiAgICAgIHRoaXMuc2V0SG9zdFByb3AuYmluZCh0aGlzKSxcbiAgICAgIHRoaXMuJHN0b3JlUHJveHlNYXAkLFxuICAgICAgd3JpdGVyXG4gICAgKTtcbiAgfVxuXG4gIGFic3RyYWN0IGVuc3VyZVByb2plY3Rpb25SZXNvbHZlZChob3N0OiBIb3N0RWxlbWVudCk6IHZvaWQ7XG4gIGFic3RyYWN0IHByb2Nlc3NKc3goaG9zdDogSG9zdEVsZW1lbnQsIGpzeDogSlNYT3V0cHV0KTogVmFsdWVPclByb21pc2U8dm9pZD47XG4gIGFic3RyYWN0IGhhbmRsZUVycm9yKGVycjogYW55LCAkaG9zdCQ6IEhvc3RFbGVtZW50KTogdm9pZDtcbiAgYWJzdHJhY3QgZ2V0UGFyZW50SG9zdChob3N0OiBIb3N0RWxlbWVudCk6IEhvc3RFbGVtZW50IHwgbnVsbDtcbiAgYWJzdHJhY3Qgc2V0Q29udGV4dDxUPihob3N0OiBIb3N0RWxlbWVudCwgY29udGV4dDogQ29udGV4dElkPFQ+LCB2YWx1ZTogVCk6IHZvaWQ7XG4gIGFic3RyYWN0IHJlc29sdmVDb250ZXh0PFQ+KGhvc3Q6IEhvc3RFbGVtZW50LCBjb250ZXh0SWQ6IENvbnRleHRJZDxUPik6IFQgfCB1bmRlZmluZWQ7XG4gIGFic3RyYWN0IHNldEhvc3RQcm9wPFQ+KGhvc3Q6IEhvc3RFbGVtZW50LCBuYW1lOiBzdHJpbmcsIHZhbHVlOiBUKTogdm9pZDtcbiAgYWJzdHJhY3QgZ2V0SG9zdFByb3A8VD4oaG9zdDogSG9zdEVsZW1lbnQsIG5hbWU6IHN0cmluZyk6IFQgfCBudWxsO1xuICBhYnN0cmFjdCAkYXBwZW5kU3R5bGUkKFxuICAgIGNvbnRlbnQ6IHN0cmluZyxcbiAgICBzdHlsZUlkOiBzdHJpbmcsXG4gICAgaG9zdDogSG9zdEVsZW1lbnQsXG4gICAgc2NvcGVkOiBib29sZWFuXG4gICk6IHZvaWQ7XG59XG4iXX0=","export const QObjectRecursive = 1 << 0;\nexport const QObjectImmutable = 1 << 1;\nexport const QObjectTargetSymbol = Symbol('proxy target');\nexport const QObjectFlagsSymbol = Symbol('proxy flags');\nexport const QObjectManagerSymbol = Symbol('proxy manager');\n/** @internal */\nexport const _CONST_PROPS = Symbol('CONST');\n/** @internal */\nexport const _VAR_PROPS = Symbol('VAR');\n/** @internal @deprecated v1 compat */\nexport const _IMMUTABLE = Symbol('IMMUTABLE');\n/** @deprecated */\nexport const _IMMUTABLE_PREFIX = '$$';\n/**\n * @internal\n * Key for the virtual element stored on qv comments\n */\nexport const VIRTUAL_SYMBOL = '__virtual';\n/**\n * @internal\n * Key for the `QContext` object stored on QwikElements\n */\nexport const Q_CTX = '_qc_';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3NoYXJlZC91dGlscy9jb25zdGFudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2QyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRXZDLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUMxRCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDeEQsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBRTVELGdCQUFnQjtBQUNoQixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzVDLGdCQUFnQjtBQUNoQixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRXhDLHNDQUFzQztBQUN0QyxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzlDLGtCQUFrQjtBQUNsQixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUM7QUFFdEM7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLFdBQVcsQ0FBQztBQUMxQzs7O0dBR0c7QUFDSCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFFPYmplY3RSZWN1cnNpdmUgPSAxIDw8IDA7XG5leHBvcnQgY29uc3QgUU9iamVjdEltbXV0YWJsZSA9IDEgPDwgMTtcblxuZXhwb3J0IGNvbnN0IFFPYmplY3RUYXJnZXRTeW1ib2wgPSBTeW1ib2woJ3Byb3h5IHRhcmdldCcpO1xuZXhwb3J0IGNvbnN0IFFPYmplY3RGbGFnc1N5bWJvbCA9IFN5bWJvbCgncHJveHkgZmxhZ3MnKTtcbmV4cG9ydCBjb25zdCBRT2JqZWN0TWFuYWdlclN5bWJvbCA9IFN5bWJvbCgncHJveHkgbWFuYWdlcicpO1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgX0NPTlNUX1BST1BTID0gU3ltYm9sKCdDT05TVCcpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IF9WQVJfUFJPUFMgPSBTeW1ib2woJ1ZBUicpO1xuXG4vKiogQGludGVybmFsIEBkZXByZWNhdGVkIHYxIGNvbXBhdCAqL1xuZXhwb3J0IGNvbnN0IF9JTU1VVEFCTEUgPSBTeW1ib2woJ0lNTVVUQUJMRScpO1xuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgY29uc3QgX0lNTVVUQUJMRV9QUkVGSVggPSAnJCQnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICogS2V5IGZvciB0aGUgdmlydHVhbCBlbGVtZW50IHN0b3JlZCBvbiBxdiBjb21tZW50c1xuICovXG5leHBvcnQgY29uc3QgVklSVFVBTF9TWU1CT0wgPSAnX192aXJ0dWFsJztcbi8qKlxuICogQGludGVybmFsXG4gKiBLZXkgZm9yIHRoZSBgUUNvbnRleHRgIG9iamVjdCBzdG9yZWQgb24gUXdpa0VsZW1lbnRzXG4gKi9cbmV4cG9ydCBjb25zdCBRX0NUWCA9ICdfcWNfJztcbiJdfQ==","import { _CONST_PROPS, _IMMUTABLE } from '../shared/utils/constants';\nimport { assertEqual } from '../shared/error/assert';\nimport { isObject } from '../shared/utils/types';\nimport { WrappedSignal } from './signal';\nimport { isSignal } from './signal.public';\nimport { getStoreTarget } from './store';\nimport { isPropsProxy } from '../shared/jsx/jsx-runtime';\nconst getProp = (...args) => {\n    const obj = args[0];\n    const prop = args.length < 2 ? 'value' : args[1];\n    return obj[prop];\n};\nconst getWrapped = (args) => new WrappedSignal(null, getProp, args, null);\n/**\n * This wraps a property access of a possible Signal/Store into a WrappedSignal. The optimizer does\n * this automatically when a prop is only used as a prop on JSX.\n *\n * When a WrappedSignal is read via the PropsProxy, it will be unwrapped. This allows forwarding the\n * reactivity of a prop to the point of actual use.\n *\n * For efficiency, if you pass only one argument, the property is 'value'.\n *\n * @internal\n */\nexport const _wrapProp = (...args) => {\n    const obj = args[0];\n    const prop = args.length < 2 ? 'value' : args[1];\n    if (!isObject(obj)) {\n        return obj[prop];\n    }\n    if (isSignal(obj)) {\n        assertEqual(prop, 'value', 'Left side is a signal, prop must be value');\n        if (obj instanceof WrappedSignal) {\n            return obj;\n        }\n        return getWrapped(args);\n    }\n    if (isPropsProxy(obj)) {\n        const constProps = obj[_CONST_PROPS];\n        if (constProps && prop in constProps) {\n            // Const props don't need wrapping\n            return constProps[prop];\n        }\n    }\n    else {\n        const target = getStoreTarget(obj);\n        if (target) {\n            const value = target[prop];\n            const wrappedValue = isSignal(value)\n                ? // If the value is already a signal, we don't need to wrap it again\n                    value\n                : getWrapped(args);\n            return wrappedValue;\n        }\n    }\n    // We need to forward the access to the original object\n    return getWrapped(args);\n};\n/** @internal @deprecated v1 compat */\nexport const _wrapSignal = (obj, prop) => {\n    const r = _wrapProp(obj, prop);\n    if (r === _IMMUTABLE) {\n        return obj[prop];\n    }\n    return r;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmFsLXV0aWxzLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3NpZ25hbC9zaWduYWwtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDckQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2pELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDekMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRXpELE1BQU0sT0FBTyxHQUFHLENBQUMsR0FBRyxJQUFvQixFQUFFLEVBQUU7SUFDMUMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUUsQ0FBQztJQUNsRCxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuQixDQUFDLENBQUM7QUFFRixNQUFNLFVBQVUsR0FBRyxDQUFDLElBQVcsRUFBRSxFQUFFLENBQUMsSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFFakY7Ozs7Ozs7Ozs7R0FVRztBQUNILE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFnRCxHQUFHLElBQWEsRUFBTyxFQUFFO0lBQ2hHLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFFLENBQUM7SUFFbEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ25CLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25CLENBQUM7SUFDRCxJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ2xCLFdBQVcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLDJDQUEyQyxDQUFDLENBQUM7UUFDeEUsSUFBSSxHQUFHLFlBQVksYUFBYSxFQUFFLENBQUM7WUFDakMsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDO1FBQ0QsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUNELElBQUksWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDdEIsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBUSxDQUFDO1FBQzVDLElBQUksVUFBVSxJQUFJLElBQUksSUFBSSxVQUFVLEVBQUUsQ0FBQztZQUNyQyxrQ0FBa0M7WUFDbEMsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUIsQ0FBQztJQUNILENBQUM7U0FBTSxDQUFDO1FBQ04sTUFBTSxNQUFNLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25DLElBQUksTUFBTSxFQUFFLENBQUM7WUFDWCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDM0IsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztnQkFDbEMsQ0FBQyxDQUFDLG1FQUFtRTtvQkFDbkUsS0FBSztnQkFDUCxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JCLE9BQU8sWUFBWSxDQUFDO1FBQ3RCLENBQUM7SUFDSCxDQUFDO0lBQ0QsdURBQXVEO0lBQ3ZELE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzFCLENBQUMsQ0FBQztBQUVGLHNDQUFzQztBQUN0QyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FDekIsR0FBTSxFQUNOLElBQU8sRUFDRixFQUFFO0lBQ1AsTUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMvQixJQUFJLENBQUMsS0FBSyxVQUFVLEVBQUUsQ0FBQztRQUNyQixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBQ0QsT0FBTyxDQUFDLENBQUM7QUFDWCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfQ09OU1RfUFJPUFMsIF9JTU1VVEFCTEUgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMvY29uc3RhbnRzJztcbmltcG9ydCB7IGFzc2VydEVxdWFsIH0gZnJvbSAnLi4vc2hhcmVkL2Vycm9yL2Fzc2VydCc7XG5pbXBvcnQgeyBpc09iamVjdCB9IGZyb20gJy4uL3NoYXJlZC91dGlscy90eXBlcyc7XG5pbXBvcnQgeyBXcmFwcGVkU2lnbmFsIH0gZnJvbSAnLi9zaWduYWwnO1xuaW1wb3J0IHsgaXNTaWduYWwgfSBmcm9tICcuL3NpZ25hbC5wdWJsaWMnO1xuaW1wb3J0IHsgZ2V0U3RvcmVUYXJnZXQgfSBmcm9tICcuL3N0b3JlJztcbmltcG9ydCB7IGlzUHJvcHNQcm94eSB9IGZyb20gJy4uL3NoYXJlZC9qc3gvanN4LXJ1bnRpbWUnO1xuXG5jb25zdCBnZXRQcm9wID0gKC4uLmFyZ3M6IFthbnksIHN0cmluZz9dKSA9PiB7XG4gIGNvbnN0IG9iaiA9IGFyZ3NbMF07XG4gIGNvbnN0IHByb3AgPSBhcmdzLmxlbmd0aCA8IDIgPyAndmFsdWUnIDogYXJnc1sxXSE7XG4gIHJldHVybiBvYmpbcHJvcF07XG59O1xuXG5jb25zdCBnZXRXcmFwcGVkID0gKGFyZ3M6IGFueVtdKSA9PiBuZXcgV3JhcHBlZFNpZ25hbChudWxsLCBnZXRQcm9wLCBhcmdzLCBudWxsKTtcblxuLyoqXG4gKiBUaGlzIHdyYXBzIGEgcHJvcGVydHkgYWNjZXNzIG9mIGEgcG9zc2libGUgU2lnbmFsL1N0b3JlIGludG8gYSBXcmFwcGVkU2lnbmFsLiBUaGUgb3B0aW1pemVyIGRvZXNcbiAqIHRoaXMgYXV0b21hdGljYWxseSB3aGVuIGEgcHJvcCBpcyBvbmx5IHVzZWQgYXMgYSBwcm9wIG9uIEpTWC5cbiAqXG4gKiBXaGVuIGEgV3JhcHBlZFNpZ25hbCBpcyByZWFkIHZpYSB0aGUgUHJvcHNQcm94eSwgaXQgd2lsbCBiZSB1bndyYXBwZWQuIFRoaXMgYWxsb3dzIGZvcndhcmRpbmcgdGhlXG4gKiByZWFjdGl2aXR5IG9mIGEgcHJvcCB0byB0aGUgcG9pbnQgb2YgYWN0dWFsIHVzZS5cbiAqXG4gKiBGb3IgZWZmaWNpZW5jeSwgaWYgeW91IHBhc3Mgb25seSBvbmUgYXJndW1lbnQsIHRoZSBwcm9wZXJ0eSBpcyAndmFsdWUnLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgX3dyYXBQcm9wID0gPFQgZXh0ZW5kcyBSZWNvcmQ8YW55LCBhbnk+LCBQIGV4dGVuZHMga2V5b2YgVD4oLi4uYXJnczogW1QsIFA/XSk6IGFueSA9PiB7XG4gIGNvbnN0IG9iaiA9IGFyZ3NbMF07XG4gIGNvbnN0IHByb3AgPSBhcmdzLmxlbmd0aCA8IDIgPyAndmFsdWUnIDogYXJnc1sxXSE7XG5cbiAgaWYgKCFpc09iamVjdChvYmopKSB7XG4gICAgcmV0dXJuIG9ialtwcm9wXTtcbiAgfVxuICBpZiAoaXNTaWduYWwob2JqKSkge1xuICAgIGFzc2VydEVxdWFsKHByb3AsICd2YWx1ZScsICdMZWZ0IHNpZGUgaXMgYSBzaWduYWwsIHByb3AgbXVzdCBiZSB2YWx1ZScpO1xuICAgIGlmIChvYmogaW5zdGFuY2VvZiBXcmFwcGVkU2lnbmFsKSB7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0V3JhcHBlZChhcmdzKTtcbiAgfVxuICBpZiAoaXNQcm9wc1Byb3h5KG9iaikpIHtcbiAgICBjb25zdCBjb25zdFByb3BzID0gb2JqW19DT05TVF9QUk9QU10gYXMgYW55O1xuICAgIGlmIChjb25zdFByb3BzICYmIHByb3AgaW4gY29uc3RQcm9wcykge1xuICAgICAgLy8gQ29uc3QgcHJvcHMgZG9uJ3QgbmVlZCB3cmFwcGluZ1xuICAgICAgcmV0dXJuIGNvbnN0UHJvcHNbcHJvcF07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IHRhcmdldCA9IGdldFN0b3JlVGFyZ2V0KG9iaik7XG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgY29uc3QgdmFsdWUgPSB0YXJnZXRbcHJvcF07XG4gICAgICBjb25zdCB3cmFwcGVkVmFsdWUgPSBpc1NpZ25hbCh2YWx1ZSlcbiAgICAgICAgPyAvLyBJZiB0aGUgdmFsdWUgaXMgYWxyZWFkeSBhIHNpZ25hbCwgd2UgZG9uJ3QgbmVlZCB0byB3cmFwIGl0IGFnYWluXG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgOiBnZXRXcmFwcGVkKGFyZ3MpO1xuICAgICAgcmV0dXJuIHdyYXBwZWRWYWx1ZTtcbiAgICB9XG4gIH1cbiAgLy8gV2UgbmVlZCB0byBmb3J3YXJkIHRoZSBhY2Nlc3MgdG8gdGhlIG9yaWdpbmFsIG9iamVjdFxuICByZXR1cm4gZ2V0V3JhcHBlZChhcmdzKTtcbn07XG5cbi8qKiBAaW50ZXJuYWwgQGRlcHJlY2F0ZWQgdjEgY29tcGF0ICovXG5leHBvcnQgY29uc3QgX3dyYXBTaWduYWwgPSA8VCBleHRlbmRzIFJlY29yZDxhbnksIGFueT4sIFAgZXh0ZW5kcyBrZXlvZiBUPihcbiAgb2JqOiBULFxuICBwcm9wOiBQXG4pOiBhbnkgPT4ge1xuICBjb25zdCByID0gX3dyYXBQcm9wKG9iaiwgcHJvcCk7XG4gIGlmIChyID09PSBfSU1NVVRBQkxFKSB7XG4gICAgcmV0dXJuIG9ialtwcm9wXTtcbiAgfVxuICByZXR1cm4gcjtcbn07XG4iXX0=","import { WrappedSignal } from '../../signal/signal';\n/** @internal */\nexport const _fnSignal = (fn, args, fnStr) => {\n    return new WrappedSignal(null, fn, args, fnStr || null);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5saW5lZC1mbi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9zaGFyZWQvcXJsL2lubGluZWQtZm4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXBELGdCQUFnQjtBQUNoQixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FDdkIsRUFBSyxFQUNMLElBQW1CLEVBQ25CLEtBQWMsRUFDZCxFQUFFO0lBQ0YsT0FBTyxJQUFJLGFBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLElBQUksSUFBSSxDQUFDLENBQUM7QUFDMUQsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV3JhcHBlZFNpZ25hbCB9IGZyb20gJy4uLy4uL3NpZ25hbC9zaWduYWwnO1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgX2ZuU2lnbmFsID0gPFQgZXh0ZW5kcyAoLi4uYXJnczogYW55KSA9PiBhbnk+KFxuICBmbjogVCxcbiAgYXJnczogUGFyYW1ldGVyczxUPixcbiAgZm5TdHI/OiBzdHJpbmdcbikgPT4ge1xuICByZXR1cm4gbmV3IFdyYXBwZWRTaWduYWwobnVsbCwgZm4sIGFyZ3MsIGZuU3RyIHx8IG51bGwpO1xufTtcbiJdfQ==","/** @file Shared types */\n/** @internal */\nexport function isStringifiable(value) {\n    return (value === null ||\n        typeof value === 'string' ||\n        typeof value === 'number' ||\n        typeof value === 'boolean');\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkLXR5cGVzLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3NoYXJlZC10eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx5QkFBeUI7QUFLekIsZ0JBQWdCO0FBQ2hCLE1BQU0sVUFBVSxlQUFlLENBQUMsS0FBYztJQUM1QyxPQUFPLENBQ0wsS0FBSyxLQUFLLElBQUk7UUFDZCxPQUFPLEtBQUssS0FBSyxRQUFRO1FBQ3pCLE9BQU8sS0FBSyxLQUFLLFFBQVE7UUFDekIsT0FBTyxLQUFLLEtBQUssU0FBUyxDQUMzQixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAZmlsZSBTaGFyZWQgdHlwZXMgKi9cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IHR5cGUgU3RyaW5naWZpYWJsZSA9IHN0cmluZyB8IGJvb2xlYW4gfCBudW1iZXIgfCBudWxsO1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpbmdpZmlhYmxlKHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgU3RyaW5naWZpYWJsZSB7XG4gIHJldHVybiAoXG4gICAgdmFsdWUgPT09IG51bGwgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gICk7XG59XG4iXX0=","import {} from '../component.public';\nimport { _CONST_PROPS } from '../../internal';\nimport {} from '../qrl/qrl-class';\nimport { _VAR_PROPS } from '../utils/constants';\nimport { untrack } from '../../use/use-core';\nimport { EMPTY_OBJ } from '../utils/flyweight';\nimport { logOnceWarn, logWarn } from '../utils/log';\nimport { ELEMENT_ID, OnRenderProp, QScopedStyle, QSlot, QSlotS } from '../utils/markers';\nimport { qDev, seal } from '../utils/qdev';\nimport { isArray, isObject, isString } from '../utils/types';\nimport { WrappedSignal } from '../../signal/signal';\n/**\n * Create a JSXNode with the properties fully split into variable and constant parts, and children\n * separated out. Furthermore, the varProps must be a sorted object, that is, the keys must be\n * sorted in ascending utf-8 value order.\n *\n * The constant parts are expected to be the same on every render, and are not checked for changes.\n * This means that they are constant scalars or refs. When the ref is a signal or a store, it can\n * still update the attribute on the vnode.\n *\n * @param type - The JSX type\n * @param varProps - The properties of the tag, sorted, excluding children, excluding any constProps\n * @param constProps - The properties of the tag that are known to be constant references and don't\n *   need checking for changes on re-render\n * @param children - JSX children. Any `children` in the props objects are ignored.\n * @internal\n */\nexport const _jsxSorted = (type, varProps, constProps, children, flags, key, dev) => {\n    const processed = key == null ? null : String(key);\n    const node = new JSXNodeImpl(type, varProps || {}, constProps || null, children, flags, processed);\n    if (qDev && dev) {\n        node.dev = {\n            stack: new Error().stack,\n            ...dev,\n        };\n    }\n    seal(node);\n    return node;\n};\n/**\n * Create a JSXNode, with the properties split into variable and constant parts, but the variable\n * parts could include keys from constProps, as well as `key` and `children`.\n *\n * The constant parts are expected to be the same on every render, and are not checked for changes.\n * This means that they are constant scalars or refs. When the ref is a signal or a store, it can\n * still update the attribute on the vnode.\n *\n * If `children` is defined, any `children` in the props will be ignored.\n *\n * @param type - The tag type\n * @param varProps - The properties of the tag that could change, including children\n * @param constProps - The properties of the tag that are known to be static and don't need checking\n *   for changes on re-render\n * @internal\n */\nexport const _jsxSplit = (type, varProps, constProps, children, flags, key, dev) => {\n    let sortedProps;\n    if (varProps) {\n        // filter and sort\n        sortedProps = Object.fromEntries(untrack(() => Object.entries(varProps))\n            .filter((entry) => {\n            const attr = entry[0];\n            if (attr === 'children') {\n                // side-effect!\n                children ?? (children = entry[1]);\n                return false;\n            }\n            else if (attr === 'key') {\n                key = entry[1];\n                return false;\n            }\n            return (!constProps ||\n                !(attr in constProps) ||\n                // special case for event handlers, they merge\n                /^on[A-Z].*\\$$/.test(attr));\n        })\n            // sort for fast compare in vNodes\n            // keys can never be the same so we don't check for that\n            .sort(([a], [b]) => (a < b ? -1 : 1)));\n    }\n    else {\n        sortedProps = typeof type === 'string' ? EMPTY_OBJ : {};\n    }\n    if (constProps && 'children' in constProps) {\n        children = constProps.children;\n        constProps.children = undefined;\n    }\n    return _jsxSorted(type, sortedProps, constProps, children, flags, key, dev);\n};\n/** @internal @deprecated v1 compat */\nexport const _jsxC = (type, mutable, _flags, key) => jsx(type, mutable, key);\n/** @internal @deprecated v1 compat */\nexport const _jsxS = (type, mutable, immutable, _flags, key) => jsx(type, { ...immutable, ...mutable }, key);\n/** @internal @deprecated v1 compat */\nexport const _jsxQ = (type, mutable, immutable, children, _flags, key) => jsx(type, { ...immutable, ...mutable, children }, key);\n/**\n * @public\n * Used by the JSX transpilers to create a JSXNode.\n * Note that the optimizer will not use this, instead using _jsxSplit and _jsxSorted directly.\n */\nexport const jsx = (type, props, key) => {\n    return _jsxSplit(type, props, null, null, 0, key || null);\n};\nexport const flattenArray = (array, dst) => {\n    // Yes this function is just Array.flat, but we need to run on old versions of Node.\n    if (!dst) {\n        dst = [];\n    }\n    for (const item of array) {\n        if (isArray(item)) {\n            flattenArray(item, dst);\n        }\n        else {\n            dst.push(item);\n        }\n    }\n    return dst;\n};\n/**\n * The legacy transform, used in special cases like `<div {...props} key=\"key\" />`. Note that the\n * children are spread arguments, instead of a prop like in jsx() calls.\n *\n * Also note that this disables optimizations.\n *\n * @public\n */\nexport function h(type, props, ...children) {\n    const normalizedProps = {\n        children: arguments.length > 2 ? flattenArray(children) : null,\n    };\n    let key = null;\n    for (const i in props) {\n        if (i == 'key') {\n            key = props[i];\n        }\n        else {\n            normalizedProps[i] = props[i];\n        }\n    }\n    if (typeof type === 'string' && !key && 'dangerouslySetInnerHTML' in normalizedProps) {\n        key = 'innerhtml';\n    }\n    return _jsxSplit(type, props, null, normalizedProps.children, 0, key);\n}\nexport const SKIP_RENDER_TYPE = ':skipRender';\nexport const isPropsProxy = (obj) => {\n    return obj && obj[_VAR_PROPS] !== undefined;\n};\nexport class JSXNodeImpl {\n    constructor(type, varProps, constProps, children, flags, key = null) {\n        this.type = type;\n        this.varProps = varProps;\n        this.constProps = constProps;\n        this.children = children;\n        this.flags = flags;\n        this.key = key;\n        this._proxy = null;\n        if (qDev) {\n            if (typeof varProps !== 'object') {\n                throw new Error(`JSXNodeImpl: varProps must be objects: ` + JSON.stringify(varProps));\n            }\n            if (typeof constProps !== 'object') {\n                throw new Error(`JSXNodeImpl: constProps must be objects: ` + JSON.stringify(constProps));\n            }\n        }\n    }\n    get props() {\n        // We use a proxy to merge the constProps if they exist and to evaluate derived signals\n        if (!this._proxy) {\n            this._proxy = createPropsProxy(this.varProps, this.constProps, this.children);\n        }\n        return this._proxy;\n    }\n}\n/** @private */\nexport const Virtual = (props) => props.children;\n/** @public */\nexport const RenderOnce = (props, key) => {\n    return new JSXNodeImpl(Virtual, EMPTY_OBJ, null, props.children, 2, key);\n};\n/** @internal */\nexport const isJSXNode = (n) => {\n    if (qDev) {\n        if (n instanceof JSXNodeImpl) {\n            return true;\n        }\n        if (isObject(n) && 'key' in n && 'props' in n && 'type' in n) {\n            logWarn(`Duplicate implementations of \"JSXNode\" found`);\n            return true;\n        }\n        return false;\n    }\n    else {\n        return n instanceof JSXNodeImpl;\n    }\n};\n/** @public */\nexport const Fragment = (props) => props.children;\n/** @public */\nexport const jsxDEV = (type, props, key, _isStatic, opts, _ctx) => {\n    const processed = key == null ? null : String(key);\n    const children = untrack(() => {\n        const c = props.children;\n        if (typeof type === 'string') {\n            delete props.children;\n        }\n        return c;\n    });\n    if (isString(type)) {\n        if ('className' in props) {\n            props.class = props.className;\n            delete props.className;\n            if (qDev) {\n                logOnceWarn('jsx: `className` is deprecated. Use `class` instead.');\n            }\n        }\n    }\n    const node = new JSXNodeImpl(type, props, null, children, 0, processed);\n    node.dev = {\n        stack: new Error().stack,\n        ...opts,\n    };\n    seal(node);\n    return node;\n};\nexport const createJSXError = (message, node) => {\n    const error = new Error(message);\n    if (!node.dev) {\n        return error;\n    }\n    error.stack = `JSXError: ${message}\\n${filterStack(node.dev.stack, 1)}`;\n    return error;\n};\nconst filterStack = (stack, offset = 0) => {\n    return stack.split('\\n').slice(offset).join('\\n');\n};\nexport function createPropsProxy(varProps, constProps, children) {\n    return new Proxy({}, new PropsProxyHandler(varProps, constProps, children));\n}\nclass PropsProxyHandler {\n    constructor($varProps$, $constProps$, $children$) {\n        this.$varProps$ = $varProps$;\n        this.$constProps$ = $constProps$;\n        this.$children$ = $children$;\n    }\n    get(_, prop) {\n        // escape hatch to get the separated props from a component\n        if (prop === _CONST_PROPS) {\n            return this.$constProps$;\n        }\n        if (prop === _VAR_PROPS) {\n            return this.$varProps$;\n        }\n        if (this.$children$ != null && prop === 'children') {\n            return this.$children$;\n        }\n        const value = this.$constProps$ && prop in this.$constProps$\n            ? this.$constProps$[prop]\n            : this.$varProps$[prop];\n        // a proxied value that the optimizer made\n        return value instanceof WrappedSignal ? value.value : value;\n    }\n    set(_, prop, value) {\n        if (prop === _CONST_PROPS) {\n            this.$constProps$ = value;\n            return true;\n        }\n        if (prop === _VAR_PROPS) {\n            this.$varProps$ = value;\n            return true;\n        }\n        if (this.$constProps$ && prop in this.$constProps$) {\n            this.$constProps$[prop] = value;\n        }\n        else {\n            this.$varProps$[prop] = value;\n        }\n        return true;\n    }\n    deleteProperty(_, prop) {\n        if (typeof prop !== 'string') {\n            return false;\n        }\n        let didDelete = delete this.$varProps$[prop];\n        if (this.$constProps$) {\n            didDelete = delete this.$constProps$[prop] || didDelete;\n        }\n        if (this.$children$ != null && prop === 'children') {\n            this.$children$ = null;\n        }\n        return didDelete;\n    }\n    has(_, prop) {\n        const hasProp = (prop === 'children' && this.$children$ != null) ||\n            prop === _CONST_PROPS ||\n            prop === _VAR_PROPS ||\n            prop in this.$varProps$ ||\n            (this.$constProps$ ? prop in this.$constProps$ : false);\n        return hasProp;\n    }\n    getOwnPropertyDescriptor(target, p) {\n        const value = p === 'children' && this.$children$ != null\n            ? this.$children$\n            : this.$constProps$ && p in this.$constProps$\n                ? this.$constProps$[p]\n                : this.$varProps$[p];\n        return {\n            configurable: true,\n            enumerable: true,\n            value: value,\n        };\n    }\n    ownKeys() {\n        const out = Object.keys(this.$varProps$);\n        if (this.$children$ != null && out.indexOf('children') === -1) {\n            out.push('children');\n        }\n        if (this.$constProps$) {\n            for (const key in this.$constProps$) {\n                if (out.indexOf(key) === -1) {\n                    out.push(key);\n                }\n            }\n        }\n        return out;\n    }\n}\n/**\n * Instead of using PropsProxyHandler getter (which could create a component-level subscription).\n * Use this function to get the props directly from a const or var props.\n */\nexport const directGetPropsProxyProp = (jsx, prop) => {\n    return (jsx.constProps && prop in jsx.constProps ? jsx.constProps[prop] : jsx.varProps[prop]);\n};\nexport { jsx as jsxs };\n//# sourceMappingURL=data:application/json;base64,","import { isQrl } from '../server/prefetch-strategy';\nimport { isJSXNode } from './shared/jsx/jsx-runtime';\nimport { isTask } from './use/use-task';\nimport { vnode_getProp, vnode_isVNode } from './client/vnode';\nimport { ComputedSignal, WrappedSignal, isSignal } from './signal/signal';\nimport { isStore } from './signal/store';\nimport { DEBUG_TYPE } from './shared/types';\nconst stringifyPath = [];\nexport function qwikDebugToString(value) {\n    if (value === null) {\n        return 'null';\n    }\n    else if (value === undefined) {\n        return 'undefined';\n    }\n    else if (typeof value === 'string') {\n        return '\"' + value + '\"';\n    }\n    else if (typeof value === 'number' || typeof value === 'boolean') {\n        return String(value);\n    }\n    else if (isTask(value)) {\n        return `Task(${qwikDebugToString(value.$qrl$)})`;\n    }\n    else if (isQrl(value)) {\n        return `Qrl(${value.$symbol$})`;\n    }\n    else if (typeof value === 'object' || typeof value === 'function') {\n        if (stringifyPath.includes(value)) {\n            return '*';\n        }\n        if (stringifyPath.length > 10) {\n            // debugger;\n        }\n        try {\n            stringifyPath.push(value);\n            if (Array.isArray(value)) {\n                if (vnode_isVNode(value)) {\n                    return '(' + vnode_getProp(value, DEBUG_TYPE, null) + ')';\n                }\n                else {\n                    return value.map(qwikDebugToString);\n                }\n            }\n            else if (isSignal(value)) {\n                if (value instanceof WrappedSignal) {\n                    return 'WrappedSignal';\n                }\n                else if (value instanceof ComputedSignal) {\n                    return 'ComputedSignal';\n                }\n                else {\n                    return 'Signal';\n                }\n            }\n            else if (isStore(value)) {\n                return 'Store';\n            }\n            else if (isJSXNode(value)) {\n                return jsxToString(value);\n            }\n        }\n        finally {\n            stringifyPath.pop();\n        }\n    }\n    return value;\n}\nexport const pad = (text, prefix) => {\n    return String(text)\n        .split('\\n')\n        .map((line, idx) => (idx ? prefix : '') + line)\n        .join('\\n');\n};\nexport const jsxToString = (value) => {\n    if (isJSXNode(value)) {\n        let type = value.type;\n        if (typeof type === 'function') {\n            type = type.name || 'Component';\n        }\n        let str = '<' + value.type;\n        if (value.props) {\n            for (const [key, val] of Object.entries(value.props)) {\n                str += ' ' + key + '=' + qwikDebugToString(val);\n            }\n            const children = value.children;\n            if (children != null) {\n                str += '>';\n                if (Array.isArray(children)) {\n                    children.forEach((child) => {\n                        str += jsxToString(child);\n                    });\n                }\n                else {\n                    str += jsxToString(children);\n                }\n                str += '</' + value.type + '>';\n            }\n            else {\n                str += '/>';\n            }\n        }\n        return str;\n    }\n    else {\n        return String(value);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","/**\n * @file\n *\n *   VNodeData is additional information which allows the `vnode` to recover virtual VNode information\n *   from the HTML.\n */\n/**\n * VNodeDataSeparator contains information about splitting up the VNodeData and attaching it to the\n * HTML.\n */\nexport const VNodeDataSeparator = {\n    REFERENCE_CH: /* ***** */ `~`, // `~` is a reference to the node. Save it.\n    REFERENCE: /* ******** */ 126, // `~` is a reference to the node. Save it.\n    ADVANCE_1_CH: /* ***** */ `!`, // `!` is vNodeData separator skipping 0. (ie next vNode)\n    ADVANCE_1: /* ********* */ 33, // `!` is vNodeData separator skipping 0. (ie next vNode)\n    ADVANCE_2_CH: /* ***** */ `\"`, // `\"` is vNodeData separator skipping 1.\n    ADVANCE_2: /* ********* */ 34, // `\"` is vNodeData separator skipping 1.\n    ADVANCE_4_CH: /* ***** */ `#`, // `#` is vNodeData separator skipping 2.\n    ADVANCE_4: /* ********* */ 35, // `#` is vNodeData separator skipping 2.\n    ADVANCE_8_CH: /* ***** */ `$`, // `$` is vNodeData separator skipping 4.\n    ADVANCE_8: /* ********* */ 36, // `$` is vNodeData separator skipping 4.\n    ADVANCE_16_CH: /* **** */ `%`, // `%` is vNodeData separator skipping 8.\n    ADVANCE_16: /* ******** */ 37, // `%` is vNodeData separator skipping 8.\n    ADVANCE_32_CH: /* **** */ `&`, // `&` is vNodeData separator skipping 16.\n    ADVANCE_32: /* ******** */ 38, // `&` is vNodeData separator skipping 16.\n    ADVANCE_64_CH: /* **** */ `'`, // `'` is vNodeData separator skipping 32.\n    ADVANCE_64: /* ******** */ 39, // `'` is vNodeData separator skipping 32.\n    ADVANCE_128_CH: /* *** */ `(`, // `(` is vNodeData separator skipping 64.\n    ADVANCE_128: /* ******* */ 40, // `(` is vNodeData separator skipping 64.\n    ADVANCE_256_CH: /* *** */ `)`, // `)` is vNodeData separator skipping 128.\n    ADVANCE_256: /* ******* */ 41, // `)` is vNodeData separator skipping 128.\n    ADVANCE_512_CH: /* *** */ `*`, // `*` is vNodeData separator skipping 256.\n    ADVANCE_512: /* ******* */ 42, // `*` is vNodeData separator skipping 256.\n    ADVANCE_1024_CH: /* ** */ `+`, // `+` is vNodeData separator skipping 512.\n    ADVANCE_1024: /* ****** */ 43, // `+` is vNodeData separator skipping 512.\n    ADVANCE_2048_CH: /* *  */ ',', // ',' is vNodeData separator skipping 1024.\n    ADVANCE_2048: /* ****** */ 44, // ',' is vNodeData separator skipping 1024.\n    ADVANCE_4096_CH: /* *  */ `-`, // `-` is vNodeData separator skipping 2048.\n    ADVANCE_4096: /* ****** */ 45, // `-` is vNodeData separator skipping 2048.\n    ADVANCE_8192_CH: /* *  */ `.`, // `.` is vNodeData separator skipping 4096.\n    ADVANCE_8192: /* ****** */ 46, // `.` is vNodeData separator skipping 4096.\n};\n/** VNodeDataChar contains information about the VNodeData used for encoding props */\nexport const VNodeDataChar = {\n    OPEN: /* ************** */ 123, // `{` is the start of the VNodeData.\n    OPEN_CHAR: /* ****** */ '{',\n    CLOSE: /* ************* */ 125, // `}` is the end of the VNodeData.\n    CLOSE_CHAR: /* ***** */ '}',\n    SCOPED_STYLE: /* ******* */ 59, // `;` - `q:sstyle` - Style attribute.\n    SCOPED_STYLE_CHAR: /* */ ';',\n    RENDER_FN: /* ********** */ 60, // `<` - `q:renderFn' - Component QRL render function (body)\n    RENDER_FN_CHAR: /* ** */ '<',\n    ID: /* ***************** */ 61, // `=` - `q:id` - ID of the element.\n    ID_CHAR: /* ********* */ '=',\n    PROPS: /* ************** */ 62, // `>` - `q:props' - Component Props\n    PROPS_CHAR: /* ****** */ '>',\n    SLOT_REF: /* *********** */ 63, // `?` - `q:sref` - Slot reference.\n    SLOT_REF_CHAR: /* *** */ '?',\n    KEY: /* **************** */ 64, // `@` - `q:key` - Element key.\n    KEY_CHAR: /* ******** */ '@',\n    SEQ: /* **************** */ 91, // `[` - `q:seq' - Seq value from `useSequentialScope()`\n    SEQ_CHAR: /* ******** */ '[',\n    DON_T_USE: /* ********** */ 93, // `\\` - SKIP because `\\` is used as escaping\n    DON_T_USE_CHAR: '\\\\',\n    CONTEXT: /* ************ */ 93, // `]` - `q:ctx' - Component context/props\n    CONTEXT_CHAR: /* **** */ ']',\n    SEQ_IDX: /* ************ */ 94, // `^` - `q:seqIdx' - Sequential scope id\n    SEQ_IDX_CHAR: /* **** */ '^',\n    SEPARATOR: /* ********* */ 124, // `|` - Separator char to encode any key/value pairs.\n    SEPARATOR_CHAR: /* ** */ '|',\n    SLOT: /* ************** */ 126, // `~` - `q:slot' - Slot name\n    SLOT_CHAR: /* ******* */ '~',\n};\n//# sourceMappingURL=data:application/json;base64,","/**\n * @file\n *\n *   VNode is a DOM like API for walking the DOM but it:\n *\n *   1. Encodes virtual nodes which don't exist in the DOM\n *   2. Can serialize as part of SSR and than deserialize on the client.\n *\n *   # Virtual\n *\n *   You can think of a Virtual node just like an additional `<div>` in that it groups related child\n *   nodes together. But unlike a `<div>` which has a real DOM node and hence implications for CSS,\n *   Virtual nodes have no DOM impact, they are invisible.\n *\n *   # Portal\n *\n *   Two Virtual nodes can be linked together to form a Portal. Portals are useful for projecting\n *   content or just rendering content in a different location in the tree, while maintaining a\n *   logical relationship.\n *\n *   Portals have:\n *\n *   - Portal Source: A Virtual node which can refer to one ore more Destination Portals by name.\n *   - Destination Portal: A Virtual node which acts as a destination but also has a pointer back to the\n *       Portal Source\n *\n *   ## Example:\n *\n *   Given this code:\n *\n *   ```typescript\n *   const Parent = component$(() => {\n *     return (\n *       <Child>\n *         Projection Content\n *         <span q:slot=\"secondary\">Secondary Content</span>\n *         <span q:slot=\"other\">Other Content</span>\n *       </Child>\n *     };\n *   });\n *\n *   const Child = component$(() => {\n *     return (\n *       <div>\n *         <Slot>Default Primary</Slot>\n *         <Slot name=\"secondary\">Default Secondary</Slot>\n *       </div>\n *     );\n *   });\n *\n *   render(<body><main><Parent/></main><body>);\n * ```\n *\n *   Will render like so:\n *\n *   ```html\n *   <body>\n *     <main>\n *       <Virtual Parent q:portal=\":3A;secondary:3B;other:5A\" q:id=\"2A\">\n *         <Virtual Child>\n *           <div>\n *             <Virtual Slot q:id=\"3A\" q:portal=\"^:2A;:3A\"> Projection Content </Virtual>\n *             <Virtual Slot q:id=\"3B\" q:portal=\"^:2A;:3B\">\n *               <span q:slot=\"secondary\">Secondary Content</span>\n *             </Virtual>\n *           </div>\n *         </Virtual>\n *       </Virtual>\n *     </main>\n *     <q:template>\n *       <Virtual q:portal=\"^:2A\" q:id=\"5A\">\n *         <span q:slot=\"other\">Other Content</span>\n *       </Virtual>\n *       <Virtual q:portal=\"^:2A\" q:id=\"3A\">\n *         Default Primary\n *       </Virtual>\n *       <Virtual q:portal=\"^:2A\" q:id=\"3B\">\n *         Default Secondary\n *       </Virtual>\n *     <q:template>\n *   </body>\n * ```\n *\n *   Explanation:\n *\n *   - `q:portal=\":3A;secondary:3B;other:5A\"`\n *\n *       - Name: ``; Ref: `3A` - Where the default content went.\n *       - Name: `secondary`; Ref: `3B` - Where the 'secondary' content went.\n *       - Name: `other`; Ref: `%A` - Where the `other` content went. (Notice in this case the content is\n *               left over and os it ends up en the `q:templates`. We can share one '<q:template>`\n *               for all left over content.)\n *   - `q:portal=\"^:2A;:3A\"`\n *\n *       - Name: `^`; Ref: `2A` - Special pointer to the parent portal\n *       - Name: ``; Ref: `3A` - Location of the default content in case there is nothing projected here.\n *\n *   ## Rendering\n *\n *   During SSR, the rendered can delay rendering the JSX nodes until correct portal comes up. The ID\n *   system is already can make lazy references to the Nodes.\n *\n *   Client side rendering does not need to deal with IDs or `<q:template>` as un-rendered vNodes do\n *   not need to be serialized into DOM, and can remain on heap.\n *\n *   ## Context\n *\n *   When looking up context it is possible to follow you real render parents or follow the portals.\n *   All information is encoded in the portals.\n *\n *   ## Slot Projection\n *\n *   The ultimate user of portals is Slot projection. But the vNode do not understand slots, rather\n *   they understand portal primitives which makes Slot implementation much simpler.\n *\n *   NOTE: The portals need to have IDs during serialization only. Once runtime takes over, there is\n *   no need to have IDs or to write overflow to the `<q:template>`\n */\nimport { isDev } from '@builder.io/qwik/build';\nimport { qwikDebugToString } from '../debug';\nimport { assertDefined, assertEqual, assertFalse, assertTrue } from '../shared/error/assert';\nimport { isText } from '../shared/utils/element';\nimport { throwErrorAndStop } from '../shared/utils/log';\nimport { ELEMENT_ID, ELEMENT_KEY, ELEMENT_PROPS, ELEMENT_SEQ, ELEMENT_SEQ_IDX, OnRenderProp, QContainerAttr, QContainerAttrEnd, QContainerIsland, QContainerIslandEnd, QCtxAttr, QIgnore, QIgnoreEnd, QScopedStyle, QSlot, QSlotParent, QSlotRef, QStyle, QStylesAllSelector, Q_PROPS_SEPARATOR, dangerouslySetInnerHTML, } from '../shared/utils/markers';\nimport { isHtmlElement } from '../shared/utils/types';\nimport { DEBUG_TYPE, QContainerValue, VirtualType, VirtualTypeName } from '../shared/types';\nimport { VNodeDataChar } from '../shared/vnode-data-types';\nimport { getDomContainer } from './dom-container';\nimport { ElementVNodeProps, TextVNodeProps, VNodeFlags, VNodeFlagsIndex, VNodeProps, VirtualVNodeProps, } from './types';\nimport { vnode_getDomChildrenWithCorrectNamespacesToInsert, vnode_getElementNamespaceFlags, } from './vnode-namespace';\nimport { escapeHTML } from '../shared/utils/character-escaping';\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * Fundamental DOM operations are:\n *\n * - Insert new DOM element/text\n * - Remove DOM element/text\n * - Set DOM element attributes\n * - Set text node value\n */\nexport var VNodeJournalOpCode;\n(function (VNodeJournalOpCode) {\n    VNodeJournalOpCode[VNodeJournalOpCode[\"SetText\"] = 1] = \"SetText\";\n    VNodeJournalOpCode[VNodeJournalOpCode[\"SetAttribute\"] = 2] = \"SetAttribute\";\n    VNodeJournalOpCode[VNodeJournalOpCode[\"HoistStyles\"] = 3] = \"HoistStyles\";\n    VNodeJournalOpCode[VNodeJournalOpCode[\"Remove\"] = 4] = \"Remove\";\n    VNodeJournalOpCode[VNodeJournalOpCode[\"Insert\"] = 5] = \"Insert\";\n})(VNodeJournalOpCode || (VNodeJournalOpCode = {}));\n//////////////////////////////////////////////////////////////////////////////////////////////////////\nexport const vnode_newElement = (element, elementName) => {\n    assertEqual(fastNodeType(element), 1 /* ELEMENT_NODE */, 'Expecting element node.');\n    const vnode = VNodeArray.createElement(VNodeFlags.Element | VNodeFlags.Inflated | (-1 << VNodeFlagsIndex.shift), // Flag\n    null, null, null, null, null, element, elementName);\n    assertTrue(vnode_isElementVNode(vnode), 'Incorrect format of ElementVNode.');\n    assertFalse(vnode_isTextVNode(vnode), 'Incorrect format of ElementVNode.');\n    assertFalse(vnode_isVirtualVNode(vnode), 'Incorrect format of ElementVNode.');\n    return vnode;\n};\nexport const vnode_newUnMaterializedElement = (element) => {\n    assertEqual(fastNodeType(element), 1 /* ELEMENT_NODE */, 'Expecting element node.');\n    const vnode = VNodeArray.createElement(VNodeFlags.Element | (-1 << VNodeFlagsIndex.shift), // Flag\n    null, null, null, undefined, undefined, element, undefined);\n    assertTrue(vnode_isElementVNode(vnode), 'Incorrect format of ElementVNode.');\n    assertFalse(vnode_isTextVNode(vnode), 'Incorrect format of ElementVNode.');\n    assertFalse(vnode_isVirtualVNode(vnode), 'Incorrect format of ElementVNode.');\n    return vnode;\n};\nexport const vnode_newSharedText = (previousTextNode, sharedTextNode, textContent) => {\n    sharedTextNode &&\n        assertEqual(fastNodeType(sharedTextNode), 3 /* TEXT_NODE */, 'Expecting element node.');\n    const vnode = VNodeArray.createText(VNodeFlags.Text | (-1 << VNodeFlagsIndex.shift), // Flag\n    null, // Parent\n    previousTextNode, // Previous TextNode (usually first child)\n    null, // Next sibling\n    sharedTextNode, // SharedTextNode\n    textContent // Text Content\n    );\n    assertFalse(vnode_isElementVNode(vnode), 'Incorrect format of TextVNode.');\n    assertTrue(vnode_isTextVNode(vnode), 'Incorrect format of TextVNode.');\n    assertFalse(vnode_isVirtualVNode(vnode), 'Incorrect format of TextVNode.');\n    return vnode;\n};\nexport const vnode_newText = (textNode, textContent) => {\n    const vnode = VNodeArray.createText(VNodeFlags.Text | VNodeFlags.Inflated | (-1 << VNodeFlagsIndex.shift), // Flags\n    null, // Parent\n    null, // No previous sibling\n    null, // We may have a next sibling.\n    textNode, // TextNode\n    textContent // Text Content\n    );\n    assertEqual(fastNodeType(textNode), 3 /* TEXT_NODE */, 'Expecting element node.');\n    assertFalse(vnode_isElementVNode(vnode), 'Incorrect format of TextVNode.');\n    assertTrue(vnode_isTextVNode(vnode), 'Incorrect format of TextVNode.');\n    assertFalse(vnode_isVirtualVNode(vnode), 'Incorrect format of TextVNode.');\n    return vnode;\n};\nexport const vnode_newVirtual = () => {\n    const vnode = VNodeArray.createVirtual(VNodeFlags.Virtual | (-1 << VNodeFlagsIndex.shift), // Flags\n    null, null, null, null, null);\n    assertFalse(vnode_isElementVNode(vnode), 'Incorrect format of TextVNode.');\n    assertFalse(vnode_isTextVNode(vnode), 'Incorrect format of TextVNode.');\n    assertTrue(vnode_isVirtualVNode(vnode), 'Incorrect format of TextVNode.');\n    return vnode;\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////\nexport const vnode_isVNode = (vNode) => {\n    return vNode instanceof VNodeArray;\n};\nexport const vnode_isElementVNode = (vNode) => {\n    assertDefined(vNode, 'Missing vNode');\n    const flag = vNode[VNodeProps.flags];\n    return (flag & VNodeFlags.Element) === VNodeFlags.Element;\n};\nexport const vnode_isElementOrTextVNode = (vNode) => {\n    assertDefined(vNode, 'Missing vNode');\n    const flag = vNode[VNodeProps.flags];\n    return (flag & VNodeFlags.ELEMENT_OR_TEXT_MASK) !== 0;\n};\nexport const vnode_isElementOrVirtualVNode = (vNode) => {\n    assertDefined(vNode, 'Missing vNode');\n    const flag = vNode[VNodeProps.flags];\n    return (flag & VNodeFlags.ELEMENT_OR_VIRTUAL_MASK) !== 0;\n};\nexport const vnode_isMaterialized = (vNode) => {\n    assertDefined(vNode, 'Missing vNode');\n    const flag = vNode[VNodeProps.flags];\n    return ((flag & VNodeFlags.Element) === VNodeFlags.Element &&\n        vNode[ElementVNodeProps.firstChild] !== undefined &&\n        vNode[ElementVNodeProps.lastChild] !== undefined);\n};\nexport const vnode_isTextVNode = (vNode) => {\n    assertDefined(vNode, 'Missing vNode');\n    const flag = vNode[VNodeProps.flags];\n    return (flag & VNodeFlags.Text) === VNodeFlags.Text;\n};\nexport const vnode_isVirtualVNode = (vNode) => {\n    assertDefined(vNode, 'Missing vNode');\n    const flag = vNode[VNodeProps.flags];\n    return (flag & VNodeFlags.Virtual) === VNodeFlags.Virtual;\n};\nconst ensureTextVNode = (vNode) => {\n    assertTrue(vnode_isTextVNode(vNode), 'Expecting TextVNode was: ' + vnode_getNodeTypeName(vNode));\n    return vNode;\n};\nconst ensureElementOrVirtualVNode = (vNode) => {\n    assertDefined(vNode, 'Missing vNode');\n    assertTrue((vNode[VNodeProps.flags] & VNodeFlags.ELEMENT_OR_VIRTUAL_MASK) !== 0, 'Expecting ElementVNode or VirtualVNode was: ' + vnode_getNodeTypeName(vNode));\n};\nexport const ensureElementVNode = (vNode) => {\n    assertTrue(vnode_isElementVNode(vNode), 'Expecting ElementVNode was: ' + vnode_getNodeTypeName(vNode));\n    return vNode;\n};\nexport const vnode_getNodeTypeName = (vNode) => {\n    if (vNode) {\n        const flags = vNode[VNodeProps.flags];\n        switch (flags & VNodeFlags.TYPE_MASK) {\n            case VNodeFlags.Element:\n                return 'Element';\n            case VNodeFlags.Virtual:\n                return 'Virtual';\n            case VNodeFlags.Text:\n                return 'Text';\n        }\n    }\n    return '<unknown>';\n};\nexport const vnode_ensureElementInflated = (vnode) => {\n    const flags = vnode[VNodeProps.flags];\n    if ((flags & VNodeFlags.INFLATED_TYPE_MASK) === VNodeFlags.Element) {\n        const elementVNode = vnode;\n        elementVNode[VNodeProps.flags] ^= VNodeFlags.Inflated;\n        const element = elementVNode[ElementVNodeProps.element];\n        const attributes = element.attributes;\n        for (let idx = 0; idx < attributes.length; idx++) {\n            const attr = attributes[idx];\n            const key = attr.name;\n            if (key == Q_PROPS_SEPARATOR || !key) {\n                // SVG in Domino does not support ':' so it becomes an empty string.\n                // all attributes after the ':' are considered immutable, and so we ignore them.\n                break;\n            }\n            else if (key.startsWith(QContainerAttr)) {\n                if (attr.value === QContainerValue.HTML) {\n                    mapArray_set(elementVNode, dangerouslySetInnerHTML, element.innerHTML, ElementVNodeProps.PROPS_OFFSET);\n                }\n                else if (attr.value === QContainerValue.TEXT && 'value' in element) {\n                    mapArray_set(elementVNode, 'value', element.value, ElementVNodeProps.PROPS_OFFSET);\n                }\n            }\n            else if (!key.startsWith('on:')) {\n                const value = attr.value;\n                mapArray_set(elementVNode, key, value, ElementVNodeProps.PROPS_OFFSET);\n            }\n        }\n    }\n};\n/** Walks the VNode tree and materialize it using `vnode_getFirstChild`. */\nexport function vnode_walkVNode(vNode, callback) {\n    let vCursor = vNode;\n    // Depth first traversal\n    if (vnode_isTextVNode(vNode)) {\n        // Text nodes don't have subscriptions or children;\n        return;\n    }\n    let vParent = null;\n    do {\n        callback?.(vCursor, vParent);\n        const vFirstChild = vnode_getFirstChild(vCursor);\n        if (vFirstChild) {\n            vCursor = vFirstChild;\n            continue;\n        }\n        // Out of children\n        if (vCursor === vNode) {\n            // we are where we started, this means that vNode has no children, so we are done.\n            return;\n        }\n        // Out of children, go to next sibling\n        const vNextSibling = vnode_getNextSibling(vCursor);\n        if (vNextSibling) {\n            vCursor = vNextSibling;\n            continue;\n        }\n        // Out of siblings, go to parent\n        vParent = vnode_getParent(vCursor);\n        while (vParent) {\n            if (vParent === vNode) {\n                // We are back where we started, we are done.\n                return;\n            }\n            const vNextParentSibling = vnode_getNextSibling(vParent);\n            if (vNextParentSibling) {\n                vCursor = vNextParentSibling;\n                break;\n            }\n            vParent = vnode_getParent(vParent);\n        }\n        if (vParent == null) {\n            // We are done.\n            return;\n        }\n    } while (true);\n}\nexport function vnode_getDOMChildNodes(journal, root, isVNode = false, childNodes = []) {\n    if (vnode_isElementOrTextVNode(root)) {\n        if (vnode_isTextVNode(root)) {\n            /**\n             * If we are collecting text nodes, we need to ensure that they are inflated. If not inflated\n             * we would return a single text node which represents many actual text nodes, or removing a\n             * single text node would remove many text nodes.\n             */\n            vnode_ensureTextInflated(journal, root);\n        }\n        childNodes.push(isVNode ? root : vnode_getNode(root));\n        return childNodes;\n    }\n    let vNode = vnode_getFirstChild(root);\n    while (vNode) {\n        if (vnode_isElementVNode(vNode)) {\n            childNodes.push(isVNode ? vNode : vnode_getNode(vNode));\n        }\n        else if (vnode_isTextVNode(vNode)) {\n            /**\n             * If we are collecting text nodes, we need to ensure that they are inflated. If not inflated\n             * we would return a single text node which represents many actual text nodes, or removing a\n             * single text node would remove many text nodes.\n             */\n            vnode_ensureTextInflated(journal, vNode);\n            childNodes.push(isVNode ? vNode : vnode_getNode(vNode));\n        }\n        else {\n            isVNode\n                ? vnode_getDOMChildNodes(journal, vNode, true, childNodes)\n                : vnode_getDOMChildNodes(journal, vNode, false, childNodes);\n        }\n        vNode = vnode_getNextSibling(vNode);\n    }\n    return childNodes;\n}\n/**\n * Returns the previous/next sibling but from the point of view of the DOM.\n *\n * Given:\n *\n * ```\n * <div>\n *   <>a</>\n *   <>\n *     <></>\n *     <>b</>\n *     <></>\n *   </>\n *   <>c</>\n * </div>\n * ```\n *\n * Then:\n *\n * - Next: if we start at `a` the next DOM sibling is `b`, than `c`.\n * - Previous: if we start at `c` the next DOM sibling is `b`, than `a`.\n *\n * @param vNode - Starting node\n * @param nextDirection - Direction to search true=next, false=previous\n * @param descend - If true, than we will descend into the children first.\n * @returns\n */\nconst vnode_getDomSibling = (vNode, nextDirection, descend) => {\n    const childProp = nextDirection ? VirtualVNodeProps.firstChild : VirtualVNodeProps.lastChild;\n    const siblingProp = nextDirection ? VNodeProps.nextSibling : VNodeProps.previousSibling;\n    let cursor = vNode;\n    // first make sure we have a DOM node or no children.\n    while (descend && cursor && vnode_isVirtualVNode(cursor)) {\n        const child = cursor[childProp];\n        if (!child) {\n            break;\n        }\n        if (child[VNodeProps.flags] & VNodeFlags.ELEMENT_OR_TEXT_MASK) {\n            return child;\n        }\n        cursor = child;\n    }\n    while (cursor) {\n        // Look at the previous/next sibling.\n        let sibling = cursor[siblingProp];\n        if (sibling && sibling[VNodeProps.flags] & VNodeFlags.ELEMENT_OR_TEXT_MASK) {\n            // we found a previous/next DOM node, return it.\n            return sibling;\n        }\n        else if (!sibling) {\n            // If we don't have a sibling than walk up the tree until you find one.\n            let virtual = cursor[VNodeProps.parent];\n            if (virtual && !vnode_isVirtualVNode(virtual)) {\n                return null;\n            }\n            while (virtual && !(sibling = virtual[siblingProp])) {\n                virtual = virtual[VNodeProps.parent];\n                if (virtual && !vnode_isVirtualVNode(virtual)) {\n                    // the parent node is not virtual, so we are done here.\n                    return null;\n                }\n            }\n            if (!sibling) {\n                // If we did not find a sibling, than we are done.\n                return null;\n            }\n            if (vnode_isTextVNode(sibling) && virtual && vnode_isElementVNode(virtual)) {\n                // sibling to the real element is a text node, this is not a sibling\n                return null;\n            }\n        }\n        // At this point `sibling` is a next node to look at.\n        // Next step is to descend until we find a DOM done.\n        while (sibling) {\n            cursor = sibling;\n            if (cursor[VNodeProps.flags] & VNodeFlags.ELEMENT_OR_TEXT_MASK && vnode_getNode(cursor)) {\n                // we have to check that we actually have a node, because it could be a text node which is\n                // zero length and which does not have a representation in the DOM.\n                return cursor;\n            }\n            sibling = cursor[childProp];\n        }\n        // If we are here we did not find anything and we need to go up the tree again.\n    }\n    return null;\n};\nconst vnode_ensureInflatedIfText = (journal, vNode) => {\n    if (vnode_isTextVNode(vNode)) {\n        vnode_ensureTextInflated(journal, vNode);\n    }\n};\nconst vnode_ensureTextInflated = (journal, vnode) => {\n    const textVNode = ensureTextVNode(vnode);\n    const flags = textVNode[VNodeProps.flags];\n    if ((flags & VNodeFlags.Inflated) === 0) {\n        const parentNode = vnode_getDomParent(vnode);\n        const sharedTextNode = textVNode[TextVNodeProps.node];\n        const doc = parentNode.ownerDocument;\n        // Walk the previous siblings and inflate them.\n        let cursor = vnode_getDomSibling(vnode, false, true);\n        // If text node is 0 length, than there is no text node.\n        // In that case we use the next node as a reference, in which\n        // case we know that the next node MUST be either NULL or an Element.\n        const insertBeforeNode = sharedTextNode ||\n            (vnode_getDomSibling(vnode, true, true)?.[ElementVNodeProps.element] || null);\n        let lastPreviousTextNode = insertBeforeNode;\n        while (cursor && vnode_isTextVNode(cursor)) {\n            if ((cursor[VNodeProps.flags] & VNodeFlags.Inflated) === 0) {\n                const textNode = doc.createTextNode(cursor[TextVNodeProps.text]);\n                journal.push(VNodeJournalOpCode.Insert, parentNode, lastPreviousTextNode, textNode);\n                lastPreviousTextNode = textNode;\n                cursor[TextVNodeProps.node] = textNode;\n                cursor[VNodeProps.flags] |= VNodeFlags.Inflated;\n            }\n            cursor = vnode_getDomSibling(cursor, false, true);\n        }\n        // Walk the next siblings and inflate them.\n        cursor = vnode;\n        while (cursor && vnode_isTextVNode(cursor)) {\n            const next = vnode_getDomSibling(cursor, true, true);\n            const isLastNode = next ? !vnode_isTextVNode(next) : true;\n            if ((cursor[VNodeProps.flags] & VNodeFlags.Inflated) === 0) {\n                if (isLastNode && sharedTextNode) {\n                    journal.push(VNodeJournalOpCode.SetText, sharedTextNode, cursor[TextVNodeProps.text]);\n                }\n                else {\n                    const textNode = doc.createTextNode(cursor[TextVNodeProps.text]);\n                    journal.push(VNodeJournalOpCode.Insert, parentNode, insertBeforeNode, textNode);\n                    cursor[TextVNodeProps.node] = textNode;\n                }\n                cursor[VNodeProps.flags] |= VNodeFlags.Inflated;\n            }\n            cursor = next;\n        }\n    }\n};\nexport const vnode_locate = (rootVNode, id) => {\n    ensureElementVNode(rootVNode);\n    let vNode = rootVNode;\n    const containerElement = rootVNode[ElementVNodeProps.element];\n    const { qVNodeRefs } = containerElement;\n    let elementOffset = -1;\n    let refElement;\n    if (typeof id === 'string') {\n        assertDefined(qVNodeRefs, 'Missing qVNodeRefs.');\n        elementOffset = parseInt(id);\n        refElement = qVNodeRefs.get(elementOffset);\n    }\n    else {\n        refElement = id;\n    }\n    assertDefined(refElement, 'Missing refElement.');\n    if (!vnode_isVNode(refElement)) {\n        assertTrue(containerElement.contains(refElement), `Couldn't find the element inside the container while locating the VNode.`);\n        // We need to find the vnode.\n        let parent = refElement;\n        const elementPath = [refElement];\n        while (parent && parent !== containerElement) {\n            parent = parent.parentElement;\n            elementPath.push(parent);\n        }\n        // Start at rootVNode and follow the `elementPath` to find the vnode.\n        for (let i = elementPath.length - 2; i >= 0; i--) {\n            vNode = vnode_getVNodeForChildNode(vNode, elementPath[i]);\n        }\n        elementOffset != -1 && qVNodeRefs.set(elementOffset, vNode);\n    }\n    else {\n        vNode = refElement;\n    }\n    if (typeof id === 'string') {\n        // process virtual node search.\n        const idLength = id.length;\n        let idx = indexOfAlphanumeric(id, idLength);\n        let childIdx = 0;\n        while (idx < idLength) {\n            const ch = id.charCodeAt(idx);\n            childIdx *= 26 /* a-z */;\n            if (ch >= 97 /* a */) {\n                // is lowercase\n                childIdx += ch - 97 /* a */;\n            }\n            else {\n                // is uppercase\n                childIdx += ch - 65 /* A */;\n                vNode = vnode_getChildWithIdx(vNode, childIdx);\n                childIdx = 0;\n            }\n            idx++;\n        }\n    }\n    return vNode;\n};\nconst vnode_getChildWithIdx = (vNode, childIdx) => {\n    let child = vnode_getFirstChild(vNode);\n    assertDefined(child, 'Missing child.');\n    while (child[VNodeProps.flags] >>> VNodeFlagsIndex.shift !== childIdx) {\n        child = vnode_getNextSibling(child);\n        assertDefined(child, 'Missing child.');\n    }\n    return child;\n};\nconst vNodeStack = [];\nexport const vnode_getVNodeForChildNode = (vNode, childElement) => {\n    ensureElementVNode(vNode);\n    let child = vnode_getFirstChild(vNode);\n    assertDefined(child, 'Missing child.');\n    // console.log(\n    //   'SEARCHING',\n    //   child[VNodeProps.flags],\n    //   child[VNodeProps.node]?.outerHTML,\n    //   childNode.outerHTML\n    // );\n    while (child && child[ElementVNodeProps.element] !== childElement) {\n        // console.log('CHILD', child[VNodeProps.node]?.outerHTML, childNode.outerHTML);\n        if (vnode_isVirtualVNode(child)) {\n            const next = vnode_getNextSibling(child);\n            const firstChild = vnode_getFirstChild(child);\n            if (firstChild) {\n                next && vNodeStack.push(next);\n                child = firstChild;\n            }\n            else {\n                child = next || (vNodeStack.length ? vNodeStack.pop() : null);\n            }\n        }\n        else {\n            const next = vnode_getNextSibling(child);\n            if (next) {\n                child = next;\n            }\n            else {\n                child = next || vNodeStack.pop();\n            }\n        }\n        assertDefined(child, 'Missing child.');\n    }\n    while (vNodeStack.length) {\n        vNodeStack.pop();\n    }\n    ensureElementVNode(child);\n    assertEqual(child[ElementVNodeProps.element], childElement, 'Child not found.');\n    // console.log('FOUND', child[VNodeProps.node]?.outerHTML);\n    return child;\n};\nconst indexOfAlphanumeric = (id, length) => {\n    let idx = 0;\n    while (idx < length) {\n        if (id.charCodeAt(idx) <= 57 /* 9 */) {\n            idx++;\n        }\n        else {\n            return idx;\n        }\n    }\n    return length;\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////\nexport const vnode_journalToString = (journal) => {\n    const lines = ['JOURNAL:'];\n    let idx = 0;\n    const length = journal.length;\n    function stringify(...args) {\n        lines.push('  ' +\n            args\n                .map((arg) => {\n                if (typeof arg === 'string') {\n                    return arg;\n                }\n                else if (arg && isHtmlElement(arg)) {\n                    const html = arg.outerHTML;\n                    const idx = html.indexOf('>');\n                    return '\\n    ' + (idx > 0 ? html.substring(0, idx + 1) : html);\n                }\n                else if (arg && isText(arg)) {\n                    return JSON.stringify(arg.nodeValue);\n                }\n                else {\n                    return String(arg);\n                }\n            })\n                .join(' '));\n    }\n    while (idx < length) {\n        const op = journal[idx++];\n        switch (op) {\n            case VNodeJournalOpCode.SetText:\n                stringify('SetText', journal[idx++], journal[idx++]);\n                break;\n            case VNodeJournalOpCode.SetAttribute:\n                stringify('SetAttribute', journal[idx++], journal[idx++], journal[idx++]);\n                break;\n            case VNodeJournalOpCode.HoistStyles:\n                stringify('HoistStyles');\n                break;\n            case VNodeJournalOpCode.Remove:\n                stringify('Remove', journal[idx++]);\n                let nodeToRemove;\n                while (idx < length && typeof (nodeToRemove = journal[idx]) !== 'number') {\n                    stringify('  ', nodeToRemove);\n                    idx++;\n                }\n                break;\n            case VNodeJournalOpCode.Insert:\n                stringify('Insert', journal[idx++], journal[idx++]);\n                let newChild;\n                while (idx < length && typeof (newChild = journal[idx]) !== 'number') {\n                    stringify('  ', newChild);\n                    idx++;\n                }\n                break;\n        }\n    }\n    lines.push('END JOURNAL');\n    return lines.join('\\n');\n};\nconst parseBoolean = (value) => {\n    if (value === 'false') {\n        return false;\n    }\n    return Boolean(value);\n};\nconst isBooleanAttr = (element, key) => {\n    const isBoolean = key == 'allowfullscreen' ||\n        key == 'async' ||\n        key == 'autofocus' ||\n        key == 'autoplay' ||\n        key == 'checked' ||\n        key == 'controls' ||\n        key == 'default' ||\n        key == 'defer' ||\n        key == 'disabled' ||\n        key == 'formnovalidate' ||\n        key == 'inert' ||\n        key == 'ismap' ||\n        key == 'itemscope' ||\n        key == 'loop' ||\n        key == 'multiple' ||\n        key == 'muted' ||\n        key == 'nomodule' ||\n        key == 'novalidate' ||\n        key == 'open' ||\n        key == 'playsinline' ||\n        key == 'readonly' ||\n        key == 'required' ||\n        key == 'reversed' ||\n        key == 'selected';\n    return isBoolean && key in element;\n};\nexport const vnode_applyJournal = (journal) => {\n    // console.log('APPLY JOURNAL', vnode_journalToString(journal));\n    let idx = 0;\n    const length = journal.length;\n    while (idx < length) {\n        const op = journal[idx++];\n        switch (op) {\n            case VNodeJournalOpCode.SetText:\n                const text = journal[idx++];\n                text.nodeValue = journal[idx++];\n                break;\n            case VNodeJournalOpCode.SetAttribute:\n                const element = journal[idx++];\n                let key = journal[idx++];\n                if (key === 'className') {\n                    key = 'class';\n                }\n                const value = journal[idx++];\n                if (isBooleanAttr(element, key)) {\n                    element[key] = parseBoolean(value);\n                }\n                else if (key === 'value' && key in element) {\n                    element.value = escapeHTML(String(value));\n                }\n                else if (key === dangerouslySetInnerHTML) {\n                    element.innerHTML = value;\n                }\n                else {\n                    if (value == null || value === false) {\n                        element.removeAttribute(key);\n                    }\n                    else {\n                        element.setAttribute(key, String(value));\n                    }\n                }\n                break;\n            case VNodeJournalOpCode.HoistStyles:\n                const document = journal[idx++];\n                const head = document.head;\n                const styles = document.querySelectorAll(QStylesAllSelector);\n                for (let i = 0; i < styles.length; i++) {\n                    head.appendChild(styles[i]);\n                }\n                break;\n            case VNodeJournalOpCode.Remove:\n                const removeParent = journal[idx++];\n                let nodeToRemove;\n                while (idx < length && typeof (nodeToRemove = journal[idx]) !== 'number') {\n                    removeParent.removeChild(nodeToRemove);\n                    idx++;\n                }\n                break;\n            case VNodeJournalOpCode.Insert:\n                const insertParent = journal[idx++];\n                const insertBefore = journal[idx++];\n                let newChild;\n                while (idx < length && typeof (newChild = journal[idx]) !== 'number') {\n                    insertParent.insertBefore(newChild, insertBefore);\n                    idx++;\n                }\n                break;\n        }\n    }\n    journal.length = 0;\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////\nexport const mapApp_findIndx = (elementVNode, key, start) => {\n    assertTrue(start % 2 === 0, 'Expecting even number.');\n    let bottom = start >> 1;\n    let top = (elementVNode.length - 2) >> 1;\n    while (bottom <= top) {\n        const mid = bottom + ((top - bottom) >> 1);\n        const midKey = elementVNode[mid << 1];\n        if (midKey === key) {\n            return mid << 1;\n        }\n        if (midKey < key) {\n            bottom = mid + 1;\n        }\n        else {\n            top = mid - 1;\n        }\n    }\n    return (bottom << 1) ^ -1;\n};\nexport const mapArray_set = (elementVNode, key, value, start) => {\n    const indx = mapApp_findIndx(elementVNode, key, start);\n    if (indx >= 0) {\n        if (value == null) {\n            elementVNode.splice(indx, 2);\n        }\n        else {\n            elementVNode[indx + 1] = value;\n        }\n    }\n    else if (value != null) {\n        elementVNode.splice(indx ^ -1, 0, key, value);\n    }\n};\nexport const mapApp_remove = (elementVNode, key, start) => {\n    const indx = mapApp_findIndx(elementVNode, key, start);\n    let value = null;\n    if (indx >= 0) {\n        value = elementVNode[indx + 1];\n        elementVNode.splice(indx, 2);\n        return value;\n    }\n    return value;\n};\nexport const mapArray_get = (elementVNode, key, start) => {\n    const indx = mapApp_findIndx(elementVNode, key, start);\n    if (indx >= 0) {\n        return elementVNode[indx + 1];\n    }\n    else {\n        return null;\n    }\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////\nexport const vnode_insertBefore = (journal, parent, newChild, insertBefore) => {\n    ensureElementOrVirtualVNode(parent);\n    if (vnode_isElementVNode(parent)) {\n        ensureMaterialized(parent);\n    }\n    let adjustedInsertBefore = null;\n    if (insertBefore == null) {\n        if (vnode_isVirtualVNode(parent)) {\n            // If `insertBefore` is null, than we need to insert at the end of the list.\n            // Well, not quite. If the parent is a virtual node, our \"last node\" is not the same\n            // as the DOM \"last node\". So in that case we need to look for the \"next node\" from\n            // our parent.\n            adjustedInsertBefore = vnode_getDomSibling(parent, true, false);\n        }\n    }\n    else if (vnode_isVirtualVNode(insertBefore)) {\n        // If the `insertBefore` is virtual, than we need to descend into the virtual and find e actual\n        adjustedInsertBefore = vnode_getDomSibling(insertBefore, true, true);\n    }\n    else {\n        adjustedInsertBefore = insertBefore;\n    }\n    adjustedInsertBefore && vnode_ensureInflatedIfText(journal, adjustedInsertBefore);\n    // If `insertBefore` is null, than we need to insert at the end of the list.\n    // Well, not quite. If the parent is a virtual node, our \"last node\" is not the same\n    // as the DOM \"last node\". So in that case we need to look for the \"next node\" from\n    // our parent.\n    // const shouldWeUseParentVirtual = insertBefore == null && vnode_isVirtualVNode(parent);\n    // const insertBeforeNode = shouldWeUseParentVirtual\n    //   ? vnode_getDomSibling(parent, true)\n    //   : insertBefore;\n    const domParentVNode = vnode_getDomParentVNode(parent);\n    const parentNode = domParentVNode && domParentVNode[ElementVNodeProps.element];\n    if (parentNode) {\n        const domChildren = vnode_getDomChildrenWithCorrectNamespacesToInsert(journal, domParentVNode, newChild);\n        domChildren.length &&\n            journal.push(VNodeJournalOpCode.Insert, parentNode, vnode_getNode(adjustedInsertBefore), ...domChildren);\n    }\n    // ensure that the previous node is unlinked.\n    const newChildCurrentParent = newChild[VNodeProps.parent];\n    if (newChildCurrentParent &&\n        (newChild[VNodeProps.previousSibling] ||\n            newChild[VNodeProps.nextSibling] ||\n            (vnode_isElementVNode(newChildCurrentParent) && newChildCurrentParent !== parent))) {\n        vnode_remove(journal, newChildCurrentParent, newChild, false);\n    }\n    // link newChild into the previous/next list\n    const vNext = insertBefore;\n    const vPrevious = vNext\n        ? vNext[VNodeProps.previousSibling]\n        : parent[ElementVNodeProps.lastChild];\n    if (vNext) {\n        vNext[VNodeProps.previousSibling] = newChild;\n    }\n    else {\n        parent[ElementVNodeProps.lastChild] = newChild;\n    }\n    if (vPrevious) {\n        vPrevious[VNodeProps.nextSibling] = newChild;\n    }\n    else {\n        parent[ElementVNodeProps.firstChild] = newChild;\n    }\n    newChild[VNodeProps.previousSibling] = vPrevious;\n    newChild[VNodeProps.nextSibling] = vNext;\n    newChild[VNodeProps.parent] = parent;\n};\nexport const vnode_getDomParent = (vnode) => {\n    vnode = vnode_getDomParentVNode(vnode);\n    return (vnode && vnode[ElementVNodeProps.element]);\n};\nexport const vnode_getDomParentVNode = (vnode) => {\n    while (vnode && !vnode_isElementVNode(vnode)) {\n        vnode = vnode[VNodeProps.parent];\n    }\n    return vnode;\n};\nexport const vnode_remove = (journal, vParent, vToRemove, removeDOM) => {\n    assertEqual(vParent, vnode_getParent(vToRemove), 'Parent mismatch.');\n    if (vnode_isTextVNode(vToRemove)) {\n        vnode_ensureTextInflated(journal, vToRemove);\n    }\n    const vPrevious = vToRemove[VNodeProps.previousSibling];\n    const vNext = vToRemove[VNodeProps.nextSibling];\n    if (vPrevious) {\n        vPrevious[VNodeProps.nextSibling] = vNext;\n    }\n    else {\n        vParent[ElementVNodeProps.firstChild] = vNext;\n    }\n    if (vNext) {\n        vNext[VNodeProps.previousSibling] = vPrevious;\n    }\n    else {\n        vParent[ElementVNodeProps.lastChild] = vPrevious;\n    }\n    vToRemove[VNodeProps.previousSibling] = null;\n    vToRemove[VNodeProps.nextSibling] = null;\n    if (removeDOM) {\n        const domParent = vnode_getDomParent(vParent);\n        const isInnerHTMLParent = vnode_getAttr(vParent, dangerouslySetInnerHTML);\n        if (isInnerHTMLParent) {\n            // ignore children, as they are inserted via innerHTML\n            return;\n        }\n        const children = vnode_getDOMChildNodes(journal, vToRemove);\n        domParent && children.length && journal.push(VNodeJournalOpCode.Remove, domParent, ...children);\n    }\n};\nexport const vnode_queryDomNodes = (vNode, selector, cb) => {\n    if (vnode_isElementVNode(vNode)) {\n        const element = vnode_getNode(vNode);\n        if (element.matches(selector)) {\n            cb(element);\n        }\n        else {\n            element.querySelectorAll(selector).forEach(cb);\n        }\n    }\n    else {\n        let child = vnode_getFirstChild(vNode);\n        while (child) {\n            vnode_queryDomNodes(child, selector, cb);\n            child = vnode_getNextSibling(child);\n        }\n    }\n};\nexport const vnode_truncate = (journal, vParent, vDelete) => {\n    assertDefined(vDelete, 'Missing vDelete.');\n    const parent = vnode_getDomParent(vParent);\n    const children = vnode_getDOMChildNodes(journal, vDelete);\n    parent && children.length && journal.push(VNodeJournalOpCode.Remove, parent, ...children);\n    const vPrevious = vDelete[VNodeProps.previousSibling];\n    if (vPrevious) {\n        vPrevious[VNodeProps.nextSibling] = null;\n    }\n    else {\n        vParent[ElementVNodeProps.firstChild] = null;\n    }\n    vParent[ElementVNodeProps.lastChild] = vPrevious;\n};\nexport const vnode_isChildOf = (vParent, vChild) => {\n    let vNode = vChild;\n    while (vNode) {\n        if (vNode === vParent) {\n            return true;\n        }\n        vNode = vnode_getParent(vNode);\n    }\n    return false;\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////\nexport const vnode_getElementName = (vnode) => {\n    const elementVNode = ensureElementVNode(vnode);\n    let elementName = elementVNode[ElementVNodeProps.elementName];\n    if (elementName === undefined) {\n        elementName = elementVNode[ElementVNodeProps.elementName] =\n            elementVNode[ElementVNodeProps.element].nodeName.toLowerCase();\n        elementVNode[VNodeProps.flags] |= vnode_getElementNamespaceFlags(elementName);\n    }\n    return elementName;\n};\nexport const vnode_getText = (vnode) => {\n    const textVNode = ensureTextVNode(vnode);\n    let text = textVNode[TextVNodeProps.text];\n    if (text === undefined) {\n        text = textVNode[TextVNodeProps.text] = textVNode[TextVNodeProps.node].nodeValue;\n    }\n    return text;\n};\nexport const vnode_setText = (journal, textVNode, text) => {\n    vnode_ensureTextInflated(journal, textVNode);\n    const textNode = textVNode[TextVNodeProps.node];\n    journal.push(VNodeJournalOpCode.SetText, textNode, (textVNode[TextVNodeProps.text] = text));\n};\nexport const vnode_getFirstChild = (vnode) => {\n    if (vnode_isTextVNode(vnode)) {\n        return null;\n    }\n    let vFirstChild = vnode[ElementVNodeProps.firstChild];\n    if (vFirstChild === undefined) {\n        vFirstChild = ensureMaterialized(vnode);\n    }\n    return vFirstChild;\n};\nexport const vnode_materialize = (vNode) => {\n    const element = vNode[ElementVNodeProps.element];\n    const firstChild = fastFirstChild(element);\n    const vNodeData = element.ownerDocument?.qVNodeData?.get(element);\n    const vFirstChild = vNodeData\n        ? materializeFromVNodeData(vNode, vNodeData, element, firstChild)\n        : materializeFromDOM(vNode, firstChild);\n    return vFirstChild;\n};\nconst ensureMaterialized = (vnode) => {\n    const vParent = ensureElementVNode(vnode);\n    let vFirstChild = vParent[ElementVNodeProps.firstChild];\n    if (vFirstChild === undefined) {\n        // need to materialize the vNode.\n        const element = vParent[ElementVNodeProps.element];\n        if (vParent[VNodeProps.parent] && shouldIgnoreChildren(element)) {\n            // We have a container with html value, must ignore the content.\n            vFirstChild =\n                vParent[ElementVNodeProps.firstChild] =\n                    vParent[ElementVNodeProps.lastChild] =\n                        null;\n        }\n        else {\n            vFirstChild = vnode_materialize(vParent);\n        }\n    }\n    assertTrue(vParent[ElementVNodeProps.firstChild] !== undefined, 'Did not materialize.');\n    assertTrue(vParent[ElementVNodeProps.lastChild] !== undefined, 'Did not materialize.');\n    return vFirstChild;\n};\nlet _fastHasAttribute = null;\nexport const shouldIgnoreChildren = (node) => {\n    if (!_fastHasAttribute) {\n        _fastHasAttribute = node.hasAttribute;\n    }\n    return _fastHasAttribute.call(node, QContainerAttr);\n};\nlet _fastNodeType = null;\nconst fastNodeType = (node) => {\n    if (!_fastNodeType) {\n        _fastNodeType = fastGetter(node, 'nodeType');\n    }\n    return _fastNodeType.call(node);\n};\nconst fastIsTextOrElement = (node) => {\n    const type = fastNodeType(node);\n    return type === /* Node.TEXT_NODE */ 3 || type === /* Node.ELEMENT_NODE */ 1;\n};\nlet _fastNextSibling = null;\nexport const fastNextSibling = (node) => {\n    if (!_fastNextSibling) {\n        _fastNextSibling = fastGetter(node, 'nextSibling');\n    }\n    if (!_fastFirstChild) {\n        _fastFirstChild = fastGetter(node, 'firstChild');\n    }\n    while (node) {\n        node = _fastNextSibling.call(node);\n        if (node !== null) {\n            const type = fastNodeType(node);\n            if (type === /* Node.TEXT_NODE */ 3 || type === /* Node.ELEMENT_NODE */ 1) {\n                break;\n            }\n            else if (type === /* Node.COMMENT_NODE */ 8) {\n                const nodeValue = node.nodeValue;\n                if (nodeValue?.startsWith(QIgnore)) {\n                    return getNodeAfterCommentNode(node, QContainerIsland, _fastNextSibling, _fastFirstChild);\n                }\n                else if (node.nodeValue?.startsWith(QContainerIslandEnd)) {\n                    return getNodeAfterCommentNode(node, QIgnoreEnd, _fastNextSibling, _fastFirstChild);\n                }\n                else if (nodeValue?.startsWith(QContainerAttr)) {\n                    while (node && (node = _fastNextSibling.call(node))) {\n                        if (fastNodeType(node) === /* Node.COMMENT_NODE */ 8 &&\n                            node.nodeValue?.startsWith(QContainerAttrEnd)) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return node;\n};\nfunction getNodeAfterCommentNode(node, commentValue, nextSibling, firstChild) {\n    while (node) {\n        if (node.nodeValue?.startsWith(commentValue)) {\n            node = nextSibling.call(node) || null;\n            return node;\n        }\n        let nextNode = firstChild.call(node);\n        if (!nextNode) {\n            nextNode = nextSibling.call(node);\n        }\n        if (!nextNode) {\n            nextNode = fastParentNode(node);\n            if (nextNode) {\n                nextNode = nextSibling.call(nextNode);\n            }\n        }\n        node = nextNode;\n    }\n    return null;\n}\nlet _fastParentNode = null;\nconst fastParentNode = (node) => {\n    if (!_fastParentNode) {\n        _fastParentNode = fastGetter(node, 'parentNode');\n    }\n    return _fastParentNode.call(node);\n};\nlet _fastFirstChild = null;\nconst fastFirstChild = (node) => {\n    if (!_fastFirstChild) {\n        _fastFirstChild = fastGetter(node, 'firstChild');\n    }\n    node = node && _fastFirstChild.call(node);\n    while (node && !fastIsTextOrElement(node)) {\n        node = fastNextSibling(node);\n    }\n    return node;\n};\nconst fastGetter = (prototype, name) => {\n    let getter;\n    while (prototype && !(getter = Object.getOwnPropertyDescriptor(prototype, name)?.get)) {\n        prototype = Object.getPrototypeOf(prototype);\n    }\n    return (getter ||\n        function () {\n            return this[name];\n        });\n};\nconst isQStyleElement = (node) => {\n    return (isElement(node) &&\n        node.nodeName === 'STYLE' &&\n        (node.hasAttribute(QScopedStyle) || node.hasAttribute(QStyle)));\n};\nconst materializeFromDOM = (vParent, firstChild) => {\n    let vFirstChild = null;\n    // materialize from DOM\n    let child = firstChild;\n    while (isQStyleElement(child)) {\n        // skip over style elements, as those need to be moved to the head.\n        // VNode pretends that `<style q:style q:sstyle>` elements do not exist.\n        child = fastNextSibling(child);\n    }\n    let vChild = null;\n    while (child) {\n        const nodeType = fastNodeType(child);\n        let vNextChild = null;\n        if (nodeType === /* Node.TEXT_NODE */ 3) {\n            vNextChild = vnode_newText(child, child.textContent ?? undefined);\n        }\n        else if (nodeType === /* Node.ELEMENT_NODE */ 1) {\n            vNextChild = vnode_newUnMaterializedElement(child);\n        }\n        if (vNextChild) {\n            vNextChild[VNodeProps.parent] = vParent;\n            vChild && (vChild[VNodeProps.nextSibling] = vNextChild);\n            vNextChild[VNodeProps.previousSibling] = vChild;\n            vChild = vNextChild;\n        }\n        if (!vFirstChild) {\n            vParent[ElementVNodeProps.firstChild] = vFirstChild = vChild;\n        }\n        child = fastNextSibling(child);\n    }\n    vParent[ElementVNodeProps.lastChild] = vChild || null;\n    vParent[ElementVNodeProps.firstChild] = vFirstChild;\n    return vFirstChild;\n};\nexport const vnode_getNextSibling = (vnode) => {\n    return vnode[VNodeProps.nextSibling];\n};\nexport const vnode_getPreviousSibling = (vnode) => {\n    return vnode[VNodeProps.previousSibling];\n};\nexport const vnode_getAttrKeys = (vnode) => {\n    const type = vnode[VNodeProps.flags];\n    if ((type & VNodeFlags.ELEMENT_OR_VIRTUAL_MASK) !== 0) {\n        vnode_ensureElementInflated(vnode);\n        const keys = [];\n        for (let i = vnode_getPropStartIndex(vnode); i < vnode.length; i = i + 2) {\n            const key = vnode[i];\n            if (!key.startsWith(':')) {\n                keys.push(key);\n            }\n        }\n        return keys;\n    }\n    return [];\n};\nexport const vnode_setAttr = (journal, vnode, key, value) => {\n    const type = vnode[VNodeProps.flags];\n    if ((type & VNodeFlags.ELEMENT_OR_VIRTUAL_MASK) !== 0) {\n        vnode_ensureElementInflated(vnode);\n        const idx = mapApp_findIndx(vnode, key, vnode_getPropStartIndex(vnode));\n        if (idx >= 0) {\n            if (vnode[idx + 1] != value && (type & VNodeFlags.Element) !== 0) {\n                // Values are different, update DOM\n                const element = vnode[ElementVNodeProps.element];\n                journal && journal.push(VNodeJournalOpCode.SetAttribute, element, key, value);\n            }\n            if (value == null) {\n                vnode.splice(idx, 2);\n            }\n            else {\n                vnode[idx + 1] = value;\n            }\n        }\n        else if (value != null) {\n            vnode.splice(idx ^ -1, 0, key, value);\n            if ((type & VNodeFlags.Element) !== 0) {\n                // New value, update DOM\n                const element = vnode[ElementVNodeProps.element];\n                journal && journal.push(VNodeJournalOpCode.SetAttribute, element, key, value);\n            }\n        }\n    }\n};\nexport const vnode_getAttr = (vnode, key) => {\n    const type = vnode[VNodeProps.flags];\n    if ((type & VNodeFlags.ELEMENT_OR_VIRTUAL_MASK) !== 0) {\n        vnode_ensureElementInflated(vnode);\n        return mapArray_get(vnode, key, vnode_getPropStartIndex(vnode));\n    }\n    return null;\n};\nexport const vnode_getProp = (vnode, key, getObject) => {\n    const type = vnode[VNodeProps.flags];\n    if ((type & VNodeFlags.ELEMENT_OR_VIRTUAL_MASK) !== 0) {\n        type & VNodeFlags.Element && vnode_ensureElementInflated(vnode);\n        const idx = mapApp_findIndx(vnode, key, vnode_getPropStartIndex(vnode));\n        if (idx >= 0) {\n            let value = vnode[idx + 1];\n            if (typeof value === 'string' && getObject) {\n                vnode[idx + 1] = value = getObject(value);\n            }\n            return value;\n        }\n    }\n    return null;\n};\nexport const vnode_setProp = (vnode, key, value) => {\n    ensureElementOrVirtualVNode(vnode);\n    const idx = mapApp_findIndx(vnode, key, vnode_getPropStartIndex(vnode));\n    if (idx >= 0) {\n        vnode[idx + 1] = value;\n    }\n    else if (value != null) {\n        vnode.splice(idx ^ -1, 0, key, value);\n    }\n};\nexport const vnode_getPropStartIndex = (vnode) => {\n    const type = vnode[VNodeProps.flags] & VNodeFlags.TYPE_MASK;\n    if (type === VNodeFlags.Element) {\n        return ElementVNodeProps.PROPS_OFFSET;\n    }\n    else if (type === VNodeFlags.Virtual) {\n        return VirtualVNodeProps.PROPS_OFFSET;\n    }\n    throw throwErrorAndStop('Invalid vnode type.');\n};\nexport const vnode_propsToRecord = (vnode) => {\n    const props = {};\n    if (!vnode_isTextVNode(vnode)) {\n        for (let i = vnode_getPropStartIndex(vnode); i < vnode.length;) {\n            const key = vnode[i++];\n            const value = vnode[i++];\n            props[key] = value;\n        }\n    }\n    return props;\n};\nexport const vnode_getParent = (vnode) => {\n    return vnode[VNodeProps.parent] || null;\n};\nexport const vnode_getNode = (vnode) => {\n    if (vnode === null || vnode_isVirtualVNode(vnode)) {\n        return null;\n    }\n    if (vnode_isElementVNode(vnode)) {\n        return vnode[ElementVNodeProps.element];\n    }\n    assertTrue(vnode_isTextVNode(vnode), 'Expecting Text Node.');\n    return vnode[TextVNodeProps.node];\n};\nexport function vnode_toString(depth = 10, offset = '', materialize = false) {\n    let vnode = this;\n    if (depth === 0) {\n        return '...';\n    }\n    if (vnode === null) {\n        return 'null';\n    }\n    if (vnode === undefined) {\n        return 'undefined';\n    }\n    const strings = [];\n    do {\n        if (vnode_isTextVNode(vnode)) {\n            strings.push(qwikDebugToString(vnode_getText(vnode)));\n        }\n        else if (vnode_isVirtualVNode(vnode)) {\n            const idx = vnode[VNodeProps.flags] >>> VNodeFlagsIndex.shift;\n            const attrs = ['[' + String(idx) + ']'];\n            vnode_getAttrKeys(vnode).forEach((key) => {\n                if (key !== DEBUG_TYPE) {\n                    const value = vnode_getAttr(vnode, key);\n                    attrs.push(' ' + key + '=' + qwikDebugToString(value));\n                }\n            });\n            const name = VirtualTypeName[vnode_getAttr(vnode, DEBUG_TYPE) || VirtualType.Virtual] ||\n                VirtualTypeName[VirtualType.Virtual];\n            strings.push('<' + name + attrs.join('') + '>');\n            const child = vnode_getFirstChild(vnode);\n            child && strings.push('  ' + vnode_toString.call(child, depth - 1, offset + '  ', true));\n            strings.push('</' + name + '>');\n        }\n        else if (vnode_isElementVNode(vnode)) {\n            const tag = vnode_getElementName(vnode);\n            const attrs = [];\n            const keys = vnode_getAttrKeys(vnode);\n            keys.forEach((key) => {\n                const value = vnode_getAttr(vnode, key);\n                attrs.push(' ' + key + '=' + qwikDebugToString(value));\n            });\n            const node = vnode_getNode(vnode);\n            if (node) {\n                const vnodeData = node.ownerDocument.qVNodeData?.get(node);\n                if (vnodeData) {\n                    attrs.push(' q:vnodeData=' + qwikDebugToString(vnodeData));\n                }\n            }\n            const domAttrs = node.attributes;\n            for (let i = 0; i < domAttrs.length; i++) {\n                const attr = domAttrs[i];\n                if (keys.indexOf(attr.name) === -1) {\n                    attrs.push(' ' + attr.name + (attr.value ? '=' + qwikDebugToString(attr.value) : ''));\n                }\n            }\n            strings.push('<' + tag + attrs.join('') + '>');\n            if (vnode_isMaterialized(vnode) || materialize) {\n                const child = vnode_getFirstChild(vnode);\n                child && strings.push('  ' + vnode_toString.call(child, depth - 1, offset + '  ', true));\n            }\n            else {\n                strings.push('  <!-- not materialized --!>');\n            }\n            strings.push('</' + tag + '>');\n        }\n        vnode = vnode_getNextSibling(vnode) || null;\n    } while (vnode);\n    return strings.join('\\n' + offset);\n}\nconst isNumber = (ch) => /* `0` */ 48 <= ch && ch <= 57; /* `9` */\nconst isLowercase = (ch) => /* `a` */ 97 <= ch && ch <= 122; /* `z` */\nconst stack = [];\nfunction materializeFromVNodeData(vParent, vData, element, child) {\n    let idx = 0;\n    let nextToConsumeIdx = 0;\n    let vFirst = null;\n    let vLast = null;\n    let previousTextNode = null;\n    let ch = 0;\n    let peekCh = 0;\n    const peek = () => {\n        if (peekCh !== 0) {\n            return peekCh;\n        }\n        else {\n            return (peekCh = nextToConsumeIdx < vData.length ? vData.charCodeAt(nextToConsumeIdx) : 0);\n        }\n    };\n    const consume = () => {\n        ch = peek();\n        peekCh = 0;\n        nextToConsumeIdx++;\n        return ch;\n    };\n    const addVNode = (node) => {\n        node[VNodeProps.flags] =\n            (node[VNodeProps.flags] & VNodeFlagsIndex.negated_mask) | (idx << VNodeFlagsIndex.shift);\n        idx++;\n        vLast && (vLast[VNodeProps.nextSibling] = node);\n        node[VNodeProps.previousSibling] = vLast;\n        node[VNodeProps.parent] = vParent;\n        if (!vFirst) {\n            vParent[ElementVNodeProps.firstChild] = vFirst = node;\n        }\n        vLast = node;\n    };\n    const consumeValue = () => {\n        consume();\n        const start = nextToConsumeIdx;\n        while ((peek() <= 58 /* `:` */ && peekCh !== 0) ||\n            peekCh === 95 /* `_` */ ||\n            (peekCh >= 65 /* `A` */ && peekCh <= 90) /* `Z` */ ||\n            (peekCh >= 97 /* `a` */ && peekCh <= 122) /* `z` */) {\n            consume();\n        }\n        return vData.substring(start, nextToConsumeIdx);\n    };\n    let textIdx = 0;\n    let combinedText = null;\n    let container = null;\n    // console.log(\n    //   'processVNodeData',\n    //   vNodeData,\n    //   (child?.parentNode as HTMLElement | undefined)?.outerHTML\n    // );\n    while (peek() !== 0) {\n        if (isNumber(peek())) {\n            // Element counts get encoded as numbers.\n            while (!isElement(child)) {\n                child = fastNextSibling(child);\n                if (!child) {\n                    throwErrorAndStop('Materialize error: missing element: ' + vData + ' ' + peek() + ' ' + nextToConsumeIdx);\n                }\n            }\n            // We pretend that style element's don't exist as they can get moved out.\n            while (isQStyleElement(child)) {\n                // skip over style elements, as those need to be moved to the head\n                // and are not included in the counts.\n                child = fastNextSibling(child);\n            }\n            combinedText = null;\n            previousTextNode = null;\n            let value = 0;\n            while (isNumber(peek())) {\n                value *= 10;\n                value += consume() - 48; /* `0` */\n            }\n            while (value--) {\n                addVNode(vnode_newUnMaterializedElement(child));\n                child = fastNextSibling(child);\n            }\n            // collect the elements;\n        }\n        else if (peek() === VNodeDataChar.SCOPED_STYLE) {\n            vnode_setAttr(null, vParent, QScopedStyle, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.RENDER_FN) {\n            vnode_setAttr(null, vParent, OnRenderProp, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.ID) {\n            if (!container) {\n                container = getDomContainer(element);\n            }\n            const id = consumeValue();\n            container.$setRawState$(parseInt(id), vParent);\n            isDev && vnode_setAttr(null, vParent, ELEMENT_ID, id);\n        }\n        else if (peek() === VNodeDataChar.PROPS) {\n            vnode_setAttr(null, vParent, ELEMENT_PROPS, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.SLOT_REF) {\n            vnode_setAttr(null, vParent, QSlotRef, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.KEY) {\n            vnode_setAttr(null, vParent, ELEMENT_KEY, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.SEQ) {\n            vnode_setAttr(null, vParent, ELEMENT_SEQ, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.SEQ_IDX) {\n            vnode_setAttr(null, vParent, ELEMENT_SEQ_IDX, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.CONTEXT) {\n            vnode_setAttr(null, vParent, QCtxAttr, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.OPEN) {\n            consume();\n            addVNode(vnode_newVirtual());\n            stack.push(vParent, vFirst, vLast, previousTextNode, idx);\n            idx = 0;\n            vParent = vLast;\n            vFirst = vLast = null;\n        }\n        else if (peek() === VNodeDataChar.SEPARATOR) {\n            const key = consumeValue();\n            const value = consumeValue();\n            vnode_setAttr(null, vParent, key, value);\n        }\n        else if (peek() === VNodeDataChar.CLOSE) {\n            consume();\n            vParent[ElementVNodeProps.lastChild] = vLast;\n            idx = stack.pop();\n            previousTextNode = stack.pop();\n            vLast = stack.pop();\n            vFirst = stack.pop();\n            vParent = stack.pop();\n        }\n        else if (peek() === VNodeDataChar.SLOT) {\n            vnode_setAttr(null, vParent, QSlot, consumeValue());\n        }\n        else {\n            const textNode = child && fastNodeType(child) === /* Node.TEXT_NODE */ 3 ? child : null;\n            // must be alphanumeric\n            if (combinedText === null) {\n                combinedText = textNode ? textNode.nodeValue : null;\n                textIdx = 0;\n            }\n            let length = 0;\n            while (isLowercase(peek())) {\n                length += consume() - 97; /* `a` */\n                length *= 26;\n            }\n            length += consume() - 65; /* `A` */\n            const text = combinedText === null ? '' : combinedText.substring(textIdx, textIdx + length);\n            addVNode((previousTextNode = vnode_newSharedText(previousTextNode, textNode, text)));\n            textIdx += length;\n            // Text nodes get encoded as alphanumeric characters.\n        }\n    }\n    vParent[ElementVNodeProps.lastChild] = vLast;\n    return vFirst;\n}\nexport const vnode_getType = (vnode) => {\n    const type = vnode[VNodeProps.flags];\n    if (type & VNodeFlags.Element) {\n        return 1 /* Element */;\n    }\n    else if (type & VNodeFlags.Virtual) {\n        return 11 /* Virtual */;\n    }\n    else if (type & VNodeFlags.Text) {\n        return 3 /* Text */;\n    }\n    throw throwErrorAndStop('Unknown vnode type: ' + type);\n};\nconst isElement = (node) => node && typeof node == 'object' && fastNodeType(node) === /** Node.ELEMENT_NODE* */ 1;\n/// These global variables are used to avoid creating new arrays for each call to `vnode_getPathToClosestDomNode`.\nconst aPath = [];\nconst bPath = [];\nexport const vnode_documentPosition = (a, b) => {\n    if (a === b) {\n        return 0;\n    }\n    let aDepth = -1;\n    let bDepth = -1;\n    while (a) {\n        a = (aPath[++aDepth] = a)[VNodeProps.parent];\n    }\n    while (b) {\n        b = (bPath[++bDepth] = b)[VNodeProps.parent];\n    }\n    while (aDepth >= 0 && bDepth >= 0) {\n        a = aPath[aDepth];\n        b = bPath[bDepth];\n        if (a === b) {\n            // if the nodes are the same, we need to check the next level.\n            aDepth--;\n            bDepth--;\n        }\n        else {\n            // We found a difference so we need to scan nodes at this level.\n            let cursor = b;\n            do {\n                cursor = vnode_getNextSibling(cursor);\n                if (cursor === a) {\n                    return 1;\n                }\n            } while (cursor);\n            cursor = b;\n            do {\n                cursor = vnode_getPreviousSibling(cursor);\n                if (cursor === a) {\n                    return -1;\n                }\n            } while (cursor);\n            // The node is not in the list of siblings, that means it must be disconnected.\n            return 1;\n        }\n    }\n    return aDepth < bDepth ? -1 : 1;\n};\n/**\n * Use this method to find the parent component for projection.\n *\n * Normally the parent component is just the first component which we encounter while traversing the\n * parents.\n *\n * However, if during traversal we encounter a projection, than we have to follow the projection,\n * and nod weth the projection component is further away (it is the parent's parent of the\n * projection's)\n *\n * So in general we have to go up as many parent components as there are projections nestings.\n *\n * - No projection nesting first parent component.\n * - One projection nesting, second parent component (parent's parent).\n * - Three projection nesting, third parent component (parent's parent's parent).\n * - And so on.\n *\n * @param vHost\n * @param getObjectById\n * @returns\n */\nexport const vnode_getProjectionParentComponent = (vHost, rootVNode) => {\n    let projectionDepth = 1;\n    while (projectionDepth--) {\n        while (vHost &&\n            (vnode_isVirtualVNode(vHost) ? vnode_getProp(vHost, OnRenderProp, null) === null : true)) {\n            const qSlotParentProp = vnode_getProp(vHost, QSlotParent, null);\n            const qSlotParent = qSlotParentProp &&\n                (typeof qSlotParentProp === 'string'\n                    ? vnode_locate(rootVNode, qSlotParentProp)\n                    : qSlotParentProp);\n            const vProjectionParent = vnode_isVirtualVNode(vHost) && qSlotParent;\n            if (vProjectionParent) {\n                // We found a projection, so we need to go up one more level.\n                projectionDepth++;\n            }\n            vHost = vProjectionParent || vnode_getParent(vHost);\n        }\n        if (projectionDepth > 0) {\n            vHost = vnode_getParent(vHost);\n        }\n    }\n    return vHost;\n};\nconst VNodeArray = class VNode extends Array {\n    static createElement(flags, parent, previousSibling, nextSibling, firstChild, lastChild, element, elementName) {\n        const vnode = new VNode(flags, parent, previousSibling, nextSibling);\n        vnode.push(firstChild, lastChild, element, elementName);\n        return vnode;\n    }\n    static createText(flags, parent, previousSibling, nextSibling, textNode, text) {\n        const vnode = new VNode(flags, parent, previousSibling, nextSibling);\n        vnode.push(textNode, text);\n        return vnode;\n    }\n    static createVirtual(flags, parent, previousSibling, nextSibling, firstChild, lastChild) {\n        const vnode = new VNode(flags, parent, previousSibling, nextSibling);\n        vnode.push(firstChild, lastChild);\n        return vnode;\n    }\n    constructor(flags, parent, previousSibling, nextSibling) {\n        super();\n        this.push(flags, parent, previousSibling, nextSibling);\n        if (isDev) {\n            this.toString = vnode_toString;\n        }\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined } from '../shared/error/assert';\nimport { qError, QError_useInvokeContext, QError_useMethodOutsideContext, } from '../shared/error/error';\nimport { ComputedEvent, QContainerSelector, QLocaleAttr, RenderEvent, ResourceEvent, TaskEvent, } from '../shared/utils/markers';\nimport { isPromise } from '../shared/utils/promises';\nimport { seal } from '../shared/utils/qdev';\nimport { isArray } from '../shared/utils/types';\nimport { setLocale } from './use-locale';\nimport { vnode_getNode, vnode_isElementVNode, vnode_isVNode } from '../client/vnode';\nimport { _getQContainerElement } from '../client/dom-container';\nlet _context;\n/** @public */\nexport const tryGetInvokeContext = () => {\n    if (!_context) {\n        const context = typeof document !== 'undefined' && document && document.__q_context__;\n        if (!context) {\n            return undefined;\n        }\n        if (isArray(context)) {\n            return (document.__q_context__ = newInvokeContextFromTuple(context));\n        }\n        return context;\n    }\n    return _context;\n};\nexport const getInvokeContext = () => {\n    const ctx = tryGetInvokeContext();\n    if (!ctx) {\n        throw qError(QError_useMethodOutsideContext);\n    }\n    return ctx;\n};\nexport const useInvokeContext = () => {\n    const ctx = tryGetInvokeContext();\n    if (!ctx || ctx.$event$ !== RenderEvent) {\n        throw qError(QError_useInvokeContext);\n    }\n    assertDefined(ctx.$hostElement$, `invoke: $hostElement$ must be defined`, ctx);\n    assertDefined(ctx.$effectSubscriber$, `invoke: $effectSubscriber$ must be defined`, ctx);\n    return ctx;\n};\nexport function useBindInvokeContext(fn) {\n    if (fn == null) {\n        return fn;\n    }\n    const ctx = getInvokeContext();\n    return function (...args) {\n        return (invokeApply).call(this, ctx, fn, args);\n    };\n}\n/** Call a function with the given InvokeContext and given arguments. */\nexport function invoke(context, fn, ...args) {\n    return invokeApply.call(this, context, fn, args);\n}\n/** Call a function with the given InvokeContext and array of arguments. */\nexport function invokeApply(context, fn, args) {\n    const previousContext = _context;\n    let returnValue;\n    try {\n        _context = context;\n        returnValue = fn.apply(this, args);\n    }\n    finally {\n        _context = previousContext;\n    }\n    return returnValue;\n}\nexport const waitAndRun = (ctx, callback) => {\n    const waitOn = ctx.$waitOn$;\n    if (waitOn.length === 0) {\n        const result = callback();\n        if (isPromise(result)) {\n            waitOn.push(result);\n        }\n    }\n    else {\n        waitOn.push(Promise.all(waitOn).then(callback));\n    }\n};\nexport const newInvokeContextFromTuple = ([element, event, url]) => {\n    const container = element.closest(QContainerSelector);\n    const locale = container?.getAttribute(QLocaleAttr) || undefined;\n    locale && setLocale(locale);\n    return newInvokeContext(locale, undefined, element, event, url);\n};\n// TODO how about putting url and locale (and event/custom?) in to a \"static\" object\nexport const newInvokeContext = (locale, hostElement, element, event, url) => {\n    // ServerRequestEvent has .locale, but it's not always defined.\n    const $locale$ = locale || (typeof event === 'object' && event && 'locale' in event ? event.locale : undefined);\n    const ctx = {\n        $url$: url,\n        $i$: 0,\n        $hostElement$: hostElement,\n        $element$: element,\n        $event$: event,\n        $qrl$: undefined,\n        $effectSubscriber$: undefined,\n        $locale$,\n        $container$: undefined,\n    };\n    seal(ctx);\n    return ctx;\n};\n/**\n * Don't track listeners for this callback\n *\n * @public\n */\nexport const untrack = (fn) => {\n    return invoke(undefined, fn);\n};\nconst trackInvocation = /*#__PURE__*/ newInvokeContext(undefined, undefined, undefined, RenderEvent);\n/**\n * @param fn\n * @param subscriber\n * @param property `true` - subscriber is component `false` - subscriber is VNode `string` -\n *   subscriber is property\n * @param container\n * @returns\n */\nexport const trackSignal = (fn, subscriber, property, container, data) => {\n    const previousSubscriber = trackInvocation.$effectSubscriber$;\n    const previousContainer = trackInvocation.$container$;\n    try {\n        trackInvocation.$effectSubscriber$ = [subscriber, property];\n        if (data) {\n            trackInvocation.$effectSubscriber$.push(data);\n        }\n        trackInvocation.$container$ = container;\n        return invoke(trackInvocation, fn);\n    }\n    finally {\n        trackInvocation.$effectSubscriber$ = previousSubscriber;\n        trackInvocation.$container$ = previousContainer;\n    }\n};\n/** @internal */\nexport const _getContextElement = () => {\n    const iCtx = tryGetInvokeContext();\n    if (iCtx) {\n        const hostElement = iCtx.$hostElement$;\n        let element = null;\n        if (vnode_isVNode(hostElement) && vnode_isElementVNode(hostElement)) {\n            element = vnode_getNode(hostElement);\n        }\n        return element ?? iCtx.$qrl$?.$setContainer$(undefined);\n    }\n};\n/** @internal */\nexport const _getContextEvent = () => {\n    const iCtx = tryGetInvokeContext();\n    if (iCtx) {\n        return iCtx.$event$;\n    }\n};\n/** @internal */\nexport const _jsxBranch = (input) => {\n    return input;\n};\n/** @internal */\nexport const _waitUntilRendered = (elm) => {\n    const containerEl = _getQContainerElement(elm);\n    if (!containerEl) {\n        return Promise.resolve();\n    }\n    const container = containerEl.qContainer;\n    return container?.renderDone ?? Promise.resolve();\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertTrue } from '../shared/error/assert';\nimport { qError, QError_invalidContext, QError_notFoundContext } from '../shared/error/error';\nimport { verifySerializable } from '../shared/utils/serialize-utils';\nimport { qDev, qSerialize } from '../shared/utils/qdev';\nimport { isObject } from '../shared/utils/types';\nimport { invoke } from './use-core';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { fromCamelToKebabCase } from '../shared/utils/event-names';\n// <docs markdown=\"../readme.md#createContextId\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#createContextId instead)\n/**\n * Create a context ID to be used in your application. The name should be written with no spaces.\n *\n * Context is a way to pass stores to the child components without prop-drilling.\n *\n * Use `createContextId()` to create a `ContextId`. A `ContextId` is just a serializable identifier\n * for the context. It is not the context value itself. See `useContextProvider()` and\n * `useContext()` for the values. Qwik needs a serializable ID for the context so that the it can\n * track context providers and consumers in a way that survives resumability.\n *\n * ### Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContextId<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n *\n * @param name - The name of the context.\n * @public\n */\n// </docs>\nexport const createContextId = (name) => {\n    assertTrue(/^[\\w/.-]+$/.test(name), 'Context name must only contain A-Z,a-z,0-9, _', name);\n    return /*#__PURE__*/ Object.freeze({\n        id: fromCamelToKebabCase(name),\n    });\n};\n// <docs markdown=\"../readme.md#useContextProvider\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useContextProvider instead)\n/**\n * Assign a value to a Context.\n *\n * Use `useContextProvider()` to assign a value to a context. The assignment happens in the\n * component's function. Once assigned, use `useContext()` in any child component to retrieve the\n * value.\n *\n * Context is a way to pass stores to the child components without prop-drilling. Note that scalar\n * values are allowed, but for reactivity you need signals or stores.\n *\n * ### Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContextId<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n *\n * @param context - The context to assign a value to.\n * @param value - The value to assign to the context.\n * @public\n */\n// </docs>\nexport const useContextProvider = (context, newValue) => {\n    const { val, set, iCtx } = useSequentialScope();\n    if (val !== undefined) {\n        return;\n    }\n    if (qDev) {\n        validateContext(context);\n    }\n    if (qDev && qSerialize) {\n        verifySerializable(newValue);\n    }\n    iCtx.$container$.setContext(iCtx.$hostElement$, context, newValue);\n    set(1);\n};\n// <docs markdown=\"../readme.md#useContext\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useContext instead)\n/**\n * Retrieve Context value.\n *\n * Use `useContext()` to retrieve the value of context in a component. To retrieve a value a parent\n * component needs to invoke `useContextProvider()` to assign a value.\n *\n * ### Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContextId<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n *\n * @param context - The context to retrieve a value from.\n * @public\n */\n// </docs>\nexport const useContext = (context, defaultValue) => {\n    const { val, set, iCtx } = useSequentialScope();\n    if (val !== undefined) {\n        return val;\n    }\n    if (qDev) {\n        validateContext(context);\n    }\n    const value = iCtx.$container$.resolveContext(iCtx.$hostElement$, context);\n    if (typeof defaultValue === 'function') {\n        return set(invoke(undefined, defaultValue, value));\n    }\n    if (value !== undefined) {\n        return set(value);\n    }\n    if (defaultValue !== undefined) {\n        return set(defaultValue);\n    }\n    throw qError(QError_notFoundContext, context.id);\n};\nexport const validateContext = (context) => {\n    if (!isObject(context) || typeof context.id !== 'string' || context.id.length === 0) {\n        throw qError(QError_invalidContext, context);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { createContextId } from '../../use/use-context';\nexport const ERROR_CONTEXT = /*#__PURE__*/ createContextId('qk-error');\nexport const isRecoverable = (err) => {\n    if (err && err instanceof Error) {\n        if ('plugin' in err) {\n            return false;\n        }\n    }\n    return true;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItaGFuZGxpbmcuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvc2hhcmVkL2Vycm9yL2Vycm9yLWhhbmRsaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQU94RCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsYUFBYSxDQUFDLGVBQWUsQ0FBcUIsVUFBVSxDQUFDLENBQUM7QUFFM0YsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsR0FBUSxFQUFFLEVBQUU7SUFDeEMsSUFBSSxHQUFHLElBQUksR0FBRyxZQUFZLEtBQUssRUFBRSxDQUFDO1FBQ2hDLElBQUksUUFBUSxJQUFJLEdBQUcsRUFBRSxDQUFDO1lBQ3BCLE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQztJQUNILENBQUM7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNvbnRleHRJZCB9IGZyb20gJy4uLy4uL3VzZS91c2UtY29udGV4dCc7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgaW50ZXJmYWNlIEVycm9yQm91bmRhcnlTdG9yZSB7XG4gIGVycm9yOiBhbnkgfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBjb25zdCBFUlJPUl9DT05URVhUID0gLyojX19QVVJFX18qLyBjcmVhdGVDb250ZXh0SWQ8RXJyb3JCb3VuZGFyeVN0b3JlPigncWstZXJyb3InKTtcblxuZXhwb3J0IGNvbnN0IGlzUmVjb3ZlcmFibGUgPSAoZXJyOiBhbnkpID0+IHtcbiAgaWYgKGVyciAmJiBlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIGlmICgncGx1Z2luJyBpbiBlcnIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuIl19","// NOTE: we want to move this function to qwikloader, and therefore this function should not have any external dependencies\nimport { VNodeDataChar, VNodeDataSeparator } from '../shared/vnode-data-types';\n/**\n * Process the VNodeData script tags and store the VNodeData in the VNodeDataMap.\n *\n * The end result of this function is that each DOM element has the associated `VNodeData` attached\n * to it, to be used later `VNode` materialization. The \"attachment\" is done through the\n * `VNodeDataMap`.\n *\n * Run this function on startup to process the `<script type=\"qwik/vnode\">` tags. The data in the\n * tags needs to be parsed and attached to the DOM elements. (We do this through `VNodeDataMap`)\n * `VNodeDataMap` is then used to lazily materialize the VNodes.\n *\n * Only one invocation of this function is needed per document/browser session.\n *\n * Below is an example of the kinds of constructs which need to be handled when dealing with\n * VNodeData deserialization.\n *\n * ```\n * <html q:container=\"paused\">\n *   <body>\n *     <div q:container=\"paused\">\n *       <script type=\"qwik/vnode\">...</script>\n *     </div>\n *     <div q:container=\"html\">...</div>\n *     before\n *     <!--q:container=ABC-->\n *     ...\n *     <!--/q:container-->\n *     after\n *     <!--q:ignore=FOO-->\n *     ...\n *        <!--q:container-island=BAR-->\n *        <div>some interactive island</div>\n *        <!--/q:container-island-->\n *     ...\n *     <!--/q:ignore-->\n *     <textarea q:container=\"text\">...</textarea>\n *     <script type=\"qwik/vnode\">...</script>\n *   </body>\n * </html>\n * ```\n *\n * Each `qwik/vnode` script assumes that the elements are numbered in depth first order. For this\n * reason, whenever the `processVNodeData` comes across a `q:container` it must ignore its\n * children.\n *\n * IMPLEMENTATION:\n *\n * - Stack to keep track of the current `q:container` being processed.\n * - Attach all `qwik/vnode` scripts (not the data contain within them) to the `q:container` element.\n * - Walk the tree and process each `q:container` element.\n */\nexport function processVNodeData(document) {\n    const Q_CONTAINER = 'q:container';\n    const Q_CONTAINER_END = '/' + Q_CONTAINER;\n    const Q_PROPS_SEPARATOR = ':';\n    const Q_SHADOW_ROOT = 'q:shadowroot';\n    const Q_IGNORE = 'q:ignore';\n    const Q_IGNORE_END = '/' + Q_IGNORE;\n    const Q_CONTAINER_ISLAND = 'q:container-island';\n    const Q_CONTAINER_ISLAND_END = '/' + Q_CONTAINER_ISLAND;\n    const qDocument = document;\n    const vNodeDataMap = qDocument.qVNodeData || (qDocument.qVNodeData = new WeakMap());\n    const prototype = document.body;\n    const getter = (prototype, name) => {\n        let getter;\n        while (prototype && !(getter = Object.getOwnPropertyDescriptor(prototype, name)?.get)) {\n            prototype = Object.getPrototypeOf(prototype);\n        }\n        return (getter ||\n            function () {\n                return this[name];\n            });\n    };\n    const getAttribute = prototype.getAttribute;\n    const hasAttribute = prototype.hasAttribute;\n    const getNodeType = getter(prototype, 'nodeType');\n    // Process all of the `qwik/vnode` script tags by attaching them to the corresponding containers.\n    const attachVnodeDataAndRefs = (element) => {\n        Array.from(element.querySelectorAll('script[type=\"qwik/vnode\"]')).forEach((script) => {\n            script.setAttribute('type', 'x-qwik/vnode');\n            const qContainerElement = script.closest('[q\\\\:container]');\n            qContainerElement.qVnodeData = script.textContent;\n            qContainerElement.qVNodeRefs = new Map();\n        });\n        element.querySelectorAll('[q\\\\:shadowroot]').forEach((parent) => {\n            const shadowRoot = parent.shadowRoot;\n            shadowRoot && attachVnodeDataAndRefs(shadowRoot);\n        });\n    };\n    attachVnodeDataAndRefs(document);\n    ///////////////////////////////\n    // Functions to consume the tree.\n    ///////////////////////////////\n    let NodeType;\n    (function (NodeType) {\n        NodeType[NodeType[\"CONTAINER_MASK\"] = 1] = \"CONTAINER_MASK\";\n        NodeType[NodeType[\"ELEMENT\"] = 2] = \"ELEMENT\";\n        NodeType[NodeType[\"ELEMENT_CONTAINER\"] = 3] = \"ELEMENT_CONTAINER\";\n        NodeType[NodeType[\"ELEMENT_SHADOW_ROOT\"] = 6] = \"ELEMENT_SHADOW_ROOT\";\n        NodeType[NodeType[\"COMMENT_SKIP_START\"] = 5] = \"COMMENT_SKIP_START\";\n        NodeType[NodeType[\"COMMENT_SKIP_END\"] = 8] = \"COMMENT_SKIP_END\";\n        NodeType[NodeType[\"COMMENT_IGNORE_START\"] = 16] = \"COMMENT_IGNORE_START\";\n        NodeType[NodeType[\"COMMENT_IGNORE_END\"] = 32] = \"COMMENT_IGNORE_END\";\n        NodeType[NodeType[\"COMMENT_ISLAND_START\"] = 65] = \"COMMENT_ISLAND_START\";\n        NodeType[NodeType[\"COMMENT_ISLAND_END\"] = 128] = \"COMMENT_ISLAND_END\";\n        NodeType[NodeType[\"OTHER\"] = 0] = \"OTHER\";\n    })(NodeType || (NodeType = {}));\n    /**\n     * Looks up which type of node this is in a monomorphic way which should be faster.\n     *\n     * See: https://mhevery.github.io/perf-tests/DOM-megamorphic.html\n     */\n    const getFastNodeType = (node) => {\n        const nodeType = getNodeType.call(node);\n        if (nodeType === 1 /* Node.ELEMENT_NODE */) {\n            const qContainer = getAttribute.call(node, Q_CONTAINER);\n            if (qContainer === null) {\n                if (hasAttribute.call(node, Q_SHADOW_ROOT)) {\n                    return NodeType.ELEMENT_SHADOW_ROOT;\n                }\n                const isQElement = hasAttribute.call(node, Q_PROPS_SEPARATOR);\n                return isQElement ? NodeType.ELEMENT : NodeType.OTHER;\n            }\n            else {\n                return NodeType.ELEMENT_CONTAINER;\n            }\n        }\n        else if (nodeType === 8 /* Node.COMMENT_NODE */) {\n            const nodeValue = node.nodeValue || ''; // nodeValue is monomorphic so it does not need fast path\n            if (nodeValue.startsWith(Q_CONTAINER_ISLAND)) {\n                return NodeType.COMMENT_ISLAND_START;\n            }\n            else if (nodeValue.startsWith(Q_IGNORE)) {\n                return NodeType.COMMENT_IGNORE_START;\n            }\n            else if (nodeValue.startsWith(Q_CONTAINER)) {\n                return NodeType.COMMENT_SKIP_START;\n            }\n            else if (nodeValue.startsWith(Q_CONTAINER_ISLAND_END)) {\n                return NodeType.COMMENT_ISLAND_END;\n            }\n            else if (nodeValue.startsWith(Q_IGNORE_END)) {\n                return NodeType.COMMENT_IGNORE_END;\n            }\n            else if (nodeValue.startsWith(Q_CONTAINER_END)) {\n                return NodeType.COMMENT_SKIP_END;\n            }\n        }\n        return NodeType.OTHER;\n    };\n    const isSeparator = (ch) => \n    /* `!` */ VNodeDataSeparator.ADVANCE_1 <= ch && ch <= VNodeDataSeparator.ADVANCE_8192; /* `.` */\n    /**\n     * Given the `vData` string, `start` index, and `end` index, find the end of the VNodeData\n     * section.\n     */\n    const findVDataSectionEnd = (vData, start, end) => {\n        let depth = 0;\n        while (true) {\n            // look for the end of VNodeData\n            if (start < end) {\n                const ch = vData.charCodeAt(start);\n                if (depth === 0 && isSeparator(ch)) {\n                    break;\n                }\n                else {\n                    if (ch === VNodeDataChar.OPEN) {\n                        depth++;\n                    }\n                    else if (ch === VNodeDataChar.CLOSE) {\n                        depth--;\n                    }\n                    start++;\n                }\n            }\n            else {\n                break;\n            }\n        }\n        return start;\n    };\n    const nextSibling = (node) => {\n        // eslint-disable-next-line no-empty\n        while (node && (node = node.nextSibling) && getFastNodeType(node) === NodeType.OTHER) { }\n        return node;\n    };\n    const firstChild = (node) => {\n        // eslint-disable-next-line no-empty\n        while (node && (node = node.firstChild) && getFastNodeType(node) === NodeType.OTHER) { }\n        return node;\n    };\n    /**\n     * Process the container\n     *\n     * @param walker TreeWalker\n     * @param containerNode The root of container element\n     * @param exitNode The node which represents the last node and we should exit.\n     * @param qVNodeRefs Place to store the VNodeRefs\n     */\n    const walkContainer = (walker, containerNode, node, exitNode, vData, qVNodeRefs, prefix) => {\n        const vData_length = vData.length;\n        /// Stores the current element index as the TreeWalker traverses the DOM.\n        let elementIdx = 0;\n        /// Stores the current VNode index as derived from the VNodeData script tag.\n        let vNodeElementIndex = -1;\n        let vData_start = 0;\n        let vData_end = 0;\n        let ch = 0;\n        let needsToStoreRef = -1;\n        let nextNode = null;\n        /** Computes number of elements which need to be skipped to get to the next VNodeData section. */\n        const howManyElementsToSkip = () => {\n            let elementsToSkip = 0;\n            while (isSeparator((ch = vData.charCodeAt(vData_start)))) {\n                // Keep consuming the separators and incrementing the vNodeIndex\n                // console.log('ADVANCE', vNodeElementIndex, ch, ch - 33);\n                elementsToSkip += 1 << (ch - VNodeDataSeparator.ADVANCE_1);\n                vData_start++;\n                if (vData_start >= vData_length) {\n                    // we reached the end of the vNodeData stop.\n                    break;\n                }\n            }\n            return elementsToSkip;\n        };\n        do {\n            if (node === exitNode) {\n                return;\n            }\n            nextNode = null;\n            const nodeType = node == containerNode ? NodeType.ELEMENT : getFastNodeType(node);\n            if (nodeType === NodeType.ELEMENT_CONTAINER) {\n                // If we are in a container, we need to skip the children.\n                const container = node;\n                let cursor = node;\n                while (cursor && !(nextNode = nextSibling(cursor))) {\n                    cursor = cursor.parentNode;\n                }\n                // console.log('EXIT', nextNode?.outerHTML);\n                walkContainer(walker, container, node, nextNode, container.qVnodeData || '', container.qVNodeRefs, prefix + '  ');\n            }\n            else if (nodeType === NodeType.COMMENT_IGNORE_START) {\n                let islandNode = node;\n                do {\n                    islandNode = walker.nextNode();\n                    if (!islandNode) {\n                        throw new Error(`Island inside <!--${node?.nodeValue}--> not found!`);\n                    }\n                } while (getFastNodeType(islandNode) !== NodeType.COMMENT_ISLAND_START);\n                nextNode = null;\n            }\n            else if (nodeType === NodeType.COMMENT_ISLAND_END) {\n                nextNode = node;\n                do {\n                    nextNode = walker.nextNode();\n                    if (!nextNode) {\n                        throw new Error(`Ignore block not closed!`);\n                    }\n                } while (getFastNodeType(nextNode) !== NodeType.COMMENT_IGNORE_END);\n                nextNode = null;\n            }\n            else if (nodeType === NodeType.COMMENT_SKIP_START) {\n                // If we are in a container, we need to skip the children.\n                nextNode = node;\n                do {\n                    nextNode = nextSibling(nextNode);\n                    if (!nextNode) {\n                        throw new Error(`<!--${node?.nodeValue}--> not closed!`);\n                    }\n                } while (getFastNodeType(nextNode) !== NodeType.COMMENT_SKIP_END);\n                // console.log('EXIT', nextNode?.outerHTML);\n                walkContainer(walker, node, node, nextNode, '', null, prefix + '  ');\n            }\n            else if (nodeType === NodeType.ELEMENT_SHADOW_ROOT) {\n                // If we are in a shadow root, we need to get the shadow root element.\n                nextNode = nextSibling(node);\n                const shadowRootContainer = node;\n                const shadowRoot = shadowRootContainer?.shadowRoot;\n                if (shadowRoot) {\n                    walkContainer(\n                    // we need to create a new walker for the shadow root\n                    document.createTreeWalker(shadowRoot, 0x1 /* NodeFilter.SHOW_ELEMENT  */ | 0x80 /*  NodeFilter.SHOW_COMMENT */), null, firstChild(shadowRoot), null, '', null, prefix + '  ');\n                }\n            }\n            if ((nodeType & NodeType.ELEMENT) === NodeType.ELEMENT) {\n                if (vNodeElementIndex < elementIdx) {\n                    // VNodeData needs to catch up with the elementIdx\n                    if (vNodeElementIndex === -1) {\n                        vNodeElementIndex = 0;\n                    }\n                    vData_start = vData_end;\n                    if (vData_start < vData_length) {\n                        vNodeElementIndex += howManyElementsToSkip();\n                        const shouldStoreRef = ch === VNodeDataSeparator.REFERENCE;\n                        if (shouldStoreRef) {\n                            // if we need to store the ref handle it here.\n                            needsToStoreRef = vNodeElementIndex;\n                            vData_start++;\n                            if (vData_start < vData_length) {\n                                ch = vData.charCodeAt(vData_end);\n                            }\n                            else {\n                                // assume separator on end.\n                                ch = VNodeDataSeparator.ADVANCE_1;\n                            }\n                        }\n                        vData_end = findVDataSectionEnd(vData, vData_start, vData_length);\n                    }\n                    else {\n                        vNodeElementIndex = Number.MAX_SAFE_INTEGER;\n                    }\n                }\n                // console.log(\n                //   prefix,\n                //   'ELEMENT',\n                //   nodeType,\n                //   elementIdx,\n                //   vNodeElementIndex,\n                //   (node as any).outerHTML,\n                //   elementIdx === vNodeElementIndex ? vData.substring(vData_start, vData_end) : ''\n                // );\n                if (elementIdx === vNodeElementIndex) {\n                    if (needsToStoreRef === elementIdx) {\n                        qVNodeRefs.set(elementIdx, node);\n                    }\n                    const instructions = vData.substring(vData_start, vData_end);\n                    vNodeDataMap.set(node, instructions);\n                }\n                elementIdx++;\n            }\n        } while ((node = nextNode || walker.nextNode()));\n    };\n    // Walk the tree and process each `q:container` element.\n    const walker = document.createTreeWalker(document, 0x1 /* NodeFilter.SHOW_ELEMENT  */ | 0x80 /*  NodeFilter.SHOW_COMMENT */);\n    walkContainer(walker, null, walker.firstChild(), null, '', null, '');\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy12bm9kZS1kYXRhLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL2NsaWVudC9wcm9jZXNzLXZub2RlLWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkhBQTJIO0FBQzNILE9BQU8sRUFBRSxhQUFhLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUcvRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FrREc7QUFDSCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsUUFBa0I7SUFDakQsTUFBTSxXQUFXLEdBQUcsYUFBYSxDQUFDO0lBQ2xDLE1BQU0sZUFBZSxHQUFHLEdBQUcsR0FBRyxXQUFXLENBQUM7SUFDMUMsTUFBTSxpQkFBaUIsR0FBRyxHQUFHLENBQUM7SUFDOUIsTUFBTSxhQUFhLEdBQUcsY0FBYyxDQUFDO0lBQ3JDLE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQztJQUM1QixNQUFNLFlBQVksR0FBRyxHQUFHLEdBQUcsUUFBUSxDQUFDO0lBQ3BDLE1BQU0sa0JBQWtCLEdBQUcsb0JBQW9CLENBQUM7SUFDaEQsTUFBTSxzQkFBc0IsR0FBRyxHQUFHLEdBQUcsa0JBQWtCLENBQUM7SUFDeEQsTUFBTSxTQUFTLEdBQUcsUUFBcUIsQ0FBQztJQUN4QyxNQUFNLFlBQVksR0FDaEIsU0FBUyxDQUFDLFVBQVUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxPQUFPLEVBQW1CLENBQUMsQ0FBQztJQUNsRixNQUFNLFNBQVMsR0FBUSxRQUFRLENBQUMsSUFBSSxDQUFDO0lBQ3JDLE1BQU0sTUFBTSxHQUFHLENBQUMsU0FBYyxFQUFFLElBQVksRUFBRSxFQUFFO1FBQzlDLElBQUksTUFBVyxDQUFDO1FBQ2hCLE9BQU8sU0FBUyxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLHdCQUF3QixDQUFD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LEVBQ1IsR0FBRyxDQUFDLDhCQUE4QixHQUFHLElBQUksQ0FBQyw4QkFBOEIsQ0FDekUsQ0FBQztJQUVGLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLElBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztBQUN4RSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTk9URTogd2Ugd2FudCB0byBtb3ZlIHRoaXMgZnVuY3Rpb24gdG8gcXdpa2xvYWRlciwgYW5kIHRoZXJlZm9yZSB0aGlzIGZ1bmN0aW9uIHNob3VsZCBub3QgaGF2ZSBhbnkgZXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG5pbXBvcnQgeyBWTm9kZURhdGFDaGFyLCBWTm9kZURhdGFTZXBhcmF0b3IgfSBmcm9tICcuLi9zaGFyZWQvdm5vZGUtZGF0YS10eXBlcyc7XG5pbXBvcnQgdHlwZSB7IENvbnRhaW5lckVsZW1lbnQsIEVsZW1lbnRWTm9kZSwgUURvY3VtZW50IH0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogUHJvY2VzcyB0aGUgVk5vZGVEYXRhIHNjcmlwdCB0YWdzIGFuZCBzdG9yZSB0aGUgVk5vZGVEYXRhIGluIHRoZSBWTm9kZURhdGFNYXAuXG4gKlxuICogVGhlIGVuZCByZXN1bHQgb2YgdGhpcyBmdW5jdGlvbiBpcyB0aGF0IGVhY2ggRE9NIGVsZW1lbnQgaGFzIHRoZSBhc3NvY2lhdGVkIGBWTm9kZURhdGFgIGF0dGFjaGVkXG4gKiB0byBpdCwgdG8gYmUgdXNlZCBsYXRlciBgVk5vZGVgIG1hdGVyaWFsaXphdGlvbi4gVGhlIFwiYXR0YWNobWVudFwiIGlzIGRvbmUgdGhyb3VnaCB0aGVcbiAqIGBWTm9kZURhdGFNYXBgLlxuICpcbiAqIFJ1biB0aGlzIGZ1bmN0aW9uIG9uIHN0YXJ0dXAgdG8gcHJvY2VzcyB0aGUgYDxzY3JpcHQgdHlwZT1cInF3aWsvdm5vZGVcIj5gIHRhZ3MuIFRoZSBkYXRhIGluIHRoZVxuICogdGFncyBuZWVkcyB0byBiZSBwYXJzZWQgYW5kIGF0dGFjaGVkIHRvIHRoZSBET00gZWxlbWVudHMuIChXZSBkbyB0aGlzIHRocm91Z2ggYFZOb2RlRGF0YU1hcGApXG4gKiBgVk5vZGVEYXRhTWFwYCBpcyB0aGVuIHVzZWQgdG8gbGF6aWx5IG1hdGVyaWFsaXplIHRoZSBWTm9kZXMuXG4gKlxuICogT25seSBvbmUgaW52b2NhdGlvbiBvZiB0aGlzIGZ1bmN0aW9uIGlzIG5lZWRlZCBwZXIgZG9jdW1lbnQvYnJvd3NlciBzZXNzaW9uLlxuICpcbiAqIEJlbG93IGlzIGFuIGV4YW1wbGUgb2YgdGhlIGtpbmRzIG9mIGNvbnN0cnVjdHMgd2hpY2ggbmVlZCB0byBiZSBoYW5kbGVkIHdoZW4gZGVhbGluZyB3aXRoXG4gKiBWTm9kZURhdGEgZGVzZXJpYWxpemF0aW9uLlxuICpcbiAqIGBgYFxuICogPGh0bWwgcTpjb250YWluZXI9XCJwYXVzZWRcIj5cbiAqICAgPGJvZHk+XG4gKiAgICAgPGRpdiBxOmNvbnRhaW5lcj1cInBhdXNlZFwiPlxuICogICAgICAgPHNjcmlwdCB0eXBlPVwicXdpay92bm9kZVwiPi4uLjwvc2NyaXB0PlxuICogICAgIDwvZGl2PlxuICogICAgIDxkaXYgcTpjb250YWluZXI9XCJodG1sXCI+Li4uPC9kaXY+XG4gKiAgICAgYmVmb3JlXG4gKiAgICAgPCEtLXE6Y29udGFpbmVyPUFCQy0tPlxuICogICAgIC4uLlxuICogICAgIDwhLS0vcTpjb250YWluZXItLT5cbiAqICAgICBhZnRlclxuICogICAgIDwhLS1xOmlnbm9yZT1GT08tLT5cbiAqICAgICAuLi5cbiAqICAgICAgICA8IS0tcTpjb250YWluZXItaXNsYW5kPUJBUi0tPlxuICogICAgICAgIDxkaXY+c29tZSBpbnRlcmFjdGl2ZSBpc2xhbmQ8L2Rpdj5cbiAqICAgICAgICA8IS0tL3E6Y29udGFpbmVyLWlzbGFuZC0tPlxuICogICAgIC4uLlxuICogICAgIDwhLS0vcTppZ25vcmUtLT5cbiAqICAgICA8dGV4dGFyZWEgcTpjb250YWluZXI9XCJ0ZXh0XCI+Li4uPC90ZXh0YXJlYT5cbiAqICAgICA8c2NyaXB0IHR5cGU9XCJxd2lrL3Zub2RlXCI+Li4uPC9zY3JpcHQ+XG4gKiAgIDwvYm9keT5cbiAqIDwvaHRtbD5cbiAqIGBgYFxuICpcbiAqIEVhY2ggYHF3aWsvdm5vZGVgIHNjcmlwdCBhc3N1bWVzIHRoYXQgdGhlIGVsZW1lbnRzIGFyZSBudW1iZXJlZCBpbiBkZXB0aCBmaXJzdCBvcmRlci4gRm9yIHRoaXNcbiAqIHJlYXNvbiwgd2hlbmV2ZXIgdGhlIGBwcm9jZXNzVk5vZGVEYXRhYCBjb21lcyBhY3Jvc3MgYSBgcTpjb250YWluZXJgIGl0IG11c3QgaWdub3JlIGl0c1xuICogY2hpbGRyZW4uXG4gKlxuICogSU1QTEVNRU5UQVRJT046XG4gKlxuICogLSBTdGFjayB0byBrZWVwIHRyYWNrIG9mIHRoZSBjdXJyZW50IGBxOmNvbnRhaW5lcmAgYmVpbmcgcHJvY2Vzc2VkLlxuICogLSBBdHRhY2ggYWxsIGBxd2lrL3Zub2RlYCBzY3JpcHRzIChub3QgdGhlIGRhdGEgY29udGFpbiB3aXRoaW4gdGhlbSkgdG8gdGhlIGBxOmNvbnRhaW5lcmAgZWxlbWVudC5cbiAqIC0gV2FsayB0aGUgdHJlZSBhbmQgcHJvY2VzcyBlYWNoIGBxOmNvbnRhaW5lcmAgZWxlbWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NWTm9kZURhdGEoZG9jdW1lbnQ6IERvY3VtZW50KSB7XG4gIGNvbnN0IFFfQ09OVEFJTkVSID0gJ3E6Y29udGFpbmVyJztcbiAgY29uc3QgUV9DT05UQUlORVJfRU5EID0gJy8nICsgUV9DT05UQUlORVI7XG4gIGNvbnN0IFFfUFJPUFNfU0VQQVJBVE9SID0gJzonO1xuICBjb25zdCBRX1NIQURPV19ST09UID0gJ3E6c2hhZG93cm9vdCc7XG4gIGNvbnN0IFFfSUdOT1JFID0gJ3E6aWdub3JlJztcbiAgY29uc3QgUV9JR05PUkVfRU5EID0gJy8nICsgUV9JR05PUkU7XG4gIGNvbnN0IFFfQ09OVEFJTkVSX0lTTEFORCA9ICdxOmNvbnRhaW5lci1pc2xhbmQnO1xuICBjb25zdCBRX0NPTlRBSU5FUl9JU0xBTkRfRU5EID0gJy8nICsgUV9DT05UQUlORVJfSVNMQU5EO1xuICBjb25zdCBxRG9jdW1lbnQgPSBkb2N1bWVudCBhcyBRRG9jdW1lbnQ7XG4gIGNvbnN0IHZOb2RlRGF0YU1hcCA9XG4gICAgcURvY3VtZW50LnFWTm9kZURhdGEgfHwgKHFEb2N1bWVudC5xVk5vZGVEYXRhID0gbmV3IFdlYWtNYXA8RWxlbWVudCwgc3RyaW5nPigpKTtcbiAgY29uc3QgcHJvdG90eXBlOiBhbnkgPSBkb2N1bWVudC5ib2R5O1xuICBjb25zdCBnZXR0ZXIgPSAocHJvdG90eXBlOiBhbnksIG5hbWU6IHN0cmluZykgPT4ge1xuICAgIGxldCBnZXR0ZXI6IGFueTtcbiAgICB3aGlsZSAocHJvdG90eXBlICYmICEoZ2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm90b3R5cGUsIG5hbWUpPy5nZXQpKSB7XG4gICAgICBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG90eXBlKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIGdldHRlciB8fFxuICAgICAgZnVuY3Rpb24gKHRoaXM6IGFueSkge1xuICAgICAgICByZXR1cm4gdGhpc1tuYW1lXTtcbiAgICAgIH1cbiAgICApO1xuICB9O1xuICBjb25zdCBnZXRBdHRyaWJ1dGUgPSBwcm90b3R5cGUuZ2V0QXR0cmlidXRlIGFzICh0aGlzOiBOb2RlLCBuYW1lOiBzdHJpbmcpID0+IHN0cmluZyB8IG51bGw7XG4gIGNvbnN0IGhhc0F0dHJpYnV0ZSA9IHByb3RvdHlwZS5oYXNBdHRyaWJ1dGUgYXMgKHRoaXM6IE5vZGUsIG5hbWU6IHN0cmluZykgPT4gYm9vbGVhbjtcbiAgY29uc3QgZ2V0Tm9kZVR5cGUgPSBnZXR0ZXIocHJvdG90eXBlLCAnbm9kZVR5cGUnKSBhcyAodGhpczogTm9kZSkgPT4gbnVtYmVyO1xuXG4gIC8vIFByb2Nlc3MgYWxsIG9mIHRoZSBgcXdpay92bm9kZWAgc2NyaXB0IHRhZ3MgYnkgYXR0YWNoaW5nIHRoZW0gdG8gdGhlIGNvcnJlc3BvbmRpbmcgY29udGFpbmVycy5cbiAgY29uc3QgYXR0YWNoVm5vZGVEYXRhQW5kUmVmcyA9IChlbGVtZW50OiBEb2N1bWVudCB8IFNoYWRvd1Jvb3QpID0+IHtcbiAgICBBcnJheS5mcm9tKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc2NyaXB0W3R5cGU9XCJxd2lrL3Zub2RlXCJdJykpLmZvckVhY2goKHNjcmlwdCkgPT4ge1xuICAgICAgc2NyaXB0LnNldEF0dHJpYnV0ZSgndHlwZScsICd4LXF3aWsvdm5vZGUnKTtcbiAgICAgIGNvbnN0IHFDb250YWluZXJFbGVtZW50ID0gc2NyaXB0LmNsb3Nlc3QoJ1txXFxcXDpjb250YWluZXJdJykgYXMgQ29udGFpbmVyRWxlbWVudCB8IG51bGw7XG4gICAgICBxQ29udGFpbmVyRWxlbWVudCEucVZub2RlRGF0YSA9IHNjcmlwdC50ZXh0Q29udGVudCE7XG4gICAgICBxQ29udGFpbmVyRWxlbWVudCEucVZOb2RlUmVmcyA9IG5ldyBNYXA8bnVtYmVyLCBFbGVtZW50IHwgRWxlbWVudFZOb2RlPigpO1xuICAgIH0pO1xuICAgIGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW3FcXFxcOnNoYWRvd3Jvb3RdJykuZm9yRWFjaCgocGFyZW50KSA9PiB7XG4gICAgICBjb25zdCBzaGFkb3dSb290ID0gcGFyZW50LnNoYWRvd1Jvb3Q7XG4gICAgICBzaGFkb3dSb290ICYmIGF0dGFjaFZub2RlRGF0YUFuZFJlZnMoc2hhZG93Um9vdCk7XG4gICAgfSk7XG4gIH07XG4gIGF0dGFjaFZub2RlRGF0YUFuZFJlZnMoZG9jdW1lbnQpO1xuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gRnVuY3Rpb25zIHRvIGNvbnN1bWUgdGhlIHRyZWUuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICBjb25zdCBlbnVtIE5vZGVUeXBlIHtcbiAgICBDT05UQUlORVJfTUFTSyAvKiAqKioqKioqKioqKioqKioqKiAqLyA9IDBiMDAwMDAwMDEsXG4gICAgRUxFTUVOVCAvKiAqKioqKioqKioqKioqKioqKioqKioqKiogKi8gPSAwYjAwMDAwMDEwLCAvLyByZWd1bGFyIGVsZW1lbnRcbiAgICBFTEVNRU5UX0NPTlRBSU5FUiAvKiAqKioqKioqKioqKioqKiAqLyA9IDBiMDAwMDAwMTEsIC8vIGNvbnRhaW5lciBlbGVtZW50IG5lZWQgdG8gZGVzY2VuZCBpbnRvIGl0XG4gICAgRUxFTUVOVF9TSEFET1dfUk9PVCAvKiAqKioqKioqKioqKiogKi8gPSAwYjAwMDAwMTEwLCAvLyBzaGFkb3cgcm9vdCBlbGVtZW50XG4gICAgQ09NTUVOVF9TS0lQX1NUQVJUIC8qICoqKioqKioqKioqKiogKi8gPSAwYjAwMDAwMTAxLCAvLyBDb21tZW50IGJ1dCBza2lwIHRoZSBjb250ZW50IHVudGlsIENPTU1FTlRfU0tJUF9FTkRcbiAgICBDT01NRU5UX1NLSVBfRU5EIC8qICoqKioqKioqKioqKioqKiAqLyA9IDBiMDAwMDEwMDAsIC8vIENvbW1lbnQgZW5kXG4gICAgQ09NTUVOVF9JR05PUkVfU1RBUlQgLyogKioqKioqKioqKiogKi8gPSAwYjAwMDEwMDAwLCAvLyBDb21tZW50IGlnbm9yZSwgZGVzY2VuZCBpbnRvIGNoaWxkcmVuIGFuZCBza2lwIHRoZSBjb250ZW50IHVudGlsIENPTU1FTlRfSVNMQU5EX1NUQVJUXG4gICAgQ09NTUVOVF9JR05PUkVfRU5EIC8qICoqKioqKioqKioqKiogKi8gPSAwYjAwMTAwMDAwLCAvLyBDb21tZW50IGlnbm9yZSBlbmRcbiAgICBDT01NRU5UX0lTTEFORF9TVEFSVCAvKiAqKioqKioqKioqKiAqLyA9IDBiMDEwMDAwMDEsIC8vIENvbW1lbnQgaXNsYW5kLCBjb3VudCBlbGVtZW50cyBmb3IgcGFyZW50IGNvbnRhaW5lciB1bnRpbCBDT01NRU5UX0lTTEFORF9FTkRcbiAgICBDT01NRU5UX0lTTEFORF9FTkQgLyogKioqKioqKioqKioqKiAqLyA9IDBiMTAwMDAwMDAsIC8vIENvbW1lbnQgaXNsYW5kIGVuZFxuICAgIE9USEVSIC8qICoqKioqKioqKioqKioqKioqKioqKioqKioqICovID0gMGIwMDAwMDAwMCxcbiAgfVxuXG4gIC8qKlxuICAgKiBMb29rcyB1cCB3aGljaCB0eXBlIG9mIG5vZGUgdGhpcyBpcyBpbiBhIG1vbm9tb3JwaGljIHdheSB3aGljaCBzaG91bGQgYmUgZmFzdGVyLlxuICAgKlxuICAgKiBTZWU6IGh0dHBzOi8vbWhldmVyeS5naXRodWIuaW8vcGVyZi10ZXN0cy9ET00tbWVnYW1vcnBoaWMuaHRtbFxuICAgKi9cbiAgY29uc3QgZ2V0RmFzdE5vZGVUeXBlID0gKG5vZGU6IE5vZGUpOiBOb2RlVHlwZSA9PiB7XG4gICAgY29uc3Qgbm9kZVR5cGUgPSBnZXROb2RlVHlwZS5jYWxsKG5vZGUpO1xuICAgIGlmIChub2RlVHlwZSA9PT0gMSAvKiBOb2RlLkVMRU1FTlRfTk9ERSAqLykge1xuICAgICAgY29uc3QgcUNvbnRhaW5lciA9IGdldEF0dHJpYnV0ZS5jYWxsKG5vZGUsIFFfQ09OVEFJTkVSKTtcbiAgICAgIGlmIChxQ29udGFpbmVyID09PSBudWxsKSB7XG4gICAgICAgIGlmIChoYXNBdHRyaWJ1dGUuY2FsbChub2RlLCBRX1NIQURPV19ST09UKSkge1xuICAgICAgICAgIHJldHVybiBOb2RlVHlwZS5FTEVNRU5UX1NIQURPV19ST09UO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlzUUVsZW1lbnQgPSBoYXNBdHRyaWJ1dGUuY2FsbChub2RlLCBRX1BST1BTX1NFUEFSQVRPUik7XG4gICAgICAgIHJldHVybiBpc1FFbGVtZW50ID8gTm9kZVR5cGUuRUxFTUVOVCA6IE5vZGVUeXBlLk9USEVSO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE5vZGVUeXBlLkVMRU1FTlRfQ09OVEFJTkVSO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobm9kZVR5cGUgPT09IDggLyogTm9kZS5DT01NRU5UX05PREUgKi8pIHtcbiAgICAgIGNvbnN0IG5vZGVWYWx1ZSA9IG5vZGUubm9kZVZhbHVlIHx8ICcnOyAvLyBub2RlVmFsdWUgaXMgbW9ub21vcnBoaWMgc28gaXQgZG9lcyBub3QgbmVlZCBmYXN0IHBhdGhcbiAgICAgIGlmIChub2RlVmFsdWUuc3RhcnRzV2l0aChRX0NPTlRBSU5FUl9JU0xBTkQpKSB7XG4gICAgICAgIHJldHVybiBOb2RlVHlwZS5DT01NRU5UX0lTTEFORF9TVEFSVDtcbiAgICAgIH0gZWxzZSBpZiAobm9kZVZhbHVlLnN0YXJ0c1dpdGgoUV9JR05PUkUpKSB7XG4gICAgICAgIHJldHVybiBOb2RlVHlwZS5DT01NRU5UX0lHTk9SRV9TVEFSVDtcbiAgICAgIH0gZWxzZSBpZiAobm9kZVZhbHVlLnN0YXJ0c1dpdGgoUV9DT05UQUlORVIpKSB7XG4gICAgICAgIHJldHVybiBOb2RlVHlwZS5DT01NRU5UX1NLSVBfU1RBUlQ7XG4gICAgICB9IGVsc2UgaWYgKG5vZGVWYWx1ZS5zdGFydHNXaXRoKFFfQ09OVEFJTkVSX0lTTEFORF9FTkQpKSB7XG4gICAgICAgIHJldHVybiBOb2RlVHlwZS5DT01NRU5UX0lTTEFORF9FTkQ7XG4gICAgICB9IGVsc2UgaWYgKG5vZGVWYWx1ZS5zdGFydHNXaXRoKFFfSUdOT1JFX0VORCkpIHtcbiAgICAgICAgcmV0dXJuIE5vZGVUeXBlLkNPTU1FTlRfSUdOT1JFX0VORDtcbiAgICAgIH0gZWxzZSBpZiAobm9kZVZhbHVlLnN0YXJ0c1dpdGgoUV9DT05UQUlORVJfRU5EKSkge1xuICAgICAgICByZXR1cm4gTm9kZVR5cGUuQ09NTUVOVF9TS0lQX0VORDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIE5vZGVUeXBlLk9USEVSO1xuICB9O1xuXG4gIGNvbnN0IGlzU2VwYXJhdG9yID0gKGNoOiBudW1iZXIpID0+XG4gICAgLyogYCFgICovIFZOb2RlRGF0YVNlcGFyYXRvci5BRFZBTkNFXzEgPD0gY2ggJiYgY2ggPD0gVk5vZGVEYXRhU2VwYXJhdG9yLkFEVkFOQ0VfODE5MjsgLyogYC5gICovXG4gIC8qKlxuICAgKiBHaXZlbiB0aGUgYHZEYXRhYCBzdHJpbmcsIGBzdGFydGAgaW5kZXgsIGFuZCBgZW5kYCBpbmRleCwgZmluZCB0aGUgZW5kIG9mIHRoZSBWTm9kZURhdGFcbiAgICogc2VjdGlvbi5cbiAgICovXG4gIGNvbnN0IGZpbmRWRGF0YVNlY3Rpb25FbmQgPSAodkRhdGE6IHN0cmluZywgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICAgIGxldCBkZXB0aCA9IDA7XG4gICAgd2hpbGUgKHRydWUgYXMgYm9vbGVhbikge1xuICAgICAgLy8gbG9vayBmb3IgdGhlIGVuZCBvZiBWTm9kZURhdGFcbiAgICAgIGlmIChzdGFydCA8IGVuZCkge1xuICAgICAgICBjb25zdCBjaCA9IHZEYXRhLmNoYXJDb2RlQXQoc3RhcnQpO1xuICAgICAgICBpZiAoZGVwdGggPT09IDAgJiYgaXNTZXBhcmF0b3IoY2gpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGNoID09PSBWTm9kZURhdGFDaGFyLk9QRU4pIHtcbiAgICAgICAgICAgIGRlcHRoKys7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaCA9PT0gVk5vZGVEYXRhQ2hhci5DTE9TRSkge1xuICAgICAgICAgICAgZGVwdGgtLTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhcnQrKztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdGFydDtcbiAgfTtcblxuICBjb25zdCBuZXh0U2libGluZyA9IChub2RlOiBOb2RlIHwgbnVsbCkgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIHdoaWxlIChub2RlICYmIChub2RlID0gbm9kZS5uZXh0U2libGluZykgJiYgZ2V0RmFzdE5vZGVUeXBlKG5vZGUpID09PSBOb2RlVHlwZS5PVEhFUikge31cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICBjb25zdCBmaXJzdENoaWxkID0gKG5vZGU6IE5vZGUgfCBudWxsKSA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgd2hpbGUgKG5vZGUgJiYgKG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQpICYmIGdldEZhc3ROb2RlVHlwZShub2RlKSA9PT0gTm9kZVR5cGUuT1RIRVIpIHt9XG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG5cbiAgLyoqXG4gICAqIFByb2Nlc3MgdGhlIGNvbnRhaW5lclxuICAgKlxuICAgKiBAcGFyYW0gd2Fsa2VyIFRyZWVXYWxrZXJcbiAgICogQHBhcmFtIGNvbnRhaW5lck5vZGUgVGhlIHJvb3Qgb2YgY29udGFpbmVyIGVsZW1lbnRcbiAgICogQHBhcmFtIGV4aXROb2RlIFRoZSBub2RlIHdoaWNoIHJlcHJlc2VudHMgdGhlIGxhc3Qgbm9kZSBhbmQgd2Ugc2hvdWxkIGV4aXQuXG4gICAqIEBwYXJhbSBxVk5vZGVSZWZzIFBsYWNlIHRvIHN0b3JlIHRoZSBWTm9kZVJlZnNcbiAgICovXG4gIGNvbnN0IHdhbGtDb250YWluZXIgPSAoXG4gICAgd2Fsa2VyOiBUcmVlV2Fsa2VyLFxuICAgIGNvbnRhaW5lck5vZGU6IE5vZGUgfCBudWxsLFxuICAgIG5vZGU6IE5vZGUgfCBudWxsLFxuICAgIGV4aXROb2RlOiBOb2RlIHwgbnVsbCxcbiAgICB2RGF0YTogc3RyaW5nLFxuICAgIHFWTm9kZVJlZnM6IE1hcDxudW1iZXIsIEVsZW1lbnQgfCBFbGVtZW50Vk5vZGU+LFxuICAgIHByZWZpeDogc3RyaW5nXG4gICkgPT4ge1xuICAgIGNvbnN0IHZEYXRhX2xlbmd0aCA9IHZEYXRhLmxlbmd0aDtcbiAgICAvLy8gU3RvcmVzIHRoZSBjdXJyZW50IGVsZW1lbnQgaW5kZXggYXMgdGhlIFRyZWVXYWxrZXIgdHJhdmVyc2VzIHRoZSBET00uXG4gICAgbGV0IGVsZW1lbnRJZHggPSAwO1xuICAgIC8vLyBTdG9yZXMgdGhlIGN1cnJlbnQgVk5vZGUgaW5kZXggYXMgZGVyaXZlZCBmcm9tIHRoZSBWTm9kZURhdGEgc2NyaXB0IHRhZy5cbiAgICBsZXQgdk5vZGVFbGVtZW50SW5kZXggPSAtMTtcbiAgICBsZXQgdkRhdGFfc3RhcnQgPSAwO1xuICAgIGxldCB2RGF0YV9lbmQgPSAwO1xuICAgIGxldCBjaCA9IDA7XG4gICAgbGV0IG5lZWRzVG9TdG9yZVJlZiA9IC0xO1xuICAgIGxldCBuZXh0Tm9kZTogTm9kZSB8IG51bGwgPSBudWxsO1xuXG4gICAgLyoqIENvbXB1dGVzIG51bWJlciBvZiBlbGVtZW50cyB3aGljaCBuZWVkIHRvIGJlIHNraXBwZWQgdG8gZ2V0IHRvIHRoZSBuZXh0IFZOb2RlRGF0YSBzZWN0aW9uLiAqL1xuICAgIGNvbnN0IGhvd01hbnlFbGVtZW50c1RvU2tpcCA9ICgpID0+IHtcbiAgICAgIGxldCBlbGVtZW50c1RvU2tpcCA9IDA7XG4gICAgICB3aGlsZSAoaXNTZXBhcmF0b3IoKGNoID0gdkRhdGEuY2hhckNvZGVBdCh2RGF0YV9zdGFydCkpKSkge1xuICAgICAgICAvLyBLZWVwIGNvbnN1bWluZyB0aGUgc2VwYXJhdG9ycyBhbmQgaW5jcmVtZW50aW5nIHRoZSB2Tm9kZUluZGV4XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdBRFZBTkNFJywgdk5vZGVFbGVtZW50SW5kZXgsIGNoLCBjaCAtIDMzKTtcbiAgICAgICAgZWxlbWVudHNUb1NraXAgKz0gMSA8PCAoY2ggLSBWTm9kZURhdGFTZXBhcmF0b3IuQURWQU5DRV8xKTtcbiAgICAgICAgdkRhdGFfc3RhcnQrKztcbiAgICAgICAgaWYgKHZEYXRhX3N0YXJ0ID49IHZEYXRhX2xlbmd0aCkge1xuICAgICAgICAgIC8vIHdlIHJlYWNoZWQgdGhlIGVuZCBvZiB0aGUgdk5vZGVEYXRhIHN0b3AuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBlbGVtZW50c1RvU2tpcDtcbiAgICB9O1xuXG4gICAgZG8ge1xuICAgICAgaWYgKG5vZGUgPT09IGV4aXROb2RlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5leHROb2RlID0gbnVsbDtcbiAgICAgIGNvbnN0IG5vZGVUeXBlID0gbm9kZSA9PSBjb250YWluZXJOb2RlID8gTm9kZVR5cGUuRUxFTUVOVCA6IGdldEZhc3ROb2RlVHlwZShub2RlISk7XG4gICAgICBpZiAobm9kZVR5cGUgPT09IE5vZGVUeXBlLkVMRU1FTlRfQ09OVEFJTkVSKSB7XG4gICAgICAgIC8vIElmIHdlIGFyZSBpbiBhIGNvbnRhaW5lciwgd2UgbmVlZCB0byBza2lwIHRoZSBjaGlsZHJlbi5cbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gbm9kZSBhcyBDb250YWluZXJFbGVtZW50O1xuICAgICAgICBsZXQgY3Vyc29yID0gbm9kZTtcbiAgICAgICAgd2hpbGUgKGN1cnNvciAmJiAhKG5leHROb2RlID0gbmV4dFNpYmxpbmcoY3Vyc29yKSkpIHtcbiAgICAgICAgICBjdXJzb3IgPSBjdXJzb3IhLnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ0VYSVQnLCBuZXh0Tm9kZT8ub3V0ZXJIVE1MKTtcbiAgICAgICAgd2Fsa0NvbnRhaW5lcihcbiAgICAgICAgICB3YWxrZXIsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgbmV4dE5vZGUsXG4gICAgICAgICAgY29udGFpbmVyLnFWbm9kZURhdGEgfHwgJycsXG4gICAgICAgICAgY29udGFpbmVyLnFWTm9kZVJlZnMhLFxuICAgICAgICAgIHByZWZpeCArICcgICdcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAobm9kZVR5cGUgPT09IE5vZGVUeXBlLkNPTU1FTlRfSUdOT1JFX1NUQVJUKSB7XG4gICAgICAgIGxldCBpc2xhbmROb2RlID0gbm9kZTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlzbGFuZE5vZGUgPSB3YWxrZXIubmV4dE5vZGUoKTtcbiAgICAgICAgICBpZiAoIWlzbGFuZE5vZGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSXNsYW5kIGluc2lkZSA8IS0tJHtub2RlPy5ub2RlVmFsdWV9LS0+IG5vdCBmb3VuZCFgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKGdldEZhc3ROb2RlVHlwZShpc2xhbmROb2RlKSAhPT0gTm9kZVR5cGUuQ09NTUVOVF9JU0xBTkRfU1RBUlQpO1xuICAgICAgICBuZXh0Tm9kZSA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKG5vZGVUeXBlID09PSBOb2RlVHlwZS5DT01NRU5UX0lTTEFORF9FTkQpIHtcbiAgICAgICAgbmV4dE5vZGUgPSBub2RlO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgbmV4dE5vZGUgPSB3YWxrZXIubmV4dE5vZGUoKTtcbiAgICAgICAgICBpZiAoIW5leHROb2RlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYElnbm9yZSBibG9jayBub3QgY2xvc2VkIWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoZ2V0RmFzdE5vZGVUeXBlKG5leHROb2RlKSAhPT0gTm9kZVR5cGUuQ09NTUVOVF9JR05PUkVfRU5EKTtcbiAgICAgICAgbmV4dE5vZGUgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmIChub2RlVHlwZSA9PT0gTm9kZVR5cGUuQ09NTUVOVF9TS0lQX1NUQVJUKSB7XG4gICAgICAgIC8vIElmIHdlIGFyZSBpbiBhIGNvbnRhaW5lciwgd2UgbmVlZCB0byBza2lwIHRoZSBjaGlsZHJlbi5cbiAgICAgICAgbmV4dE5vZGUgPSBub2RlO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgbmV4dE5vZGUgPSBuZXh0U2libGluZyhuZXh0Tm9kZSk7XG4gICAgICAgICAgaWYgKCFuZXh0Tm9kZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGA8IS0tJHtub2RlPy5ub2RlVmFsdWV9LS0+IG5vdCBjbG9zZWQhYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlIChnZXRGYXN0Tm9kZVR5cGUobmV4dE5vZGUpICE9PSBOb2RlVHlwZS5DT01NRU5UX1NLSVBfRU5EKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ0VYSVQnLCBuZXh0Tm9kZT8ub3V0ZXJIVE1MKTtcbiAgICAgICAgd2Fsa0NvbnRhaW5lcih3YWxrZXIsIG5vZGUsIG5vZGUsIG5leHROb2RlLCAnJywgbnVsbCEsIHByZWZpeCArICcgICcpO1xuICAgICAgfSBlbHNlIGlmIChub2RlVHlwZSA9PT0gTm9kZVR5cGUuRUxFTUVOVF9TSEFET1dfUk9PVCkge1xuICAgICAgICAvLyBJZiB3ZSBhcmUgaW4gYSBzaGFkb3cgcm9vdCwgd2UgbmVlZCB0byBnZXQgdGhlIHNoYWRvdyByb290IGVsZW1lbnQuXG4gICAgICAgIG5leHROb2RlID0gbmV4dFNpYmxpbmcobm9kZSk7XG4gICAgICAgIGNvbnN0IHNoYWRvd1Jvb3RDb250YWluZXIgPSBub2RlIGFzIEVsZW1lbnQgfCBudWxsO1xuICAgICAgICBjb25zdCBzaGFkb3dSb290ID0gc2hhZG93Um9vdENvbnRhaW5lcj8uc2hhZG93Um9vdDtcbiAgICAgICAgaWYgKHNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICB3YWxrQ29udGFpbmVyKFxuICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBjcmVhdGUgYSBuZXcgd2Fsa2VyIGZvciB0aGUgc2hhZG93IHJvb3RcbiAgICAgICAgICAgIGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoXG4gICAgICAgICAgICAgIHNoYWRvd1Jvb3QsXG4gICAgICAgICAgICAgIDB4MSAvKiBOb2RlRmlsdGVyLlNIT1dfRUxFTUVOVCAgKi8gfCAweDgwIC8qICBOb2RlRmlsdGVyLlNIT1dfQ09NTUVOVCAqL1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBmaXJzdENoaWxkKHNoYWRvd1Jvb3QpLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICcnLFxuICAgICAgICAgICAgbnVsbCEsXG4gICAgICAgICAgICBwcmVmaXggKyAnICAnXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoKG5vZGVUeXBlICYgTm9kZVR5cGUuRUxFTUVOVCkgPT09IE5vZGVUeXBlLkVMRU1FTlQpIHtcbiAgICAgICAgaWYgKHZOb2RlRWxlbWVudEluZGV4IDwgZWxlbWVudElkeCkge1xuICAgICAgICAgIC8vIFZOb2RlRGF0YSBuZWVkcyB0byBjYXRjaCB1cCB3aXRoIHRoZSBlbGVtZW50SWR4XG4gICAgICAgICAgaWYgKHZOb2RlRWxlbWVudEluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgdk5vZGVFbGVtZW50SW5kZXggPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2RGF0YV9zdGFydCA9IHZEYXRhX2VuZDtcbiAgICAgICAgICBpZiAodkRhdGFfc3RhcnQgPCB2RGF0YV9sZW5ndGgpIHtcbiAgICAgICAgICAgIHZOb2RlRWxlbWVudEluZGV4ICs9IGhvd01hbnlFbGVtZW50c1RvU2tpcCgpO1xuICAgICAgICAgICAgY29uc3Qgc2hvdWxkU3RvcmVSZWYgPSBjaCA9PT0gVk5vZGVEYXRhU2VwYXJhdG9yLlJFRkVSRU5DRTtcbiAgICAgICAgICAgIGlmIChzaG91bGRTdG9yZVJlZikge1xuICAgICAgICAgICAgICAvLyBpZiB3ZSBuZWVkIHRvIHN0b3JlIHRoZSByZWYgaGFuZGxlIGl0IGhlcmUuXG4gICAgICAgICAgICAgIG5lZWRzVG9TdG9yZVJlZiA9IHZOb2RlRWxlbWVudEluZGV4O1xuICAgICAgICAgICAgICB2RGF0YV9zdGFydCsrO1xuICAgICAgICAgICAgICBpZiAodkRhdGFfc3RhcnQgPCB2RGF0YV9sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjaCA9IHZEYXRhLmNoYXJDb2RlQXQodkRhdGFfZW5kKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBhc3N1bWUgc2VwYXJhdG9yIG9uIGVuZC5cbiAgICAgICAgICAgICAgICBjaCA9IFZOb2RlRGF0YVNlcGFyYXRvci5BRFZBTkNFXzE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZEYXRhX2VuZCA9IGZpbmRWRGF0YVNlY3Rpb25FbmQodkRhdGEsIHZEYXRhX3N0YXJ0LCB2RGF0YV9sZW5ndGgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2Tm9kZUVsZW1lbnRJbmRleCA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcbiAgICAgICAgLy8gICBwcmVmaXgsXG4gICAgICAgIC8vICAgJ0VMRU1FTlQnLFxuICAgICAgICAvLyAgIG5vZGVUeXBlLFxuICAgICAgICAvLyAgIGVsZW1lbnRJZHgsXG4gICAgICAgIC8vICAgdk5vZGVFbGVtZW50SW5kZXgsXG4gICAgICAgIC8vICAgKG5vZGUgYXMgYW55KS5vdXRlckhUTUwsXG4gICAgICAgIC8vICAgZWxlbWVudElkeCA9PT0gdk5vZGVFbGVtZW50SW5kZXggPyB2RGF0YS5zdWJzdHJpbmcodkRhdGFfc3RhcnQsIHZEYXRhX2VuZCkgOiAnJ1xuICAgICAgICAvLyApO1xuICAgICAgICBpZiAoZWxlbWVudElkeCA9PT0gdk5vZGVFbGVtZW50SW5kZXgpIHtcbiAgICAgICAgICBpZiAobmVlZHNUb1N0b3JlUmVmID09PSBlbGVtZW50SWR4KSB7XG4gICAgICAgICAgICBxVk5vZGVSZWZzLnNldChlbGVtZW50SWR4LCBub2RlIGFzIEVsZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBpbnN0cnVjdGlvbnMgPSB2RGF0YS5zdWJzdHJpbmcodkRhdGFfc3RhcnQsIHZEYXRhX2VuZCk7XG4gICAgICAgICAgdk5vZGVEYXRhTWFwLnNldChub2RlIGFzIEVsZW1lbnQsIGluc3RydWN0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxlbWVudElkeCsrO1xuICAgICAgfVxuICAgIH0gd2hpbGUgKChub2RlID0gbmV4dE5vZGUgfHwgd2Fsa2VyLm5leHROb2RlKCkpKTtcbiAgfTtcblxuICAvLyBXYWxrIHRoZSB0cmVlIGFuZCBwcm9jZXNzIGVhY2ggYHE6Y29udGFpbmVyYCBlbGVtZW50LlxuICBjb25zdCB3YWxrZXIgPSBkb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKFxuICAgIGRvY3VtZW50LFxuICAgIDB4MSAvKiBOb2RlRmlsdGVyLlNIT1dfRUxFTUVOVCAgKi8gfCAweDgwIC8qICBOb2RlRmlsdGVyLlNIT1dfQ09NTUVOVCAqL1xuICApO1xuXG4gIHdhbGtDb250YWluZXIod2Fsa2VyLCBudWxsLCB3YWxrZXIuZmlyc3RDaGlsZCgpLCBudWxsLCAnJywgbnVsbCEsICcnKTtcbn1cbiJdfQ==","/** @file Public APIs for the SSR */\nimport { assertTrue } from '../shared/error/assert';\nimport { getPlatform } from '../shared/platform/platform';\nimport { ERROR_CONTEXT, isRecoverable } from '../shared/error/error-handling';\nimport { EMPTY_ARRAY } from '../shared/utils/flyweight';\nimport { throwErrorAndStop } from '../shared/utils/log';\nimport { ELEMENT_PROPS, ELEMENT_SEQ, ELEMENT_SEQ_IDX, getQFuncs, OnRenderProp, Q_PROPS_SEPARATOR, QBaseAttr, QContainerAttr, QContainerSelector, QCtxAttr, QInstanceAttr, QScopedStyle, QSlotParent, QStyle, QStyleSelector, QSubscribers, USE_ON_LOCAL_SEQ_IDX, } from '../shared/utils/markers';\nimport { isPromise } from '../shared/utils/promises';\nimport { isSlotProp } from '../shared/utils/prop';\nimport { qDev } from '../shared/utils/qdev';\nimport { ChoreType } from '../shared/scheduler';\nimport { addComponentStylePrefix, convertScopedStyleIdsToArray, convertStyleIdsToString, } from '../shared/utils/scoped-styles';\nimport { _SharedContainer } from '../shared/shared-container';\nimport { inflateQRL, parseQRL, wrapDeserializerProxy } from '../shared/shared-serialization';\nimport {} from '../shared/types';\nimport { processVNodeData } from './process-vnode-data';\nimport { VNodeFlags, VNodeProps, } from './types';\nimport { VNodeJournalOpCode, mapArray_get, mapArray_set, vnode_applyJournal, vnode_getDOMChildNodes, vnode_getDomParent, vnode_getParent, vnode_getProp, vnode_getPropStartIndex, vnode_insertBefore, vnode_isVirtualVNode, vnode_locate, vnode_newElement, vnode_newUnMaterializedElement, vnode_setProp, } from './vnode';\nimport { vnode_diff } from './vnode-diff';\n/** @public */\nexport function getDomContainer(element) {\n    const qContainerElement = _getQContainerElement(element);\n    if (!qContainerElement) {\n        throwErrorAndStop('Unable to find q:container.');\n    }\n    return getDomContainerFromQContainerElement(qContainerElement);\n}\nexport function getDomContainerFromQContainerElement(qContainerElement) {\n    const qElement = qContainerElement;\n    let container = qElement.qContainer;\n    if (!container) {\n        container = new DomContainer(qElement);\n        const containerAttributes = {};\n        if (qElement) {\n            const attrs = qElement.attributes;\n            if (attrs) {\n                for (let index = 0; index < attrs.length; index++) {\n                    const attr = attrs[index];\n                    if (attr.name === Q_PROPS_SEPARATOR) {\n                        continue;\n                    }\n                    containerAttributes[attr.name] = attr.value;\n                }\n            }\n        }\n        container.$serverData$ = { containerAttributes };\n        qElement.qContainer = container;\n    }\n    return container;\n}\n/** @internal */\nexport function _getQContainerElement(element) {\n    const qContainerElement = Array.isArray(element)\n        ? vnode_getDomParent(element)\n        : element;\n    return qContainerElement.closest(QContainerSelector);\n}\nexport const isDomContainer = (container) => {\n    return container instanceof DomContainer;\n};\n/** @internal */\nexport class DomContainer extends _SharedContainer {\n    constructor(element) {\n        super(() => this.scheduleRender(), () => vnode_applyJournal(this.$journal$), {}, element.getAttribute('q:locale'));\n        this.renderDone = null;\n        this.$storeProxyMap$ = new WeakMap();\n        this.$styleIds$ = null;\n        this.$vnodeLocate$ = (id) => vnode_locate(this.rootVNode, id);\n        this.$renderCount$ = 0;\n        this.$getObjectById$ = (id) => {\n            if (typeof id === 'string') {\n                id = parseFloat(id);\n            }\n            assertTrue(id < this.$rawStateData$.length / 2, `Invalid reference: ${id} >= ${this.$rawStateData$.length / 2}`);\n            return this.stateData[id];\n        };\n        this.qContainer = element.getAttribute(QContainerAttr);\n        if (!this.qContainer) {\n            throwErrorAndStop(\"Element must have 'q:container' attribute.\");\n        }\n        this.$journal$ = [\n            // The first time we render we need to hoist the styles.\n            // (Meaning we need to move all styles from component inline to <head>)\n            // We bulk move all of the styles, because the expensive part is\n            // for the browser to recompute the styles, (not the actual DOM manipulation.)\n            // By moving all of them at once we can minimize the reflow.\n            VNodeJournalOpCode.HoistStyles,\n            element.ownerDocument,\n        ];\n        this.document = element.ownerDocument;\n        this.element = element;\n        this.qBase = element.getAttribute(QBaseAttr);\n        this.$instanceHash$ = element.getAttribute(QInstanceAttr);\n        // this.containerState = createContainerState(element, this.qBase);\n        this.qManifestHash = element.getAttribute('q:manifest-hash');\n        this.rootVNode = vnode_newUnMaterializedElement(this.element);\n        // These are here to initialize all properties at once for single class transition\n        this.$rawStateData$ = null;\n        this.stateData = null;\n        const document = this.element.ownerDocument;\n        if (!document.qVNodeData) {\n            processVNodeData(document);\n        }\n        this.$rawStateData$ = [];\n        this.stateData = [];\n        const qwikStates = element.querySelectorAll('script[type=\"qwik/state\"]');\n        if (qwikStates.length !== 0) {\n            const lastState = qwikStates[qwikStates.length - 1];\n            this.$rawStateData$ = JSON.parse(lastState.textContent);\n            this.stateData = wrapDeserializerProxy(this, this.$rawStateData$);\n        }\n        this.$qFuncs$ = getQFuncs(document, this.$instanceHash$) || EMPTY_ARRAY;\n    }\n    $setRawState$(id, vParent) {\n        this.stateData[id] = vParent;\n    }\n    parseQRL(qrl) {\n        return inflateQRL(this, parseQRL(qrl));\n    }\n    processJsx(host, jsx) {\n        // console.log('>>>> processJsx', String(host));\n        const styleScopedId = this.getHostProp(host, QScopedStyle);\n        return vnode_diff(this, jsx, host, addComponentStylePrefix(styleScopedId));\n    }\n    handleError(err, host) {\n        if (qDev) {\n            // Clean vdom\n            if (typeof document !== 'undefined') {\n                const vHost = host;\n                const errorDiv = document.createElement('errored-host');\n                if (err && err instanceof Error) {\n                    errorDiv.props = { error: err };\n                }\n                errorDiv.setAttribute('q:key', '_error_');\n                const journal = [];\n                vnode_getDOMChildNodes(journal, vHost).forEach((child) => errorDiv.appendChild(child));\n                const vErrorDiv = vnode_newElement(errorDiv, 'error-host');\n                vnode_insertBefore(journal, vHost, vErrorDiv, null);\n                vnode_applyJournal(journal);\n            }\n            if (err && err instanceof Error) {\n                if (!('hostElement' in err)) {\n                    err['hostElement'] = host;\n                }\n            }\n            if (!isRecoverable(err)) {\n                throw err;\n            }\n        }\n        const errorStore = this.resolveContext(host, ERROR_CONTEXT);\n        if (!errorStore) {\n            throw err;\n        }\n        errorStore.error = err;\n    }\n    setContext(host, context, value) {\n        let ctx = this.getHostProp(host, QCtxAttr);\n        if (!ctx) {\n            this.setHostProp(host, QCtxAttr, (ctx = []));\n        }\n        mapArray_set(ctx, context.id, value, 0);\n    }\n    resolveContext(host, contextId) {\n        while (host) {\n            const ctx = this.getHostProp(host, QCtxAttr);\n            if (ctx) {\n                const value = mapArray_get(ctx, contextId.id, 0);\n                if (value) {\n                    return value;\n                }\n            }\n            host = this.getParentHost(host);\n        }\n        return undefined;\n    }\n    getParentHost(host) {\n        let vNode = vnode_getParent(host);\n        while (vNode) {\n            if (vnode_isVirtualVNode(vNode)) {\n                if (vnode_getProp(vNode, OnRenderProp, null) !== null) {\n                    return vNode;\n                }\n                // If virtual node, than it could be a slot so we need to read its parent.\n                const parent = vnode_getProp(vNode, QSlotParent, this.$vnodeLocate$);\n                if (parent) {\n                    vNode = parent;\n                    continue;\n                }\n            }\n            vNode = vnode_getParent(vNode);\n        }\n        return null;\n    }\n    setHostProp(host, name, value) {\n        const vNode = host;\n        vnode_setProp(vNode, name, value);\n    }\n    getHostProp(host, name) {\n        const vNode = host;\n        let getObjectById = null;\n        switch (name) {\n            case ELEMENT_SEQ:\n            case ELEMENT_PROPS:\n            case OnRenderProp:\n            case QCtxAttr:\n            case QSubscribers:\n                getObjectById = this.$getObjectById$;\n                break;\n            case ELEMENT_SEQ_IDX:\n            case USE_ON_LOCAL_SEQ_IDX:\n                getObjectById = parseInt;\n                break;\n        }\n        return vnode_getProp(vNode, name, getObjectById);\n    }\n    scheduleRender() {\n        this.$renderCount$++;\n        this.renderDone || (this.renderDone = getPlatform().nextTick(() => this.processChores()));\n        return this.renderDone;\n    }\n    processChores() {\n        let renderCount = this.$renderCount$;\n        const result = this.$scheduler$(ChoreType.WAIT_FOR_ALL);\n        if (isPromise(result)) {\n            return result.then(async () => {\n                while (renderCount !== this.$renderCount$) {\n                    renderCount = this.$renderCount$;\n                    await this.$scheduler$(ChoreType.WAIT_FOR_ALL);\n                }\n                this.renderDone = null;\n            });\n        }\n        if (renderCount !== this.$renderCount$) {\n            this.processChores();\n            return;\n        }\n        this.renderDone = null;\n    }\n    ensureProjectionResolved(vNode) {\n        if ((vNode[VNodeProps.flags] & VNodeFlags.Resolved) === 0) {\n            vNode[VNodeProps.flags] |= VNodeFlags.Resolved;\n            for (let i = vnode_getPropStartIndex(vNode); i < vNode.length; i = i + 2) {\n                const prop = vNode[i];\n                if (isSlotProp(prop)) {\n                    const value = vNode[i + 1];\n                    if (typeof value == 'string') {\n                        vNode[i + 1] = this.$vnodeLocate$(value);\n                    }\n                }\n            }\n        }\n    }\n    getSyncFn(id) {\n        const fn = this.$qFuncs$[id];\n        assertTrue(typeof fn === 'function', 'Invalid reference: ' + id);\n        return fn;\n    }\n    $appendStyle$(content, styleId, host, scoped) {\n        if (scoped) {\n            const scopedStyleIdsString = this.getHostProp(host, QScopedStyle);\n            const scopedStyleIds = new Set(convertScopedStyleIdsToArray(scopedStyleIdsString));\n            scopedStyleIds.add(styleId);\n            this.setHostProp(host, QScopedStyle, convertStyleIdsToString(scopedStyleIds));\n        }\n        if (this.$styleIds$ == null) {\n            this.$styleIds$ = new Set();\n            this.element.querySelectorAll(QStyleSelector).forEach((style) => {\n                this.$styleIds$.add(style.getAttribute(QStyle));\n            });\n        }\n        if (!this.$styleIds$.has(styleId)) {\n            this.$styleIds$.add(styleId);\n            const styleElement = this.document.createElement('style');\n            styleElement.setAttribute(QStyle, styleId);\n            styleElement.textContent = content;\n            this.$journal$.push(VNodeJournalOpCode.Insert, this.document.head, null, styleElement);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/** There's [documentation](./serialization.md) */\nimport { isDev } from '../../build/index.dev';\nimport {} from '../client/dom-container';\nimport { vnode_getNode, vnode_isVNode, vnode_locate, vnode_toString } from '../client/vnode';\nimport { ComputedSignal, EffectData, NEEDS_COMPUTATION, Signal, WrappedSignal, } from '../signal/signal';\nimport { STORE_ARRAY_PROP, createStore, getStoreHandler, getStoreTarget, isStore, } from '../signal/store';\nimport { createResourceReturn } from '../use/use-resource';\nimport { Task, isTask } from '../use/use-task';\nimport { SERIALIZABLE_STATE, componentQrl, isQwikComponent } from './component.public';\nimport { assertDefined, assertTrue } from './error/assert';\nimport { Fragment, JSXNodeImpl, createPropsProxy, isJSXNode, isPropsProxy, } from './jsx/jsx-runtime';\nimport { Slot } from './jsx/slot.public';\nimport { getPlatform } from './platform/platform';\nimport { createQRL, isQrl, isSyncQrl, } from './qrl/qrl-class';\nimport { _CONST_PROPS, _VAR_PROPS } from './utils/constants';\nimport { isElement, isNode } from './utils/element';\nimport { EMPTY_ARRAY, EMPTY_OBJ } from './utils/flyweight';\nimport { throwErrorAndStop } from './utils/log';\nimport { ELEMENT_ID } from './utils/markers';\nimport { isPromise } from './utils/promises';\nimport { fastSkipSerialize } from './utils/serialize-utils';\nimport {} from './utils/types';\nconst deserializedProxyMap = new WeakMap();\nexport const unwrapDeserializerProxy = (value) => {\n    const unwrapped = typeof value === 'object' &&\n        value !== null &&\n        value[SERIALIZER_PROXY_UNWRAP];\n    return unwrapped ? unwrapped : value;\n};\nexport const isDeserializerProxy = (value) => {\n    return typeof value === 'object' && value !== null && SERIALIZER_PROXY_UNWRAP in value;\n};\nexport const SERIALIZER_PROXY_UNWRAP = Symbol('UNWRAP');\n/** Call this on the serialized root state */\nexport const wrapDeserializerProxy = (container, data) => {\n    if (!Array.isArray(data) || // must be an array\n        vnode_isVNode(data) || // and not a VNode or Slot\n        isDeserializerProxy(data) // and not already wrapped\n    ) {\n        return data;\n    }\n    let proxy = deserializedProxyMap.get(data);\n    if (!proxy) {\n        const target = Array(data.length / 2).fill(undefined);\n        proxy = new Proxy(target, new DeserializationHandler(container, data));\n        deserializedProxyMap.set(data, proxy);\n    }\n    return proxy;\n};\nclass DeserializationHandler {\n    constructor($container$, $data$) {\n        this.$container$ = $container$;\n        this.$data$ = $data$;\n        this.$length$ = this.$data$.length / 2;\n    }\n    get(target, property, receiver) {\n        if (property === SERIALIZER_PROXY_UNWRAP) {\n            // Note that this will only be partially filled in\n            return target;\n        }\n        const i = typeof property === 'number'\n            ? property\n            : typeof property === 'string'\n                ? parseInt(property, 10)\n                : NaN;\n        if (Number.isNaN(i) || i < 0 || i >= this.$length$) {\n            const out = Reflect.get(target, property, receiver);\n            return out;\n        }\n        // The serialized data is an array with 2 values for each item\n        const idx = i * 2;\n        const typeId = this.$data$[idx];\n        const value = this.$data$[idx + 1];\n        if (typeId === undefined) {\n            // The value is already cached\n            return value;\n        }\n        const container = this.$container$;\n        const propValue = allocate(container, typeId, value);\n        Reflect.set(target, property, propValue);\n        this.$data$[idx] = undefined;\n        this.$data$[idx + 1] = propValue;\n        /** We stored the reference, so now we can inflate, allowing cycles. */\n        if (typeId >= TypeIds.Error) {\n            inflate(container, propValue, typeId, value);\n        }\n        return propValue;\n    }\n    has(target, property) {\n        if (property === SERIALIZER_PROXY_UNWRAP) {\n            return true;\n        }\n        return Object.prototype.hasOwnProperty.call(target, property);\n    }\n    set(target, property, value, receiver) {\n        if (property === SERIALIZER_PROXY_UNWRAP) {\n            return false;\n        }\n        const out = Reflect.set(target, property, value, receiver);\n        const i = typeof property === 'number' ? property : parseInt(property, 10);\n        if (Number.isNaN(i) || i < 0 || i >= this.$data$.length / 2) {\n            return out;\n        }\n        const idx = i * 2;\n        this.$data$[idx] = undefined;\n        this.$data$[idx + 1] = value;\n        return true;\n    }\n}\n/**\n * Restores an array eagerly. If you need it lazily, use `deserializeData(container, TypeIds.Array,\n * array)` instead\n */\nexport const _eagerDeserializeArray = (container, data) => {\n    const out = Array(data.length / 2);\n    for (let i = 0; i < data.length; i += 2) {\n        out[i / 2] = deserializeData(container, data[i], data[i + 1]);\n    }\n    return out;\n};\nconst resolvers = new WeakMap();\nconst inflate = (container, target, typeId, data) => {\n    if (typeId === undefined) {\n        // Already processed\n        return;\n    }\n    // restore the complex data, except for plain objects\n    if (typeId !== TypeIds.Object && Array.isArray(data)) {\n        data = _eagerDeserializeArray(container, data);\n    }\n    switch (typeId) {\n        case TypeIds.Object:\n            // We use getters for making complex values lazy\n            for (let i = 0; i < data.length; i += 4) {\n                const key = deserializeData(container, data[i], data[i + 1]);\n                const valType = data[i + 2];\n                const valData = data[i + 3];\n                if (valType === TypeIds.RootRef || valType >= TypeIds.Error) {\n                    Object.defineProperty(target, key, {\n                        get() {\n                            return deserializeData(container, valType, valData);\n                        },\n                        set(value) {\n                            Object.defineProperty(target, key, {\n                                value,\n                                writable: true,\n                                enumerable: true,\n                                configurable: true,\n                            });\n                        },\n                        enumerable: true,\n                        configurable: true,\n                    });\n                }\n                else {\n                    target[key] = deserializeData(container, valType, valData);\n                }\n            }\n            break;\n        case TypeIds.QRL:\n            inflateQRL(container, target);\n            break;\n        case TypeIds.Task:\n            const task = target;\n            const v = data;\n            task.$qrl$ = inflateQRL(container, v[0]);\n            task.$flags$ = v[1];\n            task.$index$ = v[2];\n            task.$el$ = v[3];\n            task.$effectDependencies$ = v[4];\n            task.$state$ = v[5];\n            break;\n        case TypeIds.Resource:\n            const [resolved, result, effects] = data;\n            const resource = target;\n            if (resolved) {\n                resource.value = Promise.resolve(result);\n                resource._resolved = result;\n                resource._state = 'resolved';\n            }\n            else {\n                resource.value = Promise.reject(result);\n                resource._error = result;\n                resource._state = 'rejected';\n            }\n            getStoreHandler(target).$effects$ = effects;\n            break;\n        case TypeIds.Component:\n            target[SERIALIZABLE_STATE][0] = data[0];\n            break;\n        case TypeIds.Store:\n        case TypeIds.StoreArray: {\n            const [value, flags, effects, storeEffect] = data;\n            const handler = getStoreHandler(target);\n            handler.$flags$ = flags;\n            // First assign so it sets up the deep stores\n            Object.assign(getStoreTarget(target), value);\n            // Afterwards restore the effects so they don't get triggered\n            if (storeEffect) {\n                effects[STORE_ARRAY_PROP] = storeEffect;\n            }\n            handler.$effects$ = effects;\n            container.$storeProxyMap$.set(value, target);\n            break;\n        }\n        case TypeIds.Signal: {\n            const signal = target;\n            const d = data;\n            signal.$untrackedValue$ = d[0];\n            signal.$effects$ = d.slice(1);\n            break;\n        }\n        case TypeIds.WrappedSignal: {\n            const signal = target;\n            const d = data;\n            signal.$func$ = container.getSyncFn(d[0]);\n            signal.$args$ = d[1];\n            signal.$effectDependencies$ = d[2];\n            signal.$untrackedValue$ = d[3];\n            signal.$effects$ = d.slice(4);\n            break;\n        }\n        case TypeIds.ComputedSignal: {\n            const computed = target;\n            const d = data;\n            computed.$computeQrl$ = d[0];\n            computed.$untrackedValue$ = d[1];\n            computed.$invalid$ = d[2];\n            computed.$effects$ = d.slice(3);\n            break;\n        }\n        case TypeIds.Error: {\n            const d = data;\n            target.message = d[0];\n            const second = d[1];\n            if (second && Array.isArray(second)) {\n                for (let i = 0; i < second.length; i++) {\n                    target[second[i++]] = d[i];\n                }\n                target.stack = d[2];\n            }\n            else {\n                target.stack = second;\n            }\n            break;\n        }\n        case TypeIds.FormData: {\n            const formData = target;\n            const d = data;\n            for (let i = 0; i < d.length; i++) {\n                formData.append(d[i++], d[i]);\n            }\n            break;\n        }\n        case TypeIds.JSXNode: {\n            const jsx = target;\n            const [type, varProps, constProps, children, flags, key] = data;\n            jsx.type = type;\n            jsx.varProps = varProps;\n            jsx.constProps = constProps;\n            jsx.children = children;\n            jsx.flags = flags;\n            jsx.key = key;\n            break;\n        }\n        case TypeIds.Set: {\n            const set = target;\n            const d = data;\n            for (let i = 0; i < d.length; i++) {\n                set.add(d[i]);\n            }\n            break;\n        }\n        case TypeIds.Map: {\n            const map = target;\n            const d = data;\n            for (let i = 0; i < d.length; i++) {\n                map.set(d[i++], d[i]);\n            }\n            break;\n        }\n        case TypeIds.Promise: {\n            const promise = target;\n            const [resolved, result] = data;\n            const [resolve, reject] = resolvers.get(promise);\n            if (resolved) {\n                resolve(result);\n            }\n            else {\n                reject(result);\n            }\n            break;\n        }\n        case TypeIds.Uint8Array:\n            const bytes = target;\n            const buf = atob(data);\n            let i = 0;\n            for (const s of buf) {\n                bytes[i++] = s.charCodeAt(0);\n            }\n            break;\n        case TypeIds.PropsProxy:\n            const propsProxy = target;\n            propsProxy[_VAR_PROPS] = data[0];\n            propsProxy[_CONST_PROPS] = data[1];\n            break;\n        case TypeIds.EffectData: {\n            const effectData = target;\n            effectData.data = data[0];\n            break;\n        }\n        default:\n            return throwErrorAndStop('Not implemented');\n    }\n};\nexport const _constants = [\n    undefined,\n    null,\n    true,\n    false,\n    '',\n    EMPTY_ARRAY,\n    EMPTY_OBJ,\n    NEEDS_COMPUTATION,\n    Slot,\n    Fragment,\n    NaN,\n    Infinity,\n    -Infinity,\n    Number.MAX_SAFE_INTEGER,\n    Number.MAX_SAFE_INTEGER - 1,\n    Number.MIN_SAFE_INTEGER,\n];\nconst _constantNames = [\n    'undefined',\n    'null',\n    'true',\n    'false',\n    \"''\",\n    'EMPTY_ARRAY',\n    'EMPTY_OBJ',\n    'NEEDS_COMPUTATION',\n    'Slot',\n    'Fragment',\n    'NaN',\n    'Infinity',\n    '-Infinity',\n    'MAX_SAFE_INTEGER',\n    'MAX_SAFE_INTEGER-1',\n    'MIN_SAFE_INTEGER',\n];\nconst allocate = (container, typeId, value) => {\n    if (value === undefined) {\n        // When a value was already processed, the result is stored in type\n        return typeId;\n    }\n    switch (typeId) {\n        case TypeIds.RootRef:\n            return container.$getObjectById$(value);\n        case TypeIds.Constant:\n            return _constants[value];\n        case TypeIds.Number:\n            return value;\n        case TypeIds.Array:\n            return wrapDeserializerProxy(container, value);\n        case TypeIds.Object:\n            return {};\n        case TypeIds.QRL:\n            return parseQRL(value);\n        case TypeIds.Task:\n            return new Task(-1, -1, null, null, null, null);\n        case TypeIds.Resource: {\n            const res = createResourceReturn(container, \n            // we don't care about the timeout value\n            undefined, undefined);\n            res.loading = false;\n            return res;\n        }\n        case TypeIds.URL:\n            return new URL(value);\n        case TypeIds.Date:\n            return new Date(value);\n        case TypeIds.Regex:\n            const idx = value.lastIndexOf('/');\n            return new RegExp(value.slice(1, idx), value.slice(idx + 1));\n        case TypeIds.Error:\n            return new Error();\n        case TypeIds.Component:\n            return componentQrl(null);\n        case TypeIds.Signal:\n            return new Signal(container, 0);\n        case TypeIds.WrappedSignal:\n            return new WrappedSignal(container, null, null, null);\n        case TypeIds.ComputedSignal:\n            return new ComputedSignal(container, null);\n        case TypeIds.Store:\n            return createStore(container, {}, 0);\n        case TypeIds.StoreArray:\n            return createStore(container, [], 0);\n        case TypeIds.URLSearchParams:\n            return new URLSearchParams(value);\n        case TypeIds.FormData:\n            return new FormData();\n        case TypeIds.JSXNode:\n            return new JSXNodeImpl(null, null, null, null, -1, null);\n        case TypeIds.BigInt:\n            return BigInt(value);\n        case TypeIds.Set:\n            return new Set();\n        case TypeIds.Map:\n            return new Map();\n        case TypeIds.String:\n            return value;\n        case TypeIds.Promise:\n            let resolve;\n            let reject;\n            const promise = new Promise((res, rej) => {\n                resolve = res;\n                reject = rej;\n            });\n            resolvers.set(promise, [resolve, reject]);\n            return promise;\n        case TypeIds.Uint8Array:\n            const encodedLength = value.length;\n            const blocks = encodedLength >>> 2;\n            const rest = encodedLength & 3;\n            const decodedLength = blocks * 3 + (rest ? rest - 1 : 0);\n            return new Uint8Array(decodedLength);\n        case TypeIds.PropsProxy:\n            return createPropsProxy(null, null);\n        case TypeIds.VNode:\n            // Retrieve the VNode from the container\n            return retrieveVNodeOrDocument(container, value);\n        case TypeIds.RefVNode:\n            const vNode = retrieveVNodeOrDocument(container, value);\n            if (vnode_isVNode(vNode)) {\n                return vnode_getNode(vNode);\n            }\n            else {\n                return throwErrorAndStop('expected vnode for ref prop, but got ' + typeof vNode);\n            }\n        case TypeIds.EffectData:\n            return new EffectData(null);\n        default:\n            return throwErrorAndStop('unknown allocate type: ' + typeId);\n    }\n};\nfunction retrieveVNodeOrDocument(container, value) {\n    return value\n        ? container.rootVNode\n            ? vnode_locate(container.rootVNode, value)\n            : undefined\n        : container.element?.ownerDocument;\n}\n/** Parses \"chunk#hash[...rootRef]\" */\nexport function parseQRL(qrl) {\n    const hashIdx = qrl.indexOf('#');\n    const captureStart = qrl.indexOf('[', hashIdx);\n    const captureEnd = qrl.indexOf(']', captureStart);\n    const chunk = hashIdx > -1 ? qrl.slice(0, hashIdx) : qrl.slice(0, captureStart);\n    const symbol = captureStart > -1 ? qrl.slice(hashIdx + 1, captureStart) : qrl.slice(hashIdx + 1);\n    const captureIds = captureStart > -1 && captureEnd > -1\n        ? qrl\n            .slice(captureStart + 1, captureEnd)\n            .split(' ')\n            .filter((v) => v.length)\n            .map((s) => parseInt(s, 10))\n        : null;\n    let qrlRef = null;\n    if (isDev && chunk === QRL_RUNTIME_CHUNK) {\n        const backChannel = globalThis[QRL_RUNTIME_CHUNK];\n        assertDefined(backChannel, 'Missing QRL_RUNTIME_CHUNK');\n        qrlRef = backChannel.get(symbol);\n    }\n    return createQRL(chunk, symbol, qrlRef, null, captureIds, null, null);\n}\nexport function inflateQRL(container, qrl) {\n    const captureIds = qrl.$capture$;\n    qrl.$captureRef$ = captureIds ? captureIds.map((id) => container.$getObjectById$(id)) : null;\n    if (container.element) {\n        qrl.$setContainer$(container.element);\n    }\n    return qrl;\n}\n/** A ref to a DOM element */\nclass DomVRef {\n    constructor(id) {\n        this.id = id;\n    }\n}\nexport const createSerializationContext = (\n/**\n * Node constructor, for instanceof checks.\n *\n * A node constructor can be null. For example on the client we can't serialize DOM nodes as\n * server will not know what to do with them.\n */\nNodeConstructor, symbolToChunkResolver, getProp, setProp, storeProxyMap, writer) => {\n    if (!writer) {\n        const buffer = [];\n        writer = {\n            write: (text) => buffer.push(text),\n            toString: () => buffer.join(''),\n        };\n    }\n    const map = new Map();\n    const syncFnMap = new Map();\n    const syncFns = [];\n    const roots = [];\n    const $wasSeen$ = (obj) => map.get(obj);\n    const $seen$ = (obj) => map.set(obj, -1);\n    const $addRoot$ = (obj) => {\n        let id = map.get(obj);\n        if (typeof id !== 'number' || id === -1) {\n            id = roots.length;\n            map.set(obj, id);\n            roots.push(obj);\n        }\n        return id;\n    };\n    const isSsrNode = (NodeConstructor ? (obj) => obj instanceof NodeConstructor : () => false);\n    return {\n        $serialize$() {\n            serialize(this);\n        },\n        $isSsrNode$: isSsrNode,\n        $symbolToChunkResolver$: symbolToChunkResolver,\n        $wasSeen$,\n        $roots$: roots,\n        $seen$,\n        $hasRootId$: (obj) => {\n            const id = map.get(obj);\n            return id === undefined || id === -1 ? undefined : id;\n        },\n        $addRoot$,\n        $getRootId$: (obj) => {\n            const id = map.get(obj);\n            if (!id || id === -1) {\n                return throwErrorAndStop('Missing root id for: ' + obj);\n            }\n            return id;\n        },\n        $syncFns$: syncFns,\n        $addSyncFn$: (funcStr, argCount, fn) => {\n            const isFullFn = funcStr == null;\n            if (isFullFn) {\n                funcStr = fn.serialized || fn.toString();\n            }\n            let id = syncFnMap.get(funcStr);\n            if (id === undefined) {\n                id = syncFns.length;\n                syncFnMap.set(funcStr, id);\n                if (isFullFn) {\n                    syncFns.push(funcStr);\n                }\n                else {\n                    let code = '(';\n                    for (let i = 0; i < argCount; i++) {\n                        code += (i == 0 ? 'p' : ',p') + i;\n                    }\n                    syncFns.push((code += ')=>' + funcStr));\n                }\n            }\n            return id;\n        },\n        $writer$: writer,\n        $breakCircularDepsAndAwaitPromises$: breakCircularDependenciesAndResolvePromises,\n        $eventQrls$: new Set(),\n        $eventNames$: new Set(),\n        $resources$: new Set(),\n        $renderSymbols$: new Set(),\n        $storeProxyMap$: storeProxyMap,\n        $getProp$: getProp,\n        $setProp$: setProp,\n    };\n    async function breakCircularDependenciesAndResolvePromises() {\n        // As we walk the object graph we insert newly discovered objects which need to be scanned here.\n        const discoveredValues = [];\n        const promises = [];\n        /**\n         * Note on out of order streaming:\n         *\n         * When we implement that, we may need to send a reference to an object that was streamed\n         * earlier but wasn't a root. This means we'll have to keep track of all objects on both send\n         * and receive ends, which means we'll just have to make everything a root anyway, so `visit()`\n         * won't be needed.\n         */\n        /** Visit an object, adding anything that will be serialized as to scan */\n        const visit = (obj) => {\n            if (typeof obj === 'function') {\n                if (isQrl(obj)) {\n                    if (obj.$captureRef$) {\n                        discoveredValues.push(...obj.$captureRef$);\n                    }\n                }\n                else if (isQwikComponent(obj)) {\n                    const [qrl] = obj[SERIALIZABLE_STATE];\n                    discoveredValues.push(qrl);\n                }\n            }\n            else if (\n            // skip as these are primitives\n            typeof obj !== 'object' ||\n                obj === null ||\n                obj instanceof URL ||\n                obj instanceof Date ||\n                obj instanceof RegExp ||\n                obj instanceof Uint8Array ||\n                obj instanceof URLSearchParams ||\n                (typeof FormData !== 'undefined' && obj instanceof FormData) ||\n                // Ignore the no serialize objects\n                fastSkipSerialize(obj)) {\n                // ignore\n            }\n            else if (obj instanceof Error) {\n                discoveredValues.push(...Object.values(obj));\n            }\n            else if (isStore(obj)) {\n                const target = getStoreTarget(obj);\n                const effects = getStoreHandler(obj).$effects$;\n                discoveredValues.push(target, effects);\n                for (const prop in target) {\n                    const propValue = target[prop];\n                    if (storeProxyMap.has(propValue)) {\n                        discoveredValues.push(prop, storeProxyMap.get(propValue));\n                    }\n                }\n            }\n            else if (obj instanceof Set) {\n                discoveredValues.push(...obj.values());\n            }\n            else if (obj instanceof Map) {\n                obj.forEach((v, k) => {\n                    discoveredValues.push(k, v);\n                });\n            }\n            else if (obj instanceof Signal) {\n                /**\n                 * WrappedSignal might not be calculated yet so we need to use `untrackedValue` to get the\n                 * value. ComputedSignal can be left uncalculated.\n                 */\n                const v = obj instanceof WrappedSignal\n                    ? obj.untrackedValue\n                    : obj instanceof ComputedSignal && (obj.$invalid$ || fastSkipSerialize(obj))\n                        ? NEEDS_COMPUTATION\n                        : obj.$untrackedValue$;\n                if (v !== NEEDS_COMPUTATION && !isSsrNode(v)) {\n                    discoveredValues.push(obj.$untrackedValue$);\n                }\n                if (obj.$effects$) {\n                    discoveredValues.push(...obj.$effects$);\n                }\n                // WrappedSignal uses syncQrl which has no captured refs\n                if (obj instanceof WrappedSignal) {\n                    if (obj.$effectDependencies$) {\n                        discoveredValues.push(...obj.$effectDependencies$);\n                    }\n                }\n                else if (obj instanceof ComputedSignal) {\n                    discoveredValues.push(obj.$computeQrl$);\n                }\n            }\n            else if (obj instanceof Task) {\n                discoveredValues.push(obj.$el$, obj.$qrl$, obj.$state$, obj.$effectDependencies$);\n            }\n            else if (isSsrNode(obj)) {\n                // ignore the nodes\n                // debugger;\n            }\n            else if (isJSXNode(obj)) {\n                discoveredValues.push(obj.type, obj.props, obj.constProps, obj.children);\n            }\n            else if (Array.isArray(obj)) {\n                discoveredValues.push(...obj);\n            }\n            else if (isQrl(obj)) {\n                obj.$captureRef$ && obj.$captureRef$.length && discoveredValues.push(...obj.$captureRef$);\n            }\n            else if (isPropsProxy(obj)) {\n                discoveredValues.push(obj[_VAR_PROPS], obj[_CONST_PROPS]);\n            }\n            else if (isPromise(obj)) {\n                obj.then((value) => {\n                    promiseResults.set(obj, [true, value]);\n                    discoveredValues.push(value);\n                }, (error) => {\n                    promiseResults.set(obj, [false, error]);\n                    discoveredValues.push(error);\n                });\n                promises.push(obj);\n            }\n            else if (obj instanceof EffectData) {\n                discoveredValues.push(obj.data);\n            }\n            else if (isObjectLiteral(obj)) {\n                Object.entries(obj).forEach(([key, value]) => {\n                    discoveredValues.push(key, value);\n                });\n            }\n            else {\n                return throwErrorAndStop('Unknown type: ' + obj);\n            }\n        };\n        // Prime the pump with the root objects.\n        for (const root of roots) {\n            visit(root);\n        }\n        do {\n            while (discoveredValues.length) {\n                const obj = discoveredValues.pop();\n                if (!(shouldTrackObj(obj) || frameworkType(obj))) {\n                    continue;\n                }\n                const id = $wasSeen$(obj);\n                if (id === undefined) {\n                    // Object has not been seen yet, must scan content\n                    $seen$(obj);\n                    visit(obj);\n                }\n                else if (id === -1) {\n                    // We are seeing this object second time => promote it.\n                    $addRoot$(obj);\n                    // we don't need to scan the children, since we have already seen them.\n                }\n            }\n            // We have scanned all the objects, but we still have promises to resolve.\n            await Promise.allSettled(promises);\n            promises.length = 0;\n        } while (discoveredValues.length);\n    }\n};\nconst promiseResults = new WeakMap();\n/**\n * Format:\n *\n * - This encodes the $roots$ array.\n * - The output is a string of comma separated JSON values.\n * - Even values are always numbers, specifying the type of the next value.\n * - Odd values are numbers, strings (JSON stringified with `</` escaping) or arrays (same format).\n * - Therefore root indexes need to be doubled to get the actual index.\n */\nfunction serialize(serializationContext) {\n    const { $writer$, $isSsrNode$, $setProp$, $storeProxyMap$ } = serializationContext;\n    let depth = -1;\n    // Skip the type for the roots output\n    let writeType = false;\n    const output = (type, value) => {\n        if (writeType) {\n            $writer$.write(`${type},`);\n        }\n        else {\n            writeType = true;\n        }\n        if (typeof value === 'number') {\n            $writer$.write(value.toString());\n        }\n        else if (typeof value === 'string') {\n            const s = JSON.stringify(value);\n            let angleBracketIdx = -1;\n            let lastIdx = 0;\n            while ((angleBracketIdx = s.indexOf('</', lastIdx)) !== -1) {\n                $writer$.write(s.slice(lastIdx, angleBracketIdx));\n                $writer$.write('<\\\\/');\n                lastIdx = angleBracketIdx + 2;\n            }\n            $writer$.write(lastIdx === 0 ? s : s.slice(lastIdx));\n        }\n        else {\n            depth++;\n            $writer$.write('[');\n            let separator = false;\n            // TODO only until last non-null value\n            for (let i = 0; i < value.length; i++) {\n                if (separator) {\n                    $writer$.write(',');\n                }\n                else {\n                    separator = true;\n                }\n                writeValue(value[i], i);\n            }\n            $writer$.write(']');\n            depth--;\n        }\n    };\n    const writeValue = (value, idx) => {\n        if (fastSkipSerialize(value)) {\n            output(TypeIds.Constant, Constants.Undefined);\n        }\n        else if (typeof value === 'bigint') {\n            output(TypeIds.BigInt, value.toString());\n        }\n        else if (typeof value === 'boolean') {\n            output(TypeIds.Constant, value ? Constants.True : Constants.False);\n        }\n        else if (typeof value === 'function') {\n            if (value === Slot) {\n                output(TypeIds.Constant, Constants.Slot);\n            }\n            else if (value === Fragment) {\n                output(TypeIds.Constant, Constants.Fragment);\n            }\n            else if (isQrl(value)) {\n                // TODO deduplicate the string\n                output(TypeIds.QRL, qrlToString(serializationContext, value));\n            }\n            else if (isQwikComponent(value)) {\n                const [qrl] = value[SERIALIZABLE_STATE];\n                serializationContext.$renderSymbols$.add(qrl.$symbol$);\n                output(TypeIds.Component, [qrl]);\n            }\n            else {\n                // TODO this happens for inline components with render props like Resource\n                console.error('Cannot serialize function (ignoring for now): ' + value.toString());\n                output(TypeIds.Constant, Constants.Undefined);\n            }\n        }\n        else if (typeof value === 'number') {\n            if (Number.isNaN(value)) {\n                output(TypeIds.Constant, Constants.NaN);\n            }\n            else if (!Number.isFinite(value)) {\n                output(TypeIds.Constant, value < 0 ? Constants.NegativeInfinity : Constants.PositiveInfinity);\n            }\n            else if (value === Number.MAX_SAFE_INTEGER) {\n                output(TypeIds.Constant, Constants.MaxSafeInt);\n            }\n            else if (value === Number.MAX_SAFE_INTEGER - 1) {\n                output(TypeIds.Constant, Constants.AlmostMaxSafeInt);\n            }\n            else if (value === Number.MIN_SAFE_INTEGER) {\n                output(TypeIds.Constant, Constants.MinSafeInt);\n            }\n            else {\n                output(TypeIds.Number, value);\n            }\n        }\n        else if (typeof value === 'object') {\n            if (value === EMPTY_ARRAY) {\n                output(TypeIds.Constant, Constants.EMPTY_ARRAY);\n            }\n            else if (value === EMPTY_OBJ) {\n                output(TypeIds.Constant, Constants.EMPTY_OBJ);\n            }\n            else {\n                depth++;\n                if (value === null) {\n                    output(TypeIds.Constant, Constants.Null);\n                }\n                else {\n                    writeObjectValue(value, idx);\n                }\n                depth--;\n            }\n        }\n        else if (typeof value === 'string') {\n            if (value.length === 0) {\n                output(TypeIds.Constant, Constants.EmptyString);\n            }\n            else {\n                // Note, in v1 we were reusing DOM text, but that is too dangerous with translation extensions changing the text\n                const seen = depth > 1 && serializationContext.$wasSeen$(value);\n                if (typeof seen === 'number' && seen >= 0) {\n                    output(TypeIds.RootRef, seen);\n                }\n                else {\n                    output(TypeIds.String, value);\n                }\n            }\n        }\n        else if (typeof value === 'undefined') {\n            output(TypeIds.Constant, Constants.Undefined);\n        }\n        else if (value === NEEDS_COMPUTATION) {\n            output(TypeIds.Constant, Constants.NEEDS_COMPUTATION);\n        }\n        else {\n            throwErrorAndStop('Unknown type: ' + typeof value);\n        }\n    };\n    const writeObjectValue = (value, idx) => {\n        /**\n         * We start at -1 and then serialize the roots array, which is an object so increases depth to\n         * 0. The object writer then outputs an array object (without type prefix) and this increases\n         * the depth for the objects within (depth 1). Then when writeValue encounters each root object,\n         * it will increase the depth again, so it's at 2.\n         */\n        const isRootObject = depth === 2;\n        // Objects are the only way to create circular dependencies.\n        // So the first thing to to is to see if we have a circular dependency.\n        // (NOTE: For root objects we need to serialize them regardless if we have seen\n        //        them before, otherwise the root object reference will point to itself.)\n        // Also note that depth will be 2 for objects in root\n        if (depth > 2) {\n            const seen = serializationContext.$wasSeen$(value);\n            if (typeof seen === 'number' && seen >= 0) {\n                // We have seen this object before, so we can serialize it as a reference.\n                // Otherwise serialize as normal\n                output(TypeIds.RootRef, seen);\n                return;\n            }\n        }\n        if (isPropsProxy(value)) {\n            const varProps = value[_VAR_PROPS];\n            const constProps = value[_CONST_PROPS];\n            output(TypeIds.PropsProxy, [varProps, constProps]);\n        }\n        else if (value instanceof EffectData) {\n            output(TypeIds.EffectData, [value.data]);\n        }\n        else if (isStore(value)) {\n            if (isResource(value)) {\n                // let render know about the resource\n                serializationContext.$resources$.add(value);\n                const res = promiseResults.get(value.value);\n                if (!res) {\n                    return throwErrorAndStop('Unvisited Resource');\n                }\n                output(TypeIds.Resource, [...res, getStoreHandler(value).$effects$]);\n            }\n            else {\n                const storeHandler = getStoreHandler(value);\n                const storeTarget = getStoreTarget(value);\n                const flags = storeHandler.$flags$;\n                const effects = storeHandler.$effects$;\n                const storeEffect = effects?.[STORE_ARRAY_PROP] ?? null;\n                const innerStores = [];\n                for (const prop in storeTarget) {\n                    const propValue = storeTarget[prop];\n                    if ($storeProxyMap$.has(propValue)) {\n                        const innerStore = $storeProxyMap$.get(propValue);\n                        innerStores.push(innerStore);\n                        serializationContext.$addRoot$(innerStore);\n                    }\n                }\n                const out = [storeTarget, flags, effects, storeEffect, ...innerStores];\n                while (out[out.length - 1] == null) {\n                    out.pop();\n                }\n                output(Array.isArray(storeTarget) ? TypeIds.StoreArray : TypeIds.Store, out);\n            }\n        }\n        else if (isObjectLiteral(value)) {\n            if (Array.isArray(value)) {\n                output(TypeIds.Array, value);\n            }\n            else {\n                const out = [];\n                for (const key in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, key) &&\n                        !fastSkipSerialize(value[key])) {\n                        out.push(key, value[key]);\n                    }\n                }\n                // TODO if !out.length, output 0 and restore as {}\n                output(TypeIds.Object, out);\n            }\n        }\n        else if (value instanceof DomVRef) {\n            output(TypeIds.RefVNode, value.id);\n        }\n        else if (value instanceof Signal) {\n            /**\n             * Special case: when a Signal value is an SSRNode, it always needs to be a DOM ref instead.\n             * It can never be meant to become a vNode, because vNodes are internal only.\n             */\n            let v = value instanceof ComputedSignal &&\n                (value.$invalid$ || fastSkipSerialize(value.$untrackedValue$))\n                ? NEEDS_COMPUTATION\n                : value.$untrackedValue$;\n            if ($isSsrNode$(v)) {\n                v = new DomVRef(v.id);\n            }\n            if (value instanceof WrappedSignal) {\n                output(TypeIds.WrappedSignal, [\n                    ...serializeWrappingFn(serializationContext, value),\n                    value.$effectDependencies$,\n                    v,\n                    ...(value.$effects$ || []),\n                ]);\n            }\n            else if (value instanceof ComputedSignal) {\n                output(TypeIds.ComputedSignal, [\n                    value.$computeQrl$,\n                    v,\n                    v === NEEDS_COMPUTATION,\n                    // TODO check if we can use domVRef for effects\n                    ...(value.$effects$ || []),\n                ]);\n            }\n            else {\n                output(TypeIds.Signal, [v, ...(value.$effects$ || [])]);\n            }\n        }\n        else if (value instanceof URL) {\n            output(TypeIds.URL, value.href);\n        }\n        else if (value instanceof Date) {\n            output(TypeIds.Date, Number.isNaN(value.valueOf()) ? '' : value.valueOf());\n        }\n        else if (value instanceof RegExp) {\n            output(TypeIds.Regex, value.toString());\n        }\n        else if (value instanceof Error) {\n            const out = [value.message];\n            const extraProps = Object.entries(value).flat();\n            if (extraProps.length) {\n                out.push(extraProps);\n            }\n            /// In production we don't want to leak the stack trace.\n            if (isDev) {\n                out.push(value.stack);\n            }\n            output(TypeIds.Error, out);\n        }\n        else if ($isSsrNode$(value)) {\n            if (isRootObject) {\n                // Tell the SsrNode which root id it is\n                $setProp$(value, ELEMENT_ID, String(idx));\n                output(TypeIds.VNode, value.id);\n            }\n            else {\n                // Promote the vnode to a root\n                serializationContext.$addRoot$(value);\n                output(TypeIds.RootRef, serializationContext.$roots$.length - 1);\n            }\n        }\n        else if (typeof FormData !== 'undefined' && value instanceof FormData) {\n            // FormData is generally used only once so don't bother with references\n            const array = [];\n            value.forEach((value, key) => {\n                if (typeof value === 'string') {\n                    array.push(key, value);\n                }\n                else {\n                    array.push(key, value.name);\n                }\n            });\n            output(TypeIds.FormData, array);\n        }\n        else if (value instanceof URLSearchParams) {\n            output(TypeIds.URLSearchParams, value.toString());\n        }\n        else if (value instanceof Set) {\n            output(TypeIds.Set, [...value.values()]);\n        }\n        else if (value instanceof Map) {\n            const combined = [];\n            for (const [k, v] of value.entries()) {\n                combined.push(k, v);\n            }\n            output(TypeIds.Map, combined);\n        }\n        else if (isJSXNode(value)) {\n            output(TypeIds.JSXNode, [\n                value.type,\n                value.varProps,\n                value.constProps,\n                value.children,\n                value.flags,\n                value.key,\n            ]);\n        }\n        else if (value instanceof Task) {\n            const out = [\n                value.$qrl$,\n                value.$flags$,\n                value.$index$,\n                value.$el$,\n                value.$effectDependencies$,\n                value.$state$,\n            ];\n            while (out[out.length - 1] == null) {\n                out.pop();\n            }\n            output(TypeIds.Task, out);\n        }\n        else if (isPromise(value)) {\n            const res = promiseResults.get(value);\n            if (!res) {\n                return throwErrorAndStop('Unvisited Promise');\n            }\n            output(TypeIds.Promise, res);\n        }\n        else if (value instanceof Uint8Array) {\n            let buf = '';\n            for (const c of value) {\n                buf += String.fromCharCode(c);\n            }\n            const out = btoa(buf).replace(/=+$/, '');\n            output(TypeIds.Uint8Array, out);\n        }\n        else {\n            return throwErrorAndStop('implement');\n        }\n    };\n    writeValue(serializationContext.$roots$, -1);\n}\nfunction serializeWrappingFn(serializationContext, value) {\n    // if value is an object then we need to wrap this in ()\n    if (value.$funcStr$ && value.$funcStr$[0] === '{') {\n        value.$funcStr$ = `(${value.$funcStr$})`;\n    }\n    const syncFnId = serializationContext.$addSyncFn$(value.$funcStr$, value.$args$.length, value.$func$);\n    // TODO null if no args\n    return [syncFnId, value.$args$];\n}\nexport function qrlToString(serializationContext, value) {\n    let symbol = value.$symbol$;\n    let chunk = value.$chunk$;\n    const refSymbol = value.$refSymbol$ ?? symbol;\n    const platform = getPlatform();\n    if (platform) {\n        const result = platform.chunkForSymbol(refSymbol, chunk, value.dev?.file);\n        if (result) {\n            chunk = result[1];\n            if (!value.$refSymbol$) {\n                symbol = result[0];\n            }\n        }\n    }\n    const isSync = isSyncQrl(value);\n    if (!isSync) {\n        // If we have a symbol we need to resolve the chunk.\n        if (!chunk) {\n            chunk = serializationContext.$symbolToChunkResolver$(value.$hash$);\n        }\n        // in Dev mode we need to keep track of the symbols\n        if (isDev) {\n            let backChannel = globalThis[QRL_RUNTIME_CHUNK];\n            if (!backChannel) {\n                backChannel = globalThis[QRL_RUNTIME_CHUNK] = new Map();\n            }\n            backChannel.set(value.$symbol$, value._devOnlySymbolRef);\n            if (!chunk) {\n                chunk = QRL_RUNTIME_CHUNK;\n            }\n        }\n        if (!chunk) {\n            throwErrorAndStop('Missing chunk for: ' + value.$symbol$);\n        }\n        if (chunk.startsWith('./')) {\n            chunk = chunk.slice(2);\n        }\n    }\n    else {\n        const fn = value.resolved;\n        chunk = '';\n        // TODO test that provided stringified fn is used\n        symbol = String(serializationContext.$addSyncFn$(null, 0, fn));\n    }\n    let qrlStringInline = `${chunk}#${symbol}`;\n    if (Array.isArray(value.$captureRef$) && value.$captureRef$.length > 0) {\n        let serializedReferences = '';\n        // hot-path optimization\n        for (let i = 0; i < value.$captureRef$.length; i++) {\n            if (i > 0) {\n                serializedReferences += ' ';\n            }\n            // We refer by id so every capture needs to be a root\n            serializedReferences += serializationContext.$addRoot$(value.$captureRef$[i]);\n        }\n        qrlStringInline += `[${serializedReferences}]`;\n    }\n    else if (value.$capture$ && value.$capture$.length > 0) {\n        qrlStringInline += `[${value.$capture$.join(' ')}]`;\n    }\n    return qrlStringInline;\n}\n/**\n * Serialize data to string using SerializationContext.\n *\n * @param data - Data to serialize\n * @internal\n */\nexport async function _serialize(data) {\n    const serializationContext = createSerializationContext(null, () => '', () => '', () => { }, new WeakMap());\n    for (const root of data) {\n        serializationContext.$addRoot$(root);\n    }\n    await serializationContext.$breakCircularDepsAndAwaitPromises$();\n    serializationContext.$serialize$();\n    return serializationContext.$writer$.toString();\n}\n/**\n * Deserialize data from string to an array of objects.\n *\n * @param rawStateData - Data to deserialize\n * @param element - Container element\n * @internal\n */\nexport function _deserialize(rawStateData, element) {\n    if (rawStateData == null) {\n        return [];\n    }\n    const stateData = JSON.parse(rawStateData);\n    if (!Array.isArray(stateData)) {\n        return [];\n    }\n    let container = undefined;\n    if (isNode(element) && isElement(element)) {\n        container = _createDeserializeContainer(stateData, element);\n    }\n    else {\n        container = _createDeserializeContainer(stateData);\n    }\n    const output = [];\n    for (let i = 0; i < stateData.length; i += 2) {\n        output[i / 2] = deserializeData(container, stateData[i], stateData[i + 1]);\n    }\n    return output;\n}\nfunction deserializeData(container, typeId, propValue) {\n    if (typeId === undefined) {\n        return propValue;\n    }\n    const value = allocate(container, typeId, propValue);\n    if (typeId >= TypeIds.Error) {\n        inflate(container, value, typeId, propValue);\n    }\n    return value;\n}\nfunction getObjectById(id, stateData) {\n    if (typeof id === 'string') {\n        id = parseInt(id, 10);\n    }\n    assertTrue(id < stateData.length, `Invalid reference ${id} >= ${stateData.length}`);\n    return stateData[id];\n}\nexport function _createDeserializeContainer(stateData, element) {\n    // eslint-disable-next-line prefer-const\n    let state;\n    const container = {\n        $getObjectById$: (id) => getObjectById(id, state),\n        getSyncFn: (_) => {\n            const fn = () => { };\n            return fn;\n        },\n        $storeProxyMap$: new WeakMap(),\n        element: null,\n    };\n    state = wrapDeserializerProxy(container, stateData);\n    container.$state$ = state;\n    if (element) {\n        container.element = element;\n    }\n    return container;\n}\n/**\n * Tracking all objects in the map would be expensive. For this reason we only track some of the\n * objects.\n *\n * For example we skip:\n *\n * - Short strings\n * - Anything which is not an object. (ie. number, boolean, null, undefined)\n *\n * @param obj\n * @returns\n */\nfunction shouldTrackObj(obj) {\n    return ((typeof obj === 'object' && obj !== null) ||\n        /**\n         * We track all strings greater than 1 character, because those take at least 6 bytes to encode\n         * and even with 999 root objects it saves one byte per reference. Tracking more objects makes\n         * the map bigger so we want to strike a balance\n         */\n        (typeof obj === 'string' && obj.length > 1)\n    // THINK: Not sure if we need to keep track of functions (QRLs) Let's skip them for now.\n    // and see if we have a test case which requires them.\n    );\n}\n/**\n * When serializing the object we need check if it is URL, RegExp, Map, Set, etc. This is time\n * consuming. So if we could know that this is a basic object literal we could skip the check, and\n * only run the checks for objects which are not object literals.\n *\n * So this function is here for performance to short circuit many checks later.\n *\n * @param obj\n */\nfunction isObjectLiteral(obj) {\n    // We are an object literal if:\n    // - we are a direct instance of object OR\n    // - we are an array\n    // In all other cases it is a subclass which requires more checks.\n    const prototype = Object.getPrototypeOf(obj);\n    return prototype == null || prototype === Object.prototype || prototype === Array.prototype;\n}\nfunction isResource(value) {\n    return '__brand' in value && value.__brand === 'resource';\n}\nconst frameworkType = (obj) => {\n    return ((typeof obj === 'object' &&\n        obj !== null &&\n        (obj instanceof Signal || obj instanceof Task || isJSXNode(obj))) ||\n        isQrl(obj));\n};\nexport const canSerialize = (value) => {\n    if (value == null ||\n        typeof value === 'string' ||\n        typeof value === 'number' ||\n        typeof value === 'boolean' ||\n        typeof value === 'bigint') {\n        return true;\n    }\n    else if (typeof value === 'object') {\n        const proto = Object.getPrototypeOf(value);\n        if (isStore(value)) {\n            value = getStoreTarget(value);\n        }\n        if (proto == Object.prototype) {\n            for (const key in value) {\n                if (!canSerialize(value[key])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        else if (proto == Array.prototype) {\n            for (let i = 0; i < value.length; i++) {\n                if (!canSerialize(value[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        else if (isTask(value)) {\n            return true;\n        }\n        else if (isPropsProxy(value)) {\n            return true;\n        }\n        else if (isPromise(value)) {\n            return true;\n        }\n        else if (isJSXNode(value)) {\n            return true;\n        }\n        else if (value instanceof Error) {\n            return true;\n        }\n        else if (value instanceof URL) {\n            return true;\n        }\n        else if (value instanceof Date) {\n            return true;\n        }\n        else if (value instanceof RegExp) {\n            return true;\n        }\n        else if (value instanceof URLSearchParams) {\n            return true;\n        }\n        else if (value instanceof FormData) {\n            return true;\n        }\n        else if (value instanceof Set) {\n            return true;\n        }\n        else if (value instanceof Map) {\n            return true;\n        }\n        else if (value instanceof Uint8Array) {\n            return true;\n        }\n    }\n    else if (typeof value === 'function') {\n        if (isQrl(value) || isQwikComponent(value)) {\n            return true;\n        }\n    }\n    return false;\n};\nconst QRL_RUNTIME_CHUNK = 'mock-chunk';\nexport var TypeIds;\n(function (TypeIds) {\n    TypeIds[TypeIds[\"RootRef\"] = 0] = \"RootRef\";\n    /** Undefined, null, true, false, NaN, +Inf, -Inf, Slot, Fragment */\n    TypeIds[TypeIds[\"Constant\"] = 1] = \"Constant\";\n    TypeIds[TypeIds[\"Number\"] = 2] = \"Number\";\n    TypeIds[TypeIds[\"String\"] = 3] = \"String\";\n    TypeIds[TypeIds[\"Array\"] = 4] = \"Array\";\n    TypeIds[TypeIds[\"URL\"] = 5] = \"URL\";\n    TypeIds[TypeIds[\"Date\"] = 6] = \"Date\";\n    TypeIds[TypeIds[\"Regex\"] = 7] = \"Regex\";\n    TypeIds[TypeIds[\"VNode\"] = 8] = \"VNode\";\n    TypeIds[TypeIds[\"RefVNode\"] = 9] = \"RefVNode\";\n    TypeIds[TypeIds[\"BigInt\"] = 10] = \"BigInt\";\n    TypeIds[TypeIds[\"URLSearchParams\"] = 11] = \"URLSearchParams\";\n    /// All values below need inflation because they may have reference cycles\n    TypeIds[TypeIds[\"Error\"] = 12] = \"Error\";\n    TypeIds[TypeIds[\"Object\"] = 13] = \"Object\";\n    TypeIds[TypeIds[\"Promise\"] = 14] = \"Promise\";\n    TypeIds[TypeIds[\"Set\"] = 15] = \"Set\";\n    TypeIds[TypeIds[\"Map\"] = 16] = \"Map\";\n    TypeIds[TypeIds[\"Uint8Array\"] = 17] = \"Uint8Array\";\n    TypeIds[TypeIds[\"QRL\"] = 18] = \"QRL\";\n    TypeIds[TypeIds[\"Task\"] = 19] = \"Task\";\n    TypeIds[TypeIds[\"Resource\"] = 20] = \"Resource\";\n    TypeIds[TypeIds[\"Component\"] = 21] = \"Component\";\n    TypeIds[TypeIds[\"Signal\"] = 22] = \"Signal\";\n    TypeIds[TypeIds[\"WrappedSignal\"] = 23] = \"WrappedSignal\";\n    TypeIds[TypeIds[\"ComputedSignal\"] = 24] = \"ComputedSignal\";\n    TypeIds[TypeIds[\"Store\"] = 25] = \"Store\";\n    TypeIds[TypeIds[\"StoreArray\"] = 26] = \"StoreArray\";\n    TypeIds[TypeIds[\"FormData\"] = 27] = \"FormData\";\n    TypeIds[TypeIds[\"JSXNode\"] = 28] = \"JSXNode\";\n    TypeIds[TypeIds[\"PropsProxy\"] = 29] = \"PropsProxy\";\n    TypeIds[TypeIds[\"EffectData\"] = 30] = \"EffectData\";\n})(TypeIds || (TypeIds = {}));\nexport const _typeIdNames = [\n    'RootRef',\n    'Constant',\n    'Number',\n    'String',\n    'Array',\n    'URL',\n    'Date',\n    'Regex',\n    'VNode',\n    'RefVNode',\n    'BigInt',\n    'URLSearchParams',\n    'Error',\n    'Object',\n    'Promise',\n    'Set',\n    'Map',\n    'Uint8Array',\n    'QRL',\n    'Task',\n    'Resource',\n    'Component',\n    'Signal',\n    'WrappedSignal',\n    'ComputedSignal',\n    'Store',\n    'StoreArray',\n    'FormData',\n    'JSXNode',\n    'PropsProxy',\n    'EffectData',\n];\nexport var Constants;\n(function (Constants) {\n    Constants[Constants[\"Undefined\"] = 0] = \"Undefined\";\n    Constants[Constants[\"Null\"] = 1] = \"Null\";\n    Constants[Constants[\"True\"] = 2] = \"True\";\n    Constants[Constants[\"False\"] = 3] = \"False\";\n    Constants[Constants[\"EmptyString\"] = 4] = \"EmptyString\";\n    Constants[Constants[\"EMPTY_ARRAY\"] = 5] = \"EMPTY_ARRAY\";\n    Constants[Constants[\"EMPTY_OBJ\"] = 6] = \"EMPTY_OBJ\";\n    Constants[Constants[\"NEEDS_COMPUTATION\"] = 7] = \"NEEDS_COMPUTATION\";\n    Constants[Constants[\"Slot\"] = 8] = \"Slot\";\n    Constants[Constants[\"Fragment\"] = 9] = \"Fragment\";\n    Constants[Constants[\"NaN\"] = 10] = \"NaN\";\n    Constants[Constants[\"PositiveInfinity\"] = 11] = \"PositiveInfinity\";\n    Constants[Constants[\"NegativeInfinity\"] = 12] = \"NegativeInfinity\";\n    Constants[Constants[\"MaxSafeInt\"] = 13] = \"MaxSafeInt\";\n    // used for close fragment\n    Constants[Constants[\"AlmostMaxSafeInt\"] = 14] = \"AlmostMaxSafeInt\";\n    Constants[Constants[\"MinSafeInt\"] = 15] = \"MinSafeInt\";\n})(Constants || (Constants = {}));\nconst circularProofJson = (obj, indent) => {\n    const seen = new WeakSet();\n    return JSON.stringify(obj, (key, value) => {\n        if (typeof value === 'object' && value !== null) {\n            if (seen.has(value)) {\n                return `[Circular ${value.constructor.name}]`;\n            }\n            seen.add(value);\n        }\n        return value;\n    }, indent);\n};\nconst printRaw = (value, prefix) => {\n    let result = vnode_isVNode(value)\n        ? vnode_toString.call(value, 1, '', true).replaceAll(/\\n.*/gm, '')\n        : typeof value === 'function'\n            ? String(value)\n            : circularProofJson(value, 2);\n    if (result.length > 500) {\n        result = result.slice(0, 500) + '\"...';\n    }\n    result = result.replace(/\\n/g, '\\n' + prefix);\n    return result.includes('\\n') ? (result = `\\n${prefix}${result}`) : result;\n};\nlet hasRaw = false;\nexport const dumpState = (state, color = false, prefix = '', limit = 20) => {\n    const RED = color ? '\\x1b[31m' : '';\n    const RESET = color ? '\\x1b[0m' : '';\n    const isRoot = prefix === '';\n    const out = [];\n    for (let i = 0; i < state.length; i++) {\n        if (limit && i > 2 * limit) {\n            out.push('...');\n            break;\n        }\n        const key = state[i];\n        let value = state[++i];\n        if (key === undefined) {\n            hasRaw = true;\n            out.push(`${RED}[raw${typeof value === 'object' && value ? ` ${value.constructor.name}` : ''}]${RESET} ${printRaw(value, `${prefix}  `)}`);\n        }\n        else {\n            if (key === TypeIds.Constant) {\n                value = constantToName(value);\n            }\n            else if (typeof value === 'string') {\n                value = JSON.stringify(value);\n                if (value.length > 120) {\n                    value = value.slice(0, 120) + '\"...';\n                }\n            }\n            else if (Array.isArray(value)) {\n                value = value.length ? `[\\n${dumpState(value, color, `${prefix}  `)}\\n${prefix}]` : '[]';\n            }\n            out.push(`${RED}${typeIdToName(key)}${RESET} ${value}`);\n        }\n    }\n    const result = out.map((v, i) => `${prefix}${isRoot ? `${i} ` : ''}${v}`).join('\\n');\n    if (isRoot) {\n        const count = hasRaw ? '' : `(${JSON.stringify(state).length} chars)`;\n        hasRaw = false;\n        return `\\n${result}\\n${count}`;\n    }\n    return result;\n};\nexport const typeIdToName = (code) => {\n    return _typeIdNames[code] || `Unknown(${code})`;\n};\nconst constantToName = (code) => {\n    return _constantNames[code] || `Unknown(${code})`;\n};\n//# sourceMappingURL=data:application/json;base64,","import { QError_verifySerializable, qError } from '../error/error';\nimport { isNode } from './element';\nimport { throwErrorAndStop } from './log';\nimport { isPromise } from './promises';\nimport { isArray, isFunction, isObject, isSerializableObject } from './types';\nimport { canSerialize } from '../shared-serialization';\nimport { isSignal } from '../../signal/signal';\nimport { unwrapStore } from '../../signal/store';\n/** @internal */\nexport const verifySerializable = (value, preMessage) => {\n    const seen = new Set();\n    return _verifySerializable(value, seen, '_', preMessage);\n};\nconst _verifySerializable = (value, seen, ctx, preMessage) => {\n    const unwrapped = unwrapStore(value);\n    if (unwrapped == null) {\n        return value;\n    }\n    if (shouldSerialize(unwrapped)) {\n        if (seen.has(unwrapped)) {\n            return value;\n        }\n        seen.add(unwrapped);\n        if (isSignal(unwrapped)) {\n            return value;\n        }\n        if (canSerialize(unwrapped)) {\n            return value;\n        }\n        const typeObj = typeof unwrapped;\n        switch (typeObj) {\n            case 'object':\n                if (isPromise(unwrapped)) {\n                    return value;\n                }\n                if (isNode(unwrapped)) {\n                    return value;\n                }\n                if (isArray(unwrapped)) {\n                    let expectIndex = 0;\n                    // Make sure the array has no holes\n                    unwrapped.forEach((v, i) => {\n                        if (i !== expectIndex) {\n                            throw qError(QError_verifySerializable, unwrapped);\n                        }\n                        _verifySerializable(v, seen, ctx + '[' + i + ']');\n                        expectIndex = i + 1;\n                    });\n                    return value;\n                }\n                if (isSerializableObject(unwrapped)) {\n                    for (const [key, item] of Object.entries(unwrapped)) {\n                        _verifySerializable(item, seen, ctx + '.' + key);\n                    }\n                    return value;\n                }\n                break;\n            case 'boolean':\n            case 'string':\n            case 'number':\n                return value;\n        }\n        let message = '';\n        if (preMessage) {\n            message = preMessage;\n        }\n        else {\n            message = 'Value cannot be serialized';\n        }\n        if (ctx !== '_') {\n            message += ` in ${ctx},`;\n        }\n        if (typeObj === 'object') {\n            message += ` because it's an instance of \"${value?.constructor.name}\". You might need to use 'noSerialize()' or use an object literal instead. Check out https://qwik.dev/docs/advanced/dollar/`;\n        }\n        else if (typeObj === 'function') {\n            const fnName = value.name;\n            message += ` because it's a function named \"${fnName}\". You might need to convert it to a QRL using $(fn):\\n\\nconst ${fnName} = $(${String(value)});\\n\\nPlease check out https://qwik.dev/docs/advanced/qrl/ for more information.`;\n        }\n        console.error('Trying to serialize', value);\n        throwErrorAndStop(message);\n    }\n    return value;\n};\nconst noSerializeSet = /*#__PURE__*/ new WeakSet();\nconst weakSerializeSet = /*#__PURE__*/ new WeakSet();\nexport const shouldSerialize = (obj) => {\n    if (isObject(obj) || isFunction(obj)) {\n        return !noSerializeSet.has(obj);\n    }\n    return true;\n};\nexport const fastSkipSerialize = (obj) => {\n    return noSerializeSet.has(obj);\n};\nexport const fastWeakSerialize = (obj) => {\n    return weakSerializeSet.has(obj);\n};\n// <docs markdown=\"../readme.md#noSerialize\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#noSerialize instead)\n/**\n * Marks a property on a store as non-serializable.\n *\n * At times it is necessary to store values on a store that are non-serializable. Normally this is a\n * runtime error as Store wants to eagerly report when a non-serializable property is assigned to\n * it.\n *\n * You can use `noSerialize()` to mark a value as non-serializable. The value is persisted in the\n * Store but does not survive serialization. The implication is that when your application is\n * resumed, the value of this object will be `undefined`. You will be responsible for recovering\n * from this.\n *\n * See: [noSerialize Tutorial](http://qwik.dev/tutorial/store/no-serialize)\n *\n * @public\n */\n// </docs>\nexport const noSerialize = (input) => {\n    if (input != null) {\n        noSerializeSet.add(input);\n    }\n    return input;\n};\n/** @internal */\nexport const _weakSerialize = (input) => {\n    weakSerializeSet.add(input);\n    return input;\n};\n//# sourceMappingURL=data:application/json;base64,","import { isDev } from '@builder.io/qwik/build';\nimport { assertDefined } from '../error/assert';\nimport { qError, QError_qrlIsNotFunction } from '../error/error';\nimport { getPlatform, isServerPlatform } from '../platform/platform';\nimport { verifySerializable } from '../utils/serialize-utils';\nimport { invoke, newInvokeContext, newInvokeContextFromTuple, tryGetInvokeContext, } from '../../use/use-core';\nimport { getQFuncs, QInstanceAttr } from '../utils/markers';\nimport { maybeThen } from '../utils/promises';\nimport { qDev, qSerialize, qTest, seal } from '../utils/qdev';\nimport { isArray, isFunction } from '../utils/types';\nimport { isSignal } from '../../signal/signal';\nexport const isQrl = (value) => {\n    return typeof value === 'function' && typeof value.getSymbol === 'function';\n};\n// Make sure this value is same as value in `platform.ts`\nexport const SYNC_QRL = '<sync>';\n/** Sync QRL is a function which is serialized into `<script q:func=\"qwik/json\">` tag. */\nexport const isSyncQrl = (value) => {\n    return isQrl(value) && value.$symbol$ == SYNC_QRL;\n};\nexport const createQRL = (chunk, symbol, symbolRef, symbolFn, capture, captureRef, refSymbol) => {\n    if (qDev && qSerialize) {\n        if (captureRef) {\n            for (const item of captureRef) {\n                verifySerializable(item, 'Captured variable in the closure can not be serialized');\n            }\n        }\n    }\n    let _containerEl;\n    const qrl = async function (...args) {\n        const fn = invokeFn.call(this, tryGetInvokeContext());\n        const result = await fn(...args);\n        return result;\n    };\n    const setContainer = (el) => {\n        if (!_containerEl) {\n            _containerEl = el;\n        }\n        return _containerEl;\n    };\n    // Wrap functions to provide their lexical scope\n    const wrapFn = (fn) => {\n        if (typeof fn !== 'function' || (!capture?.length && !captureRef?.length)) {\n            return fn;\n        }\n        return function (...args) {\n            let context = tryGetInvokeContext();\n            if (context) {\n                return fn.apply(this, args);\n            }\n            context = newInvokeContext();\n            context.$qrl$ = qrl;\n            context.$event$ = this;\n            return invoke.call(this, context, fn, ...args);\n        };\n    };\n    const resolve = async (containerEl) => {\n        if (symbolRef !== null) {\n            // Resolving (Promise) or already resolved (value)\n            return symbolRef;\n        }\n        if (containerEl) {\n            setContainer(containerEl);\n        }\n        if (chunk === '') {\n            // Sync QRL\n            assertDefined(_containerEl, 'Sync QRL must have container element');\n            const hash = _containerEl.getAttribute(QInstanceAttr);\n            const doc = _containerEl.ownerDocument;\n            const qFuncs = getQFuncs(doc, hash);\n            // No need to wrap, syncQRLs can't have captured scope\n            return (qrl.resolved = symbolRef = qFuncs[Number(symbol)]);\n        }\n        const start = now();\n        const ctx = tryGetInvokeContext();\n        if (symbolFn !== null) {\n            symbolRef = symbolFn().then((module) => (qrl.resolved = symbolRef = wrapFn(module[symbol])));\n        }\n        else {\n            const imported = getPlatform().importSymbol(_containerEl, chunk, symbol);\n            symbolRef = maybeThen(imported, (ref) => (qrl.resolved = symbolRef = wrapFn(ref)));\n        }\n        symbolRef.finally(() => emitUsedSymbol(symbol, ctx?.$element$, start));\n        return symbolRef;\n    };\n    const resolveLazy = (containerEl) => {\n        return symbolRef !== null ? symbolRef : resolve(containerEl);\n    };\n    function invokeFn(currentCtx, beforeFn) {\n        // Note that we bind the current `this`\n        return (...args) => maybeThen(resolveLazy(), (f) => {\n            if (!isFunction(f)) {\n                throw qError(QError_qrlIsNotFunction);\n            }\n            if (beforeFn && beforeFn() === false) {\n                return;\n            }\n            const context = createOrReuseInvocationContext(currentCtx);\n            const prevQrl = context.$qrl$;\n            const prevEvent = context.$event$;\n            // Note that we set the qrl here instead of in wrapFn because\n            // it is possible we're called on a copied qrl\n            context.$qrl$ = qrl;\n            context.$event$ || (context.$event$ = this);\n            try {\n                return invoke.call(this, context, f, ...args);\n            }\n            finally {\n                context.$qrl$ = prevQrl;\n                context.$event$ = prevEvent;\n            }\n        });\n    }\n    const createOrReuseInvocationContext = (invoke) => {\n        if (invoke == null) {\n            return newInvokeContext();\n        }\n        else if (isArray(invoke)) {\n            return newInvokeContextFromTuple(invoke);\n        }\n        else {\n            return invoke;\n        }\n    };\n    const resolvedSymbol = refSymbol ?? symbol;\n    const hash = getSymbolHash(resolvedSymbol);\n    Object.assign(qrl, {\n        getSymbol: () => resolvedSymbol,\n        getHash: () => hash,\n        getCaptured: () => captureRef,\n        resolve,\n        $resolveLazy$: resolveLazy,\n        $setContainer$: setContainer,\n        $chunk$: chunk,\n        $symbol$: symbol,\n        $refSymbol$: refSymbol,\n        $hash$: hash,\n        getFn: invokeFn,\n        $capture$: capture,\n        $captureRef$: captureRef,\n        dev: null,\n        resolved: undefined,\n    });\n    if (symbolRef) {\n        // Replace symbolRef with (a promise for) the value or wrapped function\n        symbolRef = maybeThen(symbolRef, (resolved) => (qrl.resolved = symbolRef = wrapFn(resolved)));\n    }\n    if (isDev) {\n        Object.defineProperty(qrl, '_devOnlySymbolRef', {\n            get() {\n                return symbolRef;\n            },\n        });\n    }\n    if (qDev) {\n        seal(qrl);\n    }\n    return qrl;\n};\nexport const getSymbolHash = (symbolName) => {\n    const index = symbolName.lastIndexOf('_');\n    if (index > -1) {\n        return symbolName.slice(index + 1);\n    }\n    return symbolName;\n};\nexport function assertQrl(qrl) {\n    if (qDev) {\n        if (!isQrl(qrl)) {\n            throw new Error('Not a QRL');\n        }\n    }\n}\nexport function assertSignal(obj) {\n    if (qDev) {\n        if (!isSignal(obj) && !isSignal(obj)) {\n            throw new Error('Not a Signal');\n        }\n    }\n}\nconst EMITTED = /*#__PURE__*/ new Set();\nexport const emitUsedSymbol = (symbol, element, reqTime) => {\n    if (!EMITTED.has(symbol)) {\n        EMITTED.add(symbol);\n        emitEvent('qsymbol', {\n            symbol,\n            element,\n            reqTime,\n        });\n    }\n};\nexport const emitEvent = (eventName, detail) => {\n    if (!qTest && !isServerPlatform() && typeof document === 'object') {\n        document.dispatchEvent(new CustomEvent(eventName, {\n            bubbles: false,\n            detail,\n        }));\n    }\n};\nconst now = () => {\n    if (qTest || isServerPlatform()) {\n        return 0;\n    }\n    if (typeof performance === 'object') {\n        return performance.now();\n    }\n    return 0;\n};\n//# sourceMappingURL=data:application/json;base64,","import { qDev, qRuntimeQrl } from '../utils/qdev';\nimport { SYNC_QRL, createQRL } from './qrl-class';\nlet runtimeSymbolId = 0;\n// <docs markdown=\"../readme.md#$\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#$ instead)\n/**\n * Qwik Optimizer marker function.\n *\n * Use `$(...)` to tell Qwik Optimizer to extract the expression in `$(...)` into a lazy-loadable\n * resource referenced by `QRL`.\n *\n * @param expression - Expression which should be lazy loaded\n * @public\n * @see `implicit$FirstArg` for additional `____$(...)` rules.\n *\n * In this example, `$(...)` is used to capture the callback function of `onmousemove` into a\n * lazy-loadable reference. This allows the code to refer to the function without actually\n * loading the function. In this example, the callback function does not get loaded until\n * `mousemove` event fires.\n *\n * ```tsx\n * useOnDocument(\n *   'mousemove',\n *   $((event) => console.log('mousemove', event))\n * );\n * ```\n *\n * In this code, the Qwik Optimizer detects `$(...)` and transforms the code into:\n *\n * ```tsx\n * // FILE: <current file>\n * useOnDocument('mousemove', qrl('./chunk-abc.js', 'onMousemove'));\n *\n * // FILE: chunk-abc.js\n * export const onMousemove = () => console.log('mousemove');\n * ```\n *\n * ## Special Rules\n *\n * The Qwik Optimizer places special rules on functions that can be lazy-loaded.\n *\n * 1. The expression of the `$(expression)` function must be importable by the system.\n * (expression shows up in `import` or has `export`)\n * 2. If inlined function, then all lexically captured values must be:\n *    - importable (vars show up in `import`s or `export`s)\n *    - const (The capturing process differs from JS capturing in that writing to captured\n * variables does not update them, and therefore writes are forbidden. The best practice is that\n * all captured variables are constants.)\n *    - Must be runtime serializable.\n *\n * ```tsx\n *\n * import { createContextId, useContext, useContextProvider } from './use/use-context';\n * import { Resource, useResource$ } from './use/use-resource';\n * import { useSignal } from './use/use-signal';\n *\n * export const greet = () => console.log('greet');\n * function topLevelFn() {}\n *\n * function myCode() {\n *   const store = useStore({});\n *   function localFn() {}\n *   // Valid Examples\n *   $(greet); // greet is importable\n *   $(() => greet()); // greet is importable;\n *   $(() => console.log(store)); // store is serializable.\n *\n *   // Compile time errors\n *   $(topLevelFn); // ERROR: `topLevelFn` not importable\n *   $(() => topLevelFn()); // ERROR: `topLevelFn` not importable\n *\n *   // Runtime errors\n *   $(localFn); // ERROR: `localFn` fails serialization\n *   $(() => localFn()); // ERROR: `localFn` fails serialization\n * }\n *\n * ```\n */\n// </docs>\nexport const $ = (expression) => {\n    if (!qRuntimeQrl && qDev) {\n        throw new Error('Optimizer should replace all usages of $() with some special syntax. If you need to create a QRL manually, use inlinedQrl() instead.');\n    }\n    return createQRL(null, 's' + runtimeSymbolId++, expression, null, null, null, null);\n};\n/** @private Use To avoid optimizer replacement */\nexport const dollar = $;\n/** @public */\nexport const eventQrl = (qrl) => {\n    return qrl;\n};\n/**\n * Extract function into a synchronously loadable QRL.\n *\n * NOTE: Synchronous QRLs functions can't close over any variables, including exports.\n *\n * @param fn - Function to extract.\n * @returns\n * @alpha\n */\nexport const sync$ = (fn) => {\n    if (!qRuntimeQrl && qDev) {\n        throw new Error('Optimizer should replace all usages of sync$() with some special syntax. If you need to create a QRL manually, use inlinedSyncQrl() instead.');\n    }\n    if (qDev) {\n        // To make sure that in dev mode we don't accidentally capture context in `sync$()` we serialize and deserialize the function.\n        // eslint-disable-next-line no-new-func\n        fn = new Function('return ' + fn.toString())();\n    }\n    return createQRL('', SYNC_QRL, fn, null, null, null, null);\n};\n/**\n * Extract function into a synchronously loadable QRL.\n *\n * NOTE: Synchronous QRLs functions can't close over any variables, including exports.\n *\n * @param fn - Extracted function\n * @param serializedFn - Serialized function in string form.\n * @returns\n * @alpha\n */\nexport const _qrlSync = function (fn, serializedFn) {\n    if (serializedFn === undefined) {\n        serializedFn = fn.toString();\n    }\n    fn.serialized = serializedFn;\n    return createQRL('', SYNC_QRL, fn, null, null, null, null);\n};\n//# sourceMappingURL=data:application/json;base64,","import { dollar } from './qrl/qrl.public';\nimport { _CONST_PROPS, _VAR_PROPS, _jsxSorted } from '../internal';\n// <docs markdown=\"../readme.md#component\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#component instead)\n/**\n * Declare a Qwik component that can be used to create UI.\n *\n * Use `component$` to declare a Qwik component. A Qwik component is a special kind of component\n * that allows the Qwik framework to lazy load and execute the component independently of other Qwik\n * components as well as lazy load the component's life-cycle hooks and event handlers.\n *\n * Side note: You can also declare regular (standard JSX) components that will have standard\n * synchronous behavior.\n *\n * Qwik component is a facade that describes how the component should be used without forcing the\n * implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n *\n * ### Example\n *\n * An example showing how to create a counter component:\n *\n * ```tsx\n * export interface CounterProps {\n *   initialValue?: number;\n *   step?: number;\n * }\n * export const Counter = component$((props: CounterProps) => {\n *   const state = useStore({ count: props.initialValue || 0 });\n *   return (\n *     <div>\n *       <span>{state.count}</span>\n *       <button onClick$={() => (state.count += props.step || 1)}>+</button>\n *     </div>\n *   );\n * });\n * ```\n *\n * - `component$` is how a component gets declared.\n * - `{ value?: number; step?: number }` declares the public (props) interface of the component.\n * - `{ count: number }` declares the private (state) interface of the component.\n *\n * The above can then be used like so:\n *\n * ```tsx\n * export const OtherComponent = component$(() => {\n *   return <Counter initialValue={100} />;\n * });\n * ```\n *\n * See also: `component`, `useCleanup`, `onResume`, `onPause`, `useOn`, `useOnDocument`,\n * `useOnWindow`, `useStyles`\n *\n * @public\n */\n// </docs>\nexport const componentQrl = (componentQrl) => {\n    // Return a QComponent Factory function.\n    const QwikComponent = () => { };\n    QwikComponent[SERIALIZABLE_STATE] = [componentQrl];\n    return QwikComponent;\n};\nexport const SERIALIZABLE_STATE = Symbol('serializable-data');\nexport const isQwikComponent = (component) => {\n    return typeof component == 'function' && component[SERIALIZABLE_STATE] !== undefined;\n};\n// <docs markdown=\"../readme.md#component\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#component instead)\n/**\n * Declare a Qwik component that can be used to create UI.\n *\n * Use `component$` to declare a Qwik component. A Qwik component is a special kind of component\n * that allows the Qwik framework to lazy load and execute the component independently of other Qwik\n * components as well as lazy load the component's life-cycle hooks and event handlers.\n *\n * Side note: You can also declare regular (standard JSX) components that will have standard\n * synchronous behavior.\n *\n * Qwik component is a facade that describes how the component should be used without forcing the\n * implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n *\n * ### Example\n *\n * An example showing how to create a counter component:\n *\n * ```tsx\n * export interface CounterProps {\n *   initialValue?: number;\n *   step?: number;\n * }\n * export const Counter = component$((props: CounterProps) => {\n *   const state = useStore({ count: props.initialValue || 0 });\n *   return (\n *     <div>\n *       <span>{state.count}</span>\n *       <button onClick$={() => (state.count += props.step || 1)}>+</button>\n *     </div>\n *   );\n * });\n * ```\n *\n * - `component$` is how a component gets declared.\n * - `{ value?: number; step?: number }` declares the public (props) interface of the component.\n * - `{ count: number }` declares the private (state) interface of the component.\n *\n * The above can then be used like so:\n *\n * ```tsx\n * export const OtherComponent = component$(() => {\n *   return <Counter initialValue={100} />;\n * });\n * ```\n *\n * See also: `component`, `useCleanup`, `onResume`, `onPause`, `useOn`, `useOnDocument`,\n * `useOnWindow`, `useStyles`\n *\n * @public\n */\n// </docs>\nexport const component$ = (onMount) => {\n    return componentQrl(dollar(onMount));\n};\n//# sourceMappingURL=data:application/json;base64,","import { eventQrl } from './qrl.public';\nimport { implicit$FirstArg } from './implicit_dollar';\n/** @public */\nexport const event$ = implicit$FirstArg(eventQrl);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXJsLnB1YmxpYy5kb2xsYXIuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvc2hhcmVkL3FybC9xcmwucHVibGljLmRvbGxhci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRXRELGNBQWM7QUFDZCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBldmVudFFybCB9IGZyb20gJy4vcXJsLnB1YmxpYyc7XG5pbXBvcnQgeyBpbXBsaWNpdCRGaXJzdEFyZyB9IGZyb20gJy4vaW1wbGljaXRfZG9sbGFyJztcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBldmVudCQgPSBpbXBsaWNpdCRGaXJzdEFyZyhldmVudFFybCk7XG4iXX0=","import { isDocument, isElement } from '../shared/utils/element';\nimport { ChoreType } from '../shared/scheduler';\nimport { QContainerValue } from '../shared/types';\nimport { DomContainer, getDomContainer } from './dom-container';\nimport { cleanup } from './vnode-diff';\nimport { QContainerAttr } from '../shared/utils/markers';\n/**\n * Render JSX.\n *\n * Use this method to render JSX. This function does reconciling which means it always tries to\n * reuse what is already in the DOM (rather then destroy and recreate content.) It returns a cleanup\n * function you could use for cleaning up subscriptions.\n *\n * @param parent - Element which will act as a parent to `jsxNode`. When possible the rendering will\n *   try to reuse existing nodes.\n * @param jsxNode - JSX to render\n * @returns An object containing a cleanup function.\n * @public\n */\nexport const render = async (parent, jsxNode, opts = {}) => {\n    if (isDocument(parent)) {\n        let child = parent.firstChild;\n        while (child && !isElement(child)) {\n            child = child.nextSibling;\n        }\n        parent = child;\n    }\n    parent.setAttribute(QContainerAttr, QContainerValue.RESUMED);\n    const container = getDomContainer(parent);\n    container.$serverData$ = opts.serverData || {};\n    const host = container.rootVNode;\n    container.$scheduler$(ChoreType.NODE_DIFF, host, host, jsxNode);\n    await container.$scheduler$(ChoreType.WAIT_FOR_ALL);\n    return {\n        cleanup: () => {\n            cleanup(container, container.rootVNode);\n        },\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLXJlbmRlci5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9jbGllbnQvZG9tLXJlbmRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUV6RDs7Ozs7Ozs7Ozs7O0dBWUc7QUFDSCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsS0FBSyxFQUN6QixNQUEwQixFQUMxQixPQUEyQyxFQUMzQyxPQUFzQixFQUFFLEVBQ0QsRUFBRTtJQUN6QixJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLElBQUksS0FBSyxHQUFnQixNQUFNLENBQUMsVUFBVSxDQUFDO1FBQzNDLE9BQU8sS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDbEMsS0FBSyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7UUFDNUIsQ0FBQztRQUNELE1BQU0sR0FBRyxLQUFnQixDQUFDO0lBQzVCLENBQUM7SUFDQSxNQUFrQixDQUFDLFlBQVksQ0FBQyxjQUFjLEVBQUUsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRTFFLE1BQU0sU0FBUyxHQUFHLGVBQWUsQ0FBQyxNQUFxQixDQUFpQixDQUFDO0lBQ3pFLFNBQVMsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUM7SUFDL0MsTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQztJQUNqQyxTQUFTLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFrQixDQUFDLENBQUM7SUFDM0UsTUFBTSxTQUFTLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNwRCxPQUFPO1FBQ0wsT0FBTyxFQUFFLEdBQUcsRUFBRTtZQUNaLE9BQU8sQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzFDLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBKU1hOb2RlLCBSZW5kZXJPcHRpb25zLCBSZW5kZXJSZXN1bHQgfSBmcm9tICdAYnVpbGRlci5pby9xd2lrJztcbmltcG9ydCB0eXBlIHsgRnVuY3Rpb25Db21wb25lbnQsIEpTWE91dHB1dCB9IGZyb20gJy4uL3NoYXJlZC9qc3gvdHlwZXMvanN4LW5vZGUnO1xuaW1wb3J0IHsgaXNEb2N1bWVudCwgaXNFbGVtZW50IH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzL2VsZW1lbnQnO1xuaW1wb3J0IHsgQ2hvcmVUeXBlIH0gZnJvbSAnLi4vc2hhcmVkL3NjaGVkdWxlcic7XG5pbXBvcnQgeyBRQ29udGFpbmVyVmFsdWUgfSBmcm9tICcuLi9zaGFyZWQvdHlwZXMnO1xuaW1wb3J0IHsgRG9tQ29udGFpbmVyLCBnZXREb21Db250YWluZXIgfSBmcm9tICcuL2RvbS1jb250YWluZXInO1xuaW1wb3J0IHsgY2xlYW51cCB9IGZyb20gJy4vdm5vZGUtZGlmZic7XG5pbXBvcnQgeyBRQ29udGFpbmVyQXR0ciB9IGZyb20gJy4uL3NoYXJlZC91dGlscy9tYXJrZXJzJztcblxuLyoqXG4gKiBSZW5kZXIgSlNYLlxuICpcbiAqIFVzZSB0aGlzIG1ldGhvZCB0byByZW5kZXIgSlNYLiBUaGlzIGZ1bmN0aW9uIGRvZXMgcmVjb25jaWxpbmcgd2hpY2ggbWVhbnMgaXQgYWx3YXlzIHRyaWVzIHRvXG4gKiByZXVzZSB3aGF0IGlzIGFscmVhZHkgaW4gdGhlIERPTSAocmF0aGVyIHRoZW4gZGVzdHJveSBhbmQgcmVjcmVhdGUgY29udGVudC4pIEl0IHJldHVybnMgYSBjbGVhbnVwXG4gKiBmdW5jdGlvbiB5b3UgY291bGQgdXNlIGZvciBjbGVhbmluZyB1cCBzdWJzY3JpcHRpb25zLlxuICpcbiAqIEBwYXJhbSBwYXJlbnQgLSBFbGVtZW50IHdoaWNoIHdpbGwgYWN0IGFzIGEgcGFyZW50IHRvIGBqc3hOb2RlYC4gV2hlbiBwb3NzaWJsZSB0aGUgcmVuZGVyaW5nIHdpbGxcbiAqICAgdHJ5IHRvIHJldXNlIGV4aXN0aW5nIG5vZGVzLlxuICogQHBhcmFtIGpzeE5vZGUgLSBKU1ggdG8gcmVuZGVyXG4gKiBAcmV0dXJucyBBbiBvYmplY3QgY29udGFpbmluZyBhIGNsZWFudXAgZnVuY3Rpb24uXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCByZW5kZXIgPSBhc3luYyAoXG4gIHBhcmVudDogRWxlbWVudCB8IERvY3VtZW50LFxuICBqc3hOb2RlOiBKU1hPdXRwdXQgfCBGdW5jdGlvbkNvbXBvbmVudDxhbnk+LFxuICBvcHRzOiBSZW5kZXJPcHRpb25zID0ge31cbik6IFByb21pc2U8UmVuZGVyUmVzdWx0PiA9PiB7XG4gIGlmIChpc0RvY3VtZW50KHBhcmVudCkpIHtcbiAgICBsZXQgY2hpbGQ6IE5vZGUgfCBudWxsID0gcGFyZW50LmZpcnN0Q2hpbGQ7XG4gICAgd2hpbGUgKGNoaWxkICYmICFpc0VsZW1lbnQoY2hpbGQpKSB7XG4gICAgICBjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuICAgIH1cbiAgICBwYXJlbnQgPSBjaGlsZCBhcyBFbGVtZW50O1xuICB9XG4gIChwYXJlbnQgYXMgRWxlbWVudCkuc2V0QXR0cmlidXRlKFFDb250YWluZXJBdHRyLCBRQ29udGFpbmVyVmFsdWUuUkVTVU1FRCk7XG5cbiAgY29uc3QgY29udGFpbmVyID0gZ2V0RG9tQ29udGFpbmVyKHBhcmVudCBhcyBIVE1MRWxlbWVudCkgYXMgRG9tQ29udGFpbmVyO1xuICBjb250YWluZXIuJHNlcnZlckRhdGEkID0gb3B0cy5zZXJ2ZXJEYXRhIHx8IHt9O1xuICBjb25zdCBob3N0ID0gY29udGFpbmVyLnJvb3RWTm9kZTtcbiAgY29udGFpbmVyLiRzY2hlZHVsZXIkKENob3JlVHlwZS5OT0RFX0RJRkYsIGhvc3QsIGhvc3QsIGpzeE5vZGUgYXMgSlNYTm9kZSk7XG4gIGF3YWl0IGNvbnRhaW5lci4kc2NoZWR1bGVyJChDaG9yZVR5cGUuV0FJVF9GT1JfQUxMKTtcbiAgcmV0dXJuIHtcbiAgICBjbGVhbnVwOiAoKSA9PiB7XG4gICAgICBjbGVhbnVwKGNvbnRhaW5lciwgY29udGFpbmVyLnJvb3RWTm9kZSk7XG4gICAgfSxcbiAgfTtcbn07XG4iXX0=","import { isFunction } from '../shared/utils/types';\nimport { StoreFlags, getOrCreateStore } from '../signal/store';\nimport { invoke } from './use-core';\nimport { useSequentialScope } from './use-sequential-scope';\n// <docs markdown=\"../readme.md#useStore\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStore instead)\n/**\n * Creates an object that Qwik can track across serializations.\n *\n * Use `useStore` to create a state for your application. The returned object is a proxy that has a\n * unique ID. The ID of the object is used in the `QRL`s to refer to the store.\n *\n * ### Example\n *\n * Example showing how `useStore` is used in Counter example to keep track of the count.\n *\n * ```tsx\n * const Stores = component$(() => {\n *   const counter = useCounter(1);\n *\n *   // Reactivity happens even for nested objects and arrays\n *   const userData = useStore({\n *     name: 'Manu',\n *     address: {\n *       address: '',\n *       city: '',\n *     },\n *     orgs: [],\n *   });\n *\n *   // useStore() can also accept a function to calculate the initial value\n *   const state = useStore(() => {\n *     return {\n *       value: expensiveInitialValue(),\n *     };\n *   });\n *\n *   return (\n *     <div>\n *       <div>Counter: {counter.value}</div>\n *       <Child userData={userData} state={state} />\n *     </div>\n *   );\n * });\n *\n * function useCounter(step: number) {\n *   // Multiple stores can be created in custom hooks for convenience and composability\n *   const counterStore = useStore({\n *     value: 0,\n *   });\n *   useVisibleTask$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       counterStore.value += step;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *   return counterStore;\n * }\n * ```\n *\n * @public\n */\n// </docs>\nexport const useStore = (initialState, opts) => {\n    const { val, set, iCtx } = useSequentialScope();\n    if (val != null) {\n        return val;\n    }\n    const value = isFunction(initialState) ? invoke(undefined, initialState) : initialState;\n    if (opts?.reactive === false) {\n        set(value);\n        return value;\n    }\n    else {\n        const containerState = iCtx.$container$;\n        const recursive = opts?.deep ?? true;\n        const flags = recursive ? StoreFlags.RECURSIVE : StoreFlags.NONE;\n        const newStore = getOrCreateStore(value, flags, containerState);\n        set(newStore);\n        return newStore;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXN0b3JlLnB1YmxpYy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXN0b3JlLnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDcEMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFXNUQsMENBQTBDO0FBQzFDLHlDQUF5QztBQUN6Qyx1Q0FBdUM7QUFDdkM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0EwREc7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQ3RCLFlBQW1DLEVBQ25DLElBQXNCLEVBQ2YsRUFBRTtJQUNULE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLGtCQUFrQixFQUFTLENBQUM7SUFDdkQsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDaEIsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBQ0QsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUM7SUFDeEYsSUFBSSxJQUFJLEVBQUUsUUFBUSxLQUFLLEtBQUssRUFBRSxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNYLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztTQUFNLENBQUM7UUFDTixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ3hDLE1BQU0sU0FBUyxHQUFHLElBQUksRUFBRSxJQUFJLElBQUksSUFBSSxDQUFDO1FBQ3JDLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztRQUNqRSxNQUFNLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ2hFLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNkLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzL3R5cGVzJztcbmltcG9ydCB7IFN0b3JlRmxhZ3MsIGdldE9yQ3JlYXRlU3RvcmUgfSBmcm9tICcuLi9zaWduYWwvc3RvcmUnO1xuaW1wb3J0IHsgaW52b2tlIH0gZnJvbSAnLi91c2UtY29yZSc7XG5pbXBvcnQgeyB1c2VTZXF1ZW50aWFsU2NvcGUgfSBmcm9tICcuL3VzZS1zZXF1ZW50aWFsLXNjb3BlJztcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXNlU3RvcmVPcHRpb25zIHtcbiAgLyoqIElmIGB0cnVlYCB0aGVuIGFsbCBuZXN0ZWQgb2JqZWN0cyBhbmQgYXJyYXlzIHdpbGwgYmUgdHJhY2tlZCBhcyB3ZWxsLiBEZWZhdWx0IGlzIGB0cnVlYC4gKi9cbiAgZGVlcD86IGJvb2xlYW47XG5cbiAgLyoqIElmIGBmYWxzZWAgdGhlbiB0aGUgb2JqZWN0IHdpbGwgbm90IGJlIHRyYWNrZWQgZm9yIGNoYW5nZXMuIERlZmF1bHQgaXMgYHRydWVgLiAqL1xuICByZWFjdGl2ZT86IGJvb2xlYW47XG59XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI3VzZVN0b3JlXCI+XG4vLyAhIURPIE5PVCBFRElUIFRISVMgQ09NTUVOVCBESVJFQ1RMWSEhIVxuLy8gKGVkaXQgLi4vcmVhZG1lLm1kI3VzZVN0b3JlIGluc3RlYWQpXG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgUXdpayBjYW4gdHJhY2sgYWNyb3NzIHNlcmlhbGl6YXRpb25zLlxuICpcbiAqIFVzZSBgdXNlU3RvcmVgIHRvIGNyZWF0ZSBhIHN0YXRlIGZvciB5b3VyIGFwcGxpY2F0aW9uLiBUaGUgcmV0dXJuZWQgb2JqZWN0IGlzIGEgcHJveHkgdGhhdCBoYXMgYVxuICogdW5pcXVlIElELiBUaGUgSUQgb2YgdGhlIG9iamVjdCBpcyB1c2VkIGluIHRoZSBgUVJMYHMgdG8gcmVmZXIgdG8gdGhlIHN0b3JlLlxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogRXhhbXBsZSBzaG93aW5nIGhvdyBgdXNlU3RvcmVgIGlzIHVzZWQgaW4gQ291bnRlciBleGFtcGxlIHRvIGtlZXAgdHJhY2sgb2YgdGhlIGNvdW50LlxuICpcbiAqIGBgYHRzeFxuICogY29uc3QgU3RvcmVzID0gY29tcG9uZW50JCgoKSA9PiB7XG4gKiAgIGNvbnN0IGNvdW50ZXIgPSB1c2VDb3VudGVyKDEpO1xuICpcbiAqICAgLy8gUmVhY3Rpdml0eSBoYXBwZW5zIGV2ZW4gZm9yIG5lc3RlZCBvYmplY3RzIGFuZCBhcnJheXNcbiAqICAgY29uc3QgdXNlckRhdGEgPSB1c2VTdG9yZSh7XG4gKiAgICAgbmFtZTogJ01hbnUnLFxuICogICAgIGFkZHJlc3M6IHtcbiAqICAgICAgIGFkZHJlc3M6ICcnLFxuICogICAgICAgY2l0eTogJycsXG4gKiAgICAgfSxcbiAqICAgICBvcmdzOiBbXSxcbiAqICAgfSk7XG4gKlxuICogICAvLyB1c2VTdG9yZSgpIGNhbiBhbHNvIGFjY2VwdCBhIGZ1bmN0aW9uIHRvIGNhbGN1bGF0ZSB0aGUgaW5pdGlhbCB2YWx1ZVxuICogICBjb25zdCBzdGF0ZSA9IHVzZVN0b3JlKCgpID0+IHtcbiAqICAgICByZXR1cm4ge1xuICogICAgICAgdmFsdWU6IGV4cGVuc2l2ZUluaXRpYWxWYWx1ZSgpLFxuICogICAgIH07XG4gKiAgIH0pO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPGRpdj5Db3VudGVyOiB7Y291bnRlci52YWx1ZX08L2Rpdj5cbiAqICAgICAgIDxDaGlsZCB1c2VyRGF0YT17dXNlckRhdGF9IHN0YXRlPXtzdGF0ZX0gLz5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH0pO1xuICpcbiAqIGZ1bmN0aW9uIHVzZUNvdW50ZXIoc3RlcDogbnVtYmVyKSB7XG4gKiAgIC8vIE11bHRpcGxlIHN0b3JlcyBjYW4gYmUgY3JlYXRlZCBpbiBjdXN0b20gaG9va3MgZm9yIGNvbnZlbmllbmNlIGFuZCBjb21wb3NhYmlsaXR5XG4gKiAgIGNvbnN0IGNvdW50ZXJTdG9yZSA9IHVzZVN0b3JlKHtcbiAqICAgICB2YWx1ZTogMCxcbiAqICAgfSk7XG4gKiAgIHVzZVZpc2libGVUYXNrJCgoKSA9PiB7XG4gKiAgICAgLy8gT25seSBydW5zIGluIHRoZSBjbGllbnRcbiAqICAgICBjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcbiAqICAgICAgIGNvdW50ZXJTdG9yZS52YWx1ZSArPSBzdGVwO1xuICogICAgIH0sIDUwMCk7XG4gKiAgICAgcmV0dXJuICgpID0+IHtcbiAqICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xuICogICAgIH07XG4gKiAgIH0pO1xuICogICByZXR1cm4gY291bnRlclN0b3JlO1xuICogfVxuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3QgdXNlU3RvcmUgPSA8U1RBVEUgZXh0ZW5kcyBvYmplY3Q+KFxuICBpbml0aWFsU3RhdGU6IFNUQVRFIHwgKCgpID0+IFNUQVRFKSxcbiAgb3B0cz86IFVzZVN0b3JlT3B0aW9uc1xuKTogU1RBVEUgPT4ge1xuICBjb25zdCB7IHZhbCwgc2V0LCBpQ3R4IH0gPSB1c2VTZXF1ZW50aWFsU2NvcGU8U1RBVEU+KCk7XG4gIGlmICh2YWwgIT0gbnVsbCkge1xuICAgIHJldHVybiB2YWw7XG4gIH1cbiAgY29uc3QgdmFsdWUgPSBpc0Z1bmN0aW9uKGluaXRpYWxTdGF0ZSkgPyBpbnZva2UodW5kZWZpbmVkLCBpbml0aWFsU3RhdGUpIDogaW5pdGlhbFN0YXRlO1xuICBpZiAob3B0cz8ucmVhY3RpdmUgPT09IGZhbHNlKSB7XG4gICAgc2V0KHZhbHVlKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgY29udGFpbmVyU3RhdGUgPSBpQ3R4LiRjb250YWluZXIkO1xuICAgIGNvbnN0IHJlY3Vyc2l2ZSA9IG9wdHM/LmRlZXAgPz8gdHJ1ZTtcbiAgICBjb25zdCBmbGFncyA9IHJlY3Vyc2l2ZSA/IFN0b3JlRmxhZ3MuUkVDVVJTSVZFIDogU3RvcmVGbGFncy5OT05FO1xuICAgIGNvbnN0IG5ld1N0b3JlID0gZ2V0T3JDcmVhdGVTdG9yZSh2YWx1ZSwgZmxhZ3MsIGNvbnRhaW5lclN0YXRlKTtcbiAgICBzZXQobmV3U3RvcmUpO1xuICAgIHJldHVybiBuZXdTdG9yZTtcbiAgfVxufTtcbiJdfQ==","export const intToStr = (nu) => {\n    return nu.toString(36);\n};\nexport const getNextUniqueIndex = (container) => {\n    return intToStr(container.$currentUniqueId$++);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pcXVlLWluZGV4LWdlbmVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9zaGFyZWQvdXRpbHMvdW5pcXVlLWluZGV4LWdlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxFQUFVLEVBQUUsRUFBRTtJQUNyQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDekIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxTQUFvQixFQUFFLEVBQUU7SUFDekQsT0FBTyxRQUFRLENBQUMsU0FBUyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztBQUNqRCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IENvbnRhaW5lciB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IGludFRvU3RyID0gKG51OiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIG51LnRvU3RyaW5nKDM2KTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXROZXh0VW5pcXVlSW5kZXggPSAoY29udGFpbmVyOiBDb250YWluZXIpID0+IHtcbiAgcmV0dXJuIGludFRvU3RyKGNvbnRhaW5lci4kY3VycmVudFVuaXF1ZUlkJCsrKTtcbn07XG4iXX0=","import { hashCode } from '../shared/utils/hash_code';\nimport { OnRenderProp } from '../shared/utils/markers';\nimport { isDomContainer } from '../client/dom-container';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { getNextUniqueIndex } from '../shared/utils/unique-index-generator';\n/** @public */\nexport const useId = () => {\n    const { val, set, iCtx } = useSequentialScope();\n    if (val != null) {\n        return val;\n    }\n    const containerBase = isDomContainer(iCtx.$container$)\n        ? ''\n        : iCtx.$container$.buildBase || '';\n    const base = containerBase ? hashCode(containerBase) : '';\n    const componentQrl = iCtx.$container$.getHostProp(iCtx.$hostElement$, OnRenderProp);\n    const hash = componentQrl?.getHash() || '';\n    const counter = getNextUniqueIndex(iCtx.$container$) || '';\n    const id = `${base}-${hash}-${counter}`; // If no base and no hash, then \"--#\"\n    return set(id);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWlkLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFekQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFFNUUsY0FBYztBQUNkLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxHQUFXLEVBQUU7SUFDaEMsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsa0JBQWtCLEVBQVUsQ0FBQztJQUN4RCxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNoQixPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFDRCxNQUFNLGFBQWEsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUNwRCxDQUFDLENBQUMsRUFBRTtRQUNKLENBQUMsQ0FBRSxJQUFJLENBQUMsV0FBNEIsQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDO0lBQ3ZELE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDMUQsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQU0sSUFBSSxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUN6RixNQUFNLElBQUksR0FBRyxZQUFZLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO0lBQzNDLE1BQU0sT0FBTyxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDM0QsTUFBTSxFQUFFLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLE9BQU8sRUFBRSxDQUFDLENBQUMscUNBQXFDO0lBQzlFLE9BQU8sR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2pCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUVJMIH0gZnJvbSAnLi4nO1xuaW1wb3J0IHsgaGFzaENvZGUgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMvaGFzaF9jb2RlJztcbmltcG9ydCB7IE9uUmVuZGVyUHJvcCB9IGZyb20gJy4uL3NoYXJlZC91dGlscy9tYXJrZXJzJztcbmltcG9ydCB7IGlzRG9tQ29udGFpbmVyIH0gZnJvbSAnLi4vY2xpZW50L2RvbS1jb250YWluZXInO1xuaW1wb3J0IHR5cGUgeyBTU1JDb250YWluZXIgfSBmcm9tICcuLi9zc3Ivc3NyLXR5cGVzJztcbmltcG9ydCB7IHVzZVNlcXVlbnRpYWxTY29wZSB9IGZyb20gJy4vdXNlLXNlcXVlbnRpYWwtc2NvcGUnO1xuaW1wb3J0IHsgZ2V0TmV4dFVuaXF1ZUluZGV4IH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzL3VuaXF1ZS1pbmRleC1nZW5lcmF0b3InO1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGNvbnN0IHVzZUlkID0gKCk6IHN0cmluZyA9PiB7XG4gIGNvbnN0IHsgdmFsLCBzZXQsIGlDdHggfSA9IHVzZVNlcXVlbnRpYWxTY29wZTxzdHJpbmc+KCk7XG4gIGlmICh2YWwgIT0gbnVsbCkge1xuICAgIHJldHVybiB2YWw7XG4gIH1cbiAgY29uc3QgY29udGFpbmVyQmFzZSA9IGlzRG9tQ29udGFpbmVyKGlDdHguJGNvbnRhaW5lciQpXG4gICAgPyAnJ1xuICAgIDogKGlDdHguJGNvbnRhaW5lciQgYXMgU1NSQ29udGFpbmVyKS5idWlsZEJhc2UgfHwgJyc7XG4gIGNvbnN0IGJhc2UgPSBjb250YWluZXJCYXNlID8gaGFzaENvZGUoY29udGFpbmVyQmFzZSkgOiAnJztcbiAgY29uc3QgY29tcG9uZW50UXJsID0gaUN0eC4kY29udGFpbmVyJC5nZXRIb3N0UHJvcDxRUkw+KGlDdHguJGhvc3RFbGVtZW50JCwgT25SZW5kZXJQcm9wKTtcbiAgY29uc3QgaGFzaCA9IGNvbXBvbmVudFFybD8uZ2V0SGFzaCgpIHx8ICcnO1xuICBjb25zdCBjb3VudGVyID0gZ2V0TmV4dFVuaXF1ZUluZGV4KGlDdHguJGNvbnRhaW5lciQpIHx8ICcnO1xuICBjb25zdCBpZCA9IGAke2Jhc2V9LSR7aGFzaH0tJHtjb3VudGVyfWA7IC8vIElmIG5vIGJhc2UgYW5kIG5vIGhhc2gsIHRoZW4gXCItLSNcIlxuICByZXR1cm4gc2V0KGlkKTtcbn07XG4iXX0=","import { tryGetInvokeContext } from './use-core';\n/** @public */\nexport function useServerData(key, defaultValue) {\n    const ctx = tryGetInvokeContext();\n    return ctx?.$container$?.$serverData$[key] ?? defaultValue;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWVudi1kYXRhLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtZW52LWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBUWpELGNBQWM7QUFDZCxNQUFNLFVBQVUsYUFBYSxDQUFDLEdBQVcsRUFBRSxZQUFrQjtJQUMzRCxNQUFNLEdBQUcsR0FBRyxtQkFBbUIsRUFBRSxDQUFDO0lBQ2xDLE9BQU8sR0FBRyxFQUFFLFdBQVcsRUFBRSxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksWUFBWSxDQUFDO0FBQzdELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0cnlHZXRJbnZva2VDb250ZXh0IH0gZnJvbSAnLi91c2UtY29yZSc7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU2VydmVyRGF0YTxUPihrZXk6IHN0cmluZyk6IFQgfCB1bmRlZmluZWQ7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU2VydmVyRGF0YTxULCBCID0gVD4oa2V5OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZTogQik6IFQgfCBCO1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNlcnZlckRhdGEoa2V5OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZT86IGFueSkge1xuICBjb25zdCBjdHggPSB0cnlHZXRJbnZva2VDb250ZXh0KCk7XG4gIHJldHVybiBjdHg/LiRjb250YWluZXIkPy4kc2VydmVyRGF0YSRba2V5XSA/PyBkZWZhdWx0VmFsdWU7XG59XG4iXX0=","/* eslint-disable no-console */\nimport { ComponentStylesPrefixContent } from './markers';\nimport { qDev } from './qdev';\n// Make sure this is always set to `false` in production, but it is useful to set for `true` in development for debugging.\nconst DEBUG = false;\nexport const STYLE_CACHE = /*#__PURE__*/ new Map();\nexport const getScopedStyles = (css, scopeId) => {\n    if (qDev) {\n        return scopeStylesheet(css, scopeId);\n    }\n    let styleCss = STYLE_CACHE.get(scopeId);\n    if (!styleCss) {\n        STYLE_CACHE.set(scopeId, (styleCss = scopeStylesheet(css, scopeId)));\n    }\n    return styleCss;\n};\nexport const scopeStylesheet = (css, scopeId) => {\n    const end = css.length;\n    const out = [];\n    const stack = [];\n    let idx = 0;\n    let lastIdx = idx;\n    let mode = rule;\n    let lastCh = 0;\n    DEBUG && console.log('--------------------------');\n    while (idx < end) {\n        DEBUG && console.log(css);\n        DEBUG && console.log(new Array(idx).fill(' ').join('') + '^');\n        DEBUG && console.log('MODE', ...stack.map(modeToString), modeToString(mode));\n        const chIdx = idx;\n        let ch = css.charCodeAt(idx++);\n        if (ch === BACKSLASH) {\n            idx++;\n            ch = A; // Pretend it's a letter\n        }\n        const arcs = STATE_MACHINE[mode];\n        for (let i = 0; i < arcs.length; i++) {\n            const arc = arcs[i];\n            const [expectLastCh, expectCh, newMode] = arc;\n            if (expectLastCh === lastCh ||\n                expectLastCh === ANY ||\n                (expectLastCh === IDENT && isIdent(lastCh)) ||\n                (expectLastCh === WHITESPACE && isWhiteSpace(lastCh))) {\n                if (expectCh === ch ||\n                    expectCh === ANY ||\n                    (expectCh === IDENT && isIdent(ch)) ||\n                    (expectCh === NOT_IDENT && !isIdent(ch) && ch !== DOT) ||\n                    (expectCh === WHITESPACE && isWhiteSpace(ch))) {\n                    if (arc.length == 3 || lookAhead(arc)) {\n                        if (arc.length > 3) {\n                            // If matched on lookAhead than we we have to update current `ch`\n                            ch = css.charCodeAt(idx - 1);\n                        }\n                        DEBUG &&\n                            console.log('MATCH', charToString(expectLastCh), charToString(expectCh), modeToString(newMode));\n                        // We found a match!\n                        if (newMode === EXIT || newMode == EXIT_INSERT_SCOPE) {\n                            if (newMode === EXIT_INSERT_SCOPE) {\n                                if (mode === starSelector && !shouldNotInsertScoping()) {\n                                    // Replace `*` with the scoping elementClassIdSelector.\n                                    if (isChainedSelector(ch)) {\n                                        // *foo\n                                        flush(idx - 2);\n                                    }\n                                    else {\n                                        // * (by itself)\n                                        insertScopingSelector(idx - 2);\n                                    }\n                                    lastIdx++;\n                                }\n                                else {\n                                    if (!isChainedSelector(ch)) {\n                                        // We are exiting one of the Selector so we may need to\n                                        const offset = expectCh == NOT_IDENT ? 1 : expectCh == CLOSE_PARENTHESIS ? 2 : 0;\n                                        insertScopingSelector(idx - offset);\n                                    }\n                                }\n                            }\n                            if (expectCh === NOT_IDENT) {\n                                // NOT_IDENT is not a real character more like lack of what we expected.\n                                // if pseudoGlobal we need to give it a chance to exit as well.\n                                // For this reason we need to reparse the last character again.\n                                idx--;\n                                ch = lastCh;\n                            }\n                            do {\n                                mode = stack.pop() || rule;\n                                if (mode === pseudoGlobal) {\n                                    // Skip over the `)` in `:global(...)`.\n                                    flush(idx - 1);\n                                    lastIdx++;\n                                }\n                            } while (isSelfClosingRule(mode));\n                        }\n                        else {\n                            stack.push(mode);\n                            if (mode === pseudoGlobal && newMode === rule) {\n                                flush(idx - 8); // `:global(`.length\n                                lastIdx = idx; // skip over \":global(\"\n                            }\n                            else if (newMode === pseudoElement) {\n                                // We are entering pseudoElement `::foo`; insert scoping in front of it.\n                                insertScopingSelector(chIdx);\n                            }\n                            mode = newMode;\n                            ch == SPACE; // Pretend not an identifier so that we don't flush again on elementClassIdSelector\n                        }\n                        break; // get out of the for loop as we found a match\n                    }\n                }\n            }\n        }\n        lastCh = ch;\n    }\n    flush(idx);\n    return out.join('');\n    function flush(idx) {\n        out.push(css.substring(lastIdx, idx));\n        DEBUG && console.log('FLUSH', out.join(''));\n        lastIdx = idx;\n    }\n    function insertScopingSelector(idx) {\n        if (mode === pseudoGlobal || shouldNotInsertScoping()) {\n            return;\n        }\n        flush(idx);\n        out.push('.', ComponentStylesPrefixContent, scopeId);\n        DEBUG && console.log('INSERT', out.join(''));\n    }\n    function lookAhead(arc) {\n        let prefix = 0; // Ignore vendor prefixes such as `-webkit-`.\n        if (css.charCodeAt(idx) === DASH) {\n            for (let i = 1; i < 10; i++) {\n                // give up after 10 characters\n                if (css.charCodeAt(idx + i) === DASH) {\n                    prefix = i + 1;\n                    break;\n                }\n            }\n        }\n        words: for (let arcIndx = 3; arcIndx < arc.length; arcIndx++) {\n            const txt = arc[arcIndx];\n            for (let i = 0; i < txt.length; i++) {\n                if ((css.charCodeAt(idx + i + prefix) | LOWERCASE) !== txt.charCodeAt(i)) {\n                    continue words;\n                }\n            }\n            // we found a match;\n            idx += txt.length + prefix;\n            return true;\n        }\n        return false;\n    }\n    function shouldNotInsertScoping() {\n        return stack.indexOf(pseudoGlobal) !== -1 || stack.indexOf(atRuleSelector) !== -1;\n    }\n};\nconst isIdent = (ch) => {\n    return ((ch >= _0 && ch <= _9) ||\n        (ch >= A && ch <= Z) ||\n        (ch >= a && ch <= z) ||\n        ch >= 0x80 ||\n        ch === UNDERSCORE ||\n        ch === DASH);\n};\nconst isChainedSelector = (ch) => {\n    return ch === COLON || ch === DOT || ch === OPEN_BRACKET || ch === HASH || isIdent(ch);\n};\nconst isSelfClosingRule = (mode) => {\n    return (mode === atRuleBlock || mode === atRuleSelector || mode === atRuleInert || mode === pseudoGlobal);\n};\nconst isWhiteSpace = (ch) => {\n    return ch === SPACE || ch === TAB || ch === NEWLINE || ch === CARRIAGE_RETURN;\n};\nconst modeToString = (mode) => {\n    return [\n        'rule',\n        'elementClassIdSelector',\n        'starSelector',\n        'pseudoClassWithSelector',\n        'pseudoClass',\n        'pseudoGlobal',\n        'pseudoElement',\n        'attrSelector',\n        'inertParenthesis',\n        'inertBlock',\n        'atRuleSelector',\n        'atRuleBlock',\n        'atInert',\n        'body',\n        'stringSingle',\n        'stringDouble',\n        'commentMultiline',\n        'EXIT',\n        'EXIT_INSERT_SCOPE',\n    ][mode];\n};\nconst charToString = (ch) => {\n    return ['ANY', 'IDENT', 'NOT_IDENT', 'WHITESPACE'][ch] || String.fromCharCode(ch);\n};\nconst rule = 0; // top level initial space.\nconst elementClassIdSelector = 1; // .elementClassIdSelector {}\nconst starSelector = 2; // * {}\nconst pseudoClassWithSelector = 3; // :pseudoClass(elementClassIdSelector) {}\nconst pseudoClass = 4; // :pseudoClass {}\nconst pseudoGlobal = 5; // :global(elementClassIdSelector)\nconst pseudoElement = 6; // ::pseudoElement {}\nconst attrSelector = 7; // [attr] {}\nconst inertParenthesis = 8; // (ignored)\nconst inertBlock = 9; // {ignored}\nconst atRuleSelector = 10; // @keyframe elementClassIdSelector {}\nconst atRuleBlock = 11; // @media {elementClassIdSelector {}}\nconst atRuleInert = 12; // @atRule something;\nconst body = 13; // .elementClassIdSelector {body}\nconst stringSingle = 14; // 'text'\nconst stringDouble = 15; // 'text'\nconst commentMultiline = 16; // /* ... */\n// NOT REAL MODES\nconst EXIT = 17; // Exit the mode\nconst EXIT_INSERT_SCOPE = 18; // Exit the mode INSERT SCOPE\nconst ANY = 0;\nconst IDENT = 1;\nconst NOT_IDENT = 2;\nconst WHITESPACE = 3;\nconst TAB = 9; // `\\t`.charCodeAt(0);\nconst NEWLINE = 10; // `\\n`.charCodeAt(0);\nconst CARRIAGE_RETURN = 13; // `\\r`.charCodeAt(0);\nconst SPACE = 32; // ` `.charCodeAt(0);\nconst DOUBLE_QUOTE = 34; // `\"`.charCodeAt(0);\nconst HASH = 35; // `#`.charCodeAt(0);\nconst SINGLE_QUOTE = 39; // `'`.charCodeAt(0);\nconst OPEN_PARENTHESIS = 40; // `(`.charCodeAt(0);\nconst CLOSE_PARENTHESIS = 41; // `)`.charCodeAt(0);\nconst STAR = 42; // `*`.charCodeAt(0);\n// const COMMA = 44; // `,`.charCodeAt(0);\nconst DASH = 45; // `-`.charCodeAt(0);\nconst DOT = 46; // `.`.charCodeAt(0);\nconst FORWARD_SLASH = 47; // `/`.charCodeAt(0);\nconst _0 = 48; // `0`.charCodeAt(0);\nconst _9 = 57; // `9`.charCodeAt(0);\nconst COLON = 58; // `:`.charCodeAt(0);\nconst SEMICOLON = 59; // `;`.charCodeAt(0);\n// const LESS_THAN = 60; // `<`.charCodeAt(0);\nconst AT = 64; // `@`.charCodeAt(0);\nconst A = 65; // `A`.charCodeAt(0);\nconst Z = 90; // `Z`.charCodeAt(0);\nconst OPEN_BRACKET = 91; // `[`.charCodeAt(0);\nconst CLOSE_BRACKET = 93; // `]`.charCodeAt(0);\nconst BACKSLASH = 92; // `\\\\`.charCodeAt(0);\nconst UNDERSCORE = 95; // `_`.charCodeAt(0);\nconst LOWERCASE = 0x20; // `a`.charCodeAt(0);\nconst a = 97; // `a`.charCodeAt(0);\n// const d = 100; // `d`.charCodeAt(0);\n// const g = 103; // 'g'.charCodeAt(0);\n// const h = 104; // `h`.charCodeAt(0);\n// const i = 105; // `i`.charCodeAt(0);\n// const l = 108; // `l`.charCodeAt(0);\n// const t = 116; // `t`.charCodeAt(0);\nconst z = 122; // `z`.charCodeAt(0);\nconst OPEN_BRACE = 123; // `{`.charCodeAt(0);\nconst CLOSE_BRACE = 125; // `}`.charCodeAt(0);\nconst STRINGS_COMMENTS = /*__PURE__*/ (() => [\n    [ANY, SINGLE_QUOTE, stringSingle],\n    [ANY, DOUBLE_QUOTE, stringDouble],\n    [ANY, FORWARD_SLASH, commentMultiline, '*'],\n])();\nconst STATE_MACHINE = /*__PURE__*/ (() => [\n    [\n        /// rule\n        [ANY, STAR, starSelector],\n        [ANY, OPEN_BRACKET, attrSelector],\n        [ANY, COLON, pseudoElement, ':', 'before', 'after', 'first-letter', 'first-line'],\n        [ANY, COLON, pseudoGlobal, 'global'],\n        [\n            ANY,\n            COLON,\n            pseudoClassWithSelector,\n            'has',\n            'host-context',\n            'not',\n            'where',\n            'is',\n            'matches',\n            'any',\n        ],\n        [ANY, COLON, pseudoClass],\n        [ANY, IDENT, elementClassIdSelector],\n        [ANY, DOT, elementClassIdSelector],\n        [ANY, HASH, elementClassIdSelector],\n        [ANY, AT, atRuleSelector, 'keyframe'],\n        [ANY, AT, atRuleBlock, 'media', 'supports', 'container'],\n        [ANY, AT, atRuleInert],\n        [ANY, OPEN_BRACE, body],\n        [FORWARD_SLASH, STAR, commentMultiline],\n        [ANY, SEMICOLON, EXIT],\n        [ANY, CLOSE_BRACE, EXIT],\n        [ANY, CLOSE_PARENTHESIS, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// elementClassIdSelector\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// starSelector\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoClassWithSelector\n        [ANY, OPEN_PARENTHESIS, rule],\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoClass\n        [ANY, OPEN_PARENTHESIS, inertParenthesis],\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoGlobal\n        [ANY, OPEN_PARENTHESIS, rule],\n        [ANY, NOT_IDENT, EXIT],\n    ],\n    [\n        /// pseudoElement\n        [ANY, NOT_IDENT, EXIT],\n    ],\n    [\n        /// attrSelector\n        [ANY, CLOSE_BRACKET, EXIT_INSERT_SCOPE],\n        [ANY, SINGLE_QUOTE, stringSingle],\n        [ANY, DOUBLE_QUOTE, stringDouble],\n    ],\n    [\n        /// inertParenthesis\n        [ANY, CLOSE_PARENTHESIS, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// inertBlock\n        [ANY, CLOSE_BRACE, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleSelector\n        [ANY, CLOSE_BRACE, EXIT],\n        [WHITESPACE, IDENT, elementClassIdSelector],\n        [ANY, COLON, pseudoGlobal, 'global'],\n        [ANY, OPEN_BRACE, body],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleBlock\n        [ANY, OPEN_BRACE, rule],\n        [ANY, SEMICOLON, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleInert\n        [ANY, SEMICOLON, EXIT],\n        [ANY, OPEN_BRACE, inertBlock],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// body\n        [ANY, CLOSE_BRACE, EXIT],\n        [ANY, OPEN_BRACE, body],\n        [ANY, OPEN_PARENTHESIS, inertParenthesis],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// stringSingle\n        [ANY, SINGLE_QUOTE, EXIT],\n    ],\n    [\n        /// stringDouble\n        [ANY, DOUBLE_QUOTE, EXIT],\n    ],\n    [\n        /// commentMultiline\n        [STAR, FORWARD_SLASH, EXIT],\n    ],\n])();\n//# sourceMappingURL=data:application/json;base64,","import {} from '../shared/qrl/qrl.public';\nimport { implicit$FirstArg } from '../shared/qrl/implicit_dollar';\nimport { getScopedStyles } from '../shared/utils/scoped-stylesheet';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { assertQrl } from '../shared/qrl/qrl-class';\nimport { isPromise } from '../shared/utils/promises';\nimport { ComponentStylesPrefixContent } from '../shared/utils/markers';\nimport { styleKey } from '../shared/utils/styles';\n// <docs markdown=\"../readme.md#useStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStyles instead)\n/**\n * A lazy-loadable reference to a component's styles.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import styles from './code-block.css?inline';\n *\n * export const CmpStyles = component$(() => {\n *   useStyles$(styles);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @public\n * @see `useStylesScoped`\n */\n// </docs>\nexport const useStylesQrl = (styles) => {\n    return {\n        styleId: _useStyles(styles, (str) => str, false),\n    };\n};\n// <docs markdown=\"../readme.md#useStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStyles instead)\n/**\n * A lazy-loadable reference to a component's styles.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import styles from './code-block.css?inline';\n *\n * export const CmpStyles = component$(() => {\n *   useStyles$(styles);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @public\n * @see `useStylesScoped`\n */\n// </docs>\nexport const useStyles$ = /*#__PURE__*/ implicit$FirstArg(useStylesQrl);\n// <docs markdown=\"../readme.md#useStylesScoped\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStylesScoped instead)\n/**\n * A lazy-loadable reference to a component's styles, that is scoped to the component.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import scoped from './code-block.css?inline';\n *\n * export const CmpScopedStyles = component$(() => {\n *   useStylesScoped$(scoped);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @public\n * @see `useStyles`\n */\n// </docs>\nexport const useStylesScopedQrl = (styles) => {\n    return {\n        scopeId: ComponentStylesPrefixContent + _useStyles(styles, getScopedStyles, true),\n    };\n};\n// <docs markdown=\"../readme.md#useStylesScoped\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStylesScoped instead)\n/**\n * A lazy-loadable reference to a component's styles, that is scoped to the component.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import scoped from './code-block.css?inline';\n *\n * export const CmpScopedStyles = component$(() => {\n *   useStylesScoped$(scoped);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @public\n * @see `useStyles`\n */\n// </docs>\nexport const useStylesScoped$ = /*#__PURE__*/ implicit$FirstArg(useStylesScopedQrl);\nconst _useStyles = (styleQrl, transform, scoped) => {\n    assertQrl(styleQrl);\n    const { val, set, iCtx, i } = useSequentialScope();\n    if (val) {\n        return val;\n    }\n    const styleId = styleKey(styleQrl, i);\n    const host = iCtx.$hostElement$;\n    set(styleId);\n    const value = styleQrl.$resolveLazy$(iCtx.$element$);\n    if (isPromise(value)) {\n        value.then((val) => iCtx.$container$.$appendStyle$(transform(val, styleId), styleId, host, scoped));\n        throw value;\n    }\n    else {\n        iCtx.$container$.$appendStyle$(transform(value, styleId), styleId, host, scoped);\n    }\n    return styleId;\n};\n//# sourceMappingURL=data:application/json;base64,","import { isQwikComponent } from '../shared/component.public';\nimport { isFunction } from '../shared/utils/types';\nimport { createSignal } from '../signal/signal.public';\nimport { invoke } from './use-core';\nimport { useSequentialScope } from './use-sequential-scope';\n/** @public */\nexport const useSignal = (initialState) => {\n    return useConstant(() => {\n        const value = isFunction(initialState) && !isQwikComponent(initialState)\n            ? invoke(undefined, initialState)\n            : initialState;\n        return createSignal(value);\n    });\n};\n/**\n * Stores a value which is retained for the lifetime of the component. Subsequent calls to\n * `useConstant` will always return the first value given.\n *\n * If the value is a function, the function is invoked once to calculate the actual value.\n *\n * @public\n */\nexport const useConstant = (value) => {\n    const { val, set } = useSequentialScope();\n    if (val != null) {\n        return val;\n    }\n    // Note: We are not using `invoke` here because we don't want to clear the context\n    value = isFunction(value) && !isQwikComponent(value) ? value() : value;\n    return set(value);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXNpZ25hbC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXNpZ25hbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDN0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ25ELE9BQU8sRUFBRSxZQUFZLEVBQWUsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBUTVELGNBQWM7QUFDZCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQWMsQ0FBUSxZQUFvQixFQUFpQixFQUFFO0lBQ2pGLE9BQU8sV0FBVyxDQUFDLEdBQUcsRUFBRTtRQUN0QixNQUFNLEtBQUssR0FDVCxVQUFVLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDO1lBQ3hELENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLFlBQW1CLENBQUM7WUFDeEMsQ0FBQyxDQUFDLFlBQVksQ0FBQztRQUNuQixPQUFPLFlBQVksQ0FBUSxLQUFLLENBQUMsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBSSxLQUFvQixFQUFLLEVBQUU7SUFDeEQsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxrQkFBa0IsRUFBSyxDQUFDO0lBQzdDLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ2hCLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUNELGtGQUFrRjtJQUNsRixLQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ3ZFLE9BQU8sR0FBRyxDQUFDLEtBQVUsQ0FBQyxDQUFDO0FBQ3pCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzUXdpa0NvbXBvbmVudCB9IGZyb20gJy4uL3NoYXJlZC9jb21wb25lbnQucHVibGljJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMvdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlU2lnbmFsLCB0eXBlIFNpZ25hbCB9IGZyb20gJy4uL3NpZ25hbC9zaWduYWwucHVibGljJztcbmltcG9ydCB7IGludm9rZSB9IGZyb20gJy4vdXNlLWNvcmUnO1xuaW1wb3J0IHsgdXNlU2VxdWVudGlhbFNjb3BlIH0gZnJvbSAnLi91c2Utc2VxdWVudGlhbC1zY29wZSc7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgaW50ZXJmYWNlIFVzZVNpZ25hbCB7XG4gIDxUPigpOiBTaWduYWw8VCB8IHVuZGVmaW5lZD47XG4gIDxUPih2YWx1ZTogVCB8ICgoKSA9PiBUKSk6IFNpZ25hbDxUPjtcbn1cblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCB1c2VTaWduYWw6IFVzZVNpZ25hbCA9IDxTVEFURT4oaW5pdGlhbFN0YXRlPzogU1RBVEUpOiBTaWduYWw8U1RBVEU+ID0+IHtcbiAgcmV0dXJuIHVzZUNvbnN0YW50KCgpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9XG4gICAgICBpc0Z1bmN0aW9uKGluaXRpYWxTdGF0ZSkgJiYgIWlzUXdpa0NvbXBvbmVudChpbml0aWFsU3RhdGUpXG4gICAgICAgID8gaW52b2tlKHVuZGVmaW5lZCwgaW5pdGlhbFN0YXRlIGFzIGFueSlcbiAgICAgICAgOiBpbml0aWFsU3RhdGU7XG4gICAgcmV0dXJuIGNyZWF0ZVNpZ25hbDxTVEFURT4odmFsdWUpO1xuICB9KTtcbn07XG5cbi8qKlxuICogU3RvcmVzIGEgdmFsdWUgd2hpY2ggaXMgcmV0YWluZWQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LiBTdWJzZXF1ZW50IGNhbGxzIHRvXG4gKiBgdXNlQ29uc3RhbnRgIHdpbGwgYWx3YXlzIHJldHVybiB0aGUgZmlyc3QgdmFsdWUgZ2l2ZW4uXG4gKlxuICogSWYgdGhlIHZhbHVlIGlzIGEgZnVuY3Rpb24sIHRoZSBmdW5jdGlvbiBpcyBpbnZva2VkIG9uY2UgdG8gY2FsY3VsYXRlIHRoZSBhY3R1YWwgdmFsdWUuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgdXNlQ29uc3RhbnQgPSA8VD4odmFsdWU6ICgoKSA9PiBUKSB8IFQpOiBUID0+IHtcbiAgY29uc3QgeyB2YWwsIHNldCB9ID0gdXNlU2VxdWVudGlhbFNjb3BlPFQ+KCk7XG4gIGlmICh2YWwgIT0gbnVsbCkge1xuICAgIHJldHVybiB2YWw7XG4gIH1cbiAgLy8gTm90ZTogV2UgYXJlIG5vdCB1c2luZyBgaW52b2tlYCBoZXJlIGJlY2F1c2Ugd2UgZG9uJ3Qgd2FudCB0byBjbGVhciB0aGUgY29udGV4dFxuICB2YWx1ZSA9IGlzRnVuY3Rpb24odmFsdWUpICYmICFpc1F3aWtDb21wb25lbnQodmFsdWUpID8gdmFsdWUoKSA6IHZhbHVlO1xuICByZXR1cm4gc2V0KHZhbHVlIGFzIFQpO1xufTtcbiJdfQ==","import { assertQrl } from '../shared/qrl/qrl-class';\nimport { ComputedSignal, throwIfQRLNotResolved } from '../signal/signal';\nimport { useSequentialScope } from './use-sequential-scope';\n/** @public */\nexport const useComputedQrl = (qrl) => {\n    const { val, set } = useSequentialScope();\n    if (val) {\n        return val;\n    }\n    assertQrl(qrl);\n    const signal = new ComputedSignal(null, qrl);\n    set(signal);\n    // Note that we first save the signal\n    // and then we throw to load the qrl\n    // This is why we can't use useConstant, we need to keep using the same qrl object\n    throwIfQRLNotResolved(qrl);\n    return signal;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWNvbXB1dGVkLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtY29tcHV0ZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXBELE9BQU8sRUFBRSxjQUFjLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUV6RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUs1RCxjQUFjO0FBQ2QsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQzVCLEdBQXVCLEVBQzZCLEVBQUU7SUFDdEQsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxrQkFBa0IsRUFBYSxDQUFDO0lBQ3JELElBQUksR0FBRyxFQUFFLENBQUM7UUFDUixPQUFPLEdBQVUsQ0FBQztJQUNwQixDQUFDO0lBQ0QsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2YsTUFBTSxNQUFNLEdBQUcsSUFBSSxjQUFjLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzdDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVaLHFDQUFxQztJQUNyQyxvQ0FBb0M7SUFDcEMsa0ZBQWtGO0lBQ2xGLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLE9BQU8sTUFBYSxDQUFDO0FBQ3ZCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydFFybCB9IGZyb20gJy4uL3NoYXJlZC9xcmwvcXJsLWNsYXNzJztcbmltcG9ydCB0eXBlIHsgUVJMIH0gZnJvbSAnLi4vc2hhcmVkL3FybC9xcmwucHVibGljJztcbmltcG9ydCB7IENvbXB1dGVkU2lnbmFsLCB0aHJvd0lmUVJMTm90UmVzb2x2ZWQgfSBmcm9tICcuLi9zaWduYWwvc2lnbmFsJztcbmltcG9ydCB0eXBlIHsgUmVhZG9ubHlTaWduYWwsIFNpZ25hbCB9IGZyb20gJy4uL3NpZ25hbC9zaWduYWwucHVibGljJztcbmltcG9ydCB7IHVzZVNlcXVlbnRpYWxTY29wZSB9IGZyb20gJy4vdXNlLXNlcXVlbnRpYWwtc2NvcGUnO1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgQ29tcHV0ZWRGbjxUPiA9ICgpID0+IFQ7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgdXNlQ29tcHV0ZWRRcmwgPSA8VD4oXG4gIHFybDogUVJMPENvbXB1dGVkRm48VD4+XG4pOiBUIGV4dGVuZHMgUHJvbWlzZTxhbnk+ID8gbmV2ZXIgOiBSZWFkb25seVNpZ25hbDxUPiA9PiB7XG4gIGNvbnN0IHsgdmFsLCBzZXQgfSA9IHVzZVNlcXVlbnRpYWxTY29wZTxTaWduYWw8VD4+KCk7XG4gIGlmICh2YWwpIHtcbiAgICByZXR1cm4gdmFsIGFzIGFueTtcbiAgfVxuICBhc3NlcnRRcmwocXJsKTtcbiAgY29uc3Qgc2lnbmFsID0gbmV3IENvbXB1dGVkU2lnbmFsKG51bGwsIHFybCk7XG4gIHNldChzaWduYWwpO1xuXG4gIC8vIE5vdGUgdGhhdCB3ZSBmaXJzdCBzYXZlIHRoZSBzaWduYWxcbiAgLy8gYW5kIHRoZW4gd2UgdGhyb3cgdG8gbG9hZCB0aGUgcXJsXG4gIC8vIFRoaXMgaXMgd2h5IHdlIGNhbid0IHVzZSB1c2VDb25zdGFudCwgd2UgbmVlZCB0byBrZWVwIHVzaW5nIHRoZSBzYW1lIHFybCBvYmplY3RcbiAgdGhyb3dJZlFSTE5vdFJlc29sdmVkKHFybCk7XG4gIHJldHVybiBzaWduYWwgYXMgYW55O1xufTtcbiJdfQ==","import { isServerPlatform } from '../shared/platform/platform';\nimport { assertQrl } from '../shared/qrl/qrl-class';\nimport { ChoreType } from '../shared/scheduler';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { Task, TaskFlags, useRunTask } from './use-task';\n// <docs markdown=\"../readme.md#useVisibleTask\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useVisibleTask instead)\n/**\n * ```tsx\n * const Timer = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *   });\n *\n *   useVisibleTask$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       store.count++;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *\n *   return <div>{store.count}</div>;\n * });\n * ```\n *\n * @public\n */\n// </docs>\nexport const useVisibleTaskQrl = (qrl, opts) => {\n    const { val, set, i, iCtx } = useSequentialScope();\n    const eagerness = opts?.strategy ?? 'intersection-observer';\n    if (val) {\n        if (isServerPlatform()) {\n            useRunTask(val, eagerness);\n        }\n        return;\n    }\n    assertQrl(qrl);\n    const task = new Task(TaskFlags.VISIBLE_TASK, i, iCtx.$hostElement$, qrl, undefined, null);\n    set(task);\n    useRunTask(task, eagerness);\n    if (!isServerPlatform()) {\n        qrl.$resolveLazy$(iCtx.$element$);\n        iCtx.$container$.$scheduler$(ChoreType.VISIBLE, task);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXZpc2libGUtdGFzay5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXZpc2libGUtdGFzay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFcEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBZSxNQUFNLFlBQVksQ0FBQztBQW9CdEUsZ0RBQWdEO0FBQ2hELHlDQUF5QztBQUN6Qyw2Q0FBNkM7QUFDN0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FzQkc7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxHQUFnQixFQUFFLElBQTJCLEVBQVEsRUFBRTtJQUN2RixNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsa0JBQWtCLEVBQWdCLENBQUM7SUFDakUsTUFBTSxTQUFTLEdBQUcsSUFBSSxFQUFFLFFBQVEsSUFBSSx1QkFBdUIsQ0FBQztJQUM1RCxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ1IsSUFBSSxnQkFBZ0IsRUFBRSxFQUFFLENBQUM7WUFDdkIsVUFBVSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUM3QixDQUFDO1FBQ0QsT0FBTztJQUNULENBQUM7SUFDRCxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFZixNQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0YsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ1YsVUFBVSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM1QixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDO1FBQ3hCLEdBQUcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDeEQsQ0FBQztBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzU2VydmVyUGxhdGZvcm0gfSBmcm9tICcuLi9zaGFyZWQvcGxhdGZvcm0vcGxhdGZvcm0nO1xuaW1wb3J0IHsgYXNzZXJ0UXJsIH0gZnJvbSAnLi4vc2hhcmVkL3FybC9xcmwtY2xhc3MnO1xuaW1wb3J0IHR5cGUgeyBRUkwgfSBmcm9tICcuLi9zaGFyZWQvcXJsL3FybC5wdWJsaWMnO1xuaW1wb3J0IHsgQ2hvcmVUeXBlIH0gZnJvbSAnLi4vc2hhcmVkL3NjaGVkdWxlcic7XG5pbXBvcnQgeyB1c2VTZXF1ZW50aWFsU2NvcGUgfSBmcm9tICcuL3VzZS1zZXF1ZW50aWFsLXNjb3BlJztcbmltcG9ydCB7IFRhc2ssIFRhc2tGbGFncywgdXNlUnVuVGFzaywgdHlwZSBUYXNrRm4gfSBmcm9tICcuL3VzZS10YXNrJztcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCB0eXBlIFZpc2libGVUYXNrU3RyYXRlZ3kgPSAnaW50ZXJzZWN0aW9uLW9ic2VydmVyJyB8ICdkb2N1bWVudC1yZWFkeScgfCAnZG9jdW1lbnQtaWRsZSc7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgaW50ZXJmYWNlIE9uVmlzaWJsZVRhc2tPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBzdHJhdGVneSB0byB1c2UgdG8gZGV0ZXJtaW5lIHdoZW4gdGhlIFwiVmlzaWJsZVRhc2tcIiBzaG91bGQgZmlyc3QgZXhlY3V0ZS5cbiAgICpcbiAgICogLSBgaW50ZXJzZWN0aW9uLW9ic2VydmVyYDogdGhlIHRhc2sgd2lsbCBmaXJzdCBleGVjdXRlIHdoZW4gdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSBpbiB0aGVcbiAgICogICB2aWV3cG9ydCwgdW5kZXIgdGhlIGhvb2QgaXQgdXNlcyB0aGUgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgQVBJLlxuICAgKiAtIGBkb2N1bWVudC1yZWFkeWA6IHRoZSB0YXNrIHdpbGwgZmlyc3QgZXhlY3V0ZSB3aGVuIHRoZSBkb2N1bWVudCBpcyByZWFkeSwgdW5kZXIgdGhlIGhvb2QgaXRcbiAgICogICB1c2VzIHRoZSBkb2N1bWVudCBgbG9hZGAgZXZlbnQuXG4gICAqIC0gYGRvY3VtZW50LWlkbGVgOiB0aGUgdGFzayB3aWxsIGZpcnN0IGV4ZWN1dGUgd2hlbiB0aGUgZG9jdW1lbnQgaXMgaWRsZSwgdW5kZXIgdGhlIGhvb2QgaXQgdXNlc1xuICAgKiAgIHRoZSByZXF1ZXN0SWRsZUNhbGxiYWNrIEFQSS5cbiAgICovXG4gIHN0cmF0ZWd5PzogVmlzaWJsZVRhc2tTdHJhdGVneTtcbn1cblxuLy8gPGRvY3MgbWFya2Rvd249XCIuLi9yZWFkbWUubWQjdXNlVmlzaWJsZVRhc2tcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjdXNlVmlzaWJsZVRhc2sgaW5zdGVhZClcbi8qKlxuICogYGBgdHN4XG4gKiBjb25zdCBUaW1lciA9IGNvbXBvbmVudCQoKCkgPT4ge1xuICogICBjb25zdCBzdG9yZSA9IHVzZVN0b3JlKHtcbiAqICAgICBjb3VudDogMCxcbiAqICAgfSk7XG4gKlxuICogICB1c2VWaXNpYmxlVGFzayQoKCkgPT4ge1xuICogICAgIC8vIE9ubHkgcnVucyBpbiB0aGUgY2xpZW50XG4gKiAgICAgY29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gKiAgICAgICBzdG9yZS5jb3VudCsrO1xuICogICAgIH0sIDUwMCk7XG4gKiAgICAgcmV0dXJuICgpID0+IHtcbiAqICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xuICogICAgIH07XG4gKiAgIH0pO1xuICpcbiAqICAgcmV0dXJuIDxkaXY+e3N0b3JlLmNvdW50fTwvZGl2PjtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3QgdXNlVmlzaWJsZVRhc2tRcmwgPSAocXJsOiBRUkw8VGFza0ZuPiwgb3B0cz86IE9uVmlzaWJsZVRhc2tPcHRpb25zKTogdm9pZCA9PiB7XG4gIGNvbnN0IHsgdmFsLCBzZXQsIGksIGlDdHggfSA9IHVzZVNlcXVlbnRpYWxTY29wZTxUYXNrPFRhc2tGbj4+KCk7XG4gIGNvbnN0IGVhZ2VybmVzcyA9IG9wdHM/LnN0cmF0ZWd5ID8/ICdpbnRlcnNlY3Rpb24tb2JzZXJ2ZXInO1xuICBpZiAodmFsKSB7XG4gICAgaWYgKGlzU2VydmVyUGxhdGZvcm0oKSkge1xuICAgICAgdXNlUnVuVGFzayh2YWwsIGVhZ2VybmVzcyk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBhc3NlcnRRcmwocXJsKTtcblxuICBjb25zdCB0YXNrID0gbmV3IFRhc2soVGFza0ZsYWdzLlZJU0lCTEVfVEFTSywgaSwgaUN0eC4kaG9zdEVsZW1lbnQkLCBxcmwsIHVuZGVmaW5lZCwgbnVsbCk7XG4gIHNldCh0YXNrKTtcbiAgdXNlUnVuVGFzayh0YXNrLCBlYWdlcm5lc3MpO1xuICBpZiAoIWlzU2VydmVyUGxhdGZvcm0oKSkge1xuICAgIHFybC4kcmVzb2x2ZUxhenkkKGlDdHguJGVsZW1lbnQkKTtcbiAgICBpQ3R4LiRjb250YWluZXIkLiRzY2hlZHVsZXIkKENob3JlVHlwZS5WSVNJQkxFLCB0YXNrKTtcbiAgfVxufTtcbiJdfQ==","import { dollar } from '../shared/qrl/qrl.public';\nimport { useResourceQrl, } from './use-resource';\n// <docs markdown=\"../readme.md#useResource\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResource instead)\n/**\n * This method works like an async memoized function that runs whenever some tracked value changes\n * and returns some data.\n *\n * `useResource` however returns immediate a `ResourceReturn` object that contains the data and a\n * state that indicates if the data is available or not.\n *\n * The status can be one of the following:\n *\n * - 'pending' - the data is not yet available.\n * - 'resolved' - the data is available.\n * - 'rejected' - the data is not available due to an error or timeout.\n *\n * ### Example\n *\n * Example showing how `useResource` to perform a fetch to request the weather, whenever the input\n * city name changes.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const cityS = useSignal('');\n *\n *   const weatherResource = useResource$(async ({ track, cleanup }) => {\n *     const cityName = track(cityS);\n *     const abortController = new AbortController();\n *     cleanup(() => abortController.abort('cleanup'));\n *     const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n *       signal: abortController.signal,\n *     });\n *     const data = await res.json();\n *     return data as { temp: number };\n *   });\n *\n *   return (\n *     <div>\n *       <input name=\"city\" bind:value={cityS} />\n *       <Resource\n *         value={weatherResource}\n *         onResolved={(weather) => {\n *           return <div>Temperature: {weather.temp}</div>;\n *         }}\n *       />\n *     </div>\n *   );\n * });\n * ```\n *\n * @public\n * @see Resource\n * @see ResourceReturn\n */\n// </docs>\nexport const useResource$ = (generatorFn, opts) => {\n    return useResourceQrl(dollar(generatorFn), opts);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXJlc291cmNlLWRvbGxhci5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXJlc291cmNlLWRvbGxhci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDbEQsT0FBTyxFQUNMLGNBQWMsR0FJZixNQUFNLGdCQUFnQixDQUFDO0FBRXhCLDZDQUE2QztBQUM3Qyx5Q0FBeUM7QUFDekMsMENBQTBDO0FBQzFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWtERztBQUVILFVBQVU7QUFDVixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FDMUIsV0FBMEIsRUFDMUIsSUFBc0IsRUFDSCxFQUFFO0lBQ3JCLE9BQU8sY0FBYyxDQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN0RCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkb2xsYXIgfSBmcm9tICcuLi9zaGFyZWQvcXJsL3FybC5wdWJsaWMnO1xuaW1wb3J0IHtcbiAgdXNlUmVzb3VyY2VRcmwsXG4gIHR5cGUgUmVzb3VyY2VGbixcbiAgdHlwZSBSZXNvdXJjZU9wdGlvbnMsXG4gIHR5cGUgUmVzb3VyY2VSZXR1cm4sXG59IGZyb20gJy4vdXNlLXJlc291cmNlJztcblxuLy8gPGRvY3MgbWFya2Rvd249XCIuLi9yZWFkbWUubWQjdXNlUmVzb3VyY2VcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjdXNlUmVzb3VyY2UgaW5zdGVhZClcbi8qKlxuICogVGhpcyBtZXRob2Qgd29ya3MgbGlrZSBhbiBhc3luYyBtZW1vaXplZCBmdW5jdGlvbiB0aGF0IHJ1bnMgd2hlbmV2ZXIgc29tZSB0cmFja2VkIHZhbHVlIGNoYW5nZXNcbiAqIGFuZCByZXR1cm5zIHNvbWUgZGF0YS5cbiAqXG4gKiBgdXNlUmVzb3VyY2VgIGhvd2V2ZXIgcmV0dXJucyBpbW1lZGlhdGUgYSBgUmVzb3VyY2VSZXR1cm5gIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSBkYXRhIGFuZCBhXG4gKiBzdGF0ZSB0aGF0IGluZGljYXRlcyBpZiB0aGUgZGF0YSBpcyBhdmFpbGFibGUgb3Igbm90LlxuICpcbiAqIFRoZSBzdGF0dXMgY2FuIGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nOlxuICpcbiAqIC0gJ3BlbmRpbmcnIC0gdGhlIGRhdGEgaXMgbm90IHlldCBhdmFpbGFibGUuXG4gKiAtICdyZXNvbHZlZCcgLSB0aGUgZGF0YSBpcyBhdmFpbGFibGUuXG4gKiAtICdyZWplY3RlZCcgLSB0aGUgZGF0YSBpcyBub3QgYXZhaWxhYmxlIGR1ZSB0byBhbiBlcnJvciBvciB0aW1lb3V0LlxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogRXhhbXBsZSBzaG93aW5nIGhvdyBgdXNlUmVzb3VyY2VgIHRvIHBlcmZvcm0gYSBmZXRjaCB0byByZXF1ZXN0IHRoZSB3ZWF0aGVyLCB3aGVuZXZlciB0aGUgaW5wdXRcbiAqIGNpdHkgbmFtZSBjaGFuZ2VzLlxuICpcbiAqIGBgYHRzeFxuICogY29uc3QgQ21wID0gY29tcG9uZW50JCgoKSA9PiB7XG4gKiAgIGNvbnN0IGNpdHlTID0gdXNlU2lnbmFsKCcnKTtcbiAqXG4gKiAgIGNvbnN0IHdlYXRoZXJSZXNvdXJjZSA9IHVzZVJlc291cmNlJChhc3luYyAoeyB0cmFjaywgY2xlYW51cCB9KSA9PiB7XG4gKiAgICAgY29uc3QgY2l0eU5hbWUgPSB0cmFjayhjaXR5Uyk7XG4gKiAgICAgY29uc3QgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICogICAgIGNsZWFudXAoKCkgPT4gYWJvcnRDb250cm9sbGVyLmFib3J0KCdjbGVhbnVwJykpO1xuICogICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGBodHRwOi8vd2VhdGhlcmRhdGEuY29tP2NpdHk9JHtjaXR5TmFtZX1gLCB7XG4gKiAgICAgICBzaWduYWw6IGFib3J0Q29udHJvbGxlci5zaWduYWwsXG4gKiAgICAgfSk7XG4gKiAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7XG4gKiAgICAgcmV0dXJuIGRhdGEgYXMgeyB0ZW1wOiBudW1iZXIgfTtcbiAqICAgfSk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxkaXY+XG4gKiAgICAgICA8aW5wdXQgbmFtZT1cImNpdHlcIiBiaW5kOnZhbHVlPXtjaXR5U30gLz5cbiAqICAgICAgIDxSZXNvdXJjZVxuICogICAgICAgICB2YWx1ZT17d2VhdGhlclJlc291cmNlfVxuICogICAgICAgICBvblJlc29sdmVkPXsod2VhdGhlcikgPT4ge1xuICogICAgICAgICAgIHJldHVybiA8ZGl2PlRlbXBlcmF0dXJlOiB7d2VhdGhlci50ZW1wfTwvZGl2PjtcbiAqICAgICAgICAgfX1cbiAqICAgICAgIC8+XG4gKiAgICAgPC9kaXY+XG4gKiAgICk7XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqIEBzZWUgUmVzb3VyY2VcbiAqIEBzZWUgUmVzb3VyY2VSZXR1cm5cbiAqL1xuXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3QgdXNlUmVzb3VyY2UkID0gPFQ+KFxuICBnZW5lcmF0b3JGbjogUmVzb3VyY2VGbjxUPixcbiAgb3B0cz86IFJlc291cmNlT3B0aW9uc1xuKTogUmVzb3VyY2VSZXR1cm48VD4gPT4ge1xuICByZXR1cm4gdXNlUmVzb3VyY2VRcmw8VD4oZG9sbGFyKGdlbmVyYXRvckZuKSwgb3B0cyk7XG59O1xuIl19","import { implicit$FirstArg } from '../shared/qrl/implicit_dollar';\nimport { useTaskQrl } from './use-task';\n// <docs markdown=\"../readme.md#useTask\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useTask instead)\n/**\n * Reruns the `taskFn` when the observed inputs change.\n *\n * Use `useTask` to observe changes on a set of inputs, and then re-execute the `taskFn` when those\n * inputs change.\n *\n * The `taskFn` only executes if the observed inputs change. To observe the inputs, use the `obs`\n * function to wrap property reads. This creates subscriptions that will trigger the `taskFn` to\n * rerun.\n *\n * @param task - Function which should be re-executed when changes to the inputs are detected\n * @public\n *\n * ### Example\n *\n * The `useTask` function is used to observe the `store.count` property. Any changes to the\n * `store.count` cause the `taskFn` to execute which in turn updates the `store.doubleCount` to\n * the double of `store.count`.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *     doubleCount: 0,\n *     debounced: 0,\n *   });\n *\n *   // Double count task\n *   useTask$(({ track }) => {\n *     const count = track(() => store.count);\n *     store.doubleCount = 2 * count;\n *   });\n *\n *   // Debouncer task\n *   useTask$(({ track }) => {\n *     const doubleCount = track(() => store.doubleCount);\n *     const timer = setTimeout(() => {\n *       store.debounced = doubleCount;\n *     }, 2000);\n *     return () => {\n *       clearTimeout(timer);\n *     };\n *   });\n *   return (\n *     <div>\n *       <div>\n *         {store.count} / {store.doubleCount}\n *       </div>\n *       <div>{store.debounced}</div>\n *     </div>\n *   );\n * });\n * ```\n *\n * @public\n * @see `Tracker`\n */\n// </docs>\nexport const useTask$ = /*#__PURE__*/ implicit$FirstArg(useTaskQrl);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXRhc2stZG9sbGFyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtdGFzay1kb2xsYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDbEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUV4Qyx5Q0FBeUM7QUFDekMseUNBQXlDO0FBQ3pDLHNDQUFzQztBQUN0Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F3REc7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGltcGxpY2l0JEZpcnN0QXJnIH0gZnJvbSAnLi4vc2hhcmVkL3FybC9pbXBsaWNpdF9kb2xsYXInO1xuaW1wb3J0IHsgdXNlVGFza1FybCB9IGZyb20gJy4vdXNlLXRhc2snO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VUYXNrXCI+XG4vLyAhIURPIE5PVCBFRElUIFRISVMgQ09NTUVOVCBESVJFQ1RMWSEhIVxuLy8gKGVkaXQgLi4vcmVhZG1lLm1kI3VzZVRhc2sgaW5zdGVhZClcbi8qKlxuICogUmVydW5zIHRoZSBgdGFza0ZuYCB3aGVuIHRoZSBvYnNlcnZlZCBpbnB1dHMgY2hhbmdlLlxuICpcbiAqIFVzZSBgdXNlVGFza2AgdG8gb2JzZXJ2ZSBjaGFuZ2VzIG9uIGEgc2V0IG9mIGlucHV0cywgYW5kIHRoZW4gcmUtZXhlY3V0ZSB0aGUgYHRhc2tGbmAgd2hlbiB0aG9zZVxuICogaW5wdXRzIGNoYW5nZS5cbiAqXG4gKiBUaGUgYHRhc2tGbmAgb25seSBleGVjdXRlcyBpZiB0aGUgb2JzZXJ2ZWQgaW5wdXRzIGNoYW5nZS4gVG8gb2JzZXJ2ZSB0aGUgaW5wdXRzLCB1c2UgdGhlIGBvYnNgXG4gKiBmdW5jdGlvbiB0byB3cmFwIHByb3BlcnR5IHJlYWRzLiBUaGlzIGNyZWF0ZXMgc3Vic2NyaXB0aW9ucyB0aGF0IHdpbGwgdHJpZ2dlciB0aGUgYHRhc2tGbmAgdG9cbiAqIHJlcnVuLlxuICpcbiAqIEBwYXJhbSB0YXNrIC0gRnVuY3Rpb24gd2hpY2ggc2hvdWxkIGJlIHJlLWV4ZWN1dGVkIHdoZW4gY2hhbmdlcyB0byB0aGUgaW5wdXRzIGFyZSBkZXRlY3RlZFxuICogQHB1YmxpY1xuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogVGhlIGB1c2VUYXNrYCBmdW5jdGlvbiBpcyB1c2VkIHRvIG9ic2VydmUgdGhlIGBzdG9yZS5jb3VudGAgcHJvcGVydHkuIEFueSBjaGFuZ2VzIHRvIHRoZVxuICogYHN0b3JlLmNvdW50YCBjYXVzZSB0aGUgYHRhc2tGbmAgdG8gZXhlY3V0ZSB3aGljaCBpbiB0dXJuIHVwZGF0ZXMgdGhlIGBzdG9yZS5kb3VibGVDb3VudGAgdG9cbiAqIHRoZSBkb3VibGUgb2YgYHN0b3JlLmNvdW50YC5cbiAqXG4gKiBgYGB0c3hcbiAqIGNvbnN0IENtcCA9IGNvbXBvbmVudCQoKCkgPT4ge1xuICogICBjb25zdCBzdG9yZSA9IHVzZVN0b3JlKHtcbiAqICAgICBjb3VudDogMCxcbiAqICAgICBkb3VibGVDb3VudDogMCxcbiAqICAgICBkZWJvdW5jZWQ6IDAsXG4gKiAgIH0pO1xuICpcbiAqICAgLy8gRG91YmxlIGNvdW50IHRhc2tcbiAqICAgdXNlVGFzayQoKHsgdHJhY2sgfSkgPT4ge1xuICogICAgIGNvbnN0IGNvdW50ID0gdHJhY2soKCkgPT4gc3RvcmUuY291bnQpO1xuICogICAgIHN0b3JlLmRvdWJsZUNvdW50ID0gMiAqIGNvdW50O1xuICogICB9KTtcbiAqXG4gKiAgIC8vIERlYm91bmNlciB0YXNrXG4gKiAgIHVzZVRhc2skKCh7IHRyYWNrIH0pID0+IHtcbiAqICAgICBjb25zdCBkb3VibGVDb3VudCA9IHRyYWNrKCgpID0+IHN0b3JlLmRvdWJsZUNvdW50KTtcbiAqICAgICBjb25zdCB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICogICAgICAgc3RvcmUuZGVib3VuY2VkID0gZG91YmxlQ291bnQ7XG4gKiAgICAgfSwgMjAwMCk7XG4gKiAgICAgcmV0dXJuICgpID0+IHtcbiAqICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gKiAgICAgfTtcbiAqICAgfSk7XG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGRpdj5cbiAqICAgICAgIDxkaXY+XG4gKiAgICAgICAgIHtzdG9yZS5jb3VudH0gLyB7c3RvcmUuZG91YmxlQ291bnR9XG4gKiAgICAgICA8L2Rpdj5cbiAqICAgICAgIDxkaXY+e3N0b3JlLmRlYm91bmNlZH08L2Rpdj5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICogQHNlZSBgVHJhY2tlcmBcbiAqL1xuLy8gPC9kb2NzPlxuZXhwb3J0IGNvbnN0IHVzZVRhc2skID0gLyojX19QVVJFX18qLyBpbXBsaWNpdCRGaXJzdEFyZyh1c2VUYXNrUXJsKTtcbiJdfQ==","import { implicit$FirstArg } from '../shared/qrl/implicit_dollar';\nimport { useVisibleTaskQrl } from './use-visible-task';\n// <docs markdown=\"../readme.md#useVisibleTask\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useVisibleTask instead)\n/**\n * ```tsx\n * const Timer = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *   });\n *\n *   useVisibleTask$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       store.count++;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *\n *   return <div>{store.count}</div>;\n * });\n * ```\n *\n * @public\n */\n// </docs>\nexport const useVisibleTask$ = /*#__PURE__*/ implicit$FirstArg(useVisibleTaskQrl);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXZpc2libGUtdGFzay1kb2xsYXIuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXNlL3VzZS12aXNpYmxlLXRhc2stZG9sbGFyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXZELGdEQUFnRDtBQUNoRCx5Q0FBeUM7QUFDekMsNkNBQTZDO0FBQzdDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBc0JHO0FBRUgsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxhQUFhLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGltcGxpY2l0JEZpcnN0QXJnIH0gZnJvbSAnLi4vc2hhcmVkL3FybC9pbXBsaWNpdF9kb2xsYXInO1xuaW1wb3J0IHsgdXNlVmlzaWJsZVRhc2tRcmwgfSBmcm9tICcuL3VzZS12aXNpYmxlLXRhc2snO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VWaXNpYmxlVGFza1wiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCN1c2VWaXNpYmxlVGFzayBpbnN0ZWFkKVxuLyoqXG4gKiBgYGB0c3hcbiAqIGNvbnN0IFRpbWVyID0gY29tcG9uZW50JCgoKSA9PiB7XG4gKiAgIGNvbnN0IHN0b3JlID0gdXNlU3RvcmUoe1xuICogICAgIGNvdW50OiAwLFxuICogICB9KTtcbiAqXG4gKiAgIHVzZVZpc2libGVUYXNrJCgoKSA9PiB7XG4gKiAgICAgLy8gT25seSBydW5zIGluIHRoZSBjbGllbnRcbiAqICAgICBjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcbiAqICAgICAgIHN0b3JlLmNvdW50Kys7XG4gKiAgICAgfSwgNTAwKTtcbiAqICAgICByZXR1cm4gKCkgPT4ge1xuICogICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gKiAgICAgfTtcbiAqICAgfSk7XG4gKlxuICogICByZXR1cm4gPGRpdj57c3RvcmUuY291bnR9PC9kaXY+O1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cblxuLy8gPC9kb2NzPlxuZXhwb3J0IGNvbnN0IHVzZVZpc2libGVUYXNrJCA9IC8qI19fUFVSRV9fKi8gaW1wbGljaXQkRmlyc3RBcmcodXNlVmlzaWJsZVRhc2tRcmwpO1xuIl19","import { implicit$FirstArg } from '../shared/qrl/implicit_dollar';\nimport { useComputedQrl } from './use-computed';\n/**\n * Creates a computed signal which is calculated from the given function. A computed signal is a\n * signal which is calculated from other signals. When the signals change, the computed signal is\n * recalculated, and if the result changed, all tasks which are tracking the signal will be re-run\n * and all components that read the signal will be re-rendered.\n *\n * The function must be synchronous and must not have any side effects.\n *\n * @public\n */\nexport const useComputed$ = implicit$FirstArg(useComputedQrl);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWNvbXB1dGVkLWRvbGxhci5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLWNvbXB1dGVkLWRvbGxhci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFaEQ7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW1wbGljaXQkRmlyc3RBcmcgfSBmcm9tICcuLi9zaGFyZWQvcXJsL2ltcGxpY2l0X2RvbGxhcic7XG5pbXBvcnQgeyB1c2VDb21wdXRlZFFybCB9IGZyb20gJy4vdXNlLWNvbXB1dGVkJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY29tcHV0ZWQgc2lnbmFsIHdoaWNoIGlzIGNhbGN1bGF0ZWQgZnJvbSB0aGUgZ2l2ZW4gZnVuY3Rpb24uIEEgY29tcHV0ZWQgc2lnbmFsIGlzIGFcbiAqIHNpZ25hbCB3aGljaCBpcyBjYWxjdWxhdGVkIGZyb20gb3RoZXIgc2lnbmFscy4gV2hlbiB0aGUgc2lnbmFscyBjaGFuZ2UsIHRoZSBjb21wdXRlZCBzaWduYWwgaXNcbiAqIHJlY2FsY3VsYXRlZCwgYW5kIGlmIHRoZSByZXN1bHQgY2hhbmdlZCwgYWxsIHRhc2tzIHdoaWNoIGFyZSB0cmFja2luZyB0aGUgc2lnbmFsIHdpbGwgYmUgcmUtcnVuXG4gKiBhbmQgYWxsIGNvbXBvbmVudHMgdGhhdCByZWFkIHRoZSBzaWduYWwgd2lsbCBiZSByZS1yZW5kZXJlZC5cbiAqXG4gKiBUaGUgZnVuY3Rpb24gbXVzdCBiZSBzeW5jaHJvbm91cyBhbmQgbXVzdCBub3QgaGF2ZSBhbnkgc2lkZSBlZmZlY3RzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZUNvbXB1dGVkJCA9IGltcGxpY2l0JEZpcnN0QXJnKHVzZUNvbXB1dGVkUXJsKTtcbiJdfQ==","import { qrl } from '../shared/qrl/qrl';\nimport { ERROR_CONTEXT } from '../shared/error/error-handling';\nimport { useContextProvider } from './use-context';\nimport { useOn } from './use-on';\nimport { useStore } from './use-store.public';\n/** @public */\nexport const useErrorBoundary = () => {\n    const store = useStore({\n        error: undefined,\n    });\n    useOn('error-boundary', qrl('/runtime', 'error', [store]));\n    useContextProvider(ERROR_CONTEXT, store);\n    return store;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWVycm9yLWJvdW5kYXJ5LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtZXJyb3ItYm91bmRhcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3hDLE9BQU8sRUFBMkIsYUFBYSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDeEYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDakMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTlDLGNBQWM7QUFDZCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFpQyxFQUFFO0lBQ2pFLE1BQU0sS0FBSyxHQUF1QixRQUFRLENBQUM7UUFDekMsS0FBSyxFQUFFLFNBQVM7S0FDakIsQ0FBQyxDQUFDO0lBQ0gsS0FBSyxDQUFDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNELGtCQUFrQixDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUV6QyxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHFybCB9IGZyb20gJy4uL3NoYXJlZC9xcmwvcXJsJztcbmltcG9ydCB7IHR5cGUgRXJyb3JCb3VuZGFyeVN0b3JlLCBFUlJPUl9DT05URVhUIH0gZnJvbSAnLi4vc2hhcmVkL2Vycm9yL2Vycm9yLWhhbmRsaW5nJztcbmltcG9ydCB7IHVzZUNvbnRleHRQcm92aWRlciB9IGZyb20gJy4vdXNlLWNvbnRleHQnO1xuaW1wb3J0IHsgdXNlT24gfSBmcm9tICcuL3VzZS1vbic7XG5pbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJy4vdXNlLXN0b3JlLnB1YmxpYyc7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgdXNlRXJyb3JCb3VuZGFyeSA9ICgpOiBSZWFkb25seTxFcnJvckJvdW5kYXJ5U3RvcmU+ID0+IHtcbiAgY29uc3Qgc3RvcmU6IEVycm9yQm91bmRhcnlTdG9yZSA9IHVzZVN0b3JlKHtcbiAgICBlcnJvcjogdW5kZWZpbmVkLFxuICB9KTtcbiAgdXNlT24oJ2Vycm9yLWJvdW5kYXJ5JywgcXJsKCcvcnVudGltZScsICdlcnJvcicsIFtzdG9yZV0pKTtcbiAgdXNlQ29udGV4dFByb3ZpZGVyKEVSUk9SX0NPTlRFWFQsIHN0b3JlKTtcblxuICByZXR1cm4gc3RvcmU7XG59O1xuIl19","import { isDev } from '@builder.io/qwik/build';\nimport { _jsxSorted } from '../../internal';\nimport { useServerData } from '../../use/use-env-data';\nimport { QBaseAttr, QManifestHashAttr } from '../utils/markers';\n/**\n * Install a service worker which will prefetch the bundles.\n *\n * There can only be one service worker per page. Because there can be many separate Qwik Containers\n * on the page each container needs to load its prefetch graph using `PrefetchGraph` component.\n *\n * @param opts - Options for the prefetch service worker.\n *\n *   - `base` - Base URL for the service worker. Default is `import.meta.env.BASE_URL`, which is defined\n *       by Vite's `config.base` and defaults to `/`.\n *   - `scope` - Base URL for when the service-worker will activate. Default is `/`\n *   - `path` - Path to the service worker. Default is `qwik-prefetch-service-worker.js` unless you pass\n *       a path that starts with a `/` then the base is ignored. Default is\n *       `qwik-prefetch-service-worker.js`\n *   - `verbose` - Verbose logging for the service worker installation. Default is `false`\n *   - `nonce` - Optional nonce value for security purposes, defaults to `undefined`.\n *\n * @alpha\n */\nexport const PrefetchServiceWorker = (opts) => {\n    const isTest = import.meta.env.TEST;\n    if (isDev && !isTest) {\n        const props = {\n            dangerouslySetInnerHTML: '<!-- PrefetchServiceWorker is disabled in dev mode. -->',\n        };\n        return _jsxSorted('script', null, props, null, 0, 'prefetch-service-worker');\n    }\n    const serverData = useServerData('containerAttributes', {});\n    // if an MFE app has a custom BASE_URL then this will be the correct value\n    // if you're not using MFE from another codebase then you want to override this value to your custom setup\n    const baseUrl = import.meta.env.BASE_URL || '/';\n    const resolvedOpts = {\n        base: serverData['q:base'],\n        manifestHash: serverData['q:manifest-hash'],\n        scope: '/',\n        verbose: false,\n        path: 'qwik-prefetch-service-worker.js',\n        ...opts,\n    };\n    if (opts?.path?.startsWith?.('/')) {\n        // allow different path and base\n        resolvedOpts.path = opts.path;\n    }\n    else {\n        // baseUrl: '/'\n        // path: 'qwik-prefetch-service-worker.js'\n        // the file 'qwik-prefetch-service-worker.js' is not located in /build/\n        resolvedOpts.path = baseUrl + resolvedOpts.path;\n    }\n    let code = PREFETCH_CODE.replace('URL', resolvedOpts.path).replace('SCOPE', resolvedOpts.scope);\n    if (!isDev) {\n        code = code.replaceAll(/\\s+/gm, '');\n    }\n    const props = {\n        dangerouslySetInnerHTML: [\n            '(' + code + ')(',\n            [\n                JSON.stringify(resolvedOpts.base),\n                JSON.stringify(resolvedOpts.manifestHash),\n                'navigator.serviceWorker',\n                'window.qwikPrefetchSW||(window.qwikPrefetchSW=[])',\n                resolvedOpts.verbose,\n            ].join(','),\n            ');',\n        ].join(''),\n        nonce: resolvedOpts.nonce,\n    };\n    return _jsxSorted('script', null, props, null, 0, 'prefetch-service-worker');\n};\nconst PREFETCH_CODE = /*#__PURE__*/ ((b, // base\nh, // manifest hash\nc, // Service worker container\nq, // Queue of messages to send to the service worker.\nv // Verbose mode\n) => {\n    c.register('URL', { scope: 'SCOPE' }).then((sw, onReady) => {\n        onReady = () => q.forEach((q.push = (v) => sw.active.postMessage(v)));\n        sw.installing\n            ? sw.installing.addEventListener('statechange', (e) => e.target.state == 'activated' && onReady())\n            : onReady();\n    });\n    v && q.push(['verbose']);\n    document.addEventListener('qprefetch', (e) => e.detail.bundles && q.push(['prefetch', b, ...e.detail.bundles]));\n}).toString();\n/**\n * Load the prefetch graph for the container.\n *\n * Each Qwik container needs to include its own prefetch graph.\n *\n * @param opts - Options for the loading prefetch graph.\n *\n *   - `base` - Base of the graph. For a default installation this will default to the q:base value\n *       `/build/`. But if more than one MFE is installed on the page, then each MFE needs to have\n *       its own base.\n *   - `manifestHash` - Hash of the manifest file to load. If not provided the hash will be extracted\n *       from the container attribute `q:manifest-hash` and assume the default build file\n *       `${base}/q-bundle-graph-${manifestHash}.json`.\n *   - `manifestURL` - URL of the manifest file to load if non-standard bundle graph location name.\n *\n * @alpha\n */\nexport const PrefetchGraph = (opts = {}) => {\n    const isTest = import.meta.env.TEST;\n    if (isDev && !isTest) {\n        const props = {\n            dangerouslySetInnerHTML: '<!-- PrefetchGraph is disabled in dev mode. -->',\n        };\n        return _jsxSorted('script', null, props, null, 0, 'prefetch-graph');\n    }\n    const serverData = useServerData('containerAttributes', {});\n    const resolvedOpts = {\n        // /build/q-bundle-graph-${manifestHash}.json is always within the q:base location /build/\n        base: serverData[QBaseAttr],\n        manifestHash: serverData[QManifestHashAttr],\n        scope: '/',\n        verbose: false,\n        path: 'qwik-prefetch-service-worker.js',\n        ...opts,\n    };\n    const args = JSON.stringify([\n        'graph-url',\n        resolvedOpts.base,\n        `q-bundle-graph-${resolvedOpts.manifestHash}.json`,\n    ]);\n    const code = `(window.qwikPrefetchSW||(window.qwikPrefetchSW=[])).push(${args})`;\n    const props = {\n        dangerouslySetInnerHTML: code,\n        nonce: opts.nonce,\n    };\n    return _jsxSorted('script', null, props, null, 0, 'prefetch-graph');\n};\n//# sourceMappingURL=data:application/json;base64,"],"names":["isElement","isQrl","createSignal","_createSignal","_createComputedSignal"],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,iBAAiB,GAAG,CAAC,EAAE,KAAK;AACzC,IAAI,OAAO,UAAU,KAAK,EAAE,GAAG,IAAI,EAAE;AACrC,QAAQ,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC;AACrD,KAAK,CAAC;AACN;;AC5CO,MAAMC,cAAY,GAAG,CAAC,KAAK,KAAK;AACvC,IAAI,OAAO,IAAI,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACnC,CAAC,CAAC;AACK,MAAM,oBAAoB,GAAG,CAAC,GAAG,KAAK;AAC7C,IAAI,qBAAqB,CAAC,GAAG,CAAC,CAAC;AAC/B,IAAI,OAAO,IAAI,cAAc,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;AACzC,CAAC;;ACJD;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,YAAY,GAAGC,eAAc;AAC1C;AACY,MAAC,iBAAiB,GAAGC,qBAAsB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,eAAe,iBAAiB,iBAAiB,CAAC,iBAAiB;;ACxBhF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBO,IAAI,SAAS,CAAC;AACrB,CAAC,UAAU,SAAS,EAAE;AACtB;AACA,IAAI,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,GAAG,C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AI,MAAM,IAAI,GAAG,mBAAmB,EAAE,CAAC;AACvC,IAAI,IAAI,IAAI,EAAE;AACd,QAAQ,OAAO,IAAI,CAAC,OAAO,CAAC;AAC5B,KAAK;AACL,EAAE;AACF;AACY,MAAC,UAAU,GAAG,CAAC,KAAK,KAAK;AACrC,IAAI,OAAO,KAAK,CAAC;AACjB,EAAE;AACF;AACY,MAAC,kBAAkB,GAAG,CAAC,GAAG,KAAK;AAC3C,IAAI,MAAM,WAAW,GAAG,qBAAqB,CAAC,GAAG,CAAC,CAAC;AACnD,IAAI,IAAI,CAAC,WAAW,EAAE;AACtB,QAAQ,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;AACjC,KAAK;AACL,IAAI,MAAM,SAAS,GAAG,WAAW,CAAC,UAAU,CAAC;AAC7C,IAAI,OAAO,SAAS,EAAE,UAAU,IAAI,OAAO,CAAC,OAAO,EAAE,CAAC;AACtD;;AC9JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,eAAe,GAAG,CAAC,IAAI,KAAK;AACzC,IAAI,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,+CAA+C,EAAE,IAAI,CAAC,CAAC;AAC/F,IAAI,qBAAqB,MAAM,CAAC,MAAM,CAAC;AACvC,QAAQ,EAAE,EAAE,oBAAoB,CAAC,IAAI,CAAC;AACtC,KAAK,CAAC,CAAC;AACP,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,YAAY,GAAG,CAAC,YAAY,KAAK;AAC9C;AACA,IAAI,MAAM,aAAa,GAAG,MAAM,GAAG,CAAC;AACpC,IAAI,aAAa,CAAC,kBAAkB,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AACvD,IAAI,OAAO,aAAa,CAAC;AACzB,EAAE;AACK,MAAM,kBAAkB,GAAG,MAAM,CAAC,mBAAmB,CAAC,CAAC;AACvD,MAAM,eAAe,GAAG,CAAC,SAAS,KAAK;AAC9C,IAAI,OAAO,OAAO,SAAS,IAAI,UAAU,IAAI,SAAS,CAAC,kBAAkB,CAAC,KAAK,SAAS,CAAC;AACzF,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,UAAU,GAAG,CAAC,OAAO,KAAK;AACvC,IAAI,OAAO,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;AACzC;;ACxHA;AACY,MAAC,MAAM,GAAG,iBAAiB,CAAC,QAAQ;;ACGhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,MAAM,GAAG,OAAO,MAAM,EAAE,OAAO,EAAE,IAAI,GAAG,EAAE,KAAK;AAC5D,IAAI,IAAI,UAAU,CAAC,MAAM,CAAC,EAAE;AAC5B,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AC,IAAI,CAAC,CAAC;AACd,IAAI,UAAU,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAChC,IAAI,IAAI,CAAC,gBAAgB,EAAE,EAAE;AAC7B,QAAQ,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAC1C,QAAQ,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAC9D,KAAK;AACL;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,YAAY,GAAG,CAAC,WAAW,EAAE,IAAI,KAAK;AACnD,IAAI,OAAO,cAAc,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC;AACrD;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,QAAQ,iBAAiB,iBAAiB,CAAC,UAAU;;AC7DlE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,eAAe,iBAAiB,iBAAiB,CAAC,iBAAiB;;AC3BhF;AACA;AACA;AACA;AACA;AACA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"}