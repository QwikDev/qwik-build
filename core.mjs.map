{"version":3,"file":"core.mjs","sources":["../../../dist-dev/tsc-out/packages/qwik/src/core/util/qdev.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/element.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/log.js","../../../dist-dev/tsc-out/packages/qwik/src/core/error/assert.js","../../../dist-dev/tsc-out/packages/qwik/src/core/error/error.js","../../../dist-dev/tsc-out/packages/qwik/src/core/platform/platform.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/types.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/case.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/shared/types.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/markers.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/constants.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/fast-calls.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/dom.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/flyweight.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/hash_code.js","../../../dist-dev/tsc-out/packages/qwik/src/core/style/qrl-styles.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/promises.js","../../../dist-dev/tsc-out/packages/qwik/src/core/version.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/utils.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/unitless_number.js","../../../dist-dev/tsc-out/packages/qwik/src/server/prefetch-strategy.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/prop.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/shared/scoped-styles.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/slot.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/signal/v2-store.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/shared/shared-serialization.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/shared/shared-container.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/shared/vnode-data-types.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/client/process-vnode-data.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/client/types.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/shared/event-names.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/client/vnode-namespace.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-on.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/signal/v2-subscriber.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/shared/component-execution.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/shared/character-escaping.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/client/vnode-diff.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/client/dom-container.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/implicit_dollar.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/signal/v2-signal-api.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/signal/v2-signal.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/shared/scheduler.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/signal/v2-signal.js","../../../dist-dev/tsc-out/packages/qwik/src/core/debug.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/client/vnode.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/execute-component.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/store.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/ssr/render-ssr.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/async-generator.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/ssr/ssr-render-component.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/ssr/ssr-render-jsx.js","../../../dist-dev/tsc-out/packages/qwik/src/core/qrl/inlined-fn.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/shared-types.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/jsx-runtime.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-sequential-scope.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-resource.js","../../../dist-dev/tsc-out/packages/qwik/src/core/container/serializers.js","../../../dist-dev/tsc-out/packages/qwik/src/core/container/pause.js","../../../dist-dev/tsc-out/packages/qwik/src/core/qrl/qrl.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/listeners.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/render-dom.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/visitor.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/operations.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/virtual-element.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-context.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/error-handling.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-task.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/context.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-locale.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-core.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/signal.js","../../../dist-dev/tsc-out/packages/qwik/src/core/container/container.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/event.js","../../../dist-dev/tsc-out/packages/qwik/src/core/container/resume.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-lexical-scope.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/signals.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/notify-render.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/common.js","../../../dist-dev/tsc-out/packages/qwik/src/core/qrl/qrl-class.js","../../../dist-dev/tsc-out/packages/qwik/src/core/qrl/qrl.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/component/component.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/qrl/qrl.public.dollar.js","../../../dist-dev/tsc-out/packages/qwik/src/core/v2/client/dom-render.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-store.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-id.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-env-data.js","../../../dist-dev/tsc-out/packages/qwik/src/core/style/scoped-stylesheet.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-styles.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-signal.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-task-dollar.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-error-boundary.js","../../../dist-dev/tsc-out/packages/qwik/src/core/components/prefetch.js"],"sourcesContent":["// same as isDev but separate so we can test\nexport const qDev = globalThis.qDev !== false;\nexport const qInspector = globalThis.qInspector === true;\nexport const qSerialize = globalThis.qSerialize !== false;\nexport const qDynamicPlatform = globalThis.qDynamicPlatform !== false;\nexport const qTest = globalThis.qTest === true;\nexport const qRuntimeQrl = globalThis.qRuntimeQrl === true;\nexport const seal = (obj) => {\n    if (qDev) {\n        Object.seal(obj);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicWRldi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL3FkZXYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNENBQTRDO0FBQzVDLE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQztBQUM5QyxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLFVBQVUsS0FBSyxJQUFJLENBQUM7QUFDekQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxVQUFVLEtBQUssS0FBSyxDQUFDO0FBQzFELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLFVBQVUsQ0FBQyxnQkFBZ0IsS0FBSyxLQUFLLENBQUM7QUFDdEUsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDO0FBQy9DLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsV0FBVyxLQUFLLElBQUksQ0FBQztBQUUzRCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxHQUFRLEVBQUUsRUFBRTtJQUMvQixJQUFJLElBQUksRUFBRSxDQUFDO1FBQ1QsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQixDQUFDO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc2FtZSBhcyBpc0RldiBidXQgc2VwYXJhdGUgc28gd2UgY2FuIHRlc3RcbmV4cG9ydCBjb25zdCBxRGV2ID0gZ2xvYmFsVGhpcy5xRGV2ICE9PSBmYWxzZTtcbmV4cG9ydCBjb25zdCBxSW5zcGVjdG9yID0gZ2xvYmFsVGhpcy5xSW5zcGVjdG9yID09PSB0cnVlO1xuZXhwb3J0IGNvbnN0IHFTZXJpYWxpemUgPSBnbG9iYWxUaGlzLnFTZXJpYWxpemUgIT09IGZhbHNlO1xuZXhwb3J0IGNvbnN0IHFEeW5hbWljUGxhdGZvcm0gPSBnbG9iYWxUaGlzLnFEeW5hbWljUGxhdGZvcm0gIT09IGZhbHNlO1xuZXhwb3J0IGNvbnN0IHFUZXN0ID0gZ2xvYmFsVGhpcy5xVGVzdCA9PT0gdHJ1ZTtcbmV4cG9ydCBjb25zdCBxUnVudGltZVFybCA9IGdsb2JhbFRoaXMucVJ1bnRpbWVRcmwgPT09IHRydWU7XG5cbmV4cG9ydCBjb25zdCBzZWFsID0gKG9iajogYW55KSA9PiB7XG4gIGlmIChxRGV2KSB7XG4gICAgT2JqZWN0LnNlYWwob2JqKTtcbiAgfVxufTtcblxuZGVjbGFyZSBjb25zdCBnbG9iYWxUaGlzOiBhbnk7XG4iXX0=","export const isNode = (value) => {\n    return value && typeof value.nodeType === 'number';\n};\nexport const isDocument = (value) => {\n    return value.nodeType === 9;\n};\nexport const isElement = (value) => {\n    return value.nodeType === 1;\n};\nexport const isQwikElement = (value) => {\n    const nodeType = value.nodeType;\n    return nodeType === 1 || nodeType === 11 || nodeType === 111;\n};\nexport const isNodeElement = (value) => {\n    const nodeType = value.nodeType;\n    return nodeType === 1 || nodeType === 11 || nodeType === 111 || nodeType === 3;\n};\nexport const isVirtualElement = (value) => {\n    const nodeType = value.nodeType;\n    return nodeType === 11 || nodeType === 111;\n};\nexport const isVirtualElementOpenComment = (value) => {\n    return isComment(value) && value.data.startsWith('qv ');\n};\nexport const isText = (value) => {\n    return value.nodeType === 3;\n};\nexport const isComment = (value) => {\n    return value.nodeType === 8;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL2VsZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBVSxFQUFpQixFQUFFO0lBQ2xELE9BQU8sS0FBSyxJQUFJLE9BQU8sS0FBSyxDQUFDLFFBQVEsS0FBSyxRQUFRLENBQUM7QUFDckQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsS0FBVyxFQUFxQixFQUFFO0lBQzNELE9BQVEsS0FBYSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDdkMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBYSxFQUFvQixFQUFFO0lBQzNELE9BQVEsS0FBYSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDdkMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsS0FBYSxFQUF3QixFQUFFO0lBQ25FLE1BQU0sUUFBUSxHQUFJLEtBQWEsQ0FBQyxRQUFRLENBQUM7SUFDekMsT0FBTyxRQUFRLEtBQUssQ0FBQyxJQUFJLFFBQVEsS0FBSyxFQUFFLElBQUksUUFBUSxLQUFLLEdBQUcsQ0FBQztBQUMvRCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxLQUFhLEVBQXdCLEVBQUU7SUFDbkUsTUFBTSxRQUFRLEdBQUksS0FBYSxDQUFDLFFBQVEsQ0FBQztJQUN6QyxPQUFPLFFBQVEsS0FBSyxDQUFDLElBQUksUUFBUSxLQUFLLEVBQUUsSUFBSSxRQUFRLEtBQUssR0FBRyxJQUFJLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDakYsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxLQUFhLEVBQTJCLEVBQUU7SUFDekUsTUFBTSxRQUFRLEdBQUksS0FBYSxDQUFDLFFBQVEsQ0FBQztJQUN6QyxPQUFPLFFBQVEsS0FBSyxFQUFFLElBQUksUUFBUSxLQUFLLEdBQUcsQ0FBQztBQUM3QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxDQUFDLEtBQTRCLEVBQW9CLEVBQUU7SUFDNUYsT0FBTyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBeUIsRUFBaUIsRUFBRTtJQUNqRSxPQUFRLEtBQWEsQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDO0FBQ3ZDLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFDLEtBQXlCLEVBQW9CLEVBQUU7SUFDdkUsT0FBUSxLQUFhLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQztBQUN2QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFF3aWtFbGVtZW50LCBWaXJ0dWFsRWxlbWVudCB9IGZyb20gJy4uL3JlbmRlci9kb20vdmlydHVhbC1lbGVtZW50JztcblxuZXhwb3J0IGNvbnN0IGlzTm9kZSA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgTm9kZSA9PiB7XG4gIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUubm9kZVR5cGUgPT09ICdudW1iZXInO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzRG9jdW1lbnQgPSAodmFsdWU6IE5vZGUpOiB2YWx1ZSBpcyBEb2N1bWVudCA9PiB7XG4gIHJldHVybiAodmFsdWUgYXMgYW55KS5ub2RlVHlwZSA9PT0gOTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc0VsZW1lbnQgPSAodmFsdWU6IG9iamVjdCk6IHZhbHVlIGlzIEVsZW1lbnQgPT4ge1xuICByZXR1cm4gKHZhbHVlIGFzIGFueSkubm9kZVR5cGUgPT09IDE7XG59O1xuXG5leHBvcnQgY29uc3QgaXNRd2lrRWxlbWVudCA9ICh2YWx1ZTogb2JqZWN0KTogdmFsdWUgaXMgUXdpa0VsZW1lbnQgPT4ge1xuICBjb25zdCBub2RlVHlwZSA9ICh2YWx1ZSBhcyBhbnkpLm5vZGVUeXBlO1xuICByZXR1cm4gbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDExIHx8IG5vZGVUeXBlID09PSAxMTE7XG59O1xuXG5leHBvcnQgY29uc3QgaXNOb2RlRWxlbWVudCA9ICh2YWx1ZTogb2JqZWN0KTogdmFsdWUgaXMgUXdpa0VsZW1lbnQgPT4ge1xuICBjb25zdCBub2RlVHlwZSA9ICh2YWx1ZSBhcyBhbnkpLm5vZGVUeXBlO1xuICByZXR1cm4gbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDExIHx8IG5vZGVUeXBlID09PSAxMTEgfHwgbm9kZVR5cGUgPT09IDM7XG59O1xuXG5leHBvcnQgY29uc3QgaXNWaXJ0dWFsRWxlbWVudCA9ICh2YWx1ZTogb2JqZWN0KTogdmFsdWUgaXMgVmlydHVhbEVsZW1lbnQgPT4ge1xuICBjb25zdCBub2RlVHlwZSA9ICh2YWx1ZSBhcyBhbnkpLm5vZGVUeXBlO1xuICByZXR1cm4gbm9kZVR5cGUgPT09IDExIHx8IG5vZGVUeXBlID09PSAxMTE7XG59O1xuXG5leHBvcnQgY29uc3QgaXNWaXJ0dWFsRWxlbWVudE9wZW5Db21tZW50ID0gKHZhbHVlOiBOb2RlIHwgVmlydHVhbEVsZW1lbnQpOiB2YWx1ZSBpcyBDb21tZW50ID0+IHtcbiAgcmV0dXJuIGlzQ29tbWVudCh2YWx1ZSkgJiYgdmFsdWUuZGF0YS5zdGFydHNXaXRoKCdxdiAnKTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc1RleHQgPSAodmFsdWU6IE5vZGUgfCBRd2lrRWxlbWVudCk6IHZhbHVlIGlzIFRleHQgPT4ge1xuICByZXR1cm4gKHZhbHVlIGFzIGFueSkubm9kZVR5cGUgPT09IDM7XG59O1xuXG5leHBvcnQgY29uc3QgaXNDb21tZW50ID0gKHZhbHVlOiBOb2RlIHwgUXdpa0VsZW1lbnQpOiB2YWx1ZSBpcyBDb21tZW50ID0+IHtcbiAgcmV0dXJuICh2YWx1ZSBhcyBhbnkpLm5vZGVUeXBlID09PSA4O1xufTtcbiJdfQ==","import { isElement, isNode } from './element';\nimport { qDev, qTest } from './qdev';\nconst STYLE = qDev\n    ? `background: #564CE0; color: white; padding: 2px 3px; border-radius: 2px; font-size: 0.8em;`\n    : '';\nexport const logError = (message, ...optionalParams) => {\n    return createAndLogError(false, message, ...optionalParams);\n};\nexport const throwErrorAndStop = (message, ...optionalParams) => {\n    const error = createAndLogError(false, message, ...optionalParams);\n    // eslint-disable-next-line no-debugger\n    debugger;\n    throw error;\n};\nexport const logErrorAndStop = (message, ...optionalParams) => {\n    const err = createAndLogError(true, message, ...optionalParams);\n    // eslint-disable-next-line no-debugger\n    debugger;\n    return err;\n};\nconst _printed = /*#__PURE__*/ new Set();\nexport const logOnceWarn = (message, ...optionalParams) => {\n    if (qDev) {\n        const key = 'warn' + String(message);\n        if (!_printed.has(key)) {\n            _printed.add(key);\n            logWarn(message, ...optionalParams);\n        }\n    }\n};\nexport const logWarn = (message, ...optionalParams) => {\n    if (qDev) {\n        console.warn('%cQWIK WARN', STYLE, message, ...printParams(optionalParams));\n    }\n};\nexport const logDebug = (message, ...optionalParams) => {\n    if (qDev) {\n        // eslint-disable-next-line no-console\n        console.debug('%cQWIK', STYLE, message, ...printParams(optionalParams));\n    }\n};\nexport const tryGetContext = (element) => {\n    return element['_qc_'];\n};\nconst printParams = (optionalParams) => {\n    if (qDev) {\n        return optionalParams.map((p) => {\n            if (isNode(p) && isElement(p)) {\n                return printElement(p);\n            }\n            return p;\n        });\n    }\n    return optionalParams;\n};\nconst printElement = (el) => {\n    const ctx = tryGetContext(el);\n    const isServer = /*#__PURE__*/ (() => typeof process !== 'undefined' && !!process.versions && !!process.versions.node)();\n    return {\n        tagName: el.tagName,\n        renderQRL: ctx?.$componentQrl$?.getSymbol(),\n        element: isServer ? undefined : el,\n        ctx: isServer ? undefined : ctx,\n    };\n};\nconst createAndLogError = (asyncThrow, message, ...optionalParams) => {\n    const err = message instanceof Error ? message : new Error(message);\n    // display the error message first, then the optional params, and finally the stack trace\n    // the stack needs to be displayed last because the given params will be lost among large stack traces so it will\n    // provide a bad developer experience\n    console.error('%cQWIK ERROR', STYLE, err.message, ...printParams(optionalParams), err.stack);\n    asyncThrow &&\n        !qTest &&\n        setTimeout(() => {\n            // throwing error asynchronously to avoid breaking the current call stack.\n            // We throw so that the error is delivered to the global error handler for\n            // reporting it to a third-party tools such as Qwik Insights, Sentry or New Relic.\n            throw err;\n        }, 0);\n    return err;\n};\n//# sourceMappingURL=data:application/json;base64,","import { isElement, isQwikElement } from '../util/element';\nimport { throwErrorAndStop } from '../util/log';\nimport { qDev } from '../util/qdev';\nconst ASSERT_DISCLAIMER = 'Internal assert, this is likely caused by a bug in Qwik: ';\nexport function assertDefined(value, text, ...parts) {\n    if (qDev) {\n        if (value != null) {\n            return;\n        }\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertEqual(value1, value2, text, ...parts) {\n    if (qDev) {\n        if (value1 === value2) {\n            return;\n        }\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertFail(text, ...parts) {\n    if (qDev) {\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertTrue(value1, text, ...parts) {\n    if (qDev) {\n        if (value1 === true) {\n            return;\n        }\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertFalse(value1, text, ...parts) {\n    if (qDev) {\n        if (value1 === false) {\n            return;\n        }\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertNumber(value1, text, ...parts) {\n    if (qDev) {\n        if (typeof value1 === 'number') {\n            return;\n        }\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertString(value1, text, ...parts) {\n    if (qDev) {\n        if (typeof value1 === 'string') {\n            return;\n        }\n        throwErrorAndStop(ASSERT_DISCLAIMER + text, ...parts);\n    }\n}\nexport function assertQwikElement(el) {\n    if (qDev) {\n        if (!isQwikElement(el)) {\n            console.error('Not a Qwik Element, got', el.nodeType, el);\n            throwErrorAndStop(ASSERT_DISCLAIMER + 'Not a Qwik Element');\n        }\n    }\n}\nexport function assertElement(el) {\n    if (qDev) {\n        if (!isElement(el)) {\n            console.error('Not a Element, got', el);\n            throwErrorAndStop(ASSERT_DISCLAIMER + 'Not an Element');\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL2Vycm9yL2Fzc2VydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNoRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXBDLE1BQU0saUJBQWlCLEdBQUcsMkRBQTJELENBQUM7QUFFdEYsTUFBTSxVQUFVLGFBQWEsQ0FDM0IsS0FBUSxFQUNSLElBQVksRUFDWixHQUFHLEtBQVk7SUFFZixJQUFJLElBQUksRUFBRSxDQUFDO1FBQ1QsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFLENBQUM7WUFDbEIsT0FBTztRQUNULENBQUM7UUFDRCxpQkFBaUIsQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUN4RCxDQUFDO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQ3pCLE1BQVcsRUFDWCxNQUFXLEVBQ1gsSUFBWSxFQUNaLEdBQUcsS0FBWTtJQUVmLElBQUksSUFBSSxFQUFFLENBQUM7UUFDVCxJQUFJLE1BQU0sS0FBSyxNQUFNLEVBQUUsQ0FBQztZQUN0QixPQUFPO1FBQ1QsQ0FBQztRQUNELGlCQUFpQixDQUFDLGlCQUFpQixHQUFHLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQ3hELENBQUM7QUFDSCxDQUFDO0FBR0QsTUFBTSxVQUFVLFVBQVUsQ0FBQyxJQUFZLEVBQUUsR0FBRyxLQUFZO0lBQ3RELElBQUksSUFBSSxFQUFFLENBQUM7UUFDVCxpQkFBaUIsQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUN4RCxDQUFDO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUMsTUFBVyxFQUFFLElBQVksRUFBRSxHQUFHLEtBQVk7SUFDbkUsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNULElBQUksTUFBTSxLQUFLLElBQUksRUFBRSxDQUFDO1lBQ3BCLE9BQU87UUFDVCxDQUFDO1FBQ0QsaUJBQWlCLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDeEQsQ0FBQztBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLE1BQVcsRUFBRSxJQUFZLEVBQUUsR0FBRyxLQUFZO0lBQ3BFLElBQUksSUFBSSxFQUFFLENBQUM7UUFDVCxJQUFJLE1BQU0sS0FBSyxLQUFLLEVBQUUsQ0FBQztZQUNyQixPQUFPO1FBQ1QsQ0FBQztRQUNELGlCQUFpQixDQUFDLGlCQUFpQixHQUFHLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQ3hELENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxNQUFXLEVBQUUsSUFBWSxFQUFFLEdBQUcsS0FBWTtJQUNyRSxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ1QsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUUsQ0FBQztZQUMvQixPQUFPO1FBQ1QsQ0FBQztRQUNELGlCQUFpQixDQUFDLGlCQUFpQixHQUFHLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQ3hELENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxNQUFXLEVBQUUsSUFBWSxFQUFFLEdBQUcsS0FBWTtJQUNyRSxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ1QsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUUsQ0FBQztZQUMvQixPQUFPO1FBQ1QsQ0FBQztRQUNELGlCQUFpQixDQUFDLGlCQUFpQixHQUFHLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQ3hELENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEVBQU87SUFDdkMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNULElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUN2QixPQUFPLENBQUMsS0FBSyxDQUFDLHlCQUF5QixFQUFFLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDMUQsaUJBQWlCLENBQUMsaUJBQWlCLEdBQUcsb0JBQW9CLENBQUMsQ0FBQztRQUM5RCxDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFDLEVBQXlCO0lBQ3JELElBQUksSUFBSSxFQUFFLENBQUM7UUFDVCxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDbkIsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN4QyxpQkFBaUIsQ0FBQyxpQkFBaUIsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzFELENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUXdpa0VsZW1lbnQsIFZpcnR1YWxFbGVtZW50IH0gZnJvbSAnLi4vcmVuZGVyL2RvbS92aXJ0dWFsLWVsZW1lbnQnO1xuaW1wb3J0IHsgaXNFbGVtZW50LCBpc1F3aWtFbGVtZW50IH0gZnJvbSAnLi4vdXRpbC9lbGVtZW50JztcbmltcG9ydCB7IHRocm93RXJyb3JBbmRTdG9wIH0gZnJvbSAnLi4vdXRpbC9sb2cnO1xuaW1wb3J0IHsgcURldiB9IGZyb20gJy4uL3V0aWwvcWRldic7XG5cbmNvbnN0IEFTU0VSVF9ESVNDTEFJTUVSID0gJ0ludGVybmFsIGFzc2VydCwgdGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFF3aWs6ICc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnREZWZpbmVkPFQ+KFxuICB2YWx1ZTogVCxcbiAgdGV4dDogc3RyaW5nLFxuICAuLi5wYXJ0czogYW55W11cbik6IGFzc2VydHMgdmFsdWUgaXMgTm9uTnVsbGFibGU8VD4ge1xuICBpZiAocURldikge1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93RXJyb3JBbmRTdG9wKEFTU0VSVF9ESVNDTEFJTUVSICsgdGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRFcXVhbChcbiAgdmFsdWUxOiBhbnksXG4gIHZhbHVlMjogYW55LFxuICB0ZXh0OiBzdHJpbmcsXG4gIC4uLnBhcnRzOiBhbnlbXVxuKTogYXNzZXJ0cyB2YWx1ZTEgaXMgdHlwZW9mIHZhbHVlMiB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKHZhbHVlMSA9PT0gdmFsdWUyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93RXJyb3JBbmRTdG9wKEFTU0VSVF9ESVNDTEFJTUVSICsgdGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRGYWlsKHRleHQ6IHN0cmluZywgLi4ucGFydHM6IGFueVtdKTogbmV2ZXI7XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RmFpbCh0ZXh0OiBzdHJpbmcsIC4uLnBhcnRzOiBhbnlbXSkge1xuICBpZiAocURldikge1xuICAgIHRocm93RXJyb3JBbmRTdG9wKEFTU0VSVF9ESVNDTEFJTUVSICsgdGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRUcnVlKHZhbHVlMTogYW55LCB0ZXh0OiBzdHJpbmcsIC4uLnBhcnRzOiBhbnlbXSk6IGFzc2VydHMgdmFsdWUxIGlzIHRydWUge1xuICBpZiAocURldikge1xuICAgIGlmICh2YWx1ZTEgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhyb3dFcnJvckFuZFN0b3AoQVNTRVJUX0RJU0NMQUlNRVIgKyB0ZXh0LCAuLi5wYXJ0cyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEZhbHNlKHZhbHVlMTogYW55LCB0ZXh0OiBzdHJpbmcsIC4uLnBhcnRzOiBhbnlbXSk6IGFzc2VydHMgdmFsdWUxIGlzIHRydWUge1xuICBpZiAocURldikge1xuICAgIGlmICh2YWx1ZTEgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93RXJyb3JBbmRTdG9wKEFTU0VSVF9ESVNDTEFJTUVSICsgdGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnROdW1iZXIodmFsdWUxOiBhbnksIHRleHQ6IHN0cmluZywgLi4ucGFydHM6IGFueVtdKTogYXNzZXJ0cyB2YWx1ZTEgaXMgbnVtYmVyIHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlMSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhyb3dFcnJvckFuZFN0b3AoQVNTRVJUX0RJU0NMQUlNRVIgKyB0ZXh0LCAuLi5wYXJ0cyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFN0cmluZyh2YWx1ZTE6IGFueSwgdGV4dDogc3RyaW5nLCAuLi5wYXJ0czogYW55W10pOiBhc3NlcnRzIHZhbHVlMSBpcyBzdHJpbmcge1xuICBpZiAocURldikge1xuICAgIGlmICh0eXBlb2YgdmFsdWUxID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aHJvd0Vycm9yQW5kU3RvcChBU1NFUlRfRElTQ0xBSU1FUiArIHRleHQsIC4uLnBhcnRzKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0UXdpa0VsZW1lbnQoZWw6IGFueSk6IGFzc2VydHMgZWwgaXMgUXdpa0VsZW1lbnQge1xuICBpZiAocURldikge1xuICAgIGlmICghaXNRd2lrRWxlbWVudChlbCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ05vdCBhIFF3aWsgRWxlbWVudCwgZ290JywgZWwubm9kZVR5cGUsIGVsKTtcbiAgICAgIHRocm93RXJyb3JBbmRTdG9wKEFTU0VSVF9ESVNDTEFJTUVSICsgJ05vdCBhIFF3aWsgRWxlbWVudCcpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RWxlbWVudChlbDogTm9kZSB8IFZpcnR1YWxFbGVtZW50KTogYXNzZXJ0cyBlbCBpcyBFbGVtZW50IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAoIWlzRWxlbWVudChlbCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ05vdCBhIEVsZW1lbnQsIGdvdCcsIGVsKTtcbiAgICAgIHRocm93RXJyb3JBbmRTdG9wKEFTU0VSVF9ESVNDTEFJTUVSICsgJ05vdCBhbiBFbGVtZW50Jyk7XG4gICAgfVxuICB9XG59XG4iXX0=","import { logErrorAndStop } from '../util/log';\nimport { qDev } from '../util/qdev';\nexport const codeToText = (code, ...parts) => {\n    if (qDev) {\n        // Keep one error, one line to make it easier to search for the error message.\n        const MAP = [\n            'Error while serializing class attribute', // 0\n            'Can not serialize a HTML Node that is not an Element', // 1\n            'Runtime but no instance found on element.', // 2\n            'Only primitive and object literals can be serialized', // 3\n            'Crash while rendering', // 4\n            'You can render over a existing q:container. Skipping render().', // 5\n            'Set property {{0}}', // 6\n            \"Only function's and 'string's are supported.\", // 7\n            \"Only objects can be wrapped in 'QObject'\", // 8\n            `Only objects literals can be wrapped in 'QObject'`, // 9\n            'QRL is not a function', // 10\n            'Dynamic import not found', // 11\n            'Unknown type argument', // 12\n            `Actual value for useContext({{0}}) can not be found, make sure some ancestor component has set a value using useContextProvider(). In the browser make sure that the context was used during SSR so its state was serialized.`, // 13\n            \"Invoking 'use*()' method outside of invocation context.\", // 14\n            'Cant access renderCtx for existing context', // 15\n            'Cant access document for existing context', // 16\n            'props are immutable', // 17\n            '<div> component can only be used at the root of a Qwik component$()', // 18\n            'Props are immutable by default.', // 19\n            `Calling a 'use*()' method outside 'component$(() => { HERE })' is not allowed. 'use*()' methods provide hooks to the 'component$' state and lifecycle, ie 'use' hooks can only be called synchronously within the 'component$' function or another 'use' method.\\nSee https://qwik.dev/docs/components/tasks/#use-method-rules`, // 20\n            'Container is already paused. Skipping', // 21\n            '', // 22 -- unused\n            'When rendering directly on top of Document, the root node must be a <html>', // 23\n            'A <html> node must have 2 children. The first one <head> and the second one a <body>', // 24\n            'Invalid JSXNode type \"{{0}}\". It must be either a function or a string. Found:', // 25\n            'Tracking value changes can only be done to useStore() objects and component props', // 26\n            'Missing Object ID for captured object', // 27\n            'The provided Context reference \"{{0}}\" is not a valid context created by createContextId()', // 28\n            '<html> is the root container, it can not be rendered inside a component', // 29\n            'QRLs can not be resolved because it does not have an attached container. This means that the QRL does not know where it belongs inside the DOM, so it cant dynamically import() from a relative path.', // 30\n            'QRLs can not be dynamically resolved, because it does not have a chunk path', // 31\n            'The JSX ref attribute must be a Signal', // 32\n        ];\n        let text = MAP[code] ?? '';\n        if (parts.length) {\n            text = text.replaceAll(/{{(\\d+)}}/g, (_, index) => {\n                let v = parts[index];\n                if (v && typeof v === 'object' && v.constructor === Object) {\n                    v = JSON.stringify(v).slice(0, 50);\n                }\n                return v;\n            });\n        }\n        return `Code(${code}): ${text}`;\n    }\n    else {\n        // cute little hack to give roughly the correct line number. Update the line number if it shifts.\n        return `Code(${code}) https://github.com/QwikDev/qwik/blob/main/packages/qwik/src/core/error/error.ts#L${8 + code}`;\n    }\n};\nexport const QError_stringifyClassOrStyle = 0;\nexport const QError_cannotSerializeNode = 1;\nexport const QError_runtimeQrlNoElement = 2;\nexport const QError_verifySerializable = 3;\nexport const QError_errorWhileRendering = 4;\nexport const QError_cannotRenderOverExistingContainer = 5;\nexport const QError_setProperty = 6;\nexport const QError_qrlOrError = 7;\nexport const QError_onlyObjectWrapped = 8;\nexport const QError_onlyLiteralWrapped = 9;\nexport const QError_qrlIsNotFunction = 10;\nexport const QError_dynamicImportFailed = 11;\nexport const QError_unknownTypeArgument = 12;\nexport const QError_notFoundContext = 13;\nexport const QError_useMethodOutsideContext = 14;\nexport const QError_missingRenderCtx = 15;\nexport const QError_missingDoc = 16;\nexport const QError_immutableProps = 17;\nexport const QError_hostCanOnlyBeAtRoot = 18;\nexport const QError_immutableJsxProps = 19;\nexport const QError_useInvokeContext = 20;\nexport const QError_containerAlreadyPaused = 21;\nexport const QError_unused_please_reuse = 22;\nexport const QError_rootNodeMustBeHTML = 23;\nexport const QError_strictHTMLChildren = 24;\nexport const QError_invalidJsxNodeType = 25;\nexport const QError_trackUseStore = 26;\nexport const QError_missingObjectId = 27;\nexport const QError_invalidContext = 28;\nexport const QError_canNotRenderHTML = 29;\nexport const QError_qrlMissingContainer = 30;\nexport const QError_qrlMissingChunk = 31;\nexport const QError_invalidRefValue = 32;\nexport const qError = (code, ...parts) => {\n    const text = codeToText(code, ...parts);\n    return logErrorAndStop(text, ...parts);\n};\n//# sourceMappingURL=data:application/json;base64,","import { isServer } from '@builder.io/qwik/build';\nimport { qError, QError_qrlMissingChunk, QError_qrlMissingContainer } from '../error/error';\nimport { getSymbolHash } from '../qrl/qrl-class';\nimport { qDynamicPlatform } from '../util/qdev';\nexport const createPlatform = () => {\n    return {\n        isServer,\n        importSymbol(containerEl, url, symbolName) {\n            if (isServer) {\n                const hash = getSymbolHash(symbolName);\n                const regSym = globalThis.__qwik_reg_symbols?.get(hash);\n                if (regSym) {\n                    return regSym;\n                }\n            }\n            if (!url) {\n                throw qError(QError_qrlMissingChunk, symbolName);\n            }\n            if (!containerEl) {\n                throw qError(QError_qrlMissingContainer, url, symbolName);\n            }\n            const urlDoc = toUrl(containerEl.ownerDocument, containerEl, url).toString();\n            const urlCopy = new URL(urlDoc);\n            urlCopy.hash = '';\n            const importURL = urlCopy.href;\n            return import(/* @vite-ignore */ importURL).then((mod) => {\n                return mod[symbolName];\n            });\n        },\n        raf: (fn) => {\n            return new Promise((resolve) => {\n                requestAnimationFrame(() => {\n                    resolve(fn());\n                });\n            });\n        },\n        nextTick: (fn) => {\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(fn());\n                });\n            });\n        },\n        chunkForSymbol(symbolName, chunk) {\n            return [symbolName, chunk ?? '_'];\n        },\n    };\n};\n/**\n * Convert relative base URI and relative URL into a fully qualified URL.\n *\n * @param base -`QRL`s are relative, and therefore they need a base for resolution.\n *\n *   - `Element` use `base.ownerDocument.baseURI`\n *   - `Document` use `base.baseURI`\n *   - `string` use `base` as is\n *   - `QConfig` use `base.baseURI`\n *\n * @param url - Relative URL\n * @returns Fully qualified URL.\n */\nexport const toUrl = (doc, containerEl, url) => {\n    const baseURI = doc.baseURI;\n    const base = new URL(containerEl.getAttribute('q:base') ?? baseURI, baseURI);\n    return new URL(url, base);\n};\nlet _platform = /*#__PURE__ */ createPlatform();\n// <docs markdown=\"./readme.md#setPlatform\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ./readme.md#setPlatform instead)\n/**\n * Sets the `CorePlatform`.\n *\n * This is useful to override the platform in tests to change the behavior of,\n * `requestAnimationFrame`, and import resolution.\n *\n * @param doc - The document of the application for which the platform is needed.\n * @param platform - The platform to use.\n * @public\n */\n// </docs>\nexport const setPlatform = (plt) => (_platform = plt);\n// <docs markdown=\"./readme.md#getPlatform\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ./readme.md#getPlatform instead)\n/**\n * Retrieve the `CorePlatform`.\n *\n * The `CorePlatform` is also responsible for retrieving the Manifest, that contains mappings from\n * symbols to javascript import chunks. For this reason, `CorePlatform` can't be global, but is\n * specific to the application currently running. On server it is possible that many different\n * applications are running in a single server instance, and for this reason the `CorePlatform` is\n * associated with the application document.\n *\n * @param docOrNode - The document (or node) of the application for which the platform is needed.\n * @public\n */\n// </docs>\nexport const getPlatform = () => {\n    return _platform;\n};\nexport const isServerPlatform = () => {\n    if (qDynamicPlatform) {\n        return _platform.isServer;\n    }\n    return false;\n};\n//# sourceMappingURL=data:application/json;base64,","/** @private */\nexport const isHtmlElement = (node) => {\n    return node ? node.nodeType === 1 : false;\n};\nexport const isSerializableObject = (v) => {\n    const proto = Object.getPrototypeOf(v);\n    return proto === Object.prototype || proto === Array.prototype || proto === null;\n};\nexport const isObject = (v) => {\n    return !!v && typeof v === 'object';\n};\nexport const isArray = (v) => {\n    return Array.isArray(v);\n};\nexport const isString = (v) => {\n    return typeof v === 'string';\n};\nexport const isFunction = (v) => {\n    return typeof v === 'function';\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC90eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxlQUFlO0FBQ2YsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsSUFBYSxFQUFtQixFQUFFO0lBQzlELE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBRSxJQUFhLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQ3RELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLENBQUMsQ0FBVSxFQUFnQyxFQUFFO0lBQy9FLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkMsT0FBTyxLQUFLLEtBQUssTUFBTSxDQUFDLFNBQVMsSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDO0FBQ25GLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQVUsRUFBZSxFQUFFO0lBQ2xELE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLENBQUM7QUFDdEMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBVSxFQUFrQixFQUFFO0lBQ3BELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFVLEVBQWUsRUFBRTtJQUNsRCxPQUFPLE9BQU8sQ0FBQyxLQUFLLFFBQVEsQ0FBQztBQUMvQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBa0MsQ0FBVSxFQUFVLEVBQUU7SUFDaEYsT0FBTyxPQUFPLENBQUMsS0FBSyxVQUFVLENBQUM7QUFDakMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBwcml2YXRlICovXG5leHBvcnQgY29uc3QgaXNIdG1sRWxlbWVudCA9IChub2RlOiB1bmtub3duKTogbm9kZSBpcyBFbGVtZW50ID0+IHtcbiAgcmV0dXJuIG5vZGUgPyAobm9kZSBhcyBOb2RlKS5ub2RlVHlwZSA9PT0gMSA6IGZhbHNlO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzU2VyaWFsaXphYmxlT2JqZWN0ID0gKHY6IHVua25vd24pOiB2IGlzIFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0+IHtcbiAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yodik7XG4gIHJldHVybiBwcm90byA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBwcm90byA9PT0gQXJyYXkucHJvdG90eXBlIHx8IHByb3RvID09PSBudWxsO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzT2JqZWN0ID0gKHY6IHVua25vd24pOiB2IGlzIG9iamVjdCA9PiB7XG4gIHJldHVybiAhIXYgJiYgdHlwZW9mIHYgPT09ICdvYmplY3QnO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzQXJyYXkgPSAodjogdW5rbm93bik6IHYgaXMgdW5rbm93bltdID0+IHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodik7XG59O1xuXG5leHBvcnQgY29uc3QgaXNTdHJpbmcgPSAodjogdW5rbm93bik6IHYgaXMgc3RyaW5nID0+IHtcbiAgcmV0dXJuIHR5cGVvZiB2ID09PSAnc3RyaW5nJztcbn07XG5cbmV4cG9ydCBjb25zdCBpc0Z1bmN0aW9uID0gPFQgZXh0ZW5kcyAoLi4uYXJnczogYW55KSA9PiBhbnk+KHY6IHVua25vd24pOiB2IGlzIFQgPT4ge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdmdW5jdGlvbic7XG59O1xuXG4vKipcbiAqIFR5cGUgcmVwcmVzZW50aW5nIGEgdmFsdWUgd2hpY2ggaXMgZWl0aGVyIHJlc29sdmUgb3IgYSBwcm9taXNlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgVmFsdWVPclByb21pc2U8VD4gPSBUIHwgUHJvbWlzZTxUPjtcbiJdfQ==","export const fromCamelToKebabCase = (text) => {\n    return text.replace(/([A-Z])/g, '-$1').toLowerCase();\n};\nexport const fromKebabToCamelCase = (text) => {\n    return text.replace(/-./g, (x) => x[1].toUpperCase());\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FzZS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL2Nhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxJQUFZLEVBQVUsRUFBRTtJQUMzRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3ZELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLENBQUMsSUFBWSxFQUFVLEVBQUU7SUFDM0QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDeEQsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGZyb21DYW1lbFRvS2ViYWJDYXNlID0gKHRleHQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiB0ZXh0LnJlcGxhY2UoLyhbQS1aXSkvZywgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG5leHBvcnQgY29uc3QgZnJvbUtlYmFiVG9DYW1lbENhc2UgPSAodGV4dDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIHRleHQucmVwbGFjZSgvLS4vZywgKHgpID0+IHhbMV0udG9VcHBlckNhc2UoKSk7XG59O1xuIl19","export const isContainer2 = (container) => {\n    return container && typeof container === 'object' && typeof container.setHostProp === 'function';\n};\n/**\n * A friendly name tag for a VirtualVNode.\n *\n * Theses are used to give a name to a VirtualVNode. This is useful for debugging and testing.\n *\n * The name is only added in development mode and is not included in production builds.\n */\nexport const DEBUG_TYPE = 'q:type';\nexport var VirtualType;\n(function (VirtualType) {\n    VirtualType[\"Virtual\"] = \"V\";\n    VirtualType[\"Fragment\"] = \"F\";\n    VirtualType[\"WrappedSignal\"] = \"S\";\n    VirtualType[\"Awaited\"] = \"A\";\n    VirtualType[\"Component\"] = \"C\";\n    VirtualType[\"InlineComponent\"] = \"I\";\n    VirtualType[\"Projection\"] = \"P\";\n})(VirtualType || (VirtualType = {}));\nconst START = '\\x1b[34m';\nconst END = '\\x1b[0m';\nexport const VirtualTypeName = {\n    [VirtualType.Virtual]: /* ********* */ START + 'Virtual' + END, //\n    [VirtualType.Fragment]: /* ******** */ START + 'Fragment' + END, //\n    [VirtualType.WrappedSignal]: /* *** */ START + 'Signal' + END, //\n    [VirtualType.Awaited]: /* ********* */ START + 'Awaited' + END, //\n    [VirtualType.Component]: /* ******* */ START + 'Component' + END, //\n    [VirtualType.InlineComponent]: /* * */ START + 'InlineComponent' + END, //\n    [VirtualType.Projection]: /* ****** */ START + 'Projection' + END, //\n};\nexport var QContainerValue;\n(function (QContainerValue) {\n    QContainerValue[\"PAUSED\"] = \"paused\";\n    QContainerValue[\"RESUMED\"] = \"resumed\";\n    // these values below are used in the qwik loader as a plain text for the q:container selector\n    // standard dangerouslySetInnerHTML\n    QContainerValue[\"HTML\"] = \"html\";\n    // textarea\n    QContainerValue[\"TEXT\"] = \"text\";\n})(QContainerValue || (QContainerValue = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdjIvc2hhcmVkL3R5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNFQSxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxTQUFjLEVBQTJCLEVBQUU7SUFDdEUsT0FBTyxTQUFTLElBQUksT0FBTyxTQUFTLEtBQUssUUFBUSxJQUFJLE9BQU8sU0FBUyxDQUFDLFdBQVcsS0FBSyxVQUFVLENBQUM7QUFDbkcsQ0FBQyxDQUFDO0FBRUY7Ozs7OztHQU1HO0FBQ0gsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQztBQUVuQyxNQUFNLENBQU4sSUFBWSxXQVFYO0FBUkQsV0FBWSxXQUFXO0lBQ3JCLDRCQUFhLENBQUE7SUFDYiw2QkFBYyxDQUFBO0lBQ2Qsa0NBQW1CLENBQUE7SUFDbkIsNEJBQWEsQ0FBQTtJQUNiLDhCQUFlLENBQUE7SUFDZixvQ0FBcUIsQ0FBQTtJQUNyQiwrQkFBZ0IsQ0FBQTtBQUNsQixDQUFDLEVBUlcsV0FBVyxLQUFYLFdBQVcsUUFRdEI7QUFFRCxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUM7QUFDekIsTUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDO0FBRXRCLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBMkI7SUFDckQsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUUsZUFBZSxDQUFDLEtBQUssR0FBRyxTQUFTLEdBQUcsR0FBRyxFQUFFLEVBQUU7SUFDbEUsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEVBQUUsY0FBYyxDQUFDLEtBQUssR0FBRyxVQUFVLEdBQUcsR0FBRyxFQUFFLEVBQUU7SUFDbkUsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLEVBQUUsU0FBUyxDQUFDLEtBQUssR0FBRyxRQUFRLEdBQUcsR0FBRyxFQUFFLEVBQUU7SUFDakUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUUsZUFBZSxDQUFDLEtBQUssR0FBRyxTQUFTLEdBQUcsR0FBRyxFQUFFLEVBQUU7SUFDbEUsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEVBQUUsYUFBYSxDQUFDLEtBQUssR0FBRyxXQUFXLEdBQUcsR0FBRyxFQUFFLEVBQUU7SUFDcEUsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLEVBQUUsT0FBTyxDQUFDLEtBQUssR0FBRyxpQkFBaUIsR0FBRyxHQUFHLEVBQUUsRUFBRTtJQUMxRSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsS0FBSyxHQUFHLFlBQVksR0FBRyxHQUFHLEVBQUUsRUFBRTtDQUN0RSxDQUFDO0FBRUYsTUFBTSxDQUFOLElBQWtCLGVBUWpCO0FBUkQsV0FBa0IsZUFBZTtJQUMvQixvQ0FBaUIsQ0FBQTtJQUNqQixzQ0FBbUIsQ0FBQTtJQUNuQiw4RkFBOEY7SUFDOUYsbUNBQW1DO0lBQ25DLGdDQUFhLENBQUE7SUFDYixXQUFXO0lBQ1gsZ0NBQWEsQ0FBQTtBQUNmLENBQUMsRUFSaUIsZUFBZSxLQUFmLGVBQWUsUUFRaEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IE9ialRvUHJveHlNYXAgfSBmcm9tICcuLi8uLi9jb250YWluZXIvY29udGFpbmVyJztcbmltcG9ydCB0eXBlIHsgSlNYT3V0cHV0IH0gZnJvbSAnLi4vLi4vcmVuZGVyL2pzeC90eXBlcy9qc3gtbm9kZSc7XG5pbXBvcnQgdHlwZSB7IENvbnRleHRJZCB9IGZyb20gJy4uLy4uL3VzZS91c2UtY29udGV4dCc7XG5pbXBvcnQgdHlwZSB7IFZhbHVlT3JQcm9taXNlIH0gZnJvbSAnLi4vLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IFZpcnR1YWxWTm9kZSB9IGZyb20gJy4uL2NsaWVudC90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IElTc3JOb2RlLCBTdHJlYW1Xcml0ZXIsIFN5bWJvbFRvQ2h1bmtSZXNvbHZlciB9IGZyb20gJy4uL3Nzci9zc3ItdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBTY2hlZHVsZXIgfSBmcm9tICcuL3NjaGVkdWxlcic7XG5pbXBvcnQgdHlwZSB7IFNlcmlhbGl6YXRpb25Db250ZXh0IH0gZnJvbSAnLi9zaGFyZWQtc2VyaWFsaXphdGlvbic7XG5cbi8vLyBUZW1wb3JhcnkgdHlwZSBsZWZ0IGJlaGluZCB3aGljaCBuZWVkcyB0byBiZSBmaXhlZC5cbmV4cG9ydCB0eXBlIGZpeE1lQW55ID0gYW55O1xuXG5leHBvcnQgaW50ZXJmYWNlIERlc2VyaWFsaXplQ29udGFpbmVyIHtcbiAgJGdldE9iamVjdEJ5SWQkOiAoaWQ6IG51bWJlciB8IHN0cmluZykgPT4gdW5rbm93bjtcbiAgZWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsO1xuICBnZXRTeW5jRm46IChpZDogbnVtYmVyKSA9PiAoLi4uYXJnczogdW5rbm93bltdKSA9PiB1bmtub3duO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbnRhaW5lcjIge1xuICByZWFkb25seSAkdmVyc2lvbiQ6IHN0cmluZztcbiAgcmVhZG9ubHkgJHNjaGVkdWxlciQ6IFNjaGVkdWxlcjtcbiAgcmVhZG9ubHkgJHN0b3JlUHJveHlNYXAkOiBPYmpUb1Byb3h5TWFwO1xuICAvLy8gQ3VycmVudCBsYW5ndWFnZSBsb2NhbGVcbiAgcmVhZG9ubHkgJGxvY2FsZSQ6IHN0cmluZztcbiAgLy8vIFJldHJpZXZlIE9iamVjdCBmcm9tIHBhdXNlZCBzZXJpYWxpemVkIHN0YXRlLlxuICByZWFkb25seSAkZ2V0T2JqZWN0QnlJZCQ6IChpZDogbnVtYmVyIHwgc3RyaW5nKSA9PiBhbnk7XG4gIHJlYWRvbmx5ICRzZXJ2ZXJEYXRhJDogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgJGN1cnJlbnRVbmlxdWVJZCQ6IG51bWJlcjtcblxuICAvLyBUT0RPKG1pc2tvKTogSSB0aGluayBgcHJvY2Vzc0pzeGAgY2FuIGJlIGRlbGV0ZWQuXG4gIHByb2Nlc3NKc3goaG9zdDogSG9zdEVsZW1lbnQsIGpzeDogSlNYT3V0cHV0KTogVmFsdWVPclByb21pc2U8dm9pZD47XG4gIGhhbmRsZUVycm9yKGVycjogYW55LCAkaG9zdCQ6IEhvc3RFbGVtZW50KTogdm9pZDtcbiAgZ2V0UGFyZW50SG9zdChob3N0OiBIb3N0RWxlbWVudCk6IEhvc3RFbGVtZW50IHwgbnVsbDtcbiAgc2V0Q29udGV4dDxUPihob3N0OiBIb3N0RWxlbWVudCwgY29udGV4dDogQ29udGV4dElkPFQ+LCB2YWx1ZTogVCk6IHZvaWQ7XG4gIHJlc29sdmVDb250ZXh0PFQ+KGhvc3Q6IEhvc3RFbGVtZW50LCBjb250ZXh0SWQ6IENvbnRleHRJZDxUPik6IFQgfCB1bmRlZmluZWQ7XG4gIHNldEhvc3RQcm9wPFQ+KGhvc3Q6IEhvc3RFbGVtZW50LCBuYW1lOiBzdHJpbmcsIHZhbHVlOiBUKTogdm9pZDtcbiAgZ2V0SG9zdFByb3A8VD4oaG9zdDogSG9zdEVsZW1lbnQsIG5hbWU6IHN0cmluZyk6IFQgfCBudWxsO1xuICAkYXBwZW5kU3R5bGUkKGNvbnRlbnQ6IHN0cmluZywgc3R5bGVJZDogc3RyaW5nLCBob3N0OiBIb3N0RWxlbWVudCwgc2NvcGVkOiBib29sZWFuKTogdm9pZDtcbiAgLyoqXG4gICAqIFdoZW4gY29tcG9uZW50IGlzIGFib3V0IHRvIGJlIGV4ZWN1dGVkLCBpdCBtYXkgYWRkL3JlbW92ZSBjaGlsZHJlbi4gVGhpcyBjYW4gY2F1c2UgcHJvYmxlbXNcbiAgICogd2l0aCB0aGUgcHJvamVjdGlvbiBiZWNhdXNlIGRlbGV0aW5nIGNvbnRlbnQgd2lsbCBwcmV2ZW50IHRoZSBwcm9qZWN0aW9uIHJlZmVyZW5jZXMgZnJvbVxuICAgKiBsb29raW5nIHVwIHZub2Rlcy4gVGhlcmVmb3JlIGJlZm9yZSB3ZSBleGVjdXRlIHRoZSBjb21wb25lbnQgd2UgbmVlZCB0byBlbnN1cmUgdGhhdCBhbGwgb2YgaXRzXG4gICAqIHJlZmVyZW5jZXMgdG8gdm5vZGUgYXJlIHJlc29sdmVkLlxuICAgKlxuICAgKiBAcGFyYW0gcmVuZGVySG9zdCAtIEhvc3QgZWxlbWVudCB0byBlbnN1cmUgcHJvamVjdGlvbiBpcyByZXNvbHZlZC5cbiAgICovXG4gIGVuc3VyZVByb2plY3Rpb25SZXNvbHZlZChob3N0OiBIb3N0RWxlbWVudCk6IHZvaWQ7XG4gIHNlcmlhbGl6YXRpb25DdHhGYWN0b3J5KFxuICAgIE5vZGVDb25zdHJ1Y3RvcjogU2VyaWFsaXphdGlvbkNvbnRleHRbJyROb2RlQ29uc3RydWN0b3IkJ10gfCBudWxsLFxuICAgIHN5bWJvbFRvQ2h1bmtSZXNvbHZlcjogU3ltYm9sVG9DaHVua1Jlc29sdmVyLFxuICAgIHdyaXRlcj86IFN0cmVhbVdyaXRlclxuICApOiBTZXJpYWxpemF0aW9uQ29udGV4dDtcbn1cblxuZXhwb3J0IHR5cGUgSG9zdEVsZW1lbnQgPSBWaXJ0dWFsVk5vZGUgfCBJU3NyTm9kZTtcblxuZXhwb3J0IGludGVyZmFjZSBRRWxlbWVudDIgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIHFEaXNwYXRjaEV2ZW50PzogKGV2ZW50OiBFdmVudCwgc2NvcGU6IFF3aWtMb2FkZXJFdmVudFNjb3BlKSA9PiBib29sZWFuO1xufVxuXG5leHBvcnQgdHlwZSBxV2luZG93ID0gV2luZG93ICYge1xuICBxd2lrZXZlbnRzOiB7XG4gICAgZXZlbnRzOiBTZXQ8c3RyaW5nPjtcbiAgICByb290czogU2V0PE5vZGU+O1xuICAgIHB1c2g6ICguLi5lOiAoc3RyaW5nIHwgKEV2ZW50VGFyZ2V0ICYgUGFyZW50Tm9kZSkpW10pID0+IHZvaWQ7XG4gIH07XG59O1xuXG5leHBvcnQgdHlwZSBRd2lrTG9hZGVyRXZlbnRTY29wZSA9ICctZG9jdW1lbnQnIHwgJy13aW5kb3cnIHwgJyc7XG5cbmV4cG9ydCBjb25zdCBpc0NvbnRhaW5lcjIgPSAoY29udGFpbmVyOiBhbnkpOiBjb250YWluZXIgaXMgQ29udGFpbmVyMiA9PiB7XG4gIHJldHVybiBjb250YWluZXIgJiYgdHlwZW9mIGNvbnRhaW5lciA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGNvbnRhaW5lci5zZXRIb3N0UHJvcCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbi8qKlxuICogQSBmcmllbmRseSBuYW1lIHRhZyBmb3IgYSBWaXJ0dWFsVk5vZGUuXG4gKlxuICogVGhlc2VzIGFyZSB1c2VkIHRvIGdpdmUgYSBuYW1lIHRvIGEgVmlydHVhbFZOb2RlLiBUaGlzIGlzIHVzZWZ1bCBmb3IgZGVidWdnaW5nIGFuZCB0ZXN0aW5nLlxuICpcbiAqIFRoZSBuYW1lIGlzIG9ubHkgYWRkZWQgaW4gZGV2ZWxvcG1lbnQgbW9kZSBhbmQgaXMgbm90IGluY2x1ZGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzLlxuICovXG5leHBvcnQgY29uc3QgREVCVUdfVFlQRSA9ICdxOnR5cGUnO1xuXG5leHBvcnQgZW51bSBWaXJ0dWFsVHlwZSB7XG4gIFZpcnR1YWwgPSAnVicsXG4gIEZyYWdtZW50ID0gJ0YnLFxuICBXcmFwcGVkU2lnbmFsID0gJ1MnLFxuICBBd2FpdGVkID0gJ0EnLFxuICBDb21wb25lbnQgPSAnQycsXG4gIElubGluZUNvbXBvbmVudCA9ICdJJyxcbiAgUHJvamVjdGlvbiA9ICdQJyxcbn1cblxuY29uc3QgU1RBUlQgPSAnXFx4MWJbMzRtJztcbmNvbnN0IEVORCA9ICdcXHgxYlswbSc7XG5cbmV4cG9ydCBjb25zdCBWaXJ0dWFsVHlwZU5hbWU6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gIFtWaXJ0dWFsVHlwZS5WaXJ0dWFsXTogLyogKioqKioqKioqICovIFNUQVJUICsgJ1ZpcnR1YWwnICsgRU5ELCAvL1xuICBbVmlydHVhbFR5cGUuRnJhZ21lbnRdOiAvKiAqKioqKioqKiAqLyBTVEFSVCArICdGcmFnbWVudCcgKyBFTkQsIC8vXG4gIFtWaXJ0dWFsVHlwZS5XcmFwcGVkU2lnbmFsXTogLyogKioqICovIFNUQVJUICsgJ1NpZ25hbCcgKyBFTkQsIC8vXG4gIFtWaXJ0dWFsVHlwZS5Bd2FpdGVkXTogLyogKioqKioqKioqICovIFNUQVJUICsgJ0F3YWl0ZWQnICsgRU5ELCAvL1xuICBbVmlydHVhbFR5cGUuQ29tcG9uZW50XTogLyogKioqKioqKiAqLyBTVEFSVCArICdDb21wb25lbnQnICsgRU5ELCAvL1xuICBbVmlydHVhbFR5cGUuSW5saW5lQ29tcG9uZW50XTogLyogKiAqLyBTVEFSVCArICdJbmxpbmVDb21wb25lbnQnICsgRU5ELCAvL1xuICBbVmlydHVhbFR5cGUuUHJvamVjdGlvbl06IC8qICoqKioqKiAqLyBTVEFSVCArICdQcm9qZWN0aW9uJyArIEVORCwgLy9cbn07XG5cbmV4cG9ydCBjb25zdCBlbnVtIFFDb250YWluZXJWYWx1ZSB7XG4gIFBBVVNFRCA9ICdwYXVzZWQnLFxuICBSRVNVTUVEID0gJ3Jlc3VtZWQnLFxuICAvLyB0aGVzZSB2YWx1ZXMgYmVsb3cgYXJlIHVzZWQgaW4gdGhlIHF3aWsgbG9hZGVyIGFzIGEgcGxhaW4gdGV4dCBmb3IgdGhlIHE6Y29udGFpbmVyIHNlbGVjdG9yXG4gIC8vIHN0YW5kYXJkIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXG4gIEhUTUwgPSAnaHRtbCcsXG4gIC8vIHRleHRhcmVhXG4gIFRFWFQgPSAndGV4dCcsXG59XG4iXX0=","import { QContainerValue } from '../v2/shared/types';\n/** State factory of the component. */\nexport const OnRenderProp = 'q:renderFn';\n/** Component style host prefix */\nexport const ComponentStylesPrefixHost = '💎';\n/** Component style content prefix */\nexport const ComponentStylesPrefixContent = '⭐️';\n/** Prefix used to identify on listeners. */\nexport const EventPrefix = 'on:';\n/** Attribute used to mark that an event listener is attached. */\nexport const EventAny = 'on:.';\n/** `<some-element q:slot=\"...\">` */\nexport const QSlot = 'q:slot';\nexport const QSlotParent = ':';\nexport const QSlotRef = 'q:sref';\nexport const QSlotS = 'q:s';\nexport const QStyle = 'q:style';\nexport const QStyleSelector = 'style[q\\\\:style]';\nexport const QStyleSSelector = 'style[q\\\\:sstyle]';\nexport const QStylesAllSelector = QStyleSelector + ',' + QStyleSSelector;\nexport const QScopedStyle = 'q:sstyle';\nexport const QCtxAttr = 'q:ctx';\nexport const QSubscribers = 'q:subs';\nexport const QManifestHash = 'q:manifest-hash';\nexport const QFuncsPrefix = 'qFuncs_';\nexport const getQFuncs = (document, hash) => {\n    return document[QFuncsPrefix + hash] || [];\n};\nexport const QRenderAttr = 'q:render';\nexport const QRuntimeAttr = 'q:runtime';\nexport const QVersionAttr = 'q:version';\nexport const QBaseAttr = 'q:base';\nexport const QLocaleAttr = 'q:locale';\nexport const QManifestHashAttr = 'q:manifest-hash';\nexport const QInstanceAttr = 'q:instance';\nexport const QContainerIsland = 'q:container-island';\nexport const QContainerIslandEnd = '/' + QContainerIsland;\nexport const QIgnore = 'q:ignore';\nexport const QIgnoreEnd = '/' + QIgnore;\nexport const QContainerAttr = 'q:container';\nexport const QContainerAttrEnd = '/' + QContainerAttr;\nexport const QShadowRoot = 'q:shadowroot';\nexport const QTemplate = 'q:template';\n// the same selector should be inside the qwik loader\n// and the same selector should be inside the qwik city spa-shim and spa-init\nexport const QContainerSelector = '[q\\\\:container]:not([q\\\\:container=' +\n    QContainerValue.HTML +\n    ']):not([q\\\\:container=' +\n    QContainerValue.TEXT +\n    '])';\nexport const HTML_NS = 'http://www.w3.org/1999/xhtml';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\nexport const MATH_NS = 'http://www.w3.org/1998/Math/MathML';\nexport const ResourceEvent = 'qResource';\nexport const ComputedEvent = 'qComputed';\nexport const RenderEvent = 'qRender';\nexport const TaskEvent = 'qTask';\n/** `<q:slot name=\"...\">` */\nexport const QSlotInertName = '\\u0000';\nexport const QDefaultSlot = '';\n/**\n * Attribute to mark that this VNode has a pointer to itself from the `qwik/json` state.\n *\n * As the VNode get materialized the vnode now becomes eligible for mutation. Once the vnode mutates\n * the `VNode` references from the `qwik/json` may become invalid. For this reason, these references\n * need to be eagerly resolved. `VNODE_REF` stores a pointer to \"this\" vnode. This allows the system\n * to eagerly resolve these pointes as the vnodes are materialized.\n */\nexport const ELEMENT_ID = 'q:id';\nexport const ELEMENT_KEY = 'q:key';\nexport const ELEMENT_PROPS = 'q:props';\nexport const ELEMENT_SEQ = 'q:seq';\nexport const ELEMENT_SEQ_IDX = 'q:seqIdx';\nexport const ELEMENT_SELF_ID = -1;\nexport const ELEMENT_ID_SELECTOR = '[q\\\\:id]';\nexport const ELEMENT_ID_PREFIX = '#';\nexport const INLINE_FN_PREFIX = '@';\n/** Non serializable markers - always begins with `:` character */\nexport const USE_ON_LOCAL = ':on';\nexport const USE_ON_LOCAL_SEQ_IDX = ':onIdx';\nexport const USE_ON_LOCAL_FLAGS = ':onFlags';\n// comment nodes\nexport const FLUSH_COMMENT = 'qkssr-f';\nexport const STREAM_BLOCK_START_COMMENT = 'qkssr-pu';\nexport const STREAM_BLOCK_END_COMMENT = 'qkssr-po';\nexport const Q_PROPS_SEPARATOR = ':';\n//# sourceMappingURL=data:application/json;base64,","export const QObjectRecursive = 1 << 0;\nexport const QObjectImmutable = 1 << 1;\nexport const QObjectTargetSymbol = Symbol('proxy target');\nexport const QObjectFlagsSymbol = Symbol('proxy flags');\nexport const QObjectManagerSymbol = Symbol('proxy manager');\n/** @internal */\nexport const _CONST_PROPS = Symbol('CONST');\n/** @internal */\nexport const _VAR_PROPS = Symbol('VAR');\n/** @internal @deprecated v1 compat */\nexport const _IMMUTABLE = Symbol('IMMUTABLE');\n/** @deprecated */\nexport const _IMMUTABLE_PREFIX = '$$';\n/**\n * @internal\n * Key for the virtual element stored on qv comments\n */\nexport const VIRTUAL_SYMBOL = '__virtual';\n/**\n * @internal\n * Key for the `QContext` object stored on QwikElements\n */\nexport const Q_CTX = '_qc_';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3N0YXRlL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFdkMsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQzFELE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN4RCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7QUFFNUQsZ0JBQWdCO0FBQ2hCLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDNUMsZ0JBQWdCO0FBQ2hCLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFeEMsc0NBQXNDO0FBQ3RDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDOUMsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQztBQUV0Qzs7O0dBR0c7QUFDSCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsV0FBVyxDQUFDO0FBQzFDOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgUU9iamVjdFJlY3Vyc2l2ZSA9IDEgPDwgMDtcbmV4cG9ydCBjb25zdCBRT2JqZWN0SW1tdXRhYmxlID0gMSA8PCAxO1xuXG5leHBvcnQgY29uc3QgUU9iamVjdFRhcmdldFN5bWJvbCA9IFN5bWJvbCgncHJveHkgdGFyZ2V0Jyk7XG5leHBvcnQgY29uc3QgUU9iamVjdEZsYWdzU3ltYm9sID0gU3ltYm9sKCdwcm94eSBmbGFncycpO1xuZXhwb3J0IGNvbnN0IFFPYmplY3RNYW5hZ2VyU3ltYm9sID0gU3ltYm9sKCdwcm94eSBtYW5hZ2VyJyk7XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBfQ09OU1RfUFJPUFMgPSBTeW1ib2woJ0NPTlNUJyk7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgX1ZBUl9QUk9QUyA9IFN5bWJvbCgnVkFSJyk7XG5cbi8qKiBAaW50ZXJuYWwgQGRlcHJlY2F0ZWQgdjEgY29tcGF0ICovXG5leHBvcnQgY29uc3QgX0lNTVVUQUJMRSA9IFN5bWJvbCgnSU1NVVRBQkxFJyk7XG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBjb25zdCBfSU1NVVRBQkxFX1BSRUZJWCA9ICckJCc7XG5cbi8qKlxuICogQGludGVybmFsXG4gKiBLZXkgZm9yIHRoZSB2aXJ0dWFsIGVsZW1lbnQgc3RvcmVkIG9uIHF2IGNvbW1lbnRzXG4gKi9cbmV4cG9ydCBjb25zdCBWSVJUVUFMX1NZTUJPTCA9ICdfX3ZpcnR1YWwnO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIEtleSBmb3IgdGhlIGBRQ29udGV4dGAgb2JqZWN0IHN0b3JlZCBvbiBRd2lrRWxlbWVudHNcbiAqL1xuZXhwb3J0IGNvbnN0IFFfQ1RYID0gJ19xY18nO1xuIl19","export const directSetAttribute = (el, prop, value) => {\n    return el.setAttribute(prop, value);\n};\nexport const directGetAttribute = (el, prop) => {\n    return el.getAttribute(prop);\n};\nexport const directRemoveAttribute = (el, prop) => {\n    return el.removeAttribute(prop);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFzdC1jYWxscy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvZmFzdC1jYWxscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQWUsRUFBRSxJQUFZLEVBQUUsS0FBYSxFQUFFLEVBQUU7SUFDakYsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN0QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQWUsRUFBRSxJQUFZLEVBQUUsRUFBRTtJQUNsRSxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxFQUFlLEVBQUUsSUFBWSxFQUFFLEVBQUU7SUFDckUsT0FBTyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUXdpa0VsZW1lbnQgfSBmcm9tICcuL2RvbS92aXJ0dWFsLWVsZW1lbnQnO1xuXG5leHBvcnQgY29uc3QgZGlyZWN0U2V0QXR0cmlidXRlID0gKGVsOiBRd2lrRWxlbWVudCwgcHJvcDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBlbC5zZXRBdHRyaWJ1dGUocHJvcCwgdmFsdWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGRpcmVjdEdldEF0dHJpYnV0ZSA9IChlbDogUXdpa0VsZW1lbnQsIHByb3A6IHN0cmluZykgPT4ge1xuICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKHByb3ApO1xufTtcblxuZXhwb3J0IGNvbnN0IGRpcmVjdFJlbW92ZUF0dHJpYnV0ZSA9IChlbDogUXdpa0VsZW1lbnQsIHByb3A6IHN0cmluZykgPT4ge1xuICByZXR1cm4gZWwucmVtb3ZlQXR0cmlidXRlKHByb3ApO1xufTtcbiJdfQ==","import { assertDefined } from '../error/assert';\nimport { qDynamicPlatform } from './qdev';\nexport const getDocument = (node) => {\n    if (!qDynamicPlatform) {\n        return document;\n    }\n    if (typeof document !== 'undefined') {\n        return document;\n    }\n    if (node.nodeType === 9) {\n        return node;\n    }\n    const doc = node.ownerDocument;\n    assertDefined(doc, 'doc must be defined');\n    return doc;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvZG9tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVoRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFMUMsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsSUFBNEIsRUFBWSxFQUFFO0lBQ3BFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3RCLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFDRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFdBQVcsRUFBRSxDQUFDO1FBQ3BDLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDeEIsT0FBTyxJQUF1QixDQUFDO0lBQ2pDLENBQUM7SUFDRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQy9CLGFBQWEsQ0FBQyxHQUFHLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUMxQyxPQUFPLEdBQUksQ0FBQztBQUNkLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydERlZmluZWQgfSBmcm9tICcuLi9lcnJvci9hc3NlcnQnO1xuaW1wb3J0IHR5cGUgeyBRd2lrRWxlbWVudCB9IGZyb20gJy4uL3JlbmRlci9kb20vdmlydHVhbC1lbGVtZW50JztcbmltcG9ydCB7IHFEeW5hbWljUGxhdGZvcm0gfSBmcm9tICcuL3FkZXYnO1xuXG5leHBvcnQgY29uc3QgZ2V0RG9jdW1lbnQgPSAobm9kZTogUXdpa0VsZW1lbnQgfCBEb2N1bWVudCk6IERvY3VtZW50ID0+IHtcbiAgaWYgKCFxRHluYW1pY1BsYXRmb3JtKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50O1xuICB9XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50O1xuICB9XG4gIGlmIChub2RlLm5vZGVUeXBlID09PSA5KSB7XG4gICAgcmV0dXJuIG5vZGUgYXMgYW55IGFzIERvY3VtZW50O1xuICB9XG4gIGNvbnN0IGRvYyA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgYXNzZXJ0RGVmaW5lZChkb2MsICdkb2MgbXVzdCBiZSBkZWZpbmVkJyk7XG4gIHJldHVybiBkb2MhO1xufTtcbiJdfQ==","/** @internal */\nexport const EMPTY_ARRAY = [];\nexport const EMPTY_OBJ = {};\nObject.freeze(EMPTY_ARRAY);\nObject.freeze(EMPTY_OBJ);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmx5d2VpZ2h0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvZmx5d2VpZ2h0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQjtBQUNoQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsRUFBVyxDQUFDO0FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxFQUF5QixDQUFDO0FBRW5ELE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDM0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBFTVBUWV9BUlJBWSA9IFtdIGFzIGFueVtdO1xuZXhwb3J0IGNvbnN0IEVNUFRZX09CSiA9IHt9IGFzIFJlY29yZDxzdHJpbmcsIGFueT47XG5cbk9iamVjdC5mcmVlemUoRU1QVFlfQVJSQVkpO1xuT2JqZWN0LmZyZWV6ZShFTVBUWV9PQkopO1xuIl19","export const hashCode = (text, hash = 0) => {\n    for (let i = 0; i < text.length; i++) {\n        const chr = text.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n    return Number(Math.abs(hash)).toString(36);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaF9jb2RlLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvaGFzaF9jb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLElBQVksRUFBRSxPQUFlLENBQUMsRUFBRSxFQUFFO0lBQ3pELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDckMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQixJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsMkJBQTJCO0lBQ3hDLENBQUM7SUFDRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzdDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBoYXNoQ29kZSA9ICh0ZXh0OiBzdHJpbmcsIGhhc2g6IG51bWJlciA9IDApID0+IHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY2hyID0gdGV4dC5jaGFyQ29kZUF0KGkpO1xuICAgIGhhc2ggPSAoaGFzaCA8PCA1KSAtIGhhc2ggKyBjaHI7XG4gICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuICByZXR1cm4gTnVtYmVyKE1hdGguYWJzKGhhc2gpKS50b1N0cmluZygzNik7XG59O1xuIl19","import { ComponentStylesPrefixContent } from '../util/markers';\nimport { hashCode } from '../util/hash_code';\nimport { assertQrl } from '../qrl/qrl-class';\nexport const styleKey = (qStyles, index) => {\n    assertQrl(qStyles);\n    return `${hashCode(qStyles.$hash$)}-${index}`;\n};\nexport const styleHost = (styleId) => {\n    return styleId;\n};\nexport const styleContent = (styleId) => {\n    return ComponentStylesPrefixContent + styleId;\n};\nexport const serializeSStyle = (scopeIds) => {\n    const value = scopeIds.join('|');\n    if (value.length > 0) {\n        return value;\n    }\n    return undefined;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXJsLXN0eWxlcy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9zdHlsZS9xcmwtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUU3QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFN0MsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsT0FBb0IsRUFBRSxLQUFhLEVBQVUsRUFBRTtJQUN0RSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbkIsT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUM7QUFDaEQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsT0FBZSxFQUFVLEVBQUU7SUFDbkQsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQUMsT0FBZSxFQUFVLEVBQUU7SUFDdEQsT0FBTyw0QkFBNEIsR0FBRyxPQUFPLENBQUM7QUFDaEQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsUUFBa0IsRUFBRSxFQUFFO0lBQ3BELE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakMsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3JCLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudFN0eWxlc1ByZWZpeENvbnRlbnQgfSBmcm9tICcuLi91dGlsL21hcmtlcnMnO1xuaW1wb3J0IHsgaGFzaENvZGUgfSBmcm9tICcuLi91dGlsL2hhc2hfY29kZSc7XG5pbXBvcnQgdHlwZSB7IFFSTCB9IGZyb20gJy4uL3FybC9xcmwucHVibGljJztcbmltcG9ydCB7IGFzc2VydFFybCB9IGZyb20gJy4uL3FybC9xcmwtY2xhc3MnO1xuXG5leHBvcnQgY29uc3Qgc3R5bGVLZXkgPSAocVN0eWxlczogUVJMPHN0cmluZz4sIGluZGV4OiBudW1iZXIpOiBzdHJpbmcgPT4ge1xuICBhc3NlcnRRcmwocVN0eWxlcyk7XG4gIHJldHVybiBgJHtoYXNoQ29kZShxU3R5bGVzLiRoYXNoJCl9LSR7aW5kZXh9YDtcbn07XG5cbmV4cG9ydCBjb25zdCBzdHlsZUhvc3QgPSAoc3R5bGVJZDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIHN0eWxlSWQ7XG59O1xuXG5leHBvcnQgY29uc3Qgc3R5bGVDb250ZW50ID0gKHN0eWxlSWQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBDb21wb25lbnRTdHlsZXNQcmVmaXhDb250ZW50ICsgc3R5bGVJZDtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXJpYWxpemVTU3R5bGUgPSAoc2NvcGVJZHM6IHN0cmluZ1tdKSA9PiB7XG4gIGNvbnN0IHZhbHVlID0gc2NvcGVJZHMuam9pbignfCcpO1xuICBpZiAodmFsdWUubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbiJdfQ==","import { throwErrorAndStop } from './log';\nexport const isPromise = (value) => {\n    // not using \"value instanceof Promise\" to have zone.js support\n    return !!value && typeof value == 'object' && typeof value.then === 'function';\n};\nexport const safeCall = (call, thenFn, rejectFn) => {\n    try {\n        const result = call();\n        if (isPromise(result)) {\n            return result.then(thenFn, rejectFn);\n        }\n        else {\n            return thenFn(result);\n        }\n    }\n    catch (e) {\n        return rejectFn(e);\n    }\n};\nexport const maybeThen = (valueOrPromise, thenFn) => {\n    return isPromise(valueOrPromise)\n        ? valueOrPromise.then(thenFn, shouldNotError)\n        : thenFn(valueOrPromise);\n};\nexport const maybeThenPassError = (valueOrPromise, thenFn) => {\n    return isPromise(valueOrPromise)\n        ? valueOrPromise.then(thenFn)\n        : thenFn(valueOrPromise);\n};\nexport const shouldNotError = (reason) => {\n    throwErrorAndStop('QWIK ERROR:', reason);\n};\nexport const maybeThenMap = (array, thenMapFn, thenFn) => {\n    const length = array.length;\n    const mappedArray = [];\n    let idx = 0;\n    const drain = () => {\n        let result;\n        do {\n            const item = array[idx];\n            result = isPromise(item) ? item.then(thenMapFn) : thenMapFn(item);\n            if (isPromise(result)) {\n                return result.then((value) => {\n                    mappedArray[idx] = value;\n                    return drain();\n                });\n            }\n            else {\n                mappedArray[idx] = result;\n                idx++;\n            }\n        } while (idx < length);\n        return mappedArray;\n    };\n    return maybeThen(drain(), thenFn);\n};\nexport const promiseAll = (promises) => {\n    const hasPromise = promises.some(isPromise);\n    if (hasPromise) {\n        return Promise.all(promises);\n    }\n    return promises;\n};\nexport const promiseAllLazy = (promises) => {\n    if (promises.length > 0) {\n        return Promise.all(promises);\n    }\n    return promises;\n};\nexport const isNotNullable = (v) => {\n    return v != null;\n};\nexport const delay = (timeout) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, timeout);\n    });\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbWlzZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC9wcm9taXNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFLMUMsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBVSxFQUF5QixFQUFFO0lBQzdELCtEQUErRDtJQUMvRCxPQUFPLENBQUMsQ0FBQyxLQUFLLElBQUksT0FBTyxLQUFLLElBQUksUUFBUSxJQUFJLE9BQU8sS0FBSyxDQUFDLElBQUksS0FBSyxVQUFVLENBQUM7QUFDakYsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQ3RCLElBQTZCLEVBQzdCLE1BQXNELEVBQ3RELFFBQW9ELEVBQzdCLEVBQUU7SUFDekIsSUFBSSxDQUFDO1FBQ0gsTUFBTSxNQUFNLEdBQUcsSUFBSSxFQUFFLENBQUM7UUFDdEIsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUN0QixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzlDLENBQUM7YUFBTSxDQUFDO1lBQ04sT0FBTyxNQUFNLENBQUMsTUFBYSxDQUFDLENBQUM7UUFDL0IsQ0FBQztJQUNILENBQUM7SUFBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ1gsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckIsQ0FBQztBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUN2QixjQUFpQyxFQUNqQyxNQUE4QyxFQUMzQixFQUFFO0lBQ3JCLE9BQU8sU0FBUyxDQUFDLGNBQWMsQ0FBQztRQUM5QixDQUFDLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFhLEVBQUUsY0FBYyxDQUFDO1FBQ3BELENBQUMsQ0FBQyxNQUFNLENBQUMsY0FBcUIsQ0FBQyxDQUFDO0FBQ3BDLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLENBQ2hDLGNBQWlDLEVBQ2pDLE1BQThDLEVBQzNCLEVBQUU7SUFDckIsT0FBTyxTQUFTLENBQUMsY0FBYyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQWEsQ0FBQztRQUNwQyxDQUFDLENBQUMsTUFBTSxDQUFDLGNBQXFCLENBQUMsQ0FBQztBQUNwQyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxNQUFXLEVBQU8sRUFBRTtJQUNqRCxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDM0MsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQzFCLEtBQTBCLEVBQzFCLFNBQStDLEVBQy9DLE1BQWlELEVBQzVCLEVBQUU7SUFDdkIsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUM1QixNQUFNLFdBQVcsR0FBYyxFQUFFLENBQUM7SUFDbEMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ1osTUFBTSxLQUFLLEdBQUcsR0FBOEIsRUFBRTtRQUM1QyxJQUFJLE1BQStCLENBQUM7UUFDcEMsR0FBRyxDQUFDO1lBQ0YsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3hCLE1BQU0sR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNsRSxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO2dCQUN0QixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtvQkFDM0IsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztvQkFDekIsT0FBTyxLQUFLLEVBQUUsQ0FBQztnQkFDakIsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDO2lCQUFNLENBQUM7Z0JBQ04sV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQztnQkFDMUIsR0FBRyxFQUFFLENBQUM7WUFDUixDQUFDO1FBQ0gsQ0FBQyxRQUFRLEdBQUcsR0FBRyxNQUFNLEVBQUU7UUFDdkIsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQyxDQUFDO0lBQ0YsT0FBTyxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDcEMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQ3hCLFFBQVcsRUFDa0QsRUFBRTtJQUMvRCxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzVDLElBQUksVUFBVSxFQUFFLENBQUM7UUFDZixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUNELE9BQU8sUUFBZSxDQUFDO0FBQ3pCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUM1QixRQUFXLEVBQ1csRUFBRTtJQUN4QixJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDeEIsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBUSxDQUFDO0lBQ3RDLENBQUM7SUFDRCxPQUFPLFFBQWUsQ0FBQztBQUN6QixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBSSxDQUFJLEVBQXVCLEVBQUU7SUFDNUQsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDO0FBQ25CLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFO0lBQ3ZDLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUM3QixVQUFVLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdGhyb3dFcnJvckFuZFN0b3AgfSBmcm9tICcuL2xvZyc7XG5pbXBvcnQgdHlwZSB7IFZhbHVlT3JQcm9taXNlIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCB0eXBlIFByb21pc2VUcmVlPFQ+ID0gVCB8IFByb21pc2U8VD4gfCBQcm9taXNlPFRbXT4gfCBBcnJheTxQcm9taXNlVHJlZTxUPj47XG5cbmV4cG9ydCBjb25zdCBpc1Byb21pc2UgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIFByb21pc2U8YW55PiA9PiB7XG4gIC8vIG5vdCB1c2luZyBcInZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZVwiIHRvIGhhdmUgem9uZS5qcyBzdXBwb3J0XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbmV4cG9ydCBjb25zdCBzYWZlQ2FsbCA9IDxULCBCLCBDPihcbiAgY2FsbDogKCkgPT4gVmFsdWVPclByb21pc2U8VD4sXG4gIHRoZW5GbjogeyBmKGFyZzogQXdhaXRlZDxUPik6IFZhbHVlT3JQcm9taXNlPEI+IH1bJ2YnXSxcbiAgcmVqZWN0Rm46IHsgZihyZWFzb246IGFueSk6IFZhbHVlT3JQcm9taXNlPEM+IH1bJ2YnXVxuKTogVmFsdWVPclByb21pc2U8QiB8IEM+ID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXN1bHQgPSBjYWxsKCk7XG4gICAgaWYgKGlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICByZXR1cm4gcmVzdWx0LnRoZW4odGhlbkZuIGFzIGFueSwgcmVqZWN0Rm4pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhlbkZuKHJlc3VsdCBhcyBhbnkpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiByZWplY3RGbihlKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IG1heWJlVGhlbiA9IDxULCBCPihcbiAgdmFsdWVPclByb21pc2U6IFZhbHVlT3JQcm9taXNlPFQ+LFxuICB0aGVuRm46IChhcmc6IEF3YWl0ZWQ8VD4pID0+IFZhbHVlT3JQcm9taXNlPEI+XG4pOiBWYWx1ZU9yUHJvbWlzZTxCPiA9PiB7XG4gIHJldHVybiBpc1Byb21pc2UodmFsdWVPclByb21pc2UpXG4gICAgPyB2YWx1ZU9yUHJvbWlzZS50aGVuKHRoZW5GbiBhcyBhbnksIHNob3VsZE5vdEVycm9yKVxuICAgIDogdGhlbkZuKHZhbHVlT3JQcm9taXNlIGFzIGFueSk7XG59O1xuXG5leHBvcnQgY29uc3QgbWF5YmVUaGVuUGFzc0Vycm9yID0gPFQsIEI+KFxuICB2YWx1ZU9yUHJvbWlzZTogVmFsdWVPclByb21pc2U8VD4sXG4gIHRoZW5GbjogKGFyZzogQXdhaXRlZDxUPikgPT4gVmFsdWVPclByb21pc2U8Qj5cbik6IFZhbHVlT3JQcm9taXNlPEI+ID0+IHtcbiAgcmV0dXJuIGlzUHJvbWlzZSh2YWx1ZU9yUHJvbWlzZSlcbiAgICA/IHZhbHVlT3JQcm9taXNlLnRoZW4odGhlbkZuIGFzIGFueSlcbiAgICA6IHRoZW5Gbih2YWx1ZU9yUHJvbWlzZSBhcyBhbnkpO1xufTtcblxuZXhwb3J0IGNvbnN0IHNob3VsZE5vdEVycm9yID0gKHJlYXNvbjogYW55KTogYW55ID0+IHtcbiAgdGhyb3dFcnJvckFuZFN0b3AoJ1FXSUsgRVJST1I6JywgcmVhc29uKTtcbn07XG5cbmV4cG9ydCBjb25zdCBtYXliZVRoZW5NYXAgPSA8VCwgTUFQX1JFVCwgUkVUPihcbiAgYXJyYXk6IFZhbHVlT3JQcm9taXNlPFQ+W10sXG4gIHRoZW5NYXBGbjogKGl0ZW06IFQpID0+IFZhbHVlT3JQcm9taXNlPE1BUF9SRVQ+LFxuICB0aGVuRm46IChpdGVtczogTUFQX1JFVFtdKSA9PiBWYWx1ZU9yUHJvbWlzZTxSRVQ+XG4pOiBWYWx1ZU9yUHJvbWlzZTxSRVQ+ID0+IHtcbiAgY29uc3QgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICBjb25zdCBtYXBwZWRBcnJheTogTUFQX1JFVFtdID0gW107XG4gIGxldCBpZHggPSAwO1xuICBjb25zdCBkcmFpbiA9ICgpOiBWYWx1ZU9yUHJvbWlzZTxNQVBfUkVUW10+ID0+IHtcbiAgICBsZXQgcmVzdWx0OiBWYWx1ZU9yUHJvbWlzZTxNQVBfUkVUPjtcbiAgICBkbyB7XG4gICAgICBjb25zdCBpdGVtID0gYXJyYXlbaWR4XTtcbiAgICAgIHJlc3VsdCA9IGlzUHJvbWlzZShpdGVtKSA/IGl0ZW0udGhlbih0aGVuTWFwRm4pIDogdGhlbk1hcEZuKGl0ZW0pO1xuICAgICAgaWYgKGlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQudGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgICBtYXBwZWRBcnJheVtpZHhdID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIGRyYWluKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFwcGVkQXJyYXlbaWR4XSA9IHJlc3VsdDtcbiAgICAgICAgaWR4Kys7XG4gICAgICB9XG4gICAgfSB3aGlsZSAoaWR4IDwgbGVuZ3RoKTtcbiAgICByZXR1cm4gbWFwcGVkQXJyYXk7XG4gIH07XG4gIHJldHVybiBtYXliZVRoZW4oZHJhaW4oKSwgdGhlbkZuKTtcbn07XG5cbmV4cG9ydCBjb25zdCBwcm9taXNlQWxsID0gPFQgZXh0ZW5kcyByZWFkb25seSB1bmtub3duW10gfCBbXT4oXG4gIHByb21pc2VzOiBUXG4pOiBWYWx1ZU9yUHJvbWlzZTx7IC1yZWFkb25seSBbUCBpbiBrZXlvZiBUXTogQXdhaXRlZDxUW1BdPiB9PiA9PiB7XG4gIGNvbnN0IGhhc1Byb21pc2UgPSBwcm9taXNlcy5zb21lKGlzUHJvbWlzZSk7XG4gIGlmIChoYXNQcm9taXNlKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgfVxuICByZXR1cm4gcHJvbWlzZXMgYXMgYW55O1xufTtcblxuZXhwb3J0IGNvbnN0IHByb21pc2VBbGxMYXp5ID0gPFQgZXh0ZW5kcyByZWFkb25seSB1bmtub3duW10gfCBbXT4oXG4gIHByb21pc2VzOiBUXG4pOiBWYWx1ZU9yUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGlmIChwcm9taXNlcy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKSBhcyBhbnk7XG4gIH1cbiAgcmV0dXJuIHByb21pc2VzIGFzIGFueTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc05vdE51bGxhYmxlID0gPFQ+KHY6IFQpOiB2IGlzIE5vbk51bGxhYmxlPFQ+ID0+IHtcbiAgcmV0dXJuIHYgIT0gbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCBkZWxheSA9ICh0aW1lb3V0OiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgc2V0VGltZW91dChyZXNvbHZlLCB0aW1lb3V0KTtcbiAgfSk7XG59O1xuIl19","/**\n * QWIK_VERSION\n *\n * @public\n */\nexport const version = globalThis.QWIK_VERSION;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS92ZXJzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUksVUFBa0IsQ0FBQyxZQUFzQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBRV0lLX1ZFUlNJT05cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB2ZXJzaW9uID0gKGdsb2JhbFRoaXMgYXMgYW55KS5RV0lLX1ZFUlNJT04gYXMgc3RyaW5nO1xuIl19","import { STREAM_BLOCK_END_COMMENT, STREAM_BLOCK_START_COMMENT } from '../../util/markers';\nimport { jsx, RenderOnce } from '../jsx/jsx-runtime';\n/** @public */\nexport const SkipRender = Symbol('skip render');\n/** @public */\nexport const SSRRaw = () => null;\n/** @public */\nexport const SSRComment = () => null;\n/** @public */\nexport const SSRStreamBlock = (props) => {\n    return [\n        jsx(SSRComment, { data: STREAM_BLOCK_START_COMMENT }),\n        props.children,\n        jsx(SSRComment, { data: STREAM_BLOCK_END_COMMENT }),\n    ];\n};\n/** @public */\nexport const SSRStream = (props, key) => jsx(RenderOnce, { children: jsx(InternalSSRStream, props) }, key);\nexport const InternalSSRStream = () => null;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMucHVibGljLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3JlbmRlci9qc3gvdXRpbHMucHVibGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSwwQkFBMEIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzFGLE9BQU8sRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFLckQsY0FBYztBQUNkLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBWSxNQUFNLENBQUMsYUFBYSxDQUFRLENBQUM7QUFFaEUsY0FBYztBQUNkLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBd0MsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDO0FBRXRFLGNBQWM7QUFDZCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQXdDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztBQUUxRSxjQUFjO0FBQ2QsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFnRCxDQUFDLEtBQUssRUFBRSxFQUFFO0lBQ25GLE9BQU87UUFDTCxHQUFHLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLDBCQUEwQixFQUFFLENBQUM7UUFDckQsS0FBSyxDQUFDLFFBQVE7UUFDZCxHQUFHLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLENBQUM7S0FDcEQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQWFGLGNBQWM7QUFDZCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQXNDLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQ3pFLEdBQUcsQ0FBQyxVQUFVLEVBQUUsRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFPcEUsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQXNDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNUUkVBTV9CTE9DS19FTkRfQ09NTUVOVCwgU1RSRUFNX0JMT0NLX1NUQVJUX0NPTU1FTlQgfSBmcm9tICcuLi8uLi91dGlsL21hcmtlcnMnO1xuaW1wb3J0IHsganN4LCBSZW5kZXJPbmNlIH0gZnJvbSAnLi4vanN4L2pzeC1ydW50aW1lJztcbmltcG9ydCB0eXBlIHsgU3RyZWFtV3JpdGVyIH0gZnJvbSAnLi4vc3NyL3JlbmRlci1zc3InO1xuaW1wb3J0IHR5cGUgeyBGdW5jdGlvbkNvbXBvbmVudCwgSlNYTm9kZSwgSlNYT3V0cHV0IH0gZnJvbSAnLi90eXBlcy9qc3gtbm9kZSc7XG5pbXBvcnQgdHlwZSB7IEpTWENoaWxkcmVuIH0gZnJvbSAnLi90eXBlcy9qc3gtcXdpay1hdHRyaWJ1dGVzJztcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBTa2lwUmVuZGVyOiBKU1hOb2RlID0gU3ltYm9sKCdza2lwIHJlbmRlcicpIGFzIGFueTtcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBTU1JSYXc6IEZ1bmN0aW9uQ29tcG9uZW50PHsgZGF0YTogc3RyaW5nIH0+ID0gKCkgPT4gbnVsbDtcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBTU1JDb21tZW50OiBGdW5jdGlvbkNvbXBvbmVudDx7IGRhdGE6IHN0cmluZyB9PiA9ICgpID0+IG51bGw7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgU1NSU3RyZWFtQmxvY2s6IEZ1bmN0aW9uQ29tcG9uZW50PHsgY2hpbGRyZW4/OiBKU1hPdXRwdXQgfT4gPSAocHJvcHMpID0+IHtcbiAgcmV0dXJuIFtcbiAgICBqc3goU1NSQ29tbWVudCwgeyBkYXRhOiBTVFJFQU1fQkxPQ0tfU1RBUlRfQ09NTUVOVCB9KSxcbiAgICBwcm9wcy5jaGlsZHJlbixcbiAgICBqc3goU1NSQ29tbWVudCwgeyBkYXRhOiBTVFJFQU1fQkxPQ0tfRU5EX0NPTU1FTlQgfSksXG4gIF07XG59O1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgU1NSU3RyZWFtUHJvcHMgPSB7XG4gIGNoaWxkcmVuOiBTU1JTdHJlYW1DaGlsZHJlbjtcbn07XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgdHlwZSBTU1JTdHJlYW1DaGlsZHJlbiA9XG4gIHwgQXN5bmNHZW5lcmF0b3I8SlNYQ2hpbGRyZW4sIHZvaWQsIGFueT5cbiAgfCAoKHN0cmVhbTogU3RyZWFtV3JpdGVyKSA9PiBQcm9taXNlPHZvaWQ+KVxuICB8ICgoKSA9PiBBc3luY0dlbmVyYXRvcjxKU1hDaGlsZHJlbiwgdm9pZCwgYW55Pik7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgU1NSU3RyZWFtOiBGdW5jdGlvbkNvbXBvbmVudDxTU1JTdHJlYW1Qcm9wcz4gPSAocHJvcHMsIGtleSkgPT5cbiAganN4KFJlbmRlck9uY2UsIHsgY2hpbGRyZW46IGpzeChJbnRlcm5hbFNTUlN0cmVhbSwgcHJvcHMpIH0sIGtleSk7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgdHlwZSBTU1JIaW50UHJvcHMgPSB7XG4gIGR5bmFtaWM/OiBib29sZWFuO1xufTtcblxuZXhwb3J0IGNvbnN0IEludGVybmFsU1NSU3RyZWFtOiBGdW5jdGlvbkNvbXBvbmVudDxTU1JTdHJlYW1Qcm9wcz4gPSAoKSA9PiBudWxsO1xuIl19","/** CSS properties which accept numbers but are not in units of \"px\". */\nconst unitlessNumbers = new Set([\n    'animationIterationCount',\n    'aspectRatio',\n    'borderImageOutset',\n    'borderImageSlice',\n    'borderImageWidth',\n    'boxFlex',\n    'boxFlexGroup',\n    'boxOrdinalGroup',\n    'columnCount',\n    'columns',\n    'flex',\n    'flexGrow',\n    'flexShrink',\n    'gridArea',\n    'gridRow',\n    'gridRowEnd',\n    'gridRowStart',\n    'gridColumn',\n    'gridColumnEnd',\n    'gridColumnStart',\n    'fontWeight',\n    'lineClamp',\n    'lineHeight',\n    'opacity',\n    'order',\n    'orphans',\n    'scale',\n    'tabSize',\n    'widows',\n    'zIndex',\n    'zoom',\n    'MozAnimationIterationCount', // Known Prefixed Properties\n    'MozBoxFlex', // TODO: Remove these since they shouldn't be used in modern code\n    'msFlex',\n    'msFlexPositive',\n    'WebkitAnimationIterationCount',\n    'WebkitBoxFlex',\n    'WebkitBoxOrdinalGroup',\n    'WebkitColumnCount',\n    'WebkitColumns',\n    'WebkitFlex',\n    'WebkitFlexGrow',\n    'WebkitFlexShrink',\n    'WebkitLineClamp',\n]);\nexport const isUnitlessNumber = (name) => {\n    return unitlessNumbers.has(name);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdGxlc3NfbnVtYmVyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvdW5pdGxlc3NfbnVtYmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUN4RSxNQUFNLGVBQWUsR0FBRyxJQUFJLEdBQUcsQ0FBQztJQUM5Qix5QkFBeUI7SUFDekIsYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixrQkFBa0I7SUFDbEIsa0JBQWtCO0lBQ2xCLFNBQVM7SUFDVCxjQUFjO0lBQ2QsaUJBQWlCO0lBQ2pCLGFBQWE7SUFDYixTQUFTO0lBQ1QsTUFBTTtJQUNOLFVBQVU7SUFDVixZQUFZO0lBQ1osVUFBVTtJQUNWLFNBQVM7SUFDVCxZQUFZO0lBQ1osY0FBYztJQUNkLFlBQVk7SUFDWixlQUFlO0lBQ2YsaUJBQWlCO0lBQ2pCLFlBQVk7SUFDWixXQUFXO0lBQ1gsWUFBWTtJQUNaLFNBQVM7SUFDVCxPQUFPO0lBQ1AsU0FBUztJQUNULE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixNQUFNO0lBQ04sNEJBQTRCLEVBQUUsNEJBQTRCO0lBQzFELFlBQVksRUFBRSxpRUFBaUU7SUFDL0UsUUFBUTtJQUNSLGdCQUFnQjtJQUNoQiwrQkFBK0I7SUFDL0IsZUFBZTtJQUNmLHVCQUF1QjtJQUN2QixtQkFBbUI7SUFDbkIsZUFBZTtJQUNmLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIsa0JBQWtCO0lBQ2xCLGlCQUFpQjtDQUNsQixDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLElBQVksRUFBVyxFQUFFO0lBQ3hELE9BQU8sZUFBZSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ1NTIHByb3BlcnRpZXMgd2hpY2ggYWNjZXB0IG51bWJlcnMgYnV0IGFyZSBub3QgaW4gdW5pdHMgb2YgXCJweFwiLiAqL1xuY29uc3QgdW5pdGxlc3NOdW1iZXJzID0gbmV3IFNldChbXG4gICdhbmltYXRpb25JdGVyYXRpb25Db3VudCcsXG4gICdhc3BlY3RSYXRpbycsXG4gICdib3JkZXJJbWFnZU91dHNldCcsXG4gICdib3JkZXJJbWFnZVNsaWNlJyxcbiAgJ2JvcmRlckltYWdlV2lkdGgnLFxuICAnYm94RmxleCcsXG4gICdib3hGbGV4R3JvdXAnLFxuICAnYm94T3JkaW5hbEdyb3VwJyxcbiAgJ2NvbHVtbkNvdW50JyxcbiAgJ2NvbHVtbnMnLFxuICAnZmxleCcsXG4gICdmbGV4R3JvdycsXG4gICdmbGV4U2hyaW5rJyxcbiAgJ2dyaWRBcmVhJyxcbiAgJ2dyaWRSb3cnLFxuICAnZ3JpZFJvd0VuZCcsXG4gICdncmlkUm93U3RhcnQnLFxuICAnZ3JpZENvbHVtbicsXG4gICdncmlkQ29sdW1uRW5kJyxcbiAgJ2dyaWRDb2x1bW5TdGFydCcsXG4gICdmb250V2VpZ2h0JyxcbiAgJ2xpbmVDbGFtcCcsXG4gICdsaW5lSGVpZ2h0JyxcbiAgJ29wYWNpdHknLFxuICAnb3JkZXInLFxuICAnb3JwaGFucycsXG4gICdzY2FsZScsXG4gICd0YWJTaXplJyxcbiAgJ3dpZG93cycsXG4gICd6SW5kZXgnLFxuICAnem9vbScsXG4gICdNb3pBbmltYXRpb25JdGVyYXRpb25Db3VudCcsIC8vIEtub3duIFByZWZpeGVkIFByb3BlcnRpZXNcbiAgJ01vekJveEZsZXgnLCAvLyBUT0RPOiBSZW1vdmUgdGhlc2Ugc2luY2UgdGhleSBzaG91bGRuJ3QgYmUgdXNlZCBpbiBtb2Rlcm4gY29kZVxuICAnbXNGbGV4JyxcbiAgJ21zRmxleFBvc2l0aXZlJyxcbiAgJ1dlYmtpdEFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50JyxcbiAgJ1dlYmtpdEJveEZsZXgnLFxuICAnV2Via2l0Qm94T3JkaW5hbEdyb3VwJyxcbiAgJ1dlYmtpdENvbHVtbkNvdW50JyxcbiAgJ1dlYmtpdENvbHVtbnMnLFxuICAnV2Via2l0RmxleCcsXG4gICdXZWJraXRGbGV4R3JvdycsXG4gICdXZWJraXRGbGV4U2hyaW5rJyxcbiAgJ1dlYmtpdExpbmVDbGFtcCcsXG5dKTtcblxuZXhwb3J0IGNvbnN0IGlzVW5pdGxlc3NOdW1iZXIgPSAobmFtZTogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gIHJldHVybiB1bml0bGVzc051bWJlcnMuaGFzKG5hbWUpO1xufTtcbiJdfQ==","import { getBuildBase } from './utils';\nexport function getPrefetchResources(qrls, opts, resolvedManifest) {\n    if (!resolvedManifest) {\n        return [];\n    }\n    const prefetchStrategy = opts.prefetchStrategy;\n    const buildBase = getBuildBase(opts);\n    if (prefetchStrategy !== null) {\n        // do nothing if opts.prefetchStrategy is explicitly set to null\n        if (!prefetchStrategy ||\n            !prefetchStrategy.symbolsToPrefetch ||\n            prefetchStrategy.symbolsToPrefetch === 'auto') {\n            // DEFAULT 'events-document'\n            // if prefetchStrategy is undefined\n            // or prefetchStrategy.symbolsToPrefetch is undefined\n            // get event QRLs used in this document\n            return getAutoPrefetch(qrls, resolvedManifest, buildBase);\n        }\n        if (typeof prefetchStrategy.symbolsToPrefetch === 'function') {\n            // call user option symbolsToPrefetch()\n            try {\n                return prefetchStrategy.symbolsToPrefetch({ manifest: resolvedManifest.manifest });\n            }\n            catch (e) {\n                console.error('getPrefetchUrls, symbolsToPrefetch()', e);\n            }\n        }\n    }\n    // no urls to prefetch\n    return [];\n}\nfunction getAutoPrefetch(qrls, resolvedManifest, buildBase) {\n    const prefetchResources = [];\n    const { mapper, manifest } = resolvedManifest;\n    const urls = new Map();\n    if (mapper && manifest) {\n        for (const obj of qrls) {\n            const qrlSymbolName = obj.getHash();\n            const resolvedSymbol = mapper[qrlSymbolName];\n            if (resolvedSymbol) {\n                addBundle(manifest, urls, prefetchResources, buildBase, resolvedSymbol[1]);\n            }\n        }\n    }\n    return prefetchResources;\n}\nfunction addBundle(manifest, urls, prefetchResources, buildBase, bundleFileName) {\n    const url = buildBase + bundleFileName;\n    let prefetchResource = urls.get(url);\n    if (!prefetchResource) {\n        prefetchResource = {\n            url,\n            imports: [],\n        };\n        urls.set(url, prefetchResource);\n        const bundle = manifest.bundles[bundleFileName];\n        if (bundle) {\n            if (Array.isArray(bundle.imports)) {\n                for (const importedFilename of bundle.imports) {\n                    addBundle(manifest, urls, prefetchResource.imports, buildBase, importedFilename);\n                }\n            }\n        }\n    }\n    prefetchResources.push(prefetchResource);\n}\nexport const isQrl = (value) => {\n    return typeof value === 'function' && typeof value.getSymbol === 'function';\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlZmV0Y2gtc3RyYXRlZ3kuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL3NlcnZlci9wcmVmZXRjaC1zdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBT3ZDLE1BQU0sVUFBVSxvQkFBb0IsQ0FDbEMsSUFBVyxFQUNYLElBQTJCLEVBQzNCLGdCQUE4QztJQUU5QyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN0QixPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFDRCxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUMvQyxNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFckMsSUFBSSxnQkFBZ0IsS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUM5QixnRUFBZ0U7UUFFaEUsSUFDRSxDQUFDLGdCQUFnQjtZQUNqQixDQUFDLGdCQUFnQixDQUFDLGlCQUFpQjtZQUNuQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsS0FBSyxNQUFNLEVBQzdDLENBQUM7WUFDRCw0QkFBNEI7WUFDNUIsbUNBQW1DO1lBQ25DLHFEQUFxRDtZQUNyRCx1Q0FBdUM7WUFDdkMsT0FBTyxlQUFlLENBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzVELENBQUM7UUFFRCxJQUFJLE9BQU8sZ0JBQWdCLENBQUMsaUJBQWlCLEtBQUssVUFBVSxFQUFFLENBQUM7WUFDN0QsdUNBQXVDO1lBQ3ZDLElBQUksQ0FBQztnQkFDSCxPQUFPLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7WUFDckYsQ0FBQztZQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7Z0JBQ1gsT0FBTyxDQUFDLEtBQUssQ0FBQyxzQ0FBc0MsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMzRCxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFDRCxzQkFBc0I7SUFDdEIsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDO0FBRUQsU0FBUyxlQUFlLENBQUMsSUFBVyxFQUFFLGdCQUFrQyxFQUFFLFNBQWlCO0lBQ3pGLE1BQU0saUJBQWlCLEdBQXVCLEVBQUUsQ0FBQztJQUNqRCxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLGdCQUFnQixDQUFDO0lBQzlDLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxFQUE0QixDQUFDO0lBRWpELElBQUksTUFBTSxJQUFJLFFBQVEsRUFBRSxDQUFDO1FBQ3ZCLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7WUFDdkIsTUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3BDLE1BQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM3QyxJQUFJLGNBQWMsRUFBRSxDQUFDO2dCQUNuQixTQUFTLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0UsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBQ0QsT0FBTyxpQkFBaUIsQ0FBQztBQUMzQixDQUFDO0FBRUQsU0FBUyxTQUFTLENBQ2hCLFFBQXNCLEVBQ3RCLElBQW1DLEVBQ25DLGlCQUFxQyxFQUNyQyxTQUFpQixFQUNqQixjQUFzQjtJQUV0QixNQUFNLEdBQUcsR0FBRyxTQUFTLEdBQUcsY0FBYyxDQUFDO0lBQ3ZDLElBQUksZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN0QixnQkFBZ0IsR0FBRztZQUNqQixHQUFHO1lBQ0gsT0FBTyxFQUFFLEVBQUU7U0FDWixDQUFDO1FBQ0YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUVoQyxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2hELElBQUksTUFBTSxFQUFFLENBQUM7WUFDWCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7Z0JBQ2xDLEtBQUssTUFBTSxnQkFBZ0IsSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7b0JBQzlDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztnQkFDbkYsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUNELGlCQUFpQixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQzNDLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFVLEVBQXdCLEVBQUU7SUFDeEQsT0FBTyxPQUFPLEtBQUssS0FBSyxVQUFVLElBQUksT0FBTyxLQUFLLENBQUMsU0FBUyxLQUFLLFVBQVUsQ0FBQztBQUM5RSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRCdWlsZEJhc2UgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB0eXBlIHsgUHJlZmV0Y2hSZXNvdXJjZSwgUXdpa01hbmlmZXN0LCBSZW5kZXJUb1N0cmluZ09wdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcblxuaW1wb3J0IHR5cGUgeyBRUkxJbnRlcm5hbCB9IGZyb20gJy4vcXdpay10eXBlcyc7XG5pbXBvcnQgdHlwZSB7IFJlc29sdmVkTWFuaWZlc3QgfSBmcm9tICdAYnVpbGRlci5pby9xd2lrL29wdGltaXplcic7XG5pbXBvcnQgdHlwZSB7IFFSTCB9IGZyb20gJ0BidWlsZGVyLmlvL3F3aWsnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJlZmV0Y2hSZXNvdXJjZXMoXG4gIHFybHM6IFFSTFtdLFxuICBvcHRzOiBSZW5kZXJUb1N0cmluZ09wdGlvbnMsXG4gIHJlc29sdmVkTWFuaWZlc3Q6IFJlc29sdmVkTWFuaWZlc3QgfCB1bmRlZmluZWRcbik6IFByZWZldGNoUmVzb3VyY2VbXSB7XG4gIGlmICghcmVzb2x2ZWRNYW5pZmVzdCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBjb25zdCBwcmVmZXRjaFN0cmF0ZWd5ID0gb3B0cy5wcmVmZXRjaFN0cmF0ZWd5O1xuICBjb25zdCBidWlsZEJhc2UgPSBnZXRCdWlsZEJhc2Uob3B0cyk7XG5cbiAgaWYgKHByZWZldGNoU3RyYXRlZ3kgIT09IG51bGwpIHtcbiAgICAvLyBkbyBub3RoaW5nIGlmIG9wdHMucHJlZmV0Y2hTdHJhdGVneSBpcyBleHBsaWNpdGx5IHNldCB0byBudWxsXG5cbiAgICBpZiAoXG4gICAgICAhcHJlZmV0Y2hTdHJhdGVneSB8fFxuICAgICAgIXByZWZldGNoU3RyYXRlZ3kuc3ltYm9sc1RvUHJlZmV0Y2ggfHxcbiAgICAgIHByZWZldGNoU3RyYXRlZ3kuc3ltYm9sc1RvUHJlZmV0Y2ggPT09ICdhdXRvJ1xuICAgICkge1xuICAgICAgLy8gREVGQVVMVCAnZXZlbnRzLWRvY3VtZW50J1xuICAgICAgLy8gaWYgcHJlZmV0Y2hTdHJhdGVneSBpcyB1bmRlZmluZWRcbiAgICAgIC8vIG9yIHByZWZldGNoU3RyYXRlZ3kuc3ltYm9sc1RvUHJlZmV0Y2ggaXMgdW5kZWZpbmVkXG4gICAgICAvLyBnZXQgZXZlbnQgUVJMcyB1c2VkIGluIHRoaXMgZG9jdW1lbnRcbiAgICAgIHJldHVybiBnZXRBdXRvUHJlZmV0Y2gocXJscywgcmVzb2x2ZWRNYW5pZmVzdCwgYnVpbGRCYXNlKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHByZWZldGNoU3RyYXRlZ3kuc3ltYm9sc1RvUHJlZmV0Y2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIGNhbGwgdXNlciBvcHRpb24gc3ltYm9sc1RvUHJlZmV0Y2goKVxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHByZWZldGNoU3RyYXRlZ3kuc3ltYm9sc1RvUHJlZmV0Y2goeyBtYW5pZmVzdDogcmVzb2x2ZWRNYW5pZmVzdC5tYW5pZmVzdCB9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignZ2V0UHJlZmV0Y2hVcmxzLCBzeW1ib2xzVG9QcmVmZXRjaCgpJywgZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIG5vIHVybHMgdG8gcHJlZmV0Y2hcbiAgcmV0dXJuIFtdO1xufVxuXG5mdW5jdGlvbiBnZXRBdXRvUHJlZmV0Y2gocXJsczogUVJMW10sIHJlc29sdmVkTWFuaWZlc3Q6IFJlc29sdmVkTWFuaWZlc3QsIGJ1aWxkQmFzZTogc3RyaW5nKSB7XG4gIGNvbnN0IHByZWZldGNoUmVzb3VyY2VzOiBQcmVmZXRjaFJlc291cmNlW10gPSBbXTtcbiAgY29uc3QgeyBtYXBwZXIsIG1hbmlmZXN0IH0gPSByZXNvbHZlZE1hbmlmZXN0O1xuICBjb25zdCB1cmxzID0gbmV3IE1hcDxzdHJpbmcsIFByZWZldGNoUmVzb3VyY2U+KCk7XG5cbiAgaWYgKG1hcHBlciAmJiBtYW5pZmVzdCkge1xuICAgIGZvciAoY29uc3Qgb2JqIG9mIHFybHMpIHtcbiAgICAgIGNvbnN0IHFybFN5bWJvbE5hbWUgPSBvYmouZ2V0SGFzaCgpO1xuICAgICAgY29uc3QgcmVzb2x2ZWRTeW1ib2wgPSBtYXBwZXJbcXJsU3ltYm9sTmFtZV07XG4gICAgICBpZiAocmVzb2x2ZWRTeW1ib2wpIHtcbiAgICAgICAgYWRkQnVuZGxlKG1hbmlmZXN0LCB1cmxzLCBwcmVmZXRjaFJlc291cmNlcywgYnVpbGRCYXNlLCByZXNvbHZlZFN5bWJvbFsxXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBwcmVmZXRjaFJlc291cmNlcztcbn1cblxuZnVuY3Rpb24gYWRkQnVuZGxlKFxuICBtYW5pZmVzdDogUXdpa01hbmlmZXN0LFxuICB1cmxzOiBNYXA8c3RyaW5nLCBQcmVmZXRjaFJlc291cmNlPixcbiAgcHJlZmV0Y2hSZXNvdXJjZXM6IFByZWZldGNoUmVzb3VyY2VbXSxcbiAgYnVpbGRCYXNlOiBzdHJpbmcsXG4gIGJ1bmRsZUZpbGVOYW1lOiBzdHJpbmdcbikge1xuICBjb25zdCB1cmwgPSBidWlsZEJhc2UgKyBidW5kbGVGaWxlTmFtZTtcbiAgbGV0IHByZWZldGNoUmVzb3VyY2UgPSB1cmxzLmdldCh1cmwpO1xuICBpZiAoIXByZWZldGNoUmVzb3VyY2UpIHtcbiAgICBwcmVmZXRjaFJlc291cmNlID0ge1xuICAgICAgdXJsLFxuICAgICAgaW1wb3J0czogW10sXG4gICAgfTtcbiAgICB1cmxzLnNldCh1cmwsIHByZWZldGNoUmVzb3VyY2UpO1xuXG4gICAgY29uc3QgYnVuZGxlID0gbWFuaWZlc3QuYnVuZGxlc1tidW5kbGVGaWxlTmFtZV07XG4gICAgaWYgKGJ1bmRsZSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYnVuZGxlLmltcG9ydHMpKSB7XG4gICAgICAgIGZvciAoY29uc3QgaW1wb3J0ZWRGaWxlbmFtZSBvZiBidW5kbGUuaW1wb3J0cykge1xuICAgICAgICAgIGFkZEJ1bmRsZShtYW5pZmVzdCwgdXJscywgcHJlZmV0Y2hSZXNvdXJjZS5pbXBvcnRzLCBidWlsZEJhc2UsIGltcG9ydGVkRmlsZW5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHByZWZldGNoUmVzb3VyY2VzLnB1c2gocHJlZmV0Y2hSZXNvdXJjZSk7XG59XG5cbmV4cG9ydCBjb25zdCBpc1FybCA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgUVJMSW50ZXJuYWwgPT4ge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZS5nZXRTeW1ib2wgPT09ICdmdW5jdGlvbic7XG59O1xuIl19","import { QSlotParent } from './markers';\nexport function isSlotProp(prop) {\n    return !prop.startsWith('q:');\n}\nexport function isParentSlotProp(prop) {\n    return prop.startsWith(QSlotParent);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL3Byb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUV4QyxNQUFNLFVBQVUsVUFBVSxDQUFDLElBQVk7SUFDckMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxJQUFZO0lBQzNDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN0QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUVNsb3RQYXJlbnQgfSBmcm9tICcuL21hcmtlcnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNTbG90UHJvcChwcm9wOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuICFwcm9wLnN0YXJ0c1dpdGgoJ3E6Jyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1BhcmVudFNsb3RQcm9wKHByb3A6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gcHJvcC5zdGFydHNXaXRoKFFTbG90UGFyZW50KTtcbn1cbiJdfQ==","import { styleContent } from '../../style/qrl-styles';\nexport function hasClassAttr(props) {\n    for (const key in props) {\n        if (Object.prototype.hasOwnProperty.call(props, key) && isClassAttr(key)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function isClassAttr(key) {\n    return key === 'class' || key === 'className';\n}\nexport function getScopedStyleIdsAsPrefix(scopedStyleIds) {\n    return Array.from(scopedStyleIds)\n        .map((styleId) => styleContent(styleId))\n        .join(' ');\n}\nexport function convertScopedStyleIdsToArray(scopedStyleIds) {\n    return scopedStyleIds?.split(' ') ?? null;\n}\nexport function convertStyleIdsToString(scopedStyleIds) {\n    return Array.from(scopedStyleIds).join(' ');\n}\nexport const addComponentStylePrefix = (styleId) => {\n    if (styleId) {\n        let idx = 0;\n        do {\n            styleId = styleId.substring(0, idx) + styleContent(styleId.substring(idx));\n        } while ((idx = styleId.indexOf(' ', idx) + 1) !== 0);\n    }\n    return styleId || null;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NvcGVkLXN0eWxlcy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS92Mi9zaGFyZWQvc2NvcGVkLXN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFdEQsTUFBTSxVQUFVLFlBQVksQ0FBQyxLQUFZO0lBQ3ZDLEtBQUssTUFBTSxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7UUFDeEIsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ3pFLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztJQUNILENBQUM7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLEdBQVc7SUFDckMsT0FBTyxHQUFHLEtBQUssT0FBTyxJQUFJLEdBQUcsS0FBSyxXQUFXLENBQUM7QUFDaEQsQ0FBQztBQUVELE1BQU0sVUFBVSx5QkFBeUIsQ0FBQyxjQUEyQjtJQUNuRSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDO1NBQzlCLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3ZDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNmLENBQUM7QUFFRCxNQUFNLFVBQVUsNEJBQTRCLENBQUMsY0FBOEI7SUFDekUsT0FBTyxjQUFjLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQztBQUM1QyxDQUFDO0FBRUQsTUFBTSxVQUFVLHVCQUF1QixDQUFDLGNBQTJCO0lBQ2pFLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLENBQUMsT0FBdUIsRUFBaUIsRUFBRTtJQUNoRixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ1osSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ1osR0FBRyxDQUFDO1lBQ0YsT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDN0UsQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRTtJQUN4RCxDQUFDO0lBQ0QsT0FBTyxPQUFPLElBQUksSUFBSSxDQUFDO0FBQ3pCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUHJvcHMgfSBmcm9tICcuLi8uLi9yZW5kZXIvanN4L2pzeC1ydW50aW1lJztcbmltcG9ydCB7IHN0eWxlQ29udGVudCB9IGZyb20gJy4uLy4uL3N0eWxlL3FybC1zdHlsZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaGFzQ2xhc3NBdHRyKHByb3BzOiBQcm9wcyk6IGJvb2xlYW4ge1xuICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wcykge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIGtleSkgJiYgaXNDbGFzc0F0dHIoa2V5KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ2xhc3NBdHRyKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBrZXkgPT09ICdjbGFzcycgfHwga2V5ID09PSAnY2xhc3NOYW1lJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjb3BlZFN0eWxlSWRzQXNQcmVmaXgoc2NvcGVkU3R5bGVJZHM6IFNldDxzdHJpbmc+KTogc3RyaW5nIHtcbiAgcmV0dXJuIEFycmF5LmZyb20oc2NvcGVkU3R5bGVJZHMpXG4gICAgLm1hcCgoc3R5bGVJZCkgPT4gc3R5bGVDb250ZW50KHN0eWxlSWQpKVxuICAgIC5qb2luKCcgJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0U2NvcGVkU3R5bGVJZHNUb0FycmF5KHNjb3BlZFN0eWxlSWRzPzogc3RyaW5nIHwgbnVsbCk6IEFycmF5PHN0cmluZz4gfCBudWxsIHtcbiAgcmV0dXJuIHNjb3BlZFN0eWxlSWRzPy5zcGxpdCgnICcpID8/IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0U3R5bGVJZHNUb1N0cmluZyhzY29wZWRTdHlsZUlkczogU2V0PHN0cmluZz4pOiBzdHJpbmcge1xuICByZXR1cm4gQXJyYXkuZnJvbShzY29wZWRTdHlsZUlkcykuam9pbignICcpO1xufVxuXG5leHBvcnQgY29uc3QgYWRkQ29tcG9uZW50U3R5bGVQcmVmaXggPSAoc3R5bGVJZD86IHN0cmluZyB8IG51bGwpOiBzdHJpbmcgfCBudWxsID0+IHtcbiAgaWYgKHN0eWxlSWQpIHtcbiAgICBsZXQgaWR4ID0gMDtcbiAgICBkbyB7XG4gICAgICBzdHlsZUlkID0gc3R5bGVJZC5zdWJzdHJpbmcoMCwgaWR4KSArIHN0eWxlQ29udGVudChzdHlsZUlkLnN1YnN0cmluZyhpZHgpKTtcbiAgICB9IHdoaWxlICgoaWR4ID0gc3R5bGVJZC5pbmRleE9mKCcgJywgaWR4KSArIDEpICE9PSAwKTtcbiAgfVxuICByZXR1cm4gc3R5bGVJZCB8fCBudWxsO1xufTtcbiJdfQ==","import { QSlotS } from '../../util/markers';\nimport { Virtual, _jsxSorted } from './jsx-runtime';\n/**\n * Allows to project the children of the current component. <Slot/> can only be used within the\n * context of a component defined with `component$`.\n *\n * @public\n */\nexport const Slot = (props) => {\n    return _jsxSorted(Virtual, null, { [QSlotS]: '' }, props.children, 0, props.name ?? '');\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xvdC5wdWJsaWMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2pzeC9zbG90LnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDNUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJcEQ7Ozs7O0dBS0c7QUFDSCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBR1osQ0FBQyxLQUFLLEVBQUUsRUFBRTtJQUNiLE9BQU8sVUFBVSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7QUFDMUYsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUVNsb3RTIH0gZnJvbSAnLi4vLi4vdXRpbC9tYXJrZXJzJztcbmltcG9ydCB7IFZpcnR1YWwsIF9qc3hTb3J0ZWQgfSBmcm9tICcuL2pzeC1ydW50aW1lJztcbmltcG9ydCB0eXBlIHsgRnVuY3Rpb25Db21wb25lbnQgfSBmcm9tICcuL3R5cGVzL2pzeC1ub2RlJztcbmltcG9ydCB0eXBlIHsgSlNYQ2hpbGRyZW4gfSBmcm9tICcuL3R5cGVzL2pzeC1xd2lrLWF0dHJpYnV0ZXMnO1xuXG4vKipcbiAqIEFsbG93cyB0byBwcm9qZWN0IHRoZSBjaGlsZHJlbiBvZiB0aGUgY3VycmVudCBjb21wb25lbnQuIDxTbG90Lz4gY2FuIG9ubHkgYmUgdXNlZCB3aXRoaW4gdGhlXG4gKiBjb250ZXh0IG9mIGEgY29tcG9uZW50IGRlZmluZWQgd2l0aCBgY29tcG9uZW50JGAuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgU2xvdDogRnVuY3Rpb25Db21wb25lbnQ8e1xuICBuYW1lPzogc3RyaW5nO1xuICBjaGlsZHJlbj86IEpTWENoaWxkcmVuO1xufT4gPSAocHJvcHMpID0+IHtcbiAgcmV0dXJuIF9qc3hTb3J0ZWQoVmlydHVhbCwgbnVsbCwgeyBbUVNsb3RTXTogJycgfSwgcHJvcHMuY2hpbGRyZW4sIDAsIHByb3BzLm5hbWUgPz8gJycpO1xufTtcbiJdfQ==","import { pad, qwikDebugToString } from '../../debug';\nimport { assertTrue } from '../../error/assert';\nimport { _wrapProp } from '../../state/signal';\nimport { tryGetInvokeContext } from '../../use/use-core';\nimport { isSerializableObject } from '../../util/types';\nimport { SERIALIZER_PROXY_UNWRAP, unwrapDeserializerProxy } from '../shared/shared-serialization';\nimport { ensureContains, ensureContainsEffect, triggerEffects, } from './v2-signal';\nconst DEBUG = false;\n// eslint-disable-next-line no-console\nconst log = (...args) => console.log('STORE', ...args.map(qwikDebugToString));\nconst STORE_TARGET = Symbol('store.target');\nconst STORE_HANDLER = Symbol('store.handler');\nexport const STORE_ARRAY_PROP = Symbol('store.array');\nexport var StoreFlags;\n(function (StoreFlags) {\n    StoreFlags[StoreFlags[\"NONE\"] = 0] = \"NONE\";\n    StoreFlags[StoreFlags[\"RECURSIVE\"] = 1] = \"RECURSIVE\";\n    StoreFlags[StoreFlags[\"IMMUTABLE\"] = 2] = \"IMMUTABLE\";\n})(StoreFlags || (StoreFlags = {}));\nexport const getStoreHandler = (value) => {\n    return value[STORE_HANDLER];\n};\nexport const getStoreTarget = (value) => {\n    return value?.[STORE_TARGET] || null;\n};\nexport const unwrapStore = (value) => {\n    return getStoreTarget(value) || value;\n};\nexport const isStore = (value) => {\n    const unwrap = unwrapStore(value);\n    return unwrap !== value;\n};\nexport function createStore(container, obj, flags) {\n    return new Proxy(obj, new StoreHandler(flags, container || null));\n}\nexport const getOrCreateStore = (obj, flags, container) => {\n    if (isSerializableObject(obj) && container) {\n        let store = container.$storeProxyMap$.get(obj);\n        if (!store) {\n            store = createStore(container, obj, flags);\n            container.$storeProxyMap$.set(obj, store);\n        }\n        return store;\n    }\n    return obj;\n};\nexport class StoreHandler {\n    constructor($flags$, $container$) {\n        this.$flags$ = $flags$;\n        this.$container$ = $container$;\n        this.$effects$ = null;\n    }\n    toString() {\n        return '[Store]';\n    }\n    get(target, prop) {\n        if (typeof prop === 'symbol') {\n            if (prop === STORE_TARGET) {\n                return target;\n            }\n            if (prop === STORE_HANDLER) {\n                return this;\n            }\n            if (prop === SERIALIZER_PROXY_UNWRAP) {\n                // SERIALIZER_PROXY_UNWRAP is used by v2 serialization to unwrap proxies.\n                // Our target may be a v2 serialization proxy so if we let it through\n                // we will return the naked object which removes ourselves,\n                // and that is not the intention so prevent of SERIALIZER_PROXY_UNWRAP.\n                return undefined;\n            }\n            return target[prop];\n        }\n        const ctx = tryGetInvokeContext();\n        let value = target[prop];\n        if (ctx) {\n            if (this.$container$ === null) {\n                if (!ctx.$container2$) {\n                    return value;\n                }\n                // Grab the container now we have access to it\n                this.$container$ = ctx.$container2$;\n            }\n            else {\n                assertTrue(!ctx.$container2$ || ctx.$container2$ === this.$container$, 'Do not use signals across containers');\n            }\n            const effectSubscriber = ctx.$effectSubscriber$;\n            if (effectSubscriber) {\n                addEffect(target, Array.isArray(target) ? STORE_ARRAY_PROP : prop, this, effectSubscriber);\n            }\n        }\n        if (prop === 'toString' && value === Object.prototype.toString) {\n            return this.toString;\n        }\n        const flags = this.$flags$;\n        if (flags & StoreFlags.RECURSIVE &&\n            typeof value === 'object' &&\n            value !== null &&\n            !Object.isFrozen(value) &&\n            !isStore(value) &&\n            !Object.isFrozen(target)) {\n            value = getOrCreateStore(value, this.$flags$, this.$container$);\n            target[prop] = value;\n        }\n        return value;\n    }\n    /** In the case of oldValue and value are the same, the effects are not triggered. */\n    set(target, prop, value) {\n        target = unwrapDeserializerProxy(target);\n        if (typeof prop === 'symbol') {\n            target[prop] = value;\n            return true;\n        }\n        const newValue = this.$flags$ & StoreFlags.RECURSIVE ? unwrapStore(value) : value;\n        if (prop in target) {\n            const oldValue = target[prop];\n            if (newValue !== oldValue) {\n                DEBUG && log('Store.set', oldValue, '->', newValue, pad('\\n' + this.toString(), '  '));\n                setNewValueAndTriggerEffects(prop, newValue, target, this);\n            }\n        }\n        else {\n            DEBUG && log('Store.set', 'create property', newValue, pad('\\n' + this.toString(), '  '));\n            setNewValueAndTriggerEffects(prop, newValue, target, this);\n        }\n        return true;\n    }\n    deleteProperty(target, prop) {\n        if (typeof prop != 'string' || !delete target[prop]) {\n            return false;\n        }\n        triggerEffects(this.$container$, this, getEffects(target, prop, this.$effects$));\n        return true;\n    }\n    has(target, prop) {\n        if (prop === STORE_TARGET) {\n            return true;\n        }\n        return Object.prototype.hasOwnProperty.call(target, prop);\n    }\n    ownKeys(target) {\n        const ctx = tryGetInvokeContext();\n        const effectSubscriber = ctx?.$effectSubscriber$;\n        if (effectSubscriber) {\n            addEffect(target, STORE_ARRAY_PROP, this, effectSubscriber);\n        }\n        return Reflect.ownKeys(target);\n    }\n    getOwnPropertyDescriptor(target, prop) {\n        if (Array.isArray(target) || typeof prop === 'symbol') {\n            return Object.getOwnPropertyDescriptor(target, prop);\n        }\n        return {\n            enumerable: true,\n            configurable: true,\n        };\n    }\n}\nfunction addEffect(target, prop, store, effectSubscriber) {\n    const effectsMap = (store.$effects$ || (store.$effects$ = {}));\n    const effects = (Object.prototype.hasOwnProperty.call(effectsMap, prop) && effectsMap[prop]) ||\n        (effectsMap[prop] = []);\n    // Let's make sure that we have a reference to this effect.\n    // Adding reference is essentially adding a subscription, so if the signal\n    // changes we know who to notify.\n    ensureContainsEffect(effects, effectSubscriber);\n    // But when effect is scheduled in needs to be able to know which signals\n    // to unsubscribe from. So we need to store the reference from the effect back\n    // to this signal.\n    ensureContains(effectSubscriber, target);\n    DEBUG && log('sub', pad('\\n' + store.$effects$.toString(), '  '));\n}\nfunction setNewValueAndTriggerEffects(prop, value, target, currentStore) {\n    target[prop] = value;\n    triggerEffects(currentStore.$container$, currentStore, getEffects(target, prop, currentStore.$effects$));\n}\nfunction getEffects(target, prop, storeEffects) {\n    let effectsToTrigger = storeEffects\n        ? Array.isArray(target)\n            ? Object.values(storeEffects).flatMap((effects) => effects)\n            : storeEffects[prop]\n        : null;\n    const storeArrayValue = storeEffects?.[STORE_ARRAY_PROP];\n    if (storeArrayValue) {\n        effectsToTrigger || (effectsToTrigger = []);\n        effectsToTrigger.push(...storeArrayValue);\n    }\n    return effectsToTrigger;\n}\n//# sourceMappingURL=data:application/json;base64,","import { isDev } from '../../../build/index.dev';\nimport { componentQrl, isQwikComponent } from '../../component/component.public';\nimport { SERIALIZABLE_STATE } from '../../container/serializers';\nimport { assertDefined, assertTrue } from '../../error/assert';\nimport { getPlatform } from '../../platform/platform';\nimport { createQRL, isQrl, isSyncQrl, } from '../../qrl/qrl-class';\nimport { Fragment, JSXNodeImpl, createPropsProxy, isJSXNode, isPropsProxy, } from '../../render/jsx/jsx-runtime';\nimport { Slot } from '../../render/jsx/slot.public';\nimport {} from '../../render/jsx/types/jsx-node';\nimport { fastSkipSerialize } from '../../state/common';\nimport { _CONST_PROPS, _VAR_PROPS } from '../../state/constants';\nimport { Task, isTask } from '../../use/use-task';\nimport { isElement, isNode } from '../../util/element';\nimport { throwErrorAndStop } from '../../util/log';\nimport { ELEMENT_ID } from '../../util/markers';\nimport { isPromise } from '../../util/promises';\nimport { isSerializableObject } from '../../util/types';\nimport {} from '../client/dom-container';\nimport { vnode_getNode, vnode_isVNode, vnode_locate } from '../client/vnode';\nimport { ComputedSignal, WrappedSignal, EffectSubscriptionsProp, Signal, EffectData, } from '../signal/v2-signal';\nimport { STORE_ARRAY_PROP, createStore, getStoreHandler, getStoreTarget, isStore, unwrapStore, } from '../signal/v2-store';\nconst deserializedProxyMap = new WeakMap();\nexport const unwrapDeserializerProxy = (value) => {\n    const unwrapped = typeof value === 'object' &&\n        value !== null &&\n        value[SERIALIZER_PROXY_UNWRAP];\n    return unwrapped ? unwrapped : value;\n};\nexport const isDeserializerProxy = (value) => {\n    return typeof value === 'object' && value !== null && SERIALIZER_PROXY_UNWRAP in value;\n};\nexport const SERIALIZER_PROXY_UNWRAP = Symbol('UNWRAP');\nexport const wrapDeserializerProxy = (container, value) => {\n    if (typeof value === 'object' && // Must be an object\n        value !== null && // which is not null\n        isObjectLiteral(value) && // and is object literal (not URL, Data, etc.)\n        !vnode_isVNode(value) // and is not a VNode or Slot\n    ) {\n        if (isDeserializerProxy(value)) {\n            // already wrapped\n            return value;\n        }\n        else {\n            let proxy = deserializedProxyMap.get(value);\n            if (!proxy) {\n                proxy = new Proxy(value, new DeserializationHandler(container));\n                deserializedProxyMap.set(value, proxy);\n            }\n            return proxy;\n        }\n    }\n    return value;\n};\nclass DeserializationHandler {\n    constructor($container$) {\n        this.$container$ = $container$;\n    }\n    get(target, property, receiver) {\n        if (property === SERIALIZER_PROXY_UNWRAP) {\n            return target;\n        }\n        if (getStoreTarget(target) !== undefined) {\n            /**\n             * If we modify string value by for example `+=` operator, we need to get the old value first.\n             * If the target is a store proxy, we need to unwrap it and get the real object. This is\n             * because if we try to get the value, we will get deserialized value which is not what we\n             * want in case of string.\n             *\n             * For strings we always assume that they are not deserialized (cached), so we need to get the\n             * real value. The reason is that if we have a string which starts with a serialization\n             * constant character, we need to have the SerializationConstant.String_CHAR prefix character.\n             * Otherwise the system will try to deserialize the value again.\n             */\n            const unwrapped = unwrapDeserializerProxy(unwrapStore(target));\n            const unwrappedPropValue = Reflect.get(unwrapped, property, receiver);\n            if (typeof unwrappedPropValue === 'string' &&\n                unwrappedPropValue.length >= 1 &&\n                unwrappedPropValue.charCodeAt(0) === SerializationConstant.String_VALUE) {\n                return allocate(unwrappedPropValue);\n            }\n        }\n        let propValue = Reflect.get(target, property, receiver);\n        let typeCode;\n        if (typeof propValue === 'string' &&\n            propValue.length >= 1 &&\n            (typeCode = propValue.charCodeAt(0)) < SerializationConstant.LAST_VALUE) {\n            const container = this.$container$;\n            // It is a value which needs to be deserialized.\n            const serializedValue = propValue;\n            if (typeCode === SerializationConstant.REFERENCE_VALUE) {\n                // Special case of Reference, we don't go through allocation/inflation\n                propValue = unwrapDeserializerProxy(container.$getObjectById$(parseInt(propValue.substring(1))));\n            }\n            else if (typeCode === SerializationConstant.VNode_VALUE) {\n                // Special case of VNode, we go directly to VNode to retrieve the element.\n                propValue =\n                    propValue === SerializationConstant.VNode_CHAR\n                        ? container.element.ownerDocument\n                        : vnode_locate(container.rootVNode, propValue.substring(1));\n            }\n            else if (typeCode === SerializationConstant.Store_VALUE) {\n                propValue = deserializeStore2(container, propValue);\n            }\n            else if (typeCode === SerializationConstant.WrappedSignal_VALUE && !Array.isArray(target)) {\n                // Special case of derived signal. We need to create a [_CONST_PROPS] property.\n                return wrapDeserializerProxy(container, upgradePropsWithDerivedSignal(container, target, property));\n            }\n            else {\n                propValue = allocate(propValue);\n            }\n            if (typeof propValue !== 'string' ||\n                (propValue.length > 0 && propValue.charCodeAt(0) >= SerializationConstant.LAST_VALUE)) {\n                /**\n                 * So we want to cache the value so that we don't have to deserialize it again AND so that\n                 * deserialized object identity does not change.\n                 *\n                 * Unfortunately, there is a corner case! The deserialized value might be a string which\n                 * looks like a serialized value, so in that rare case we will not cache the value. But it\n                 * is OK because even thought the identity of string may change on deserialization, the\n                 * value string equality will not change.\n                 */\n                Reflect.set(target, property, propValue, receiver);\n                /** After we set the value we can now inflate the value if needed. */\n                if (typeCode >= SerializationConstant.Error_VALUE) {\n                    inflate(container, propValue, serializedValue);\n                }\n            }\n        }\n        propValue = wrapDeserializerProxy(this.$container$, propValue);\n        return propValue;\n    }\n    set(target, property, newValue, receiver) {\n        /**\n         * If we are setting a value which is a string and starts with a special character, we need to\n         * prefix it with a SerializationConstant character to indicate that it is a string.\n         *\n         * Without this later (when getting the value) we would try to deserialize the value incorrectly\n         * due to the special character at the start.\n         */\n        if (typeof newValue === 'string' &&\n            newValue.length >= 1 &&\n            newValue.charCodeAt(0) < SerializationConstant.LAST_VALUE) {\n            return Reflect.set(target, property, SerializationConstant.String_CHAR + newValue, receiver);\n        }\n        return Reflect.set(target, property, newValue, receiver);\n    }\n    has(target, property) {\n        if (property === SERIALIZER_PROXY_UNWRAP) {\n            return true;\n        }\n        return Object.prototype.hasOwnProperty.call(target, property);\n    }\n}\n/**\n * Convert an object (which is a component prop) to have derived signals (_CONST_PROPS).\n *\n * Input:\n *\n * ```\n * {\n *   \"prop1\": \"DerivedSignal: ..\",\n *   \"prop2\": \"DerivedSignal: ..\"\n * }\n * ```\n *\n * Becomes\n *\n * ```\n * {\n *   get prop1 {\n *     return this[_CONST_PROPS].prop1.value;\n *   },\n *   get prop2 {\n *     return this[_CONST_PROPS].prop2.value;\n *   },\n *   prop2: 'DerivedSignal: ..',\n *   [_CONST_PROPS]: {\n *     prop1: _fnSignal(p0=>p0.value, [prop1], 'p0.value'),\n *     prop2: _fnSignal(p0=>p0.value, [prop1], 'p0.value')\n *   }\n * }\n * ```\n */\nfunction upgradePropsWithDerivedSignal(container, target, property) {\n    const immutable = {};\n    for (const key in target) {\n        if (Object.prototype.hasOwnProperty.call(target, key)) {\n            const value = target[key];\n            if (typeof value === 'string' &&\n                value.charCodeAt(0) === SerializationConstant.WrappedSignal_VALUE) {\n                const wrappedSignal = (immutable[key] = allocate(value));\n                Object.defineProperty(target, key, {\n                    get() {\n                        return wrappedSignal.value;\n                    },\n                    enumerable: true,\n                });\n                inflate(container, wrappedSignal, value);\n            }\n        }\n    }\n    target[_CONST_PROPS] = immutable;\n    return target[property];\n}\nconst restStack = [];\nlet rest = null;\nlet restIdx;\nconst restInt = () => {\n    return parseInt(restString());\n};\nconst restString = () => {\n    const start = restIdx;\n    const length = rest.length;\n    let depth = 0;\n    let ch;\n    do {\n        if (restIdx < length) {\n            ch = rest.charCodeAt(restIdx++);\n            if (ch === 91 /* [ */) {\n                depth++;\n            }\n            else if (ch === 93 /* ] */) {\n                depth--;\n            }\n        }\n        else {\n            restIdx = length + 1;\n            break;\n        }\n    } while (depth > 0 || ch !== 32 /* space */);\n    return rest.substring(start, restIdx - 1);\n};\nconst inflate = (container, target, needsInflationData) => {\n    restStack.push(rest, restIdx);\n    rest = needsInflationData;\n    restIdx = 1;\n    switch (needsInflationData.charCodeAt(0)) {\n        case SerializationConstant.QRL_VALUE:\n            inflateQRL(container, target);\n            break;\n        case SerializationConstant.Task_VALUE:\n            const task = target;\n            task.$flags$ = restInt();\n            task.$index$ = restInt();\n            task.$el$ = container.$getObjectById$(restInt());\n            task.$effectDependencies$ = container.$getObjectById$(restInt());\n            task.$qrl$ = inflateQRL(container, parseQRL(restString()));\n            const taskState = restString();\n            task.$state$ = taskState\n                ? container.$getObjectById$(taskState)\n                : undefined;\n            break;\n        case SerializationConstant.Resource_VALUE:\n            return throwErrorAndStop('Not implemented');\n        case SerializationConstant.Component_VALUE:\n            inflateQRL(container, target[SERIALIZABLE_STATE][0]);\n            break;\n        case SerializationConstant.Store_VALUE:\n            break;\n        case SerializationConstant.Signal_VALUE:\n            deserializeSignal2(target, container, rest, false, false);\n            break;\n        case SerializationConstant.WrappedSignal_VALUE:\n            deserializeSignal2(target, container, rest, true, false);\n            break;\n        case SerializationConstant.ComputedSignal_VALUE:\n            deserializeSignal2(target, container, rest, false, true);\n            break;\n        case SerializationConstant.Error_VALUE:\n            Object.assign(target, container.$getObjectById$(restInt()));\n            break;\n        case SerializationConstant.FormData_VALUE:\n            const formData = target;\n            for (const [key, value] of container.$getObjectById$(restInt())) {\n                formData.append(key, value);\n            }\n            break;\n        case SerializationConstant.JSXNode_VALUE:\n            const jsx = target;\n            jsx.type = deserializeJSXType(container, restString());\n            jsx.varProps = container.$getObjectById$(restInt());\n            jsx.constProps = container.$getObjectById$(restInt());\n            jsx.children = container.$getObjectById$(restInt());\n            jsx.flags = restInt();\n            jsx.key = restString() || null;\n            break;\n        case SerializationConstant.Set_VALUE:\n            const set = target;\n            const setValues = container.$getObjectById$(restInt());\n            for (let i = 0; i < setValues.length; i++) {\n                set.add(setValues[i]);\n            }\n            break;\n        case SerializationConstant.Map_VALUE:\n            const map = target;\n            const mapKeyValue = container.$getObjectById$(restInt());\n            for (let i = 0; i < mapKeyValue.length;) {\n                map.set(mapKeyValue[i++], mapKeyValue[i++]);\n            }\n            break;\n        case SerializationConstant.Promise_VALUE:\n            const promise = target;\n            const id = restInt();\n            if (id >= 0) {\n                promise[PROMISE_RESOLVE](container.$getObjectById$(id));\n            }\n            else {\n                promise[PROMISE_REJECT](container.$getObjectById$(~id));\n            }\n            break;\n        case SerializationConstant.Uint8Array_VALUE:\n            const bytes = target;\n            const buf = atob(restString());\n            let i = 0;\n            for (const s of buf) {\n                bytes[i++] = s.charCodeAt(0);\n            }\n            break;\n        case SerializationConstant.PropsProxy_VALUE:\n            const propsProxy = target;\n            propsProxy[_VAR_PROPS] = container.$getObjectById$(restInt());\n            propsProxy[_CONST_PROPS] = container.$getObjectById$(restInt());\n            break;\n        default:\n            return throwErrorAndStop('Not implemented');\n    }\n    restIdx = restStack.pop();\n    rest = restStack.pop();\n};\nconst allocate = (value) => {\n    switch (value.charCodeAt(0)) {\n        case SerializationConstant.UNDEFINED_VALUE:\n            return undefined;\n        case SerializationConstant.QRL_VALUE:\n            return parseQRL(value);\n        case SerializationConstant.Task_VALUE:\n            return new Task(-1, -1, null, null, null, null);\n        case SerializationConstant.Resource_VALUE:\n            return throwErrorAndStop('Not implemented');\n        case SerializationConstant.URL_VALUE:\n            return new URL(value.substring(1));\n        case SerializationConstant.Date_VALUE:\n            return new Date(value.substring(1));\n        case SerializationConstant.Regex_VALUE:\n            const idx = value.lastIndexOf('/');\n            return new RegExp(value.substring(2, idx), value.substring(idx + 1));\n        case SerializationConstant.Error_VALUE:\n            return new Error();\n        case SerializationConstant.Component_VALUE:\n            return componentQrl(parseQRL(value));\n        case SerializationConstant.Signal_VALUE:\n            return new Signal(null, 0);\n        case SerializationConstant.WrappedSignal_VALUE:\n            return new WrappedSignal(null, null, null, null);\n        case SerializationConstant.ComputedSignal_VALUE:\n            return new ComputedSignal(null, null);\n        case SerializationConstant.NotFinite_VALUE:\n            const type = value.substring(1);\n            const isNaN = type.length === 0;\n            if (isNaN) {\n                return Number.NaN;\n            }\n            else {\n                const isNegativeInfinity = type === '-';\n                return isNegativeInfinity ? -Infinity : Infinity;\n            }\n        case SerializationConstant.URLSearchParams_VALUE:\n            return new URLSearchParams(value.substring(1));\n        case SerializationConstant.FormData_VALUE:\n            return new FormData();\n        case SerializationConstant.JSXNode_VALUE:\n            return new JSXNodeImpl(null, null, null, null, -1, null);\n        case SerializationConstant.BigInt_VALUE:\n            return BigInt(value.substring(1));\n        case SerializationConstant.Set_VALUE:\n            return new Set();\n        case SerializationConstant.Map_VALUE:\n            return new Map();\n        case SerializationConstant.String_VALUE:\n            return value.substring(1);\n        case SerializationConstant.Promise_VALUE:\n            let resolve;\n            let reject;\n            const promise = new Promise((res, rej) => {\n                resolve = res;\n                reject = rej;\n            });\n            promise[PROMISE_RESOLVE] = resolve;\n            promise[PROMISE_REJECT] = reject;\n            return promise;\n        case SerializationConstant.Uint8Array_VALUE:\n            const encodedLength = value.length - 1;\n            const blocks = encodedLength >>> 2;\n            const rest = encodedLength & 3;\n            const decodedLength = blocks * 3 + (rest ? rest - 1 : 0);\n            return new Uint8Array(decodedLength);\n        case SerializationConstant.PropsProxy_VALUE:\n            return createPropsProxy(null, null);\n        default:\n            return throwErrorAndStop('unknown allocate type: ' + value.charCodeAt(0));\n    }\n};\nconst PROMISE_RESOLVE = Symbol('resolve');\nconst PROMISE_REJECT = Symbol('reject');\nexport function parseQRL(qrl) {\n    const hashIdx = qrl.indexOf('#');\n    const captureStart = qrl.indexOf('[', hashIdx);\n    const captureEnd = qrl.indexOf(']', captureStart);\n    const chunk = hashIdx > -1\n        ? qrl.substring(qrl.charCodeAt(0) < SerializationConstant.LAST_VALUE ? 1 : 0, hashIdx)\n        : qrl;\n    const symbol = captureStart > -1 ? qrl.substring(hashIdx + 1, captureStart) : qrl.substring(hashIdx + 1);\n    let qrlRef = null;\n    const captureIds = captureStart > -1 && captureEnd > -1\n        ? qrl\n            .substring(captureStart + 1, captureEnd)\n            .split(' ')\n            .filter((v) => v.length)\n        : null;\n    if (isDev && chunk === QRL_RUNTIME_CHUNK) {\n        const backChannel = globalThis[QRL_RUNTIME_CHUNK];\n        assertDefined(backChannel, 'Missing QRL_RUNTIME_CHUNK');\n        qrlRef = backChannel.get(symbol);\n    }\n    return createQRL(chunk, symbol, qrlRef, null, captureIds, null, null);\n}\nexport function inflateQRL(container, qrl) {\n    const captureIds = qrl.$capture$;\n    qrl.$captureRef$ = captureIds\n        ? captureIds.map((id) => container.$getObjectById$(parseInt(id)))\n        : null;\n    if (container.element) {\n        qrl.$setContainer$(container.element);\n    }\n    return qrl;\n}\nexport const createSerializationContext = (NodeConstructor, symbolToChunkResolver, setProp, writer) => {\n    if (!writer) {\n        const buffer = [];\n        writer = {\n            write: (text) => buffer.push(text),\n            toString: () => buffer.join(''),\n        };\n    }\n    const map = new Map();\n    const syncFnMap = new Map();\n    const syncFns = [];\n    const roots = [];\n    const $wasSeen$ = (obj) => map.get(obj);\n    const $seen$ = (obj) => map.set(obj, Number.MIN_SAFE_INTEGER);\n    const $addRoot$ = (obj) => {\n        let id = map.get(obj);\n        if (typeof id !== 'number' || id === Number.MIN_SAFE_INTEGER) {\n            id = roots.length;\n            map.set(obj, id);\n            roots.push(obj);\n        }\n        return id;\n    };\n    return {\n        $serialize$() {\n            serialize(this);\n        },\n        $NodeConstructor$: NodeConstructor,\n        $symbolToChunkResolver$: symbolToChunkResolver,\n        $wasSeen$,\n        $roots$: roots,\n        $seen$,\n        $hasRootId$: (obj) => {\n            const id = map.get(obj);\n            return id === undefined || id === Number.MIN_SAFE_INTEGER ? undefined : id;\n        },\n        $addRoot$,\n        $getRootId$: (obj) => {\n            const id = map.get(obj);\n            if (!id || id === Number.MIN_SAFE_INTEGER) {\n                throw throwErrorAndStop('Missing root id for: ' + obj);\n            }\n            return id;\n        },\n        $syncFns$: syncFns,\n        $addSyncFn$: (funcStr, argCount, fn) => {\n            const isFullFn = funcStr == null;\n            if (isFullFn) {\n                funcStr = fn.toString();\n            }\n            let id = syncFnMap.get(funcStr);\n            if (id === undefined) {\n                id = syncFns.length;\n                syncFnMap.set(funcStr, id);\n                if (isFullFn) {\n                    syncFns.push(funcStr);\n                }\n                else {\n                    let code = '(';\n                    for (let i = 0; i < argCount; i++) {\n                        code += (i == 0 ? 'p' : ',p') + i;\n                    }\n                    syncFns.push((code += ')=>' + funcStr));\n                }\n            }\n            return id;\n        },\n        $writer$: writer,\n        $breakCircularDepsAndAwaitPromises$: () => {\n            const promises = [];\n            /// As `breakCircularDependencies` it is adding new roots\n            /// But we don't need te re-scan them.\n            const objRootsLength = roots.length;\n            for (let i = 0; i < objRootsLength; i++) {\n                breakCircularDependenciesAndResolvePromises(roots[i], promises);\n            }\n            const drain = () => {\n                if (promises.length) {\n                    return Promise.allSettled(promises).then(drain, drain);\n                }\n            };\n            return drain();\n        },\n        $eventQrls$: new Set(),\n        $eventNames$: new Set(),\n        $resources$: new Set(),\n        $renderSymbols$: new Set(),\n        $setProp$: setProp,\n    };\n    function breakCircularDependenciesAndResolvePromises(rootObj, promises) {\n        // As we walk the object graph we insert newly discovered objects which need to be scanned here.\n        const discoveredValues = [rootObj];\n        // discoveredValues.push = (...value: unknown[]) => {\n        //   Array.prototype.push.apply(discoveredValues, value);\n        // };\n        // let count = 100;\n        while (discoveredValues.length) {\n            // if (count-- < 0) {\n            //   throw new Error('INFINITE LOOP');\n            // }\n            const obj = discoveredValues.pop();\n            if (shouldTrackObj(obj) || frameworkType(obj)) {\n                const isRoot = obj === rootObj;\n                // For root objects we pretend we have not seen them to force scan.\n                const id = $wasSeen$(obj);\n                const unwrapObj = unwrapStore(obj);\n                if (id === undefined || isRoot) {\n                    // Object has not been seen yet, must scan content\n                    // But not for root.\n                    !isRoot && $seen$(obj);\n                    if (typeof obj !== 'object' ||\n                        obj === null ||\n                        obj instanceof URL ||\n                        obj instanceof Date ||\n                        obj instanceof RegExp ||\n                        obj instanceof Error ||\n                        obj instanceof Date ||\n                        obj instanceof Uint8Array ||\n                        obj instanceof URLSearchParams ||\n                        (typeof FormData !== 'undefined' && obj instanceof FormData)) {\n                        // skip as these are primitives\n                    }\n                    else if (fastSkipSerialize(obj)) {\n                        // Ignore the no serialize objects\n                    }\n                    else if (unwrapObj !== obj) {\n                        discoveredValues.push(unwrapObj);\n                    }\n                    else if (obj instanceof Set) {\n                        const contents = Array.from(obj.values());\n                        setSerializableDataRootId($addRoot$, obj, contents);\n                        discoveredValues.push(...contents);\n                    }\n                    else if (obj instanceof Map) {\n                        const tuples = [];\n                        obj.forEach((v, k) => {\n                            tuples.push(k, v);\n                            discoveredValues.push(k, v);\n                        });\n                        setSerializableDataRootId($addRoot$, obj, tuples);\n                        discoveredValues.push(tuples);\n                    }\n                    else if (obj instanceof Signal) {\n                        discoveredValues.push(obj.$untrackedValue$);\n                        if (obj.$effects$) {\n                            for (const effect of obj.$effects$) {\n                                discoveredValues.push(effect[EffectSubscriptionsProp.EFFECT]);\n                            }\n                        }\n                        if (obj instanceof WrappedSignal && obj.$effectDependencies$) {\n                            discoveredValues.push(obj.$effectDependencies$);\n                        }\n                        // TODO(mhevery): should scan the QRLs???\n                    }\n                    else if (obj instanceof Task) {\n                        discoveredValues.push(obj.$el$, obj.$qrl$, obj.$state$, obj.$effectDependencies$);\n                    }\n                    else if (NodeConstructor && obj instanceof NodeConstructor) {\n                        // ignore the nodes\n                        // debugger;\n                    }\n                    else if (isJSXNode(obj)) {\n                        discoveredValues.push(obj.type, obj.props, obj.constProps, obj.children);\n                    }\n                    else if (Array.isArray(obj)) {\n                        discoveredValues.push(...obj);\n                    }\n                    else if (isQrl(obj)) {\n                        obj.$captureRef$ &&\n                            obj.$captureRef$.length &&\n                            discoveredValues.push(...obj.$captureRef$);\n                    }\n                    else if (isPropsProxy(obj)) {\n                        discoveredValues.push(obj[_VAR_PROPS], obj[_CONST_PROPS]);\n                    }\n                    else if (isPromise(obj)) {\n                        obj.then((value) => {\n                            setSerializableDataRootId($addRoot$, obj, value);\n                            promises.splice(promises.indexOf(obj), 1);\n                        }, (error) => {\n                            obj[SERIALIZABLE_ROOT_ID] = ~$addRoot$(error);\n                            promises.splice(promises.indexOf(obj), 1);\n                        });\n                        promises.push(obj);\n                    }\n                    else if (isObjectLiteral(obj)) {\n                        for (const key in obj) {\n                            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                                discoveredValues.push(obj[key]);\n                            }\n                        }\n                    }\n                    else {\n                        return throwErrorAndStop('Unknown type: ' + obj);\n                    }\n                }\n                else if (id === Number.MIN_SAFE_INTEGER) {\n                    // We are seeing this object second time => promoted it.\n                    $addRoot$(obj);\n                    // we don't need to scan the children, since we have already seen them.\n                }\n            }\n        }\n    }\n};\nfunction serialize(serializationContext) {\n    const { $writer$, $addRoot$, $NodeConstructor$, $setProp$ } = serializationContext;\n    let depth = -1;\n    const writeString = (text) => {\n        text = JSON.stringify(text);\n        let angleBracketIdx = -1;\n        let lastIdx = 0;\n        while ((angleBracketIdx = text.indexOf('</', lastIdx)) !== -1) {\n            $writer$.write(text.substring(lastIdx, angleBracketIdx));\n            $writer$.write('<\\\\/');\n            lastIdx = angleBracketIdx + 2;\n        }\n        $writer$.write(lastIdx === 0 ? text : text.substring(lastIdx));\n    };\n    const writeValue = (value, idx) => {\n        if (fastSkipSerialize(value)) {\n            return writeString(SerializationConstant.UNDEFINED_CHAR);\n        }\n        else if (typeof value === 'bigint') {\n            return writeString(SerializationConstant.BigInt_CHAR + value.toString());\n        }\n        else if (typeof value === 'boolean') {\n            $writer$.write(String(value));\n        }\n        else if (typeof value === 'function') {\n            if (isQrl(value)) {\n                writeString(SerializationConstant.QRL_CHAR + qrlToString(serializationContext, value));\n            }\n            else if (isQwikComponent(value)) {\n                const [qrl] = value[SERIALIZABLE_STATE];\n                serializationContext.$renderSymbols$.add(qrl.$symbol$);\n                writeString(SerializationConstant.Component_CHAR + qrlToString(serializationContext, qrl));\n            }\n            else {\n                // throw new Error('implement: ' + value);\n                writeString(value.toString());\n            }\n        }\n        else if (typeof value === 'number') {\n            if (Number.isNaN(value)) {\n                return writeString(SerializationConstant.NotFinite_CHAR);\n            }\n            else if (!Number.isFinite(value)) {\n                return writeString(SerializationConstant.NotFinite_CHAR + (value > 0 ? '+' : '-'));\n            }\n            else {\n                $writer$.write(String(value));\n            }\n        }\n        else if (typeof value === 'object') {\n            depth++;\n            if (value === null) {\n                $writer$.write('null');\n            }\n            else {\n                writeObjectValue(value, idx);\n            }\n            depth--;\n        }\n        else if (typeof value === 'string') {\n            let seenIdx;\n            if (shouldTrackObj(value) &&\n                depth > 0 &&\n                (seenIdx = serializationContext.$hasRootId$(value)) !== undefined) {\n                assertTrue(seenIdx >= 0, 'seenIdx >= 0');\n                return writeString(SerializationConstant.REFERENCE_CHAR + seenIdx);\n            }\n            else if (value.length > 0 && value.charCodeAt(0) < SerializationConstant.LAST_VALUE) {\n                // We need to escape the first character, because it is a special character.\n                writeString(SerializationConstant.String_CHAR + value);\n            }\n            else {\n                writeString(value);\n            }\n        }\n        else if (typeof value === 'undefined') {\n            writeString(SerializationConstant.UNDEFINED_CHAR);\n        }\n        else {\n            return throwErrorAndStop('Unknown type: ' + typeof value);\n        }\n    };\n    const writeObjectValue = (value, idx) => {\n        // Objects are the only way to create circular dependencies.\n        // So the first thing to to is to see if we have a circular dependency.\n        // (NOTE: For root objects we need to serialize them regardless if we have seen\n        //        them before, otherwise the root object reference will point to itself.)\n        const seen = depth <= 1 ? undefined : serializationContext.$wasSeen$(value);\n        if (fastSkipSerialize(value)) {\n            writeString(SerializationConstant.UNDEFINED_CHAR);\n        }\n        else if (typeof seen === 'number' && seen >= 0) {\n            // We have seen this object before, so we can serialize it as a reference.\n            // Otherwise serialize as normal\n            writeString(SerializationConstant.REFERENCE_CHAR + seen);\n        }\n        else if (isPropsProxy(value)) {\n            const varProps = value[_VAR_PROPS];\n            const varId = $addRoot$(varProps);\n            const constProps = value[_CONST_PROPS];\n            const constId = $addRoot$(constProps);\n            writeString(SerializationConstant.PropsProxy_CHAR + varId + ' ' + constId);\n        }\n        else if (isStore(value)) {\n            const storeHandler = getStoreHandler(value);\n            let store = SerializationConstant.Store_CHAR +\n                $addRoot$(unwrapStore(value)) +\n                ' ' +\n                storeHandler.$flags$;\n            const effects = storeHandler.$effects$;\n            if (effects) {\n                let sep = ' ';\n                for (const propName in effects) {\n                    store += sep + propName + serializeEffectSubs($addRoot$, effects[propName]);\n                    sep = '|';\n                }\n                if (effects[STORE_ARRAY_PROP]) {\n                    store +=\n                        sep +\n                            SerializationConstant.UNDEFINED_CHAR +\n                            serializeEffectSubs($addRoot$, effects[STORE_ARRAY_PROP]);\n                }\n            }\n            writeString(store);\n        }\n        else if (isObjectLiteral(value)) {\n            if (isResource(value)) {\n                serializationContext.$resources$.add(value);\n            }\n            serializeObjectLiteral(value, $writer$, writeValue, writeString);\n        }\n        else if (value instanceof Signal) {\n            if (value instanceof WrappedSignal) {\n                writeString(SerializationConstant.WrappedSignal_CHAR +\n                    serializeDerivedFn(serializationContext, value, $addRoot$) +\n                    ';' +\n                    $addRoot$(value.$effectDependencies$) +\n                    ';' +\n                    // `.untrackedValue` implicitly calls `$computeIfNeeded$`, which is what we want in case\n                    // the signal is not computed yet.\n                    $addRoot$(value.untrackedValue) +\n                    serializeEffectSubs($addRoot$, value.$effects$));\n            }\n            else if (value instanceof ComputedSignal) {\n                writeString(SerializationConstant.ComputedSignal_CHAR +\n                    qrlToString(serializationContext, value.$computeQrl$) +\n                    ';' +\n                    $addRoot$(value.$untrackedValue$) +\n                    serializeEffectSubs($addRoot$, value.$effects$));\n            }\n            else {\n                writeString(SerializationConstant.Signal_CHAR +\n                    $addRoot$(value.$untrackedValue$) +\n                    serializeEffectSubs($addRoot$, value.$effects$));\n            }\n        }\n        else if (value instanceof URL) {\n            writeString(SerializationConstant.URL_CHAR + value.href);\n        }\n        else if (value instanceof Date) {\n            writeString(SerializationConstant.Date_CHAR + value.toJSON());\n        }\n        else if (value instanceof RegExp) {\n            writeString(SerializationConstant.Regex_CHAR + value.toString());\n        }\n        else if (value instanceof Error) {\n            const errorProps = Object.assign({\n                message: value.message,\n                /// In production we don't want to leak the stack trace.\n                stack: isDev ? value.stack : '<hidden>',\n            }, value);\n            writeString(SerializationConstant.Error_CHAR + $addRoot$(errorProps));\n        }\n        else if ($NodeConstructor$ && value instanceof $NodeConstructor$) {\n            $setProp$(value, ELEMENT_ID, String(idx));\n            writeString(SerializationConstant.VNode_CHAR + value.id);\n        }\n        else if (typeof FormData !== 'undefined' && value instanceof FormData) {\n            const array = [];\n            value.forEach((value, key) => {\n                if (typeof value === 'string') {\n                    array.push([key, value]);\n                }\n                else {\n                    array.push([key, value.name]);\n                }\n            });\n            writeString(SerializationConstant.FormData_CHAR + $addRoot$(array));\n        }\n        else if (value instanceof URLSearchParams) {\n            writeString(SerializationConstant.URLSearchParams_CHAR + value.toString());\n        }\n        else if (value instanceof Set) {\n            writeString(SerializationConstant.Set_CHAR + getSerializableDataRootId(value));\n        }\n        else if (value instanceof Map) {\n            writeString(SerializationConstant.Map_CHAR + getSerializableDataRootId(value));\n        }\n        else if (isJSXNode(value)) {\n            writeString(SerializationConstant.JSXNode_CHAR +\n                serializeJSXType($addRoot$, value.type) +\n                ' ' +\n                $addRoot$(value.varProps) +\n                ' ' +\n                $addRoot$(value.constProps) +\n                ' ' +\n                $addRoot$(value.children) +\n                ' ' +\n                value.flags +\n                ' ' +\n                (value.key || ''));\n        }\n        else if (value instanceof Task) {\n            writeString(SerializationConstant.Task_CHAR +\n                value.$flags$ +\n                ' ' +\n                value.$index$ +\n                ' ' +\n                $addRoot$(value.$el$) +\n                ' ' +\n                $addRoot$(value.$effectDependencies$) +\n                ' ' +\n                qrlToString(serializationContext, value.$qrl$) +\n                (value.$state$ == null ? '' : ' ' + $addRoot$(value.$state$)));\n        }\n        else if (isPromise(value)) {\n            writeString(SerializationConstant.Promise_CHAR + getSerializableDataRootId(value));\n        }\n        else if (value instanceof Uint8Array) {\n            let buf = '';\n            for (const c of value) {\n                buf += String.fromCharCode(c);\n            }\n            const out = btoa(buf).replace(/=+$/, '');\n            writeString(SerializationConstant.Uint8Array_CHAR + out);\n        }\n        else {\n            return throwErrorAndStop('implement');\n        }\n    };\n    const serializeObjectLiteral = (value, $writer$, writeValue, writeString) => {\n        if (Array.isArray(value)) {\n            // Serialize as array.\n            serializeArray(value, $writer$, writeValue);\n        }\n        else {\n            // Serialize as object.\n            $writer$.write('{');\n            serializeObjectProperties(value, $writer$, writeValue, writeString);\n            $writer$.write('}');\n        }\n    };\n    writeValue(serializationContext.$roots$, -1);\n}\nfunction serializeEffectSubs(addRoot, effects) {\n    let data = '';\n    if (effects) {\n        for (let i = 0; i < effects.length; i++) {\n            const effectSubscription = effects[i];\n            const effect = effectSubscription[EffectSubscriptionsProp.EFFECT];\n            const prop = effectSubscription[EffectSubscriptionsProp.PROPERTY];\n            data += ';' + addRoot(effect) + ' ' + prop;\n            let effectSubscriptionDataIndex = EffectSubscriptionsProp.FIRST_BACK_REF_OR_DATA;\n            const effectSubscriptionData = effectSubscription[effectSubscriptionDataIndex];\n            if (effectSubscriptionData instanceof EffectData) {\n                data += ' |' + addRoot(effectSubscriptionData.data);\n                effectSubscriptionDataIndex++;\n            }\n            for (let j = effectSubscriptionDataIndex; j < effectSubscription.length; j++) {\n                data += ' ' + addRoot(effectSubscription[j]);\n            }\n        }\n    }\n    return data;\n}\nfunction serializeArray(value, $writer$, writeValue) {\n    $writer$.write('[');\n    for (let i = 0; i < value.length; i++) {\n        if (i !== 0) {\n            $writer$.write(',');\n        }\n        writeValue(value[i], i);\n    }\n    $writer$.write(']');\n}\nfunction serializeObjectProperties(value, $writer$, writeValue, writeString) {\n    let delimiter = false;\n    for (const key in value) {\n        if (Object.prototype.hasOwnProperty.call(value, key) && !fastSkipSerialize(value[key])) {\n            delimiter && $writer$.write(',');\n            writeString(key);\n            $writer$.write(':');\n            writeValue(value[key], -1);\n            delimiter = true;\n        }\n    }\n}\nfunction serializeDerivedFn(serializationContext, value, $addRoot$) {\n    // if value is an object then we need to wrap this in ()\n    if (value.$funcStr$ && value.$funcStr$[0] === '{') {\n        value.$funcStr$ = `(${value.$funcStr$})`;\n    }\n    const syncFnId = serializationContext.$addSyncFn$(value.$funcStr$, value.$args$.length, value.$func$);\n    const args = value.$args$.map($addRoot$).join(' ');\n    return syncFnId + (args.length ? ' ' + args : '');\n}\nfunction deserializeSignal2(signal, container, data, readFn, readQrl) {\n    signal.$container$ = container;\n    const parts = data.substring(1).split(';');\n    let idx = 0;\n    if (readFn) {\n        const derivedSignal = signal;\n        derivedSignal.$invalid$ = false;\n        const fnParts = parts[idx++].split(' ');\n        derivedSignal.$func$ = container.getSyncFn(parseInt(fnParts[0]));\n        for (let i = 1; i < fnParts.length; i++) {\n            (derivedSignal.$args$ || (derivedSignal.$args$ = [])).push(container.$getObjectById$(parseInt(fnParts[i])));\n        }\n        const dependencies = container.$getObjectById$(parts[idx++]);\n        derivedSignal.$effectDependencies$ = dependencies;\n    }\n    if (readQrl) {\n        const computedSignal = signal;\n        computedSignal.$computeQrl$ = inflateQRL(container, parseQRL(parts[idx++]));\n    }\n    let signalValue = container.$getObjectById$(parts[idx++]);\n    if (vnode_isVNode(signalValue)) {\n        signalValue = vnode_getNode(signalValue);\n    }\n    signal.$untrackedValue$ = signalValue;\n    if (idx < parts.length) {\n        const effects = signal.$effects$ || (signal.$effects$ = []);\n        idx = deserializeSignal2Effect(idx, parts, container, effects);\n    }\n}\nfunction deserializeStore2(container, data) {\n    restStack.push(rest, restIdx);\n    rest = data;\n    restIdx = 1;\n    const target = container.$getObjectById$(restInt());\n    const store = createStore(container, target, restInt());\n    const storeHandler = getStoreHandler(store);\n    const effectSerializedString = rest.substring(restIdx);\n    const storeHasEffects = !!effectSerializedString.length;\n    if (storeHasEffects) {\n        const effectProps = effectSerializedString.split('|');\n        if (effectProps.length) {\n            const effects = (storeHandler.$effects$ = {});\n            for (let i = 0; i < effectProps.length; i++) {\n                const effect = effectProps[i];\n                const idx = effect.indexOf(';');\n                let prop = effect.substring(0, idx);\n                if (prop === SerializationConstant.UNDEFINED_CHAR) {\n                    prop = STORE_ARRAY_PROP;\n                }\n                const effectStr = effect.substring(idx + 1);\n                deserializeSignal2Effect(0, effectStr.split(';'), container, (effects[prop] = []));\n            }\n        }\n    }\n    restIdx = restStack.pop();\n    rest = restStack.pop();\n    return store;\n}\nfunction deserializeSignal2Effect(idx, parts, container, effects) {\n    while (idx < parts.length) {\n        // idx == 1 is the attribute name\n        const effect = parts[idx++].split(' ').map((obj, idx) => {\n            if (idx === EffectSubscriptionsProp.PROPERTY) {\n                return obj;\n            }\n            else {\n                if (obj[0] === '|') {\n                    return new EffectData(container.$getObjectById$(parseInt(obj.substring(1))));\n                }\n                return container.$getObjectById$(obj);\n            }\n        });\n        effects.push(effect);\n    }\n    return idx;\n}\nfunction setSerializableDataRootId($addRoot$, obj, value) {\n    obj[SERIALIZABLE_ROOT_ID] = $addRoot$(value);\n}\nfunction getSerializableDataRootId(value) {\n    const id = value[SERIALIZABLE_ROOT_ID];\n    assertDefined(id, 'Missing SERIALIZABLE_ROOT_ID');\n    return id;\n}\nexport function qrlToString(serializationContext, value) {\n    let symbol = value.$symbol$;\n    let chunk = value.$chunk$;\n    const refSymbol = value.$refSymbol$ ?? symbol;\n    const platform = getPlatform();\n    if (platform) {\n        const result = platform.chunkForSymbol(refSymbol, chunk, value.dev?.file);\n        if (result) {\n            chunk = result[1];\n            if (!value.$refSymbol$) {\n                symbol = result[0];\n            }\n        }\n    }\n    const isSync = isSyncQrl(value);\n    if (!isSync) {\n        // If we have a symbol we need to resolve the chunk.\n        if (!chunk) {\n            chunk = serializationContext.$symbolToChunkResolver$(value.$hash$);\n        }\n        // in Dev mode we need to keep track of the symbols\n        if (isDev) {\n            let backChannel = globalThis[QRL_RUNTIME_CHUNK];\n            if (!backChannel) {\n                backChannel = globalThis[QRL_RUNTIME_CHUNK] = new Map();\n            }\n            backChannel.set(value.$symbol$, value._devOnlySymbolRef);\n            if (!chunk) {\n                chunk = QRL_RUNTIME_CHUNK;\n            }\n        }\n        if (!chunk) {\n            throwErrorAndStop('Missing chunk for: ' + value.$symbol$);\n        }\n    }\n    else {\n        const fn = value.resolved;\n        chunk = '';\n        symbol = String(serializationContext.$addSyncFn$(null, 0, fn));\n    }\n    let qrlStringInline = `${chunk}#${symbol}`;\n    if (Array.isArray(value.$captureRef$) && value.$captureRef$.length > 0) {\n        let serializedReferences = '';\n        // hot-path optimization\n        for (let i = 0; i < value.$captureRef$.length; i++) {\n            if (i > 0) {\n                serializedReferences += ' ';\n            }\n            serializedReferences += serializationContext.$addRoot$(value.$captureRef$[i]);\n        }\n        qrlStringInline += `[${serializedReferences}]`;\n    }\n    return qrlStringInline;\n}\n/**\n * Serialize data to string using SerializationContext.\n *\n * @param data - Data to serialize\n * @internal\n */\nexport async function _serialize(data) {\n    const serializationContext = createSerializationContext(null, () => '', () => { });\n    for (const root of data) {\n        serializationContext.$addRoot$(root);\n    }\n    await serializationContext.$breakCircularDepsAndAwaitPromises$();\n    serializationContext.$serialize$();\n    return serializationContext.$writer$.toString();\n}\n/**\n * Deserialize data from string to an array of objects.\n *\n * @param rawStateData - Data to deserialize\n * @param element - Container element\n * @internal\n */\nexport function _deserialize(rawStateData, element) {\n    if (rawStateData == null) {\n        return [];\n    }\n    const stateData = JSON.parse(rawStateData);\n    if (!Array.isArray(stateData)) {\n        return [];\n    }\n    let container = undefined;\n    if (isNode(element) && isElement(element)) {\n        container = createDeserializeContainer(stateData, element);\n    }\n    else {\n        container = createDeserializeContainer(stateData);\n    }\n    for (let i = 0; i < stateData.length; i++) {\n        const data = stateData[i];\n        stateData[i] = deserializeData(stateData, data, container);\n    }\n    return stateData;\n}\nfunction deserializeData(stateData, serializedData, container) {\n    let typeCode;\n    if (typeof serializedData === 'string' &&\n        serializedData.length >= 1 &&\n        (typeCode = serializedData.charCodeAt(0)) < SerializationConstant.LAST_VALUE) {\n        let propValue = serializedData;\n        if (typeCode === SerializationConstant.REFERENCE_VALUE) {\n            // Special case of Reference, we don't go through allocation/inflation\n            propValue = unwrapDeserializerProxy(container.$getObjectById$(parseInt(propValue.substring(1))));\n        }\n        else {\n            propValue = allocate(propValue);\n        }\n        if (typeCode >= SerializationConstant.Error_VALUE) {\n            inflate(container, propValue, serializedData);\n        }\n        return propValue;\n    }\n    else if (serializedData && typeof serializedData === 'object') {\n        if (Array.isArray(serializedData)) {\n            return deserializeArray(stateData, serializedData, container);\n        }\n        else {\n            return deserializeObject(stateData, serializedData, container);\n        }\n    }\n    return serializedData;\n}\nfunction deserializeObject(stateData, serializedData, container) {\n    if (!isSerializableObject(serializedData)) {\n        return serializedData;\n    }\n    for (const key in serializedData) {\n        if (Object.prototype.hasOwnProperty.call(serializedData, key)) {\n            const value = serializedData[key];\n            serializedData[key] = deserializeData(stateData, value, container);\n        }\n    }\n    return serializedData;\n}\nfunction deserializeArray(stateData, serializedData, container) {\n    for (let i = 0; i < serializedData.length; i++) {\n        const value = serializedData[i];\n        serializedData[i] = deserializeData(stateData, value, container);\n    }\n    return serializedData;\n}\nfunction getObjectById(id, stateData) {\n    if (typeof id === 'string') {\n        id = parseFloat(id);\n    }\n    assertTrue(id < stateData.length, 'Invalid reference');\n    return stateData[id];\n}\nfunction createDeserializeContainer(stateData, element) {\n    const container = {\n        $getObjectById$: (id) => getObjectById(id, stateData),\n        getSyncFn: (_) => {\n            const fn = () => { };\n            return fn;\n        },\n        element: null,\n    };\n    if (element) {\n        container.element = element;\n    }\n    return container;\n}\n/**\n * Tracking all objects in the map would be expensive. For this reason we only track some of the\n * objects.\n *\n * For example we skip:\n *\n * - Short strings\n * - Anything which is not an object. (ie. number, boolean, null, undefined)\n *\n * @param obj\n * @returns\n */\nfunction shouldTrackObj(obj) {\n    return ((typeof obj === 'object' && obj !== null) ||\n        // THINK: Not sure if we need to keep track of functions (QRLs) Let's skip them for now.\n        // and see if we have a test case which requires them.\n        (typeof obj === 'string' && obj.length > 10));\n}\n/**\n * When serializing the object we need check if it is URL, RegExp, Map, Set, etc. This is time\n * consuming. So if we could know that this is a basic object literal we could skip the check, and\n * only run the checks for objects which are not object literals.\n *\n * So this function is here for performance to short circuit many checks later.\n *\n * @param obj\n */\nfunction isObjectLiteral(obj) {\n    // We are an object literal if:\n    // - we are a direct instance of object OR\n    // - we are an array\n    // In all other cases it is a subclass which requires more checks.\n    const prototype = Object.getPrototypeOf(obj);\n    return prototype == null || prototype === Object.prototype || prototype === Array.prototype;\n}\nfunction isResource(value) {\n    return '__brand' in value && value.__brand === 'resource';\n}\nconst frameworkType = (obj) => {\n    return ((typeof obj === 'object' &&\n        obj !== null &&\n        (obj instanceof Signal || obj instanceof Task || isJSXNode(obj))) ||\n        isQrl(obj));\n};\nexport const canSerialize2 = (value) => {\n    if (value == null ||\n        typeof value === 'string' ||\n        typeof value === 'number' ||\n        typeof value === 'boolean' ||\n        typeof value === 'bigint') {\n        return true;\n    }\n    else if (typeof value === 'object') {\n        const proto = Object.getPrototypeOf(value);\n        if (isStore(value)) {\n            value = unwrapStore(value);\n        }\n        if (proto == Object.prototype) {\n            for (const key in value) {\n                if (!canSerialize2(value[key])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        else if (proto == Array.prototype) {\n            for (let i = 0; i < value.length; i++) {\n                if (!canSerialize2(value[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        else if (isTask(value)) {\n            return true;\n        }\n        else if (isPropsProxy(value)) {\n            return true;\n        }\n        else if (isPromise(value)) {\n            return true;\n        }\n        else if (isJSXNode(value)) {\n            return true;\n        }\n        else if (value instanceof Error) {\n            return true;\n        }\n        else if (value instanceof URL) {\n            return true;\n        }\n        else if (value instanceof Date) {\n            return true;\n        }\n        else if (value instanceof RegExp) {\n            return true;\n        }\n        else if (value instanceof URLSearchParams) {\n            return true;\n        }\n        else if (value instanceof FormData) {\n            return true;\n        }\n        else if (value instanceof Set) {\n            return true;\n        }\n        else if (value instanceof Map) {\n            return true;\n        }\n        else if (value instanceof Uint8Array) {\n            return true;\n        }\n    }\n    else if (typeof value === 'function') {\n        if (isQrl(value) || isQwikComponent(value)) {\n            return true;\n        }\n    }\n    return false;\n};\nconst QRL_RUNTIME_CHUNK = 'qwik-runtime-mock-chunk';\nconst SERIALIZABLE_ROOT_ID = Symbol('SERIALIZABLE_ROOT_ID');\nexport var SerializationConstant;\n(function (SerializationConstant) {\n    SerializationConstant[\"UNDEFINED_CHAR\"] = \"\\0\";\n    SerializationConstant[SerializationConstant[\"UNDEFINED_VALUE\"] = 0] = \"UNDEFINED_VALUE\";\n    SerializationConstant[\"REFERENCE_CHAR\"] = \"\\u0001\";\n    SerializationConstant[SerializationConstant[\"REFERENCE_VALUE\"] = 1] = \"REFERENCE_VALUE\";\n    SerializationConstant[\"URL_CHAR\"] = \"\\u0002\";\n    SerializationConstant[SerializationConstant[\"URL_VALUE\"] = 2] = \"URL_VALUE\";\n    SerializationConstant[\"Date_CHAR\"] = \"\\u0003\";\n    SerializationConstant[SerializationConstant[\"Date_VALUE\"] = 3] = \"Date_VALUE\";\n    SerializationConstant[\"Regex_CHAR\"] = \"\\u0004\";\n    SerializationConstant[SerializationConstant[\"Regex_VALUE\"] = 4] = \"Regex_VALUE\";\n    SerializationConstant[\"String_CHAR\"] = \"\\u0005\";\n    SerializationConstant[SerializationConstant[\"String_VALUE\"] = 5] = \"String_VALUE\";\n    SerializationConstant[\"VNode_CHAR\"] = \"\\u0006\";\n    SerializationConstant[SerializationConstant[\"VNode_VALUE\"] = 6] = \"VNode_VALUE\";\n    SerializationConstant[\"NotFinite_CHAR\"] = \"\\u0007\";\n    SerializationConstant[SerializationConstant[\"NotFinite_VALUE\"] = 7] = \"NotFinite_VALUE\";\n    SerializationConstant[\"BigInt_CHAR\"] = \"\\b\";\n    SerializationConstant[SerializationConstant[\"BigInt_VALUE\"] = 8] = \"BigInt_VALUE\";\n    SerializationConstant[\"UNUSED_HORIZONTAL_TAB_CHAR\"] = \"\\t\";\n    SerializationConstant[SerializationConstant[\"UNUSED_HORIZONTAL_TAB_VALUE\"] = 9] = \"UNUSED_HORIZONTAL_TAB_VALUE\";\n    SerializationConstant[\"UNUSED_NEW_LINE_CHAR\"] = \"\\n\";\n    SerializationConstant[SerializationConstant[\"UNUSED_NEW_LINE_VALUE\"] = 10] = \"UNUSED_NEW_LINE_VALUE\";\n    SerializationConstant[\"UNUSED_VERTICAL_TAB_CHAR\"] = \"\\v\";\n    SerializationConstant[SerializationConstant[\"UNUSED_VERTICAL_TAB_VALUE\"] = 11] = \"UNUSED_VERTICAL_TAB_VALUE\";\n    SerializationConstant[\"UNUSED_FORM_FEED_CHAR\"] = \"\\f\";\n    SerializationConstant[SerializationConstant[\"UNUSED_FORM_FEED_VALUE\"] = 12] = \"UNUSED_FORM_FEED_VALUE\";\n    SerializationConstant[\"UNUSED_CARRIAGE_RETURN_CHAR\"] = \"\\r\";\n    SerializationConstant[SerializationConstant[\"UNUSED_CARRIAGE_RETURN_VALUE\"] = 13] = \"UNUSED_CARRIAGE_RETURN_VALUE\";\n    SerializationConstant[\"URLSearchParams_CHAR\"] = \"\\u000E\";\n    SerializationConstant[SerializationConstant[\"URLSearchParams_VALUE\"] = 14] = \"URLSearchParams_VALUE\";\n    /// All values bellow need inflation\n    SerializationConstant[\"Error_CHAR\"] = \"\\u000F\";\n    SerializationConstant[SerializationConstant[\"Error_VALUE\"] = 15] = \"Error_VALUE\";\n    SerializationConstant[\"QRL_CHAR\"] = \"\\u0010\";\n    SerializationConstant[SerializationConstant[\"QRL_VALUE\"] = 16] = \"QRL_VALUE\";\n    SerializationConstant[\"Task_CHAR\"] = \"\\u0011\";\n    SerializationConstant[SerializationConstant[\"Task_VALUE\"] = 17] = \"Task_VALUE\";\n    SerializationConstant[\"Resource_CHAR\"] = \"\\u0012\";\n    SerializationConstant[SerializationConstant[\"Resource_VALUE\"] = 18] = \"Resource_VALUE\";\n    SerializationConstant[\"Component_CHAR\"] = \"\\u0013\";\n    SerializationConstant[SerializationConstant[\"Component_VALUE\"] = 19] = \"Component_VALUE\";\n    SerializationConstant[\"Signal_CHAR\"] = \"\\u0014\";\n    SerializationConstant[SerializationConstant[\"Signal_VALUE\"] = 20] = \"Signal_VALUE\";\n    SerializationConstant[\"WrappedSignal_CHAR\"] = \"\\u0015\";\n    SerializationConstant[SerializationConstant[\"WrappedSignal_VALUE\"] = 21] = \"WrappedSignal_VALUE\";\n    SerializationConstant[\"ComputedSignal_CHAR\"] = \"\\u0016\";\n    SerializationConstant[SerializationConstant[\"ComputedSignal_VALUE\"] = 22] = \"ComputedSignal_VALUE\";\n    SerializationConstant[\"Store_CHAR\"] = \"\\u0017\";\n    SerializationConstant[SerializationConstant[\"Store_VALUE\"] = 23] = \"Store_VALUE\";\n    SerializationConstant[\"FormData_CHAR\"] = \"\\u0018\";\n    SerializationConstant[SerializationConstant[\"FormData_VALUE\"] = 24] = \"FormData_VALUE\";\n    SerializationConstant[\"JSXNode_CHAR\"] = \"\\u0019\";\n    SerializationConstant[SerializationConstant[\"JSXNode_VALUE\"] = 25] = \"JSXNode_VALUE\";\n    SerializationConstant[\"Set_CHAR\"] = \"\\u001A\";\n    SerializationConstant[SerializationConstant[\"Set_VALUE\"] = 26] = \"Set_VALUE\";\n    SerializationConstant[\"Map_CHAR\"] = \"\\u001B\";\n    SerializationConstant[SerializationConstant[\"Map_VALUE\"] = 27] = \"Map_VALUE\";\n    SerializationConstant[\"Promise_CHAR\"] = \"\\u001C\";\n    SerializationConstant[SerializationConstant[\"Promise_VALUE\"] = 28] = \"Promise_VALUE\";\n    SerializationConstant[\"Uint8Array_CHAR\"] = \"\\u001E\";\n    SerializationConstant[SerializationConstant[\"Uint8Array_VALUE\"] = 30] = \"Uint8Array_VALUE\";\n    SerializationConstant[\"PropsProxy_CHAR\"] = \"\\u001F\";\n    SerializationConstant[SerializationConstant[\"PropsProxy_VALUE\"] = 31] = \"PropsProxy_VALUE\";\n    /// Can't go past this value\n    SerializationConstant[SerializationConstant[\"LAST_VALUE\"] = 32] = \"LAST_VALUE\";\n})(SerializationConstant || (SerializationConstant = {}));\nfunction serializeJSXType($addRoot$, type) {\n    if (typeof type === 'string') {\n        return type;\n    }\n    else if (type === Slot) {\n        return ':slot';\n    }\n    else if (type === Fragment) {\n        return ':fragment';\n    }\n    else {\n        return $addRoot$(type);\n    }\n}\nfunction deserializeJSXType(container, type) {\n    if (type === ':slot') {\n        return Slot;\n    }\n    else if (type === ':fragment') {\n        return Fragment;\n    }\n    else {\n        const ch = type.charCodeAt(0);\n        if (48 /* '0' */ <= ch && ch <= 57 /* '9' */) {\n            return container.$getObjectById$(type);\n        }\n        else {\n            return type;\n        }\n    }\n}\nexport const codeToName = (code) => {\n    switch (code) {\n        case SerializationConstant.UNDEFINED_VALUE:\n            return 'UNDEFINED';\n        case SerializationConstant.REFERENCE_VALUE:\n            return 'REFERENCE';\n        case SerializationConstant.QRL_VALUE:\n            return 'QRL';\n        case SerializationConstant.Task_VALUE:\n            return 'Task';\n        case SerializationConstant.Resource_VALUE:\n            return 'Resource';\n        case SerializationConstant.URL_VALUE:\n            return 'URL';\n        case SerializationConstant.Date_VALUE:\n            return 'Date';\n        case SerializationConstant.Regex_VALUE:\n            return 'Regex';\n        case SerializationConstant.String_VALUE:\n            return 'String';\n        case SerializationConstant.UNUSED_HORIZONTAL_TAB_VALUE:\n            return 'UNUSED_HORIZONTAL_TAB';\n        case SerializationConstant.UNUSED_NEW_LINE_VALUE:\n            return 'UNUSED_NEW_LINE';\n        case SerializationConstant.UNUSED_VERTICAL_TAB_VALUE:\n            return 'UNUSED_VERTICAL_TAB';\n        case SerializationConstant.UNUSED_FORM_FEED_VALUE:\n            return 'UNUSED_FORM_FEED';\n        case SerializationConstant.UNUSED_CARRIAGE_RETURN_VALUE:\n            return 'UNUSED_CARRIAGE_RETURN';\n        case SerializationConstant.Error_VALUE:\n            return 'Error';\n        case SerializationConstant.VNode_VALUE:\n            return 'VNode';\n        case SerializationConstant.Component_VALUE:\n            return 'Component';\n        case SerializationConstant.WrappedSignal_VALUE:\n            return 'DerivedSignal';\n        case SerializationConstant.Store_VALUE:\n            return 'Store';\n        case SerializationConstant.Signal_VALUE:\n            return 'Signal';\n        case SerializationConstant.ComputedSignal_VALUE:\n            return 'ComputedSignal';\n        case SerializationConstant.NotFinite_VALUE:\n            return 'NotFinite';\n        case SerializationConstant.URLSearchParams_VALUE:\n            return 'URLSearchParams';\n        case SerializationConstant.FormData_VALUE:\n            return 'FormData';\n        case SerializationConstant.JSXNode_VALUE:\n            return 'JSXNode';\n        case SerializationConstant.BigInt_VALUE:\n            return 'BigInt';\n        case SerializationConstant.Set_VALUE:\n            return 'Set';\n        case SerializationConstant.Map_VALUE:\n            return 'Map';\n        case SerializationConstant.Promise_VALUE:\n            return 'Promise';\n        case SerializationConstant.Uint8Array_VALUE:\n            return 'Uint8Array';\n        case SerializationConstant.PropsProxy_VALUE:\n            return 'Props';\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { trackSignal } from '../../use/use-core';\nimport { version } from '../../version';\nimport { createScheduler } from './scheduler';\nimport { createSerializationContext } from './shared-serialization';\n/** @internal */\nexport class _SharedContainer {\n    constructor(scheduleDrain, journalFlush, serverData, locale) {\n        this.$currentUniqueId$ = 0;\n        this.$instanceHash$ = null;\n        this.$serverData$ = serverData;\n        this.$locale$ = locale;\n        this.$version$ = version;\n        this.$storeProxyMap$ = new WeakMap();\n        this.$getObjectById$ = (id) => {\n            throw Error('Not implemented');\n        };\n        this.$scheduler$ = createScheduler(this, scheduleDrain, journalFlush);\n    }\n    trackSignalValue(signal, subscriber, property, data) {\n        return trackSignal(() => signal.value, subscriber, property, this, data);\n    }\n    serializationCtxFactory(NodeConstructor, symbolToChunkResolver, writer) {\n        return createSerializationContext(NodeConstructor, symbolToChunkResolver, this.setHostProp.bind(this), writer);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkLWNvbnRhaW5lci5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS92Mi9zaGFyZWQvc2hhcmVkLWNvbnRhaW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFakQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUl4QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzlDLE9BQU8sRUFBRSwwQkFBMEIsRUFBNkIsTUFBTSx3QkFBd0IsQ0FBQztBQUcvRixnQkFBZ0I7QUFDaEIsTUFBTSxPQUFnQixnQkFBZ0I7SUFZcEMsWUFDRSxhQUF5QixFQUN6QixZQUF3QixFQUN4QixVQUErQixFQUMvQixNQUFjO1FBUGhCLHNCQUFpQixHQUFHLENBQUMsQ0FBQztRQUN0QixtQkFBYyxHQUFrQixJQUFJLENBQUM7UUFRbkMsSUFBSSxDQUFDLFlBQVksR0FBRyxVQUFVLENBQUM7UUFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUM7UUFDekIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQyxFQUFtQixFQUFFLEVBQUU7WUFDN0MsTUFBTSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUM7UUFFRixJQUFJLENBQUMsV0FBVyxHQUFHLGVBQWUsQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxnQkFBZ0IsQ0FBSSxNQUFjLEVBQUUsVUFBa0IsRUFBRSxRQUFnQixFQUFFLElBQWdCO1FBQ3hGLE9BQU8sV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVELHVCQUF1QixDQUNyQixlQUFpRSxFQUNqRSxxQkFBNEMsRUFDNUMsTUFBcUI7UUFFckIsT0FBTywwQkFBMEIsQ0FDL0IsZUFBZSxFQUNmLHFCQUFxQixFQUNyQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFDM0IsTUFBTSxDQUNQLENBQUM7SUFDSixDQUFDO0NBZ0JGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBPYmpUb1Byb3h5TWFwIH0gZnJvbSAnLi4vLi4vY29udGFpbmVyL2NvbnRhaW5lcic7XG5pbXBvcnQgdHlwZSB7IEpTWE91dHB1dCB9IGZyb20gJy4uLy4uL3JlbmRlci9qc3gvdHlwZXMvanN4LW5vZGUnO1xuaW1wb3J0IHR5cGUgeyBTaWduYWwgfSBmcm9tICcuLi8uLi9zdGF0ZS9zaWduYWwnO1xuaW1wb3J0IHR5cGUgeyBDb250ZXh0SWQgfSBmcm9tICcuLi8uLi91c2UvdXNlLWNvbnRleHQnO1xuaW1wb3J0IHsgdHJhY2tTaWduYWwgfSBmcm9tICcuLi8uLi91c2UvdXNlLWNvcmUnO1xuaW1wb3J0IHR5cGUgeyBWYWx1ZU9yUHJvbWlzZSB9IGZyb20gJy4uLy4uL3V0aWwvdHlwZXMnO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gJy4uLy4uL3ZlcnNpb24nO1xuaW1wb3J0IHR5cGUgeyBFZmZlY3QsIEVmZmVjdERhdGEgfSBmcm9tICcuLi9zaWduYWwvdjItc2lnbmFsJztcbmltcG9ydCB0eXBlIHsgU3RyZWFtV3JpdGVyLCBTeW1ib2xUb0NodW5rUmVzb2x2ZXIgfSBmcm9tICcuLi9zc3Ivc3NyLXR5cGVzJztcbmltcG9ydCB0eXBlIHsgU2NoZWR1bGVyIH0gZnJvbSAnLi9zY2hlZHVsZXInO1xuaW1wb3J0IHsgY3JlYXRlU2NoZWR1bGVyIH0gZnJvbSAnLi9zY2hlZHVsZXInO1xuaW1wb3J0IHsgY3JlYXRlU2VyaWFsaXphdGlvbkNvbnRleHQsIHR5cGUgU2VyaWFsaXphdGlvbkNvbnRleHQgfSBmcm9tICcuL3NoYXJlZC1zZXJpYWxpemF0aW9uJztcbmltcG9ydCB0eXBlIHsgQ29udGFpbmVyMiwgSG9zdEVsZW1lbnQgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIF9TaGFyZWRDb250YWluZXIgaW1wbGVtZW50cyBDb250YWluZXIyIHtcbiAgcmVhZG9ubHkgJHZlcnNpb24kOiBzdHJpbmc7XG4gIHJlYWRvbmx5ICRzY2hlZHVsZXIkOiBTY2hlZHVsZXI7XG4gIHJlYWRvbmx5ICRzdG9yZVByb3h5TWFwJDogT2JqVG9Qcm94eU1hcDtcbiAgLy8vIEN1cnJlbnQgbGFuZ3VhZ2UgbG9jYWxlXG4gIHJlYWRvbmx5ICRsb2NhbGUkOiBzdHJpbmc7XG4gIC8vLyBSZXRyaWV2ZSBPYmplY3QgZnJvbSBwYXVzZWQgc2VyaWFsaXplZCBzdGF0ZS5cbiAgcmVhZG9ubHkgJGdldE9iamVjdEJ5SWQkOiAoaWQ6IG51bWJlciB8IHN0cmluZykgPT4gYW55O1xuICAkc2VydmVyRGF0YSQ6IFJlY29yZDxzdHJpbmcsIGFueT47XG4gICRjdXJyZW50VW5pcXVlSWQkID0gMDtcbiAgJGluc3RhbmNlSGFzaCQ6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHNjaGVkdWxlRHJhaW46ICgpID0+IHZvaWQsXG4gICAgam91cm5hbEZsdXNoOiAoKSA9PiB2b2lkLFxuICAgIHNlcnZlckRhdGE6IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gICAgbG9jYWxlOiBzdHJpbmdcbiAgKSB7XG4gICAgdGhpcy4kc2VydmVyRGF0YSQgPSBzZXJ2ZXJEYXRhO1xuICAgIHRoaXMuJGxvY2FsZSQgPSBsb2NhbGU7XG4gICAgdGhpcy4kdmVyc2lvbiQgPSB2ZXJzaW9uO1xuICAgIHRoaXMuJHN0b3JlUHJveHlNYXAkID0gbmV3IFdlYWtNYXAoKTtcbiAgICB0aGlzLiRnZXRPYmplY3RCeUlkJCA9IChpZDogbnVtYmVyIHwgc3RyaW5nKSA9PiB7XG4gICAgICB0aHJvdyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG4gICAgfTtcblxuICAgIHRoaXMuJHNjaGVkdWxlciQgPSBjcmVhdGVTY2hlZHVsZXIodGhpcywgc2NoZWR1bGVEcmFpbiwgam91cm5hbEZsdXNoKTtcbiAgfVxuXG4gIHRyYWNrU2lnbmFsVmFsdWU8VD4oc2lnbmFsOiBTaWduYWwsIHN1YnNjcmliZXI6IEVmZmVjdCwgcHJvcGVydHk6IHN0cmluZywgZGF0YTogRWZmZWN0RGF0YSk6IFQge1xuICAgIHJldHVybiB0cmFja1NpZ25hbCgoKSA9PiBzaWduYWwudmFsdWUsIHN1YnNjcmliZXIsIHByb3BlcnR5LCB0aGlzLCBkYXRhKTtcbiAgfVxuXG4gIHNlcmlhbGl6YXRpb25DdHhGYWN0b3J5KFxuICAgIE5vZGVDb25zdHJ1Y3RvcjogU2VyaWFsaXphdGlvbkNvbnRleHRbJyROb2RlQ29uc3RydWN0b3IkJ10gfCBudWxsLFxuICAgIHN5bWJvbFRvQ2h1bmtSZXNvbHZlcjogU3ltYm9sVG9DaHVua1Jlc29sdmVyLFxuICAgIHdyaXRlcj86IFN0cmVhbVdyaXRlclxuICApOiBTZXJpYWxpemF0aW9uQ29udGV4dCB7XG4gICAgcmV0dXJuIGNyZWF0ZVNlcmlhbGl6YXRpb25Db250ZXh0KFxuICAgICAgTm9kZUNvbnN0cnVjdG9yLFxuICAgICAgc3ltYm9sVG9DaHVua1Jlc29sdmVyLFxuICAgICAgdGhpcy5zZXRIb3N0UHJvcC5iaW5kKHRoaXMpLFxuICAgICAgd3JpdGVyXG4gICAgKTtcbiAgfVxuXG4gIGFic3RyYWN0IGVuc3VyZVByb2plY3Rpb25SZXNvbHZlZChob3N0OiBIb3N0RWxlbWVudCk6IHZvaWQ7XG4gIGFic3RyYWN0IHByb2Nlc3NKc3goaG9zdDogSG9zdEVsZW1lbnQsIGpzeDogSlNYT3V0cHV0KTogVmFsdWVPclByb21pc2U8dm9pZD47XG4gIGFic3RyYWN0IGhhbmRsZUVycm9yKGVycjogYW55LCAkaG9zdCQ6IEhvc3RFbGVtZW50KTogdm9pZDtcbiAgYWJzdHJhY3QgZ2V0UGFyZW50SG9zdChob3N0OiBIb3N0RWxlbWVudCk6IEhvc3RFbGVtZW50IHwgbnVsbDtcbiAgYWJzdHJhY3Qgc2V0Q29udGV4dDxUPihob3N0OiBIb3N0RWxlbWVudCwgY29udGV4dDogQ29udGV4dElkPFQ+LCB2YWx1ZTogVCk6IHZvaWQ7XG4gIGFic3RyYWN0IHJlc29sdmVDb250ZXh0PFQ+KGhvc3Q6IEhvc3RFbGVtZW50LCBjb250ZXh0SWQ6IENvbnRleHRJZDxUPik6IFQgfCB1bmRlZmluZWQ7XG4gIGFic3RyYWN0IHNldEhvc3RQcm9wPFQ+KGhvc3Q6IEhvc3RFbGVtZW50LCBuYW1lOiBzdHJpbmcsIHZhbHVlOiBUKTogdm9pZDtcbiAgYWJzdHJhY3QgZ2V0SG9zdFByb3A8VD4oaG9zdDogSG9zdEVsZW1lbnQsIG5hbWU6IHN0cmluZyk6IFQgfCBudWxsO1xuICBhYnN0cmFjdCAkYXBwZW5kU3R5bGUkKFxuICAgIGNvbnRlbnQ6IHN0cmluZyxcbiAgICBzdHlsZUlkOiBzdHJpbmcsXG4gICAgaG9zdDogSG9zdEVsZW1lbnQsXG4gICAgc2NvcGVkOiBib29sZWFuXG4gICk6IHZvaWQ7XG59XG4iXX0=","/**\n * @file\n *\n *   VNodeData is additional information which allows the `vnode` to recover virtual VNode information\n *   from the HTML.\n */\n/**\n * VNodeDataSeparator contains information about splitting up the VNodeData and attaching it to the\n * HTML.\n */\nexport const VNodeDataSeparator = {\n    REFERENCE_CH: /* ***** */ `~`, // `~` is a reference to the node. Save it.\n    REFERENCE: /* ******** */ 126, // `~` is a reference to the node. Save it.\n    ADVANCE_1_CH: /* ***** */ `!`, // `!` is vNodeData separator skipping 0. (ie next vNode)\n    ADVANCE_1: /* ********* */ 33, // `!` is vNodeData separator skipping 0. (ie next vNode)\n    ADVANCE_2_CH: /* ***** */ `\"`, // `\"` is vNodeData separator skipping 1.\n    ADVANCE_2: /* ********* */ 34, // `\"` is vNodeData separator skipping 1.\n    ADVANCE_4_CH: /* ***** */ `#`, // `#` is vNodeData separator skipping 2.\n    ADVANCE_4: /* ********* */ 35, // `#` is vNodeData separator skipping 2.\n    ADVANCE_8_CH: /* ***** */ `$`, // `$` is vNodeData separator skipping 4.\n    ADVANCE_8: /* ********* */ 36, // `$` is vNodeData separator skipping 4.\n    ADVANCE_16_CH: /* **** */ `%`, // `%` is vNodeData separator skipping 8.\n    ADVANCE_16: /* ******** */ 37, // `%` is vNodeData separator skipping 8.\n    ADVANCE_32_CH: /* **** */ `&`, // `&` is vNodeData separator skipping 16.\n    ADVANCE_32: /* ******** */ 38, // `&` is vNodeData separator skipping 16.\n    ADVANCE_64_CH: /* **** */ `'`, // `'` is vNodeData separator skipping 32.\n    ADVANCE_64: /* ******** */ 39, // `'` is vNodeData separator skipping 32.\n    ADVANCE_128_CH: /* *** */ `(`, // `(` is vNodeData separator skipping 64.\n    ADVANCE_128: /* ******* */ 40, // `(` is vNodeData separator skipping 64.\n    ADVANCE_256_CH: /* *** */ `)`, // `)` is vNodeData separator skipping 128.\n    ADVANCE_256: /* ******* */ 41, // `)` is vNodeData separator skipping 128.\n    ADVANCE_512_CH: /* *** */ `*`, // `*` is vNodeData separator skipping 256.\n    ADVANCE_512: /* ******* */ 42, // `*` is vNodeData separator skipping 256.\n    ADVANCE_1024_CH: /* ** */ `+`, // `+` is vNodeData separator skipping 512.\n    ADVANCE_1024: /* ****** */ 43, // `+` is vNodeData separator skipping 512.\n    ADVANCE_2048_CH: /* *  */ ',', // ',' is vNodeData separator skipping 1024.\n    ADVANCE_2048: /* ****** */ 44, // ',' is vNodeData separator skipping 1024.\n    ADVANCE_4096_CH: /* *  */ `-`, // `-` is vNodeData separator skipping 2048.\n    ADVANCE_4096: /* ****** */ 45, // `-` is vNodeData separator skipping 2048.\n    ADVANCE_8192_CH: /* *  */ `.`, // `.` is vNodeData separator skipping 4096.\n    ADVANCE_8192: /* ****** */ 46, // `.` is vNodeData separator skipping 4096.\n};\n/** VNodeDataChar contains information about the VNodeData used for encoding props */\nexport const VNodeDataChar = {\n    OPEN: /* ************** */ 123, // `{` is the start of the VNodeData.\n    OPEN_CHAR: /* ****** */ '{',\n    CLOSE: /* ************* */ 125, // `}` is the end of the VNodeData.\n    CLOSE_CHAR: /* ***** */ '}',\n    SCOPED_STYLE: /* ******* */ 59, // `;` - `q:sstyle` - Style attribute.\n    SCOPED_STYLE_CHAR: /* */ ';',\n    RENDER_FN: /* ********** */ 60, // `<` - `q:renderFn' - Component QRL render function (body)\n    RENDER_FN_CHAR: /* ** */ '<',\n    ID: /* ***************** */ 61, // `=` - `q:id` - ID of the element.\n    ID_CHAR: /* ********* */ '=',\n    PROPS: /* ************** */ 62, // `>` - `q:props' - Component Props\n    PROPS_CHAR: /* ****** */ '>',\n    SLOT_REF: /* *********** */ 63, // `?` - `q:sref` - Slot reference.\n    SLOT_REF_CHAR: /* *** */ '?',\n    KEY: /* **************** */ 64, // `@` - `q:key` - Element key.\n    KEY_CHAR: /* ******** */ '@',\n    SEQ: /* **************** */ 91, // `[` - `q:seq' - Seq value from `useSequentialScope()`\n    SEQ_CHAR: /* ******** */ '[',\n    DON_T_USE: /* ********** */ 93, // `\\` - SKIP because `\\` is used as escaping\n    DON_T_USE_CHAR: '\\\\',\n    CONTEXT: /* ************ */ 93, // `]` - `q:ctx' - Component context/props\n    CONTEXT_CHAR: /* **** */ ']',\n    SEQ_IDX: /* ************ */ 94, // `^` - `q:seqIdx' - Sequential scope id\n    SEQ_IDX_CHAR: /* **** */ '^',\n    SEPARATOR: /* ********* */ 124, // `|` - Separator char to encode any key/value pairs.\n    SEPARATOR_CHAR: /* ** */ '|',\n    SLOT: /* ************** */ 126, // `~` - `q:slot' - Slot name\n    SLOT_CHAR: /* ******* */ '~',\n};\n//# sourceMappingURL=data:application/json;base64,","// NOTE: we want to move this function to qwikloader, and therefore this function should not have any external dependencies\nimport { throwErrorAndStop } from '../../util/log';\nimport { VNodeDataChar, VNodeDataSeparator } from '../shared/vnode-data-types';\n/**\n * Process the VNodeData script tags and store the VNodeData in the VNodeDataMap.\n *\n * The end result of this function is that each DOM element has the associated `VNodeData` attached\n * to it, to be used later `VNode` materialization. The \"attachment\" is done through the\n * `VNodeDataMap`.\n *\n * Run this function on startup to process the `<script type=\"qwik/vnode\">` tags. The data in the\n * tags needs to be parsed and attached to the DOM elements. (We do this through `VNodeDataMap`)\n * `VNodeDataMap` is then used to lazily materialize the VNodes.\n *\n * Only one invocation of this function is needed per document/browser session.\n *\n * Below is an example of the kinds of constructs which need to be handled when dealing with\n * VNodeData deserialization.\n *\n * ```\n * <html q:container=\"paused\">\n *   <body>\n *     <div q:container=\"paused\">\n *       <script type=\"qwik/vnode\">...</script>\n *     </div>\n *     <div q:container=\"html\">...</div>\n *     before\n *     <!--q:container=ABC-->\n *     ...\n *     <!--/q:container-->\n *     after\n *     <!--q:ignore=FOO-->\n *     ...\n *        <!--q:container-island=BAR-->\n *        <div>some interactive island</div>\n *        <!--/q:container-island-->\n *     ...\n *     <!--/q:ignore-->\n *     <textarea q:container=\"text\">...</textarea>\n *     <script type=\"qwik/vnode\">...</script>\n *   </body>\n * </html>\n * ```\n *\n * Each `qwik/vnode` script assumes that the elements are numbered in depth first order. For this\n * reason, whenever the `processVNodeData` comes across a `q:container` it must ignore its\n * children.\n *\n * IMPLEMENTATION:\n *\n * - Stack to keep track of the current `q:container` being processed.\n * - Attach all `qwik/vnode` scripts (not the data contain within them) to the `q:container` element.\n * - Walk the tree and process each `q:container` element.\n */\nexport function processVNodeData(document) {\n    const Q_CONTAINER = 'q:container';\n    const Q_CONTAINER_END = '/' + Q_CONTAINER;\n    const Q_PROPS_SEPARATOR = ':';\n    const Q_SHADOW_ROOT = 'q:shadowroot';\n    const Q_IGNORE = 'q:ignore';\n    const Q_IGNORE_END = '/' + Q_IGNORE;\n    const Q_CONTAINER_ISLAND = 'q:container-island';\n    const Q_CONTAINER_ISLAND_END = '/' + Q_CONTAINER_ISLAND;\n    const qDocument = document;\n    const vNodeDataMap = qDocument.qVNodeData || (qDocument.qVNodeData = new WeakMap());\n    const prototype = document.body;\n    const getter = (prototype, name) => {\n        let getter;\n        while (prototype && !(getter = Object.getOwnPropertyDescriptor(prototype, name)?.get)) {\n            prototype = Object.getPrototypeOf(prototype);\n        }\n        return (getter ||\n            function () {\n                return this[name];\n            });\n    };\n    const getAttribute = prototype.getAttribute;\n    const hasAttribute = prototype.hasAttribute;\n    const getNodeType = getter(prototype, 'nodeType');\n    // Process all of the `qwik/vnode` script tags by attaching them to the corresponding containers.\n    const attachVnodeDataAndRefs = (element) => {\n        Array.from(element.querySelectorAll('script[type=\"qwik/vnode\"]')).forEach((script) => {\n            script.setAttribute('type', 'x-qwik/vnode');\n            const qContainerElement = script.closest('[q\\\\:container]');\n            qContainerElement.qVnodeData = script.textContent;\n            qContainerElement.qVNodeRefs = new Map();\n        });\n        element.querySelectorAll('[q\\\\:shadowroot]').forEach((parent) => {\n            const shadowRoot = parent.shadowRoot;\n            shadowRoot && attachVnodeDataAndRefs(shadowRoot);\n        });\n    };\n    attachVnodeDataAndRefs(document);\n    ///////////////////////////////\n    // Functions to consume the tree.\n    ///////////////////////////////\n    let NodeType;\n    (function (NodeType) {\n        NodeType[NodeType[\"CONTAINER_MASK\"] = 1] = \"CONTAINER_MASK\";\n        NodeType[NodeType[\"ELEMENT\"] = 2] = \"ELEMENT\";\n        NodeType[NodeType[\"ELEMENT_CONTAINER\"] = 3] = \"ELEMENT_CONTAINER\";\n        NodeType[NodeType[\"ELEMENT_SHADOW_ROOT\"] = 6] = \"ELEMENT_SHADOW_ROOT\";\n        NodeType[NodeType[\"COMMENT_SKIP_START\"] = 5] = \"COMMENT_SKIP_START\";\n        NodeType[NodeType[\"COMMENT_SKIP_END\"] = 8] = \"COMMENT_SKIP_END\";\n        NodeType[NodeType[\"COMMENT_IGNORE_START\"] = 16] = \"COMMENT_IGNORE_START\";\n        NodeType[NodeType[\"COMMENT_IGNORE_END\"] = 32] = \"COMMENT_IGNORE_END\";\n        NodeType[NodeType[\"COMMENT_ISLAND_START\"] = 65] = \"COMMENT_ISLAND_START\";\n        NodeType[NodeType[\"COMMENT_ISLAND_END\"] = 128] = \"COMMENT_ISLAND_END\";\n        NodeType[NodeType[\"OTHER\"] = 0] = \"OTHER\";\n    })(NodeType || (NodeType = {}));\n    /**\n     * Looks up which type of node this is in a monomorphic way which should be faster.\n     *\n     * See: https://mhevery.github.io/perf-tests/DOM-megamorphic.html\n     */\n    const getFastNodeType = (node) => {\n        const nodeType = getNodeType.call(node);\n        if (nodeType === 1 /* Node.ELEMENT_NODE */) {\n            const qContainer = getAttribute.call(node, Q_CONTAINER);\n            if (qContainer === null) {\n                if (hasAttribute.call(node, Q_SHADOW_ROOT)) {\n                    return NodeType.ELEMENT_SHADOW_ROOT;\n                }\n                const isQElement = hasAttribute.call(node, Q_PROPS_SEPARATOR);\n                return isQElement ? NodeType.ELEMENT : NodeType.OTHER;\n            }\n            else {\n                return NodeType.ELEMENT_CONTAINER;\n            }\n        }\n        else if (nodeType === 8 /* Node.COMMENT_NODE */) {\n            const nodeValue = node.nodeValue || ''; // nodeValue is monomorphic so it does not need fast path\n            if (nodeValue.startsWith(Q_CONTAINER_ISLAND)) {\n                return NodeType.COMMENT_ISLAND_START;\n            }\n            else if (nodeValue.startsWith(Q_IGNORE)) {\n                return NodeType.COMMENT_IGNORE_START;\n            }\n            else if (nodeValue.startsWith(Q_CONTAINER)) {\n                return NodeType.COMMENT_SKIP_START;\n            }\n            else if (nodeValue.startsWith(Q_CONTAINER_ISLAND_END)) {\n                return NodeType.COMMENT_ISLAND_END;\n            }\n            else if (nodeValue.startsWith(Q_IGNORE_END)) {\n                return NodeType.COMMENT_IGNORE_END;\n            }\n            else if (nodeValue.startsWith(Q_CONTAINER_END)) {\n                return NodeType.COMMENT_SKIP_END;\n            }\n        }\n        return NodeType.OTHER;\n    };\n    const isSeparator = (ch) => \n    /* `!` */ VNodeDataSeparator.ADVANCE_1 <= ch && ch <= VNodeDataSeparator.ADVANCE_8192; /* `.` */\n    /**\n     * Given the `vData` string, `start` index, and `end` index, find the end of the VNodeData\n     * section.\n     */\n    const findVDataSectionEnd = (vData, start, end) => {\n        let depth = 0;\n        while (true) {\n            // look for the end of VNodeData\n            if (start < end) {\n                const ch = vData.charCodeAt(start);\n                if (depth === 0 && isSeparator(ch)) {\n                    break;\n                }\n                else {\n                    if (ch === VNodeDataChar.OPEN) {\n                        depth++;\n                    }\n                    else if (ch === VNodeDataChar.CLOSE) {\n                        depth--;\n                    }\n                    start++;\n                }\n            }\n            else {\n                break;\n            }\n        }\n        return start;\n    };\n    const nextSibling = (node) => {\n        // eslint-disable-next-line no-empty\n        while (node && (node = node.nextSibling) && getFastNodeType(node) === NodeType.OTHER) { }\n        return node;\n    };\n    const firstChild = (node) => {\n        // eslint-disable-next-line no-empty\n        while (node && (node = node.firstChild) && getFastNodeType(node) === NodeType.OTHER) { }\n        return node;\n    };\n    /**\n     * Process the container\n     *\n     * @param walker TreeWalker\n     * @param containerNode The root of container element\n     * @param exitNode The node which represents the last node and we should exit.\n     * @param qVNodeRefs Place to store the VNodeRefs\n     */\n    const walkContainer = (walker, containerNode, node, exitNode, vData, qVNodeRefs, prefix) => {\n        const vData_length = vData.length;\n        /// Stores the current element index as the TreeWalker traverses the DOM.\n        let elementIdx = 0;\n        /// Stores the current VNode index as derived from the VNodeData script tag.\n        let vNodeElementIndex = -1;\n        let vData_start = 0;\n        let vData_end = 0;\n        let ch = 0;\n        let needsToStoreRef = -1;\n        let nextNode = null;\n        /** Computes number of elements which need to be skipped to get to the next VNodeData section. */\n        const howManyElementsToSkip = () => {\n            let elementsToSkip = 0;\n            while (isSeparator((ch = vData.charCodeAt(vData_start)))) {\n                // Keep consuming the separators and incrementing the vNodeIndex\n                // console.log('ADVANCE', vNodeElementIndex, ch, ch - 33);\n                elementsToSkip += 1 << (ch - VNodeDataSeparator.ADVANCE_1);\n                vData_start++;\n                if (vData_start >= vData_length) {\n                    // we reached the end of the vNodeData stop.\n                    break;\n                }\n            }\n            return elementsToSkip;\n        };\n        do {\n            if (node === exitNode) {\n                return;\n            }\n            nextNode = null;\n            const nodeType = node == containerNode ? NodeType.ELEMENT : getFastNodeType(node);\n            if (nodeType === NodeType.ELEMENT_CONTAINER) {\n                // If we are in a container, we need to skip the children.\n                const container = node;\n                let cursor = node;\n                while (cursor && !(nextNode = nextSibling(cursor))) {\n                    cursor = cursor.parentNode;\n                }\n                // console.log('EXIT', nextNode?.outerHTML);\n                walkContainer(walker, container, node, nextNode, container.qVnodeData || '', container.qVNodeRefs, prefix + '  ');\n            }\n            else if (nodeType === NodeType.COMMENT_IGNORE_START) {\n                let islandNode = node;\n                do {\n                    islandNode = walker.nextNode();\n                    if (!islandNode) {\n                        return throwErrorAndStop(`Island inside <!--${node?.nodeValue}--> not found!`);\n                    }\n                } while (getFastNodeType(islandNode) !== NodeType.COMMENT_ISLAND_START);\n                nextNode = null;\n            }\n            else if (nodeType === NodeType.COMMENT_ISLAND_END) {\n                nextNode = node;\n                do {\n                    nextNode = walker.nextNode();\n                    if (!nextNode) {\n                        return throwErrorAndStop(`Ignore block not closed!`);\n                    }\n                } while (getFastNodeType(nextNode) !== NodeType.COMMENT_IGNORE_END);\n                nextNode = null;\n            }\n            else if (nodeType === NodeType.COMMENT_SKIP_START) {\n                // If we are in a container, we need to skip the children.\n                nextNode = node;\n                do {\n                    nextNode = nextSibling(nextNode);\n                    if (!nextNode) {\n                        return throwErrorAndStop(`<!--${node?.nodeValue}--> not closed!`);\n                    }\n                } while (getFastNodeType(nextNode) !== NodeType.COMMENT_SKIP_END);\n                // console.log('EXIT', nextNode?.outerHTML);\n                walkContainer(walker, node, node, nextNode, '', null, prefix + '  ');\n            }\n            else if (nodeType === NodeType.ELEMENT_SHADOW_ROOT) {\n                // If we are in a shadow root, we need to get the shadow root element.\n                nextNode = nextSibling(node);\n                const shadowRootContainer = node;\n                const shadowRoot = shadowRootContainer?.shadowRoot;\n                if (shadowRoot) {\n                    walkContainer(\n                    // we need to create a new walker for the shadow root\n                    document.createTreeWalker(shadowRoot, 0x1 /* NodeFilter.SHOW_ELEMENT  */ | 0x80 /*  NodeFilter.SHOW_COMMENT */), null, firstChild(shadowRoot), null, '', null, prefix + '  ');\n                }\n            }\n            if ((nodeType & NodeType.ELEMENT) === NodeType.ELEMENT) {\n                if (vNodeElementIndex < elementIdx) {\n                    // VNodeData needs to catch up with the elementIdx\n                    if (vNodeElementIndex === -1) {\n                        vNodeElementIndex = 0;\n                    }\n                    vData_start = vData_end;\n                    if (vData_start < vData_length) {\n                        vNodeElementIndex += howManyElementsToSkip();\n                        const shouldStoreRef = ch === VNodeDataSeparator.REFERENCE;\n                        if (shouldStoreRef) {\n                            // if we need to store the ref handle it here.\n                            needsToStoreRef = vNodeElementIndex;\n                            vData_start++;\n                            if (vData_start < vData_length) {\n                                ch = vData.charCodeAt(vData_end);\n                            }\n                            else {\n                                // assume separator on end.\n                                ch = VNodeDataSeparator.ADVANCE_1;\n                            }\n                        }\n                        vData_end = findVDataSectionEnd(vData, vData_start, vData_length);\n                    }\n                    else {\n                        vNodeElementIndex = Number.MAX_SAFE_INTEGER;\n                    }\n                }\n                // console.log(\n                //   prefix,\n                //   'ELEMENT',\n                //   nodeType,\n                //   elementIdx,\n                //   vNodeElementIndex,\n                //   (node as any).outerHTML,\n                //   elementIdx === vNodeElementIndex ? vData.substring(vData_start, vData_end) : ''\n                // );\n                if (elementIdx === vNodeElementIndex) {\n                    if (needsToStoreRef === elementIdx) {\n                        qVNodeRefs.set(elementIdx, node);\n                    }\n                    const instructions = vData.substring(vData_start, vData_end);\n                    vNodeDataMap.set(node, instructions);\n                }\n                elementIdx++;\n            }\n        } while ((node = nextNode || walker.nextNode()));\n    };\n    // Walk the tree and process each `q:container` element.\n    const walker = document.createTreeWalker(document, 0x1 /* NodeFilter.SHOW_ELEMENT  */ | 0x80 /*  NodeFilter.SHOW_COMMENT */);\n    walkContainer(walker, null, walker.firstChild(), null, '', null, '');\n}\n//# sourceMappingURL=data:application/json;base64,","/** @file Public types for the client deserialization */\n/**\n * Flags for VNode.\n *\n * # Materialize vs Inflation\n *\n * - Materialized: The node has all of its children. Specifically `firstChild`/`lastChild` are NOT\n *   `undefined`. Materialization creates lazy instantiation of the children. NOTE: Only\n *   ElementVNode need to be materialized.\n * - Inflation:\n *\n *   - If Text: It means that it is safe to write to the node. When Text nodes are first Deserialized\n *       multiple text nodes can share the same DOM node. On write the sibling text nodes need to be\n *       converted into separate text nodes.\n *   - If Element: It means that the element tag attributes have not yet been read from the DOM.\n *\n * Inflation and materialization are not the same, they are two independent things.\n *\n * @internal\n */\nexport var VNodeFlags;\n(function (VNodeFlags) {\n    VNodeFlags[VNodeFlags[\"Element\"] = 1] = \"Element\";\n    VNodeFlags[VNodeFlags[\"Virtual\"] = 2] = \"Virtual\";\n    VNodeFlags[VNodeFlags[\"ELEMENT_OR_VIRTUAL_MASK\"] = 3] = \"ELEMENT_OR_VIRTUAL_MASK\";\n    VNodeFlags[VNodeFlags[\"ELEMENT_OR_TEXT_MASK\"] = 5] = \"ELEMENT_OR_TEXT_MASK\";\n    VNodeFlags[VNodeFlags[\"TYPE_MASK\"] = 7] = \"TYPE_MASK\";\n    VNodeFlags[VNodeFlags[\"INFLATED_TYPE_MASK\"] = 15] = \"INFLATED_TYPE_MASK\";\n    VNodeFlags[VNodeFlags[\"Text\"] = 4] = \"Text\";\n    /// Extra flag which marks if a node needs to be inflated.\n    VNodeFlags[VNodeFlags[\"Inflated\"] = 8] = \"Inflated\";\n    /// Marks if the `ensureProjectionResolved` has been called on the node.\n    VNodeFlags[VNodeFlags[\"Resolved\"] = 16] = \"Resolved\";\n    /// Marks if the vnode is deleted.\n    VNodeFlags[VNodeFlags[\"Deleted\"] = 32] = \"Deleted\";\n    /// Flags for Namespace\n    VNodeFlags[VNodeFlags[\"NAMESPACE_MASK\"] = 192] = \"NAMESPACE_MASK\";\n    VNodeFlags[VNodeFlags[\"NEGATED_NAMESPACE_MASK\"] = -193] = \"NEGATED_NAMESPACE_MASK\";\n    VNodeFlags[VNodeFlags[\"NS_html\"] = 0] = \"NS_html\";\n    VNodeFlags[VNodeFlags[\"NS_svg\"] = 64] = \"NS_svg\";\n    VNodeFlags[VNodeFlags[\"NS_math\"] = 128] = \"NS_math\";\n})(VNodeFlags || (VNodeFlags = {}));\nexport var VNodeFlagsIndex;\n(function (VNodeFlagsIndex) {\n    VNodeFlagsIndex[VNodeFlagsIndex[\"mask\"] = -256] = \"mask\";\n    VNodeFlagsIndex[VNodeFlagsIndex[\"negated_mask\"] = 255] = \"negated_mask\";\n    VNodeFlagsIndex[VNodeFlagsIndex[\"shift\"] = 8] = \"shift\";\n})(VNodeFlagsIndex || (VNodeFlagsIndex = {}));\nexport var VNodeProps;\n(function (VNodeProps) {\n    VNodeProps[VNodeProps[\"flags\"] = 0] = \"flags\";\n    VNodeProps[VNodeProps[\"parent\"] = 1] = \"parent\";\n    VNodeProps[VNodeProps[\"previousSibling\"] = 2] = \"previousSibling\";\n    VNodeProps[VNodeProps[\"nextSibling\"] = 3] = \"nextSibling\";\n})(VNodeProps || (VNodeProps = {}));\nexport var ElementVNodeProps;\n(function (ElementVNodeProps) {\n    ElementVNodeProps[ElementVNodeProps[\"firstChild\"] = 4] = \"firstChild\";\n    ElementVNodeProps[ElementVNodeProps[\"lastChild\"] = 5] = \"lastChild\";\n    ElementVNodeProps[ElementVNodeProps[\"element\"] = 6] = \"element\";\n    ElementVNodeProps[ElementVNodeProps[\"elementName\"] = 7] = \"elementName\";\n    ElementVNodeProps[ElementVNodeProps[\"PROPS_OFFSET\"] = 8] = \"PROPS_OFFSET\";\n})(ElementVNodeProps || (ElementVNodeProps = {}));\nexport var TextVNodeProps;\n(function (TextVNodeProps) {\n    TextVNodeProps[TextVNodeProps[\"node\"] = 4] = \"node\";\n    TextVNodeProps[TextVNodeProps[\"text\"] = 5] = \"text\";\n})(TextVNodeProps || (TextVNodeProps = {}));\nexport var VirtualVNodeProps;\n(function (VirtualVNodeProps) {\n    VirtualVNodeProps[VirtualVNodeProps[\"firstChild\"] = 4] = \"firstChild\";\n    VirtualVNodeProps[VirtualVNodeProps[\"lastChild\"] = 5] = \"lastChild\";\n    VirtualVNodeProps[VirtualVNodeProps[\"PROPS_OFFSET\"] = 6] = \"PROPS_OFFSET\";\n})(VirtualVNodeProps || (VirtualVNodeProps = {}));\n//# sourceMappingURL=data:application/json;base64,","/**\n * Think of `-` as an escape character which makes the next character uppercase. `--` is just `-`.\n *\n * Rules for JSX property event names starting with `on`:\n *\n * - Are case insensitive: `onClick$` is same `onclick$`\n * - A `--` is `-`: `dbl--click` => `dbl-click`\n * - Become case sensitive if prefixed by `-`: `-Click` is `Click`\n * - A `-` (not at the beginning) makes next character uppercase: `dbl-click` => `dblClick`\n */\nexport const isJsxPropertyAnEventName = (name) => {\n    return ((name.startsWith('on') || name.startsWith('window:on') || name.startsWith('document:on')) &&\n        name.endsWith('$'));\n};\nexport const isHtmlAttributeAnEventName = (name) => {\n    return name.startsWith('on:') || name.startsWith('on-window:') || name.startsWith('on-document:');\n};\nexport const getEventNameFromJsxProp = (name) => {\n    if (name.endsWith('$')) {\n        let idx = -1;\n        if (name.startsWith('on')) {\n            idx = 2;\n        }\n        else if (name.startsWith('window:on')) {\n            idx = 9;\n        }\n        else if (name.startsWith('document:on')) {\n            idx = 11;\n        }\n        if (idx != -1) {\n            const isCaseSensitive = isDashAt(name, idx) && !isDashAt(name, idx + 1);\n            if (isCaseSensitive) {\n                idx++;\n            }\n            let lastIdx = idx;\n            let eventName = '';\n            while (true) {\n                idx = name.indexOf('-', lastIdx);\n                const chunk = name.substring(lastIdx, idx === -1 ? name.length - 1 /* don't include `$` */ : idx);\n                eventName += isCaseSensitive ? chunk : chunk.toLowerCase();\n                if (idx == -1) {\n                    return eventName;\n                }\n                if (isDashAt(name, idx + 1)) {\n                    eventName += '-';\n                    idx++;\n                }\n                else {\n                    eventName += name.charAt(idx + 1).toUpperCase();\n                    idx++;\n                }\n                lastIdx = idx + 1;\n            }\n        }\n    }\n    return null;\n};\nexport const getEventNameScopeFromJsxProp = (name) => {\n    const index = name.indexOf(':');\n    return index !== -1 ? name.substring(0, index) : '';\n};\nexport const getEventNameFromHtmlAttr = (name) => {\n    let idx = -1;\n    if (name.startsWith('on:')) {\n        idx = 3; // 'on:'.length\n    }\n    else if (name.startsWith('on-window:')) {\n        idx = 10; // 'on-window:'.length\n    }\n    else if (name.startsWith('on-document:')) {\n        idx = 12; // 'on-document:'.length\n    }\n    if (idx != -1) {\n        let lastIdx = idx;\n        let eventName = '';\n        while (true) {\n            idx = name.indexOf('-', lastIdx);\n            const chunk = name.substring(lastIdx, idx === -1 ? name.length : idx);\n            eventName += chunk;\n            if (idx == -1) {\n                return eventName;\n            }\n            eventName += name.charAt(idx + 1).toUpperCase();\n            idx++;\n            lastIdx = idx + 1;\n        }\n    }\n    return null;\n};\nconst isDashAt = (name, idx) => name.charCodeAt(idx) === 45; /* - */\nexport const convertEventNameFromHtmlAttrToJsxProp = (name) => {\n    let prefix = null;\n    if (name.startsWith('on:')) {\n        prefix = 'on';\n    }\n    else if (name.startsWith('on-window:')) {\n        prefix = 'window:on';\n    }\n    else if (name.startsWith('on-document:')) {\n        prefix = 'document:on';\n    }\n    if (prefix !== null) {\n        const eventName = getEventNameFromHtmlAttr(name);\n        let kebabCase = fromCamelToKebabCase(eventName);\n        if (isDashAt(kebabCase, 0) && !isDashAt(kebabCase, 1)) {\n            // special case for events which start with a `-`\n            // if we would just append it would be interpreted as a case sensitive event\n            kebabCase = '-' + kebabCase.charAt(1).toUpperCase() + kebabCase.substring(2);\n        }\n        return prefix + kebabCase + '$';\n    }\n    return null;\n};\nexport const convertEventNameFromJsxPropToHtmlAttr = (name) => {\n    if (name.endsWith('$')) {\n        let prefix = null;\n        // let idx = -1;\n        if (name.startsWith('on')) {\n            prefix = 'on:';\n            // idx = 2; // 'on'.length\n        }\n        else if (name.startsWith('window:on')) {\n            prefix = 'on-window:';\n            // idx = 9; // 'window:on'.length\n        }\n        else if (name.startsWith('document:on')) {\n            prefix = 'on-document:';\n            // idx = 11; // 'document:on'.length\n        }\n        if (prefix !== null) {\n            const eventName = getEventNameFromJsxProp(name);\n            return prefix + fromCamelToKebabCase(eventName);\n        }\n    }\n    return null;\n};\nexport const fromCamelToKebabCase = (text) => {\n    return text.replace(/([A-Z-])/g, '-$1').toLowerCase();\n};\nexport function isPreventDefault(key) {\n    return key.startsWith('preventdefault:');\n}\n//# sourceMappingURL=data:application/json;base64,","import { HTML_NS, MATH_NS, Q_PROPS_SEPARATOR, SVG_NS } from '../../util/markers';\nimport { getDomContainerFromQContainerElement } from './dom-container';\nimport { ElementVNodeProps, TextVNodeProps, VNodeFlags, VNodeProps, } from './types';\nimport { ensureElementVNode, shouldIgnoreChildren, vnode_getDOMChildNodes, vnode_getDomParentVNode, vnode_getElementName, vnode_getFirstChild, vnode_getNextSibling, vnode_getParent, vnode_isElementVNode, vnode_isTextVNode, } from './vnode';\nexport const isForeignObjectElement = (elementName) => elementName.toLowerCase() === 'foreignobject';\nexport const isSvgElement = (elementName) => elementName === 'svg' || isForeignObjectElement(elementName);\nexport const isMathElement = (elementName) => elementName === 'math';\nexport const vnode_isDefaultNamespace = (vnode) => {\n    const flags = vnode[VNodeProps.flags];\n    return (flags & VNodeFlags.NAMESPACE_MASK) === 0;\n};\nexport const vnode_getElementNamespaceFlags = (elementName) => {\n    if (isSvgElement(elementName)) {\n        return VNodeFlags.NS_svg;\n    }\n    else if (isMathElement(elementName)) {\n        return VNodeFlags.NS_math;\n    }\n    else {\n        return VNodeFlags.NS_html;\n    }\n};\nexport function vnode_getDomChildrenWithCorrectNamespacesToInsert(journal, domParentVNode, newChild) {\n    const { elementNamespace, elementNamespaceFlag } = getNewElementNamespaceData(domParentVNode, newChild);\n    let domChildren = [];\n    if (elementNamespace === HTML_NS) {\n        // parent is in the default namespace, so just get the dom children. This is the fast path.\n        domChildren = vnode_getDOMChildNodes(journal, newChild);\n    }\n    else {\n        // parent is in a different namespace, so we need to clone the children with the correct namespace.\n        // The namespace cannot be changed on nodes, so we need to clone these nodes\n        const children = vnode_getDOMChildNodes(journal, newChild, true);\n        for (let i = 0; i < children.length; i++) {\n            const childVNode = children[i];\n            if (vnode_isTextVNode(childVNode)) {\n                // text nodes are always in the default namespace\n                domChildren.push(childVNode[TextVNodeProps.node]);\n                continue;\n            }\n            if ((childVNode[VNodeProps.flags] & VNodeFlags.NAMESPACE_MASK) ===\n                (domParentVNode[VNodeProps.flags] & VNodeFlags.NAMESPACE_MASK)) {\n                // if the child and parent have the same namespace, we don't need to clone the element\n                domChildren.push(childVNode[ElementVNodeProps.element]);\n                continue;\n            }\n            // clone the element with the correct namespace\n            const newChildElement = vnode_cloneElementWithNamespace(childVNode, domParentVNode, elementNamespace, elementNamespaceFlag);\n            if (newChildElement) {\n                domChildren.push(newChildElement);\n            }\n        }\n    }\n    return domChildren;\n}\n/** This function clones an element with a different namespace, but without the children. */\nfunction cloneElementWithNamespace(element, elementName, namespace) {\n    const newElement = element.ownerDocument.createElementNS(namespace, elementName);\n    const attributes = element.attributes;\n    for (const attribute of attributes) {\n        const name = attribute.name;\n        const value = attribute.value;\n        if (!name || name === Q_PROPS_SEPARATOR) {\n            continue;\n        }\n        newElement.setAttribute(name, value);\n    }\n    return newElement;\n}\n/**\n * This function clones an ElementVNode with a different namespace, including the children. This\n * traverse the tree using depth-first search and clones the elements using\n * `cloneElementWithNamespace`.\n */\nfunction vnode_cloneElementWithNamespace(elementVNode, parentVNode, namespace, namespaceFlag) {\n    ensureElementVNode(elementVNode);\n    let vCursor = elementVNode;\n    let vParent = null;\n    let rootElement = null;\n    let parentElement = null;\n    while (vCursor) {\n        let childElement = null;\n        let newChildElement = null;\n        if (vnode_isElementVNode(vCursor)) {\n            // Clone the element\n            childElement = vCursor[ElementVNodeProps.element];\n            const childElementTag = vnode_getElementName(vCursor);\n            // We need to check if the parent is a foreignObject element\n            // and get a new namespace data.\n            const vCursorParent = vnode_getParent(vCursor);\n            // For the first vNode parentNode is not parent from vNode tree, but parent from DOM tree\n            // this is because vNode is not moved yet.\n            // rootElement is null only for the first vNode\n            const vCursorDomParent = rootElement == null ? parentVNode : vCursorParent && vnode_getDomParentVNode(vCursorParent);\n            if (vCursorDomParent) {\n                const namespaceData = getNewElementNamespaceData(vCursorDomParent, vnode_getElementName(vCursor));\n                namespace = namespaceData.elementNamespace;\n                namespaceFlag = namespaceData.elementNamespaceFlag;\n            }\n            newChildElement = cloneElementWithNamespace(childElement, childElementTag, namespace);\n            childElement.remove();\n            if (rootElement == null) {\n                rootElement = newChildElement;\n            }\n            if (parentElement) {\n                parentElement.appendChild(newChildElement);\n            }\n            // Descend into children\n            // We need first get the first child, if any\n            const vFirstChild = vnode_getFirstChild(vCursor);\n            // Then we can overwrite the cursor with newly created element.\n            // This is because we need to materialize the children before we assign new element\n            vCursor[ElementVNodeProps.element] = newChildElement;\n            // Set correct namespace flag\n            vCursor[VNodeProps.flags] &= VNodeFlags.NEGATED_NAMESPACE_MASK;\n            vCursor[VNodeProps.flags] |= namespaceFlag;\n            if (vFirstChild) {\n                vCursor = vFirstChild;\n                parentElement = newChildElement;\n                continue;\n            }\n            else if (shouldIgnoreChildren(childElement)) {\n                // If we should ignore children of the element this means that the element is a container\n                // We need to get the first child of the container\n                const container = getDomContainerFromQContainerElement(childElement);\n                if (container) {\n                    const innerContainerFirstVNode = vnode_getFirstChild(container.rootVNode);\n                    if (innerContainerFirstVNode) {\n                        vCursor = innerContainerFirstVNode;\n                        parentElement = newChildElement;\n                        continue;\n                    }\n                }\n            }\n        }\n        if (vCursor === elementVNode) {\n            // we are where we started, this means that vNode has no children, so we are done.\n            return rootElement;\n        }\n        // Out of children, go to next sibling\n        const vNextSibling = vnode_getNextSibling(vCursor);\n        if (vNextSibling) {\n            vCursor = vNextSibling;\n            continue;\n        }\n        // Out of siblings, go to parent\n        vParent = vnode_getParent(vCursor);\n        while (vParent) {\n            if (vParent === elementVNode) {\n                // We are back where we started, we are done.\n                return rootElement;\n            }\n            const vNextParentSibling = vnode_getNextSibling(vParent);\n            if (vNextParentSibling) {\n                vCursor = vNextParentSibling;\n                return rootElement;\n            }\n            vParent = vnode_getParent(vParent);\n        }\n        if (vParent == null) {\n            // We are done.\n            return rootElement;\n        }\n    }\n    return rootElement;\n}\nfunction isSvg(tagOrVNode) {\n    return typeof tagOrVNode === 'string'\n        ? isSvgElement(tagOrVNode)\n        : (tagOrVNode[VNodeProps.flags] & VNodeFlags.NS_svg) !== 0;\n}\nfunction isMath(tagOrVNode) {\n    return typeof tagOrVNode === 'string'\n        ? isMathElement(tagOrVNode)\n        : (tagOrVNode[VNodeProps.flags] & VNodeFlags.NS_math) !== 0;\n}\nexport function getNewElementNamespaceData(domParentVNode, tagOrVNode) {\n    const parentIsDefaultNamespace = domParentVNode\n        ? !!vnode_getElementName(domParentVNode) && vnode_isDefaultNamespace(domParentVNode)\n        : true;\n    const parentIsForeignObject = !parentIsDefaultNamespace\n        ? isForeignObjectElement(vnode_getElementName(domParentVNode))\n        : false;\n    let elementNamespace = HTML_NS;\n    let elementNamespaceFlag = VNodeFlags.NS_html;\n    const isElementVNodeOrString = typeof tagOrVNode === 'string' || vnode_isElementVNode(tagOrVNode);\n    if (isElementVNodeOrString && isSvg(tagOrVNode)) {\n        elementNamespace = SVG_NS;\n        elementNamespaceFlag = VNodeFlags.NS_svg;\n    }\n    else if (isElementVNodeOrString && isMath(tagOrVNode)) {\n        elementNamespace = MATH_NS;\n        elementNamespaceFlag = VNodeFlags.NS_math;\n    }\n    else if (domParentVNode && !parentIsForeignObject && !parentIsDefaultNamespace) {\n        const isParentSvg = (domParentVNode[VNodeProps.flags] & VNodeFlags.NS_svg) !== 0;\n        const isParentMath = (domParentVNode[VNodeProps.flags] & VNodeFlags.NS_math) !== 0;\n        elementNamespace = isParentSvg ? SVG_NS : isParentMath ? MATH_NS : HTML_NS;\n        elementNamespaceFlag = domParentVNode[VNodeProps.flags] & VNodeFlags.NAMESPACE_MASK;\n    }\n    return {\n        elementNamespace,\n        elementNamespaceFlag,\n    };\n}\n//# sourceMappingURL=data:application/json;base64,","import { useInvokeContext } from './use-core';\nimport {} from '../render/jsx/types/jsx-qwik-events';\nimport { USE_ON_LOCAL, USE_ON_LOCAL_FLAGS, USE_ON_LOCAL_SEQ_IDX } from '../util/markers';\n// <docs markdown=\"../readme.md#useOn\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOn instead)\n/**\n * Register a listener on the current component's host element.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX. Otherwise, it's adding a JSX listener in the `<div>` is a better idea.\n *\n * @public\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n */\n// </docs>\nexport const useOn = (event, eventQrl) => {\n    _useOn(createEventName(event, undefined), eventQrl);\n};\n// <docs markdown=\"../readme.md#useOnDocument\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOnDocument instead)\n/**\n * Register a listener on `document`.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX.\n *\n * @public\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * ```tsx\n * function useScroll() {\n *   useOnDocument(\n *     'scroll',\n *     $((event) => {\n *       console.log('body scrolled', event);\n *     })\n *   );\n * }\n *\n * const Cmp = component$(() => {\n *   useScroll();\n *   return <div>Profit!</div>;\n * });\n * ```\n */\n// </docs>\nexport const useOnDocument = (event, eventQrl) => {\n    _useOn(createEventName(event, 'document'), eventQrl);\n};\n// <docs markdown=\"../readme.md#useOnWindow\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOnWindow instead)\n/**\n * Register a listener on `window`.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX.\n *\n * @public\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * ```tsx\n * function useAnalytics() {\n *   useOnWindow(\n *     'popstate',\n *     $((event) => {\n *       console.log('navigation happened', event);\n *       // report to analytics\n *     })\n *   );\n * }\n *\n * const Cmp = component$(() => {\n *   useAnalytics();\n *   return <div>Profit!</div>;\n * });\n * ```\n */\n// </docs>\nexport const useOnWindow = (event, eventQrl) => {\n    _useOn(createEventName(event, 'window'), eventQrl);\n};\nconst createEventName = (event, eventType) => {\n    const prefix = eventType !== undefined ? eventType + ':' : '';\n    const map = (name) => prefix + 'on' + name.charAt(0).toUpperCase() + name.substring(1) + '$';\n    const res = Array.isArray(event) ? event.map(map) : map(event);\n    return res;\n};\nconst _useOn = (eventName, eventQrl) => {\n    const { isAdded, addEvent } = useOnEventsSequentialScope();\n    if (isAdded) {\n        return;\n    }\n    if (eventQrl) {\n        Array.isArray(eventName)\n            ? eventName.forEach((event) => addEvent(event, eventQrl))\n            : addEvent(eventName, eventQrl);\n    }\n};\n/**\n * This hook is like the `useSequentialScope` but it is specifically for `useOn`. This is needed\n * because we want to execute the `useOn` hooks only once and store the event listeners on the host\n * element. From Qwik V2 the component is rerunning when the promise is thrown, so we need to make\n * sure that the event listeners are not added multiple times.\n *\n * - The event listeners are stored in the `USE_ON_LOCAL` property.\n * - The `USE_ON_LOCAL_SEQ_IDX` is used to keep track of the index of the hook that calls this.\n * - The `USE_ON_LOCAL_FLAGS` is used to keep track of whether the event listener has been added or\n *   not.\n */\nconst useOnEventsSequentialScope = () => {\n    const iCtx = useInvokeContext();\n    const hostElement = iCtx.$hostElement$;\n    const host = hostElement;\n    let onMap = iCtx.$container2$.getHostProp(host, USE_ON_LOCAL);\n    if (onMap === null) {\n        onMap = {};\n        iCtx.$container2$.setHostProp(host, USE_ON_LOCAL, onMap);\n    }\n    let seqIdx = iCtx.$container2$.getHostProp(host, USE_ON_LOCAL_SEQ_IDX);\n    if (seqIdx === null) {\n        seqIdx = 0;\n    }\n    iCtx.$container2$.setHostProp(host, USE_ON_LOCAL_SEQ_IDX, seqIdx + 1);\n    let addedFlags = iCtx.$container2$.getHostProp(host, USE_ON_LOCAL_FLAGS);\n    if (addedFlags === null) {\n        addedFlags = [];\n        iCtx.$container2$.setHostProp(host, USE_ON_LOCAL_FLAGS, addedFlags);\n    }\n    while (addedFlags.length <= seqIdx) {\n        addedFlags.push(false);\n    }\n    const addEvent = (eventName, eventQrl) => {\n        addedFlags[seqIdx] = true;\n        let events = onMap[eventName];\n        if (!events) {\n            onMap[eventName] = events = [];\n        }\n        events.push(eventQrl);\n    };\n    return {\n        isAdded: addedFlags[seqIdx],\n        addEvent,\n    };\n};\n//# sourceMappingURL=data:application/json;base64,","import { QSubscribers } from '../../util/markers';\nimport { vnode_getProp } from '../client/vnode';\nimport { EffectSubscriptionsProp, WrappedSignal, isSignal } from './v2-signal';\nexport class Subscriber {\n    constructor() {\n        this.$effectDependencies$ = null;\n    }\n}\nexport function isSubscriber(value) {\n    return value instanceof Subscriber || value instanceof WrappedSignal;\n}\nexport function clearVNodeEffectDependencies(value) {\n    const effects = vnode_getProp(value, QSubscribers, null);\n    if (!effects) {\n        return;\n    }\n    for (let i = effects.length - 1; i >= 0; i--) {\n        const subscriber = effects[i];\n        const subscriptionRemoved = clearEffects(subscriber, value);\n        if (subscriptionRemoved) {\n            effects.splice(i, 1);\n        }\n    }\n}\nexport function clearSubscriberEffectDependencies(value) {\n    if (value.$effectDependencies$) {\n        for (let i = value.$effectDependencies$.length - 1; i >= 0; i--) {\n            const subscriber = value.$effectDependencies$[i];\n            const subscriptionRemoved = clearEffects(subscriber, value);\n            if (subscriptionRemoved) {\n                value.$effectDependencies$.splice(i, 1);\n            }\n        }\n    }\n}\nfunction clearEffects(subscriber, value) {\n    if (!isSignal(subscriber)) {\n        return false;\n    }\n    const effectSubscriptions = subscriber.$effects$;\n    if (!effectSubscriptions) {\n        return false;\n    }\n    let subscriptionRemoved = false;\n    for (let i = effectSubscriptions.length - 1; i >= 0; i--) {\n        const effect = effectSubscriptions[i];\n        if (effect[EffectSubscriptionsProp.EFFECT] === value) {\n            effectSubscriptions.splice(i, 1);\n            subscriptionRemoved = true;\n        }\n    }\n    return subscriptionRemoved;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidjItc3Vic2NyaWJlci5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS92Mi9zaWduYWwvdjItc3Vic2NyaWJlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFbEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRS9FLE1BQU0sT0FBZ0IsVUFBVTtJQUFoQztRQUNFLHlCQUFvQixHQUF3QixJQUFJLENBQUM7SUFDbkQsQ0FBQztDQUFBO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxLQUFjO0lBQ3pDLE9BQU8sS0FBSyxZQUFZLFVBQVUsSUFBSSxLQUFLLFlBQVksYUFBYSxDQUFDO0FBQ3ZFLENBQUM7QUFFRCxNQUFNLFVBQVUsNEJBQTRCLENBQUMsS0FBWTtJQUN2RCxNQUFNLE9BQU8sR0FBRyxhQUFhLENBQWUsS0FBSyxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2RSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDYixPQUFPO0lBQ1QsQ0FBQztJQUNELEtBQUssSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQzdDLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixNQUFNLG1CQUFtQixHQUFHLFlBQVksQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDNUQsSUFBSSxtQkFBbUIsRUFBRSxDQUFDO1lBQ3hCLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxpQ0FBaUMsQ0FBQyxLQUFpQjtJQUNqRSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBQy9CLEtBQUssSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ2hFLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqRCxNQUFNLG1CQUFtQixHQUFHLFlBQVksQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDNUQsSUFBSSxtQkFBbUIsRUFBRSxDQUFDO2dCQUN4QixLQUFLLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMxQyxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUMsVUFBc0IsRUFBRSxLQUF5QjtJQUNyRSxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7UUFDMUIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBQ0QsTUFBTSxtQkFBbUIsR0FBSSxVQUFxQyxDQUFDLFNBQVMsQ0FBQztJQUM3RSxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUN6QixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFDRCxJQUFJLG1CQUFtQixHQUFHLEtBQUssQ0FBQztJQUNoQyxLQUFLLElBQUksQ0FBQyxHQUFHLG1CQUFtQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ3pELE1BQU0sTUFBTSxHQUFHLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLElBQUksTUFBTSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxLQUFLLEtBQUssRUFBRSxDQUFDO1lBQ3JELG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDakMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDO1FBQzdCLENBQUM7SUFDSCxDQUFDO0lBQ0QsT0FBTyxtQkFBbUIsQ0FBQztBQUM3QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUVN1YnNjcmliZXJzIH0gZnJvbSAnLi4vLi4vdXRpbC9tYXJrZXJzJztcbmltcG9ydCB0eXBlIHsgVk5vZGUgfSBmcm9tICcuLi9jbGllbnQvdHlwZXMnO1xuaW1wb3J0IHsgdm5vZGVfZ2V0UHJvcCB9IGZyb20gJy4uL2NsaWVudC92bm9kZSc7XG5pbXBvcnQgeyBFZmZlY3RTdWJzY3JpcHRpb25zUHJvcCwgV3JhcHBlZFNpZ25hbCwgaXNTaWduYWwgfSBmcm9tICcuL3YyLXNpZ25hbCc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTdWJzY3JpYmVyIHtcbiAgJGVmZmVjdERlcGVuZGVuY2llcyQ6IFN1YnNjcmliZXJbXSB8IG51bGwgPSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTdWJzY3JpYmVyKHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgU3Vic2NyaWJlciB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFN1YnNjcmliZXIgfHwgdmFsdWUgaW5zdGFuY2VvZiBXcmFwcGVkU2lnbmFsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJWTm9kZUVmZmVjdERlcGVuZGVuY2llcyh2YWx1ZTogVk5vZGUpOiB2b2lkIHtcbiAgY29uc3QgZWZmZWN0cyA9IHZub2RlX2dldFByb3A8U3Vic2NyaWJlcltdPih2YWx1ZSwgUVN1YnNjcmliZXJzLCBudWxsKTtcbiAgaWYgKCFlZmZlY3RzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAobGV0IGkgPSBlZmZlY3RzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgY29uc3Qgc3Vic2NyaWJlciA9IGVmZmVjdHNbaV07XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uUmVtb3ZlZCA9IGNsZWFyRWZmZWN0cyhzdWJzY3JpYmVyLCB2YWx1ZSk7XG4gICAgaWYgKHN1YnNjcmlwdGlvblJlbW92ZWQpIHtcbiAgICAgIGVmZmVjdHMuc3BsaWNlKGksIDEpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJTdWJzY3JpYmVyRWZmZWN0RGVwZW5kZW5jaWVzKHZhbHVlOiBTdWJzY3JpYmVyKTogdm9pZCB7XG4gIGlmICh2YWx1ZS4kZWZmZWN0RGVwZW5kZW5jaWVzJCkge1xuICAgIGZvciAobGV0IGkgPSB2YWx1ZS4kZWZmZWN0RGVwZW5kZW5jaWVzJC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgY29uc3Qgc3Vic2NyaWJlciA9IHZhbHVlLiRlZmZlY3REZXBlbmRlbmNpZXMkW2ldO1xuICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uUmVtb3ZlZCA9IGNsZWFyRWZmZWN0cyhzdWJzY3JpYmVyLCB2YWx1ZSk7XG4gICAgICBpZiAoc3Vic2NyaXB0aW9uUmVtb3ZlZCkge1xuICAgICAgICB2YWx1ZS4kZWZmZWN0RGVwZW5kZW5jaWVzJC5zcGxpY2UoaSwgMSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNsZWFyRWZmZWN0cyhzdWJzY3JpYmVyOiBTdWJzY3JpYmVyLCB2YWx1ZTogU3Vic2NyaWJlciB8IFZOb2RlKTogYm9vbGVhbiB7XG4gIGlmICghaXNTaWduYWwoc3Vic2NyaWJlcikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgZWZmZWN0U3Vic2NyaXB0aW9ucyA9IChzdWJzY3JpYmVyIGFzIFdyYXBwZWRTaWduYWw8dW5rbm93bj4pLiRlZmZlY3RzJDtcbiAgaWYgKCFlZmZlY3RTdWJzY3JpcHRpb25zKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGxldCBzdWJzY3JpcHRpb25SZW1vdmVkID0gZmFsc2U7XG4gIGZvciAobGV0IGkgPSBlZmZlY3RTdWJzY3JpcHRpb25zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgY29uc3QgZWZmZWN0ID0gZWZmZWN0U3Vic2NyaXB0aW9uc1tpXTtcbiAgICBpZiAoZWZmZWN0W0VmZmVjdFN1YnNjcmlwdGlvbnNQcm9wLkVGRkVDVF0gPT09IHZhbHVlKSB7XG4gICAgICBlZmZlY3RTdWJzY3JpcHRpb25zLnNwbGljZShpLCAxKTtcbiAgICAgIHN1YnNjcmlwdGlvblJlbW92ZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3Vic2NyaXB0aW9uUmVtb3ZlZDtcbn1cbiJdfQ==","import { isDev } from '@builder.io/qwik/build';\nimport { isQwikComponent } from '../../component/component.public';\nimport { assertDefined } from '../../error/assert';\nimport { isQrl } from '../../qrl/qrl-class';\nimport { JSXNodeImpl, isJSXNode } from '../../render/jsx/jsx-runtime';\nimport { invokeApply, newInvokeContext, untrack } from '../../use/use-core';\nimport {} from '../../use/use-on';\nimport { EMPTY_OBJ } from '../../util/flyweight';\nimport { ELEMENT_PROPS, ELEMENT_SEQ_IDX, OnRenderProp, RenderEvent, USE_ON_LOCAL, USE_ON_LOCAL_SEQ_IDX, } from '../../util/markers';\nimport { isPromise, maybeThen, safeCall } from '../../util/promises';\nimport { logWarn } from '../../util/log';\nimport { EffectProperty, isSignal } from '../signal/v2-signal';\nimport { vnode_isVNode } from '../client/vnode';\nimport { clearVNodeEffectDependencies } from '../signal/v2-subscriber';\n/**\n * Use `executeComponent2` to execute a component.\n *\n * Component execution can be complex because of:\n *\n * - It can by async\n * - It can contain many tasks which need to be awaited\n * - Each task can run multiple times if they track signals which change.\n * - The JSX may be re-generated multiple times of a task needs to be rerun due to signal change.\n * - It needs to keep track of hook state.\n *\n * For `component$`: `renderHost` === `subscriptionHost` For inlined-components: the\n * `subscriptionHost` is a parent `component$` which needs to re-execute.\n *\n * @param container\n * @param renderHost - VNode into which the component is rendered into.\n * @param subscriptionHost - VNode which will be re-executed if the component needs to re-render.\n * @param componentQRL\n * @param props\n * @returns\n */\nexport const executeComponent2 = (container, renderHost, subscriptionHost, componentQRL, props) => {\n    const iCtx = newInvokeContext(container.$locale$, subscriptionHost, undefined, RenderEvent);\n    iCtx.$effectSubscriber$ = [subscriptionHost, EffectProperty.COMPONENT];\n    iCtx.$container2$ = container;\n    let componentFn;\n    container.ensureProjectionResolved(renderHost);\n    if (componentQRL === null) {\n        componentQRL = componentQRL || container.getHostProp(renderHost, OnRenderProp);\n        assertDefined(componentQRL, 'No Component found at this location');\n    }\n    if (isQrl(componentQRL)) {\n        props = props || container.getHostProp(renderHost, ELEMENT_PROPS) || EMPTY_OBJ;\n        if (props && props.children) {\n            delete props.children;\n        }\n        componentFn = componentQRL.getFn(iCtx);\n    }\n    else if (isQwikComponent(componentQRL)) {\n        const qComponentFn = componentQRL;\n        componentFn = () => invokeApply(iCtx, qComponentFn, [props || EMPTY_OBJ, null, 0]);\n    }\n    else {\n        const inlineComponent = componentQRL;\n        componentFn = () => invokeApply(iCtx, inlineComponent, [props || EMPTY_OBJ]);\n    }\n    const executeComponentWithPromiseExceptionRetry = () => safeCall(() => {\n        container.setHostProp(renderHost, ELEMENT_SEQ_IDX, null);\n        container.setHostProp(renderHost, USE_ON_LOCAL_SEQ_IDX, null);\n        container.setHostProp(renderHost, ELEMENT_PROPS, props);\n        if (vnode_isVNode(renderHost)) {\n            clearVNodeEffectDependencies(renderHost);\n        }\n        return componentFn(props);\n    }, (jsx) => {\n        const useOnEvents = container.getHostProp(renderHost, USE_ON_LOCAL);\n        if (useOnEvents) {\n            return maybeThen(addUseOnEvents(jsx, useOnEvents), () => jsx);\n        }\n        return jsx;\n    }, (err) => {\n        if (isPromise(err)) {\n            return err.then(executeComponentWithPromiseExceptionRetry);\n        }\n        else {\n            throw err;\n        }\n    });\n    return executeComponentWithPromiseExceptionRetry();\n};\n/**\n * Stores the JSX output of the last execution of the component.\n *\n * Component can execute multiple times because:\n *\n * - Component can have multiple tasks\n * - Tasks can track signals\n * - Task A can change signal which causes Task B to rerun.\n *\n * So when executing a component we only care about its last JSX Output.\n */\nfunction addUseOnEvents(jsx, useOnEvents) {\n    const jsxElement = findFirstStringJSX(jsx);\n    return maybeThen(jsxElement, (jsxElement) => {\n        let isInvisibleComponent = false;\n        if (!jsxElement) {\n            /**\n             * We did not find any jsx node with a string tag. This means that we should append:\n             *\n             * ```html\n             * <script type=\"placeholder\" hidden on-document:qinit=\"...\"></script>\n             * ```\n             *\n             * This is needed because use on events should have a node to attach them to.\n             */\n            isInvisibleComponent = true;\n        }\n        for (const key in useOnEvents) {\n            if (Object.prototype.hasOwnProperty.call(useOnEvents, key)) {\n                if (isInvisibleComponent) {\n                    if (key === 'onQvisible$') {\n                        jsxElement = addScriptNodeForInvisibleComponents(jsx);\n                        if (jsxElement) {\n                            addUseOnEvent(jsxElement, 'document:onQinit$', useOnEvents[key]);\n                        }\n                    }\n                    else if (key.startsWith('document:') || key.startsWith('window:')) {\n                        jsxElement = addScriptNodeForInvisibleComponents(jsx);\n                        if (jsxElement) {\n                            addUseOnEvent(jsxElement, key, useOnEvents[key]);\n                        }\n                    }\n                    else if (isDev) {\n                        logWarn('You are trying to add an event \"' +\n                            key +\n                            '\" using `useOn` hook, ' +\n                            'but a node to which you can add an event is not found. ' +\n                            'Please make sure that the component has a valid element node. ');\n                    }\n                }\n                else if (jsxElement) {\n                    addUseOnEvent(jsxElement, key, useOnEvents[key]);\n                }\n            }\n        }\n        return jsxElement;\n    });\n}\nfunction addUseOnEvent(jsxElement, key, value) {\n    let props = jsxElement.props;\n    if (props === EMPTY_OBJ) {\n        props = jsxElement.props = {};\n    }\n    let propValue = props[key];\n    if (propValue === undefined) {\n        propValue = [];\n    }\n    else if (!Array.isArray(propValue)) {\n        propValue = [propValue];\n    }\n    propValue.push(...value);\n    props[key] = propValue;\n}\nfunction findFirstStringJSX(jsx) {\n    const queue = [jsx];\n    while (queue.length) {\n        const jsx = queue.shift();\n        if (isJSXNode(jsx)) {\n            if (typeof jsx.type === 'string') {\n                return jsx;\n            }\n            queue.push(jsx.children);\n        }\n        else if (Array.isArray(jsx)) {\n            queue.push(...jsx);\n        }\n        else if (isPromise(jsx)) {\n            return maybeThen(jsx, (jsx) => findFirstStringJSX(jsx));\n        }\n        else if (isSignal(jsx)) {\n            return findFirstStringJSX(untrack(() => jsx.value));\n        }\n    }\n    return null;\n}\nfunction addScriptNodeForInvisibleComponents(jsx) {\n    if (isJSXNode(jsx)) {\n        const jsxElement = new JSXNodeImpl('script', {}, {\n            type: 'placeholder',\n            hidden: '',\n        }, null, 3);\n        if (jsx.children == null) {\n            jsx.children = jsxElement;\n        }\n        else if (Array.isArray(jsx.children)) {\n            jsx.children.push(jsxElement);\n        }\n        else {\n            jsx.children = [jsx.children, jsxElement];\n        }\n        return jsxElement;\n    }\n    else if (Array.isArray(jsx) && jsx.length) {\n        // get first element\n        return addScriptNodeForInvisibleComponents(jsx[0]);\n    }\n    return null;\n}\n//# sourceMappingURL=data:application/json;base64,","export function escapeHTML(html) {\n    let escapedHTML = '';\n    const length = html.length;\n    let idx = 0;\n    let lastIdx = idx;\n    for (; idx < length; idx++) {\n        // We get the charCode NOT string. String would allocate memory.\n        const ch = html.charCodeAt(idx);\n        // Every time we concat a string we allocate memory. We want to minimize that.\n        if (ch === 60 /* < */) {\n            escapedHTML += html.substring(lastIdx, idx) + '&lt;';\n        }\n        else if (ch === 62 /* > */) {\n            escapedHTML += html.substring(lastIdx, idx) + '&gt;';\n        }\n        else if (ch === 38 /* & */) {\n            escapedHTML += html.substring(lastIdx, idx) + '&amp;';\n        }\n        else if (ch === 34 /* \" */) {\n            escapedHTML += html.substring(lastIdx, idx) + '&quot;';\n        }\n        else if (ch === 39 /* ' */) {\n            escapedHTML += html.substring(lastIdx, idx) + '&#39;';\n        }\n        else {\n            continue;\n        }\n        lastIdx = idx + 1;\n    }\n    if (lastIdx === 0) {\n        // This is most common case, just return previous string no memory allocation.\n        return html;\n    }\n    else {\n        // Add the tail of replacement.\n        return escapedHTML + html.substring(lastIdx);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmFjdGVyLWVzY2FwaW5nLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3YyL3NoYXJlZC9jaGFyYWN0ZXItZXNjYXBpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxVQUFVLFVBQVUsQ0FBQyxJQUFZO0lBQ3JDLElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQztJQUNyQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQzNCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNaLElBQUksT0FBTyxHQUFHLEdBQUcsQ0FBQztJQUNsQixPQUFPLEdBQUcsR0FBRyxNQUFNLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQztRQUMzQixnRUFBZ0U7UUFDaEUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoQyw4RUFBOEU7UUFDOUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3RCLFdBQVcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDdkQsQ0FBQzthQUFNLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUM3QixXQUFXLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ3ZELENBQUM7YUFBTSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDN0IsV0FBVyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQztRQUN4RCxDQUFDO2FBQU0sSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzdCLFdBQVcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUM7UUFDekQsQ0FBQzthQUFNLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUM3QixXQUFXLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDO1FBQ3hELENBQUM7YUFBTSxDQUFDO1lBQ04sU0FBUztRQUNYLENBQUM7UUFDRCxPQUFPLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBQ0QsSUFBSSxPQUFPLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDbEIsOEVBQThFO1FBQzlFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztTQUFNLENBQUM7UUFDTiwrQkFBK0I7UUFDL0IsT0FBTyxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvQyxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBlc2NhcGVIVE1MKGh0bWw6IHN0cmluZyk6IHN0cmluZyB7XG4gIGxldCBlc2NhcGVkSFRNTCA9ICcnO1xuICBjb25zdCBsZW5ndGggPSBodG1sLmxlbmd0aDtcbiAgbGV0IGlkeCA9IDA7XG4gIGxldCBsYXN0SWR4ID0gaWR4O1xuICBmb3IgKDsgaWR4IDwgbGVuZ3RoOyBpZHgrKykge1xuICAgIC8vIFdlIGdldCB0aGUgY2hhckNvZGUgTk9UIHN0cmluZy4gU3RyaW5nIHdvdWxkIGFsbG9jYXRlIG1lbW9yeS5cbiAgICBjb25zdCBjaCA9IGh0bWwuY2hhckNvZGVBdChpZHgpO1xuICAgIC8vIEV2ZXJ5IHRpbWUgd2UgY29uY2F0IGEgc3RyaW5nIHdlIGFsbG9jYXRlIG1lbW9yeS4gV2Ugd2FudCB0byBtaW5pbWl6ZSB0aGF0LlxuICAgIGlmIChjaCA9PT0gNjAgLyogPCAqLykge1xuICAgICAgZXNjYXBlZEhUTUwgKz0gaHRtbC5zdWJzdHJpbmcobGFzdElkeCwgaWR4KSArICcmbHQ7JztcbiAgICB9IGVsc2UgaWYgKGNoID09PSA2MiAvKiA+ICovKSB7XG4gICAgICBlc2NhcGVkSFRNTCArPSBodG1sLnN1YnN0cmluZyhsYXN0SWR4LCBpZHgpICsgJyZndDsnO1xuICAgIH0gZWxzZSBpZiAoY2ggPT09IDM4IC8qICYgKi8pIHtcbiAgICAgIGVzY2FwZWRIVE1MICs9IGh0bWwuc3Vic3RyaW5nKGxhc3RJZHgsIGlkeCkgKyAnJmFtcDsnO1xuICAgIH0gZWxzZSBpZiAoY2ggPT09IDM0IC8qIFwiICovKSB7XG4gICAgICBlc2NhcGVkSFRNTCArPSBodG1sLnN1YnN0cmluZyhsYXN0SWR4LCBpZHgpICsgJyZxdW90Oyc7XG4gICAgfSBlbHNlIGlmIChjaCA9PT0gMzkgLyogJyAqLykge1xuICAgICAgZXNjYXBlZEhUTUwgKz0gaHRtbC5zdWJzdHJpbmcobGFzdElkeCwgaWR4KSArICcmIzM5Oyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBsYXN0SWR4ID0gaWR4ICsgMTtcbiAgfVxuICBpZiAobGFzdElkeCA9PT0gMCkge1xuICAgIC8vIFRoaXMgaXMgbW9zdCBjb21tb24gY2FzZSwganVzdCByZXR1cm4gcHJldmlvdXMgc3RyaW5nIG5vIG1lbW9yeSBhbGxvY2F0aW9uLlxuICAgIHJldHVybiBodG1sO1xuICB9IGVsc2Uge1xuICAgIC8vIEFkZCB0aGUgdGFpbCBvZiByZXBsYWNlbWVudC5cbiAgICByZXR1cm4gZXNjYXBlZEhUTUwgKyBodG1sLnN1YnN0cmluZyhsYXN0SWR4KTtcbiAgfVxufVxuIl19","import { isDev } from '@builder.io/qwik/build';\nimport {} from '../../component/component.public';\nimport { SERIALIZABLE_STATE } from '../../container/serializers';\nimport { assertDefined, assertFalse, assertTrue } from '../../error/assert';\nimport { dangerouslySetInnerHTML, serializeAttribute } from '../../render/execute-component';\nimport { Fragment, JSXNodeImpl, isJSXNode } from '../../render/jsx/jsx-runtime';\nimport { Slot } from '../../render/jsx/slot.public';\nimport { SSRComment, SSRRaw, SkipRender } from '../../render/jsx/utils.public';\nimport { trackSignal, untrack } from '../../use/use-core';\nimport { TaskFlags, cleanupTask, isTask } from '../../use/use-task';\nimport { EMPTY_OBJ } from '../../util/flyweight';\nimport { ELEMENT_KEY, ELEMENT_PROPS, ELEMENT_SEQ, OnRenderProp, QContainerAttr, QDefaultSlot, QSlot, QSlotParent, QStyle, QTemplate, } from '../../util/markers';\nimport { isPromise } from '../../util/promises';\nimport {} from '../../util/types';\nimport { convertEventNameFromJsxPropToHtmlAttr, getEventNameFromJsxProp, getEventNameScopeFromJsxProp, isHtmlAttributeAnEventName, isJsxPropertyAnEventName, } from '../shared/event-names';\nimport { ChoreType } from '../shared/scheduler';\nimport { hasClassAttr } from '../shared/scoped-styles';\nimport { DEBUG_TYPE, QContainerValue, VirtualType } from '../shared/types';\nimport { ElementVNodeProps, VNodeFlags, VNodeProps, VirtualVNodeProps, } from './types';\nimport { mapApp_findIndx, mapArray_set, vnode_ensureElementInflated, vnode_getAttr, vnode_getDomParentVNode, vnode_getElementName, vnode_getFirstChild, vnode_getNextSibling, vnode_getNode, vnode_getParent, vnode_getProjectionParentComponent, vnode_getProp, vnode_getPropStartIndex, vnode_getText, vnode_getType, vnode_insertBefore, vnode_isElementVNode, vnode_isTextVNode, vnode_isVNode, vnode_isVirtualVNode, vnode_locate, vnode_newElement, vnode_newText, vnode_newVirtual, vnode_remove, vnode_setAttr, vnode_setProp, vnode_setText, vnode_truncate, vnode_walkVNode, } from './vnode';\nimport { getNewElementNamespaceData } from './vnode-namespace';\nimport { WrappedSignal, EffectProperty, isSignal, EffectData } from '../signal/v2-signal';\nimport { executeComponent2 } from '../shared/component-execution';\nimport { isParentSlotProp, isSlotProp } from '../../util/prop';\nimport { escapeHTML } from '../shared/character-escaping';\nimport { clearSubscriberEffectDependencies, clearVNodeEffectDependencies, } from '../signal/v2-subscriber';\nimport { throwErrorAndStop } from '../../util/log';\nexport const vnode_diff = (container, jsxNode, vStartNode, scopedStyleIdPrefix) => {\n    let journal = container.$journal$;\n    /**\n     * Stack is used to keep track of the state of the traversal.\n     *\n     * We push current state into the stack before descending into the child, and we pop the state\n     * when we are done with the child.\n     */\n    const stack = [];\n    const asyncQueue = [];\n    ////////////////////////////////\n    //// Traverse state variables\n    ////////////////////////////////\n    let vParent = null;\n    /// Current node we compare against. (Think of it as a cursor.)\n    /// (Node can be null, if we are at the end of the list.)\n    let vCurrent = null;\n    /// When we insert new node we start it here so that we can descend into it.\n    /// NOTE: it can't be stored in `vCurrent` because `vNewCurrent` is in journal\n    /// and is not connected to the tree.\n    let vNewNode = null; // TODO: delete, because journal is on vNode, the above comment no longer applies\n    /// When elements have keys they can be consumed out of order and therefore we can't use nextSibling.\n    /// In such a case this array will contain the elements after the current location.\n    /// The array even indices will contains keys and odd indices the vNode.\n    let vSiblings = null; // See: `SiblingsArray`\n    let vSiblingsIdx = -1;\n    /// Current set of JSX children.\n    let jsxChildren = null;\n    // Current JSX child.\n    let jsxValue = null;\n    let jsxIdx = 0;\n    let jsxCount = 0;\n    // When we descend into children, we need to skip advance() because we just descended.\n    let shouldAdvance = true;\n    /**\n     * When we are rendering inside a projection we don't want to process child components. Child\n     * components will be processed only if the projection is re-projected with a `<Slot>`.\n     *\n     * Example: <Parent> <div> <Child/> </div> </Parent>\n     *\n     * In the above example, the `Child` component will not be processed because it is inside a\n     * projection. Only if the `<Parent>` projects its content with `<Slot>` will the `Child`\n     * component be processed.\n     */\n    // let inContentProjection = false;\n    ////////////////////////////////\n    diff(jsxNode, vStartNode);\n    return drainAsyncQueue();\n    //////////////////////////////////////////////\n    //////////////////////////////////////////////\n    //////////////////////////////////////////////\n    function diff(jsxNode, vStartNode) {\n        assertFalse(vnode_isVNode(jsxNode), 'JSXNode should not be a VNode');\n        assertTrue(vnode_isVNode(vStartNode), 'vStartNode should be a VNode');\n        vParent = vStartNode;\n        vNewNode = null;\n        vCurrent = vnode_getFirstChild(vStartNode);\n        stackPush(jsxNode, true);\n        while (stack.length) {\n            while (jsxIdx < jsxCount) {\n                assertFalse(vParent === vCurrent, \"Parent and current can't be the same\");\n                if (typeof jsxValue === 'string') {\n                    expectText(jsxValue);\n                }\n                else if (typeof jsxValue === 'number') {\n                    expectText(String(jsxValue));\n                }\n                else if (jsxValue && typeof jsxValue === 'object') {\n                    if (Array.isArray(jsxValue)) {\n                        descend(jsxValue, false);\n                    }\n                    else if (isSignal(jsxValue)) {\n                        if (vCurrent) {\n                            clearVNodeEffectDependencies(vCurrent);\n                        }\n                        expectVirtual(VirtualType.WrappedSignal, null);\n                        descend(trackSignal(() => jsxValue.value, (vNewNode || vCurrent), EffectProperty.VNODE, container), true);\n                    }\n                    else if (isPromise(jsxValue)) {\n                        expectVirtual(VirtualType.Awaited, null);\n                        asyncQueue.push(jsxValue, vNewNode || vCurrent);\n                    }\n                    else if (isJSXNode(jsxValue)) {\n                        const type = jsxValue.type;\n                        if (typeof type === 'string') {\n                            expectNoMoreTextNodes();\n                            expectElement(jsxValue, type);\n                            descend(jsxValue.children, true);\n                        }\n                        else if (typeof type === 'function') {\n                            if (type === Fragment) {\n                                expectNoMoreTextNodes();\n                                expectVirtual(VirtualType.Fragment, jsxValue.key);\n                                descend(jsxValue.children, true);\n                            }\n                            else if (type === Slot) {\n                                expectNoMoreTextNodes();\n                                if (!expectSlot()) {\n                                    // nothing to project, so try to render the Slot default content.\n                                    descend(jsxValue.children, true);\n                                }\n                            }\n                            else if (type === Projection) {\n                                expectProjection();\n                                descend(jsxValue.children, true);\n                            }\n                            else if (type === SSRComment) {\n                                expectNoMore();\n                            }\n                            else if (type === SSRRaw) {\n                                expectNoMore();\n                            }\n                            else {\n                                // Must be a component\n                                expectNoMoreTextNodes();\n                                expectComponent(type);\n                            }\n                        }\n                    }\n                }\n                else if (jsxValue === SkipRender) {\n                    // do nothing, we are skipping this node\n                    journal = [];\n                }\n                else {\n                    expectText('');\n                }\n                advance();\n            }\n            expectNoMore();\n            ascend();\n        }\n    }\n    function advance() {\n        if (!shouldAdvance) {\n            shouldAdvance = true;\n            return;\n        }\n        jsxIdx++;\n        if (jsxIdx < jsxCount) {\n            jsxValue = jsxChildren[jsxIdx];\n        }\n        else if (stack[stack.length - 1] === false) {\n            // this was special `descendVNode === false` so pop and try again\n            return ascend();\n        }\n        if (vNewNode !== null) {\n            // We have a new Node.\n            // This means that the `vCurrent` was deemed not useful and we inserted in front of it.\n            // This means that the next node we should look at is the `vCurrent` so just clear the\n            // vNewNode  and try again.\n            vNewNode = null;\n        }\n        else {\n            advanceToNextSibling();\n        }\n    }\n    /**\n     * Advance the `vCurrent` to the next sibling.\n     *\n     * Normally this is just `vCurrent = vnode_getNextSibling(vCurrent)`. However, this gets\n     * complicated if `retrieveChildWithKey` was called, because then we are consuming nodes out of\n     * order and can't rely on `vnode_getNextSibling` and instead we need to go by `vSiblings`.\n     */\n    function peekNextSibling() {\n        if (vSiblings !== null) {\n            // We came across a key, and we moved nodes around. This means we can no longer use\n            // `vnode_getNextSibling` to look at next node and instead we have to go by `vSiblings`.\n            const idx = vSiblingsIdx + SiblingsArray.NextVNode;\n            return idx < vSiblings.length ? vSiblings[idx] : null;\n        }\n        else {\n            // If we don't have a `vNewNode`, than that means we just reconciled the current node.\n            // So advance it.\n            return vCurrent ? vnode_getNextSibling(vCurrent) : null;\n        }\n    }\n    /**\n     * Advance the `vCurrent` to the next sibling.\n     *\n     * Normally this is just `vCurrent = vnode_getNextSibling(vCurrent)`. However, this gets\n     * complicated if `retrieveChildWithKey` was called, because then we are consuming nodes out of\n     * order and can't rely on `vnode_getNextSibling` and instead we need to go by `vSiblings`.\n     */\n    function advanceToNextSibling() {\n        vCurrent = peekNextSibling();\n        if (vSiblings !== null) {\n            vSiblingsIdx += SiblingsArray.Size; // advance;\n        }\n    }\n    /**\n     * @param children\n     * @param descendVNode - If true we are descending into vNode; This is set to false if we come\n     *   across an array in jsx, and we need to descend into the array without actually descending\n     *   into the vNode.\n     *\n     *   Example:\n     *\n     *   ```\n     *   <>\n     *   before\n     *   {[1,2].map((i) => <span>{i}</span>)}\n     *   after\n     *   </>\n     * ```\n     *\n     *   In the above example all nodes are on same level so we don't `descendVNode` even thought there\n     *   is an array produced by the `map` function.\n     */\n    function descend(children, descendVNode) {\n        if (children == null) {\n            expectNoChildren();\n            return;\n        }\n        stackPush(children, descendVNode);\n        if (descendVNode) {\n            assertDefined(vCurrent || vNewNode, 'Expecting vCurrent to be defined.');\n            vSiblings = null;\n            vSiblingsIdx = -1;\n            vParent = vNewNode || vCurrent;\n            vCurrent = vnode_getFirstChild(vParent);\n            vNewNode = null;\n        }\n        shouldAdvance = false;\n    }\n    function ascend() {\n        const descendVNode = stack.pop(); // boolean: descendVNode\n        if (descendVNode) {\n            vSiblingsIdx = stack.pop();\n            vSiblings = stack.pop();\n            vNewNode = stack.pop();\n            vCurrent = stack.pop();\n            vParent = stack.pop();\n        }\n        jsxValue = stack.pop();\n        jsxCount = stack.pop();\n        jsxIdx = stack.pop();\n        jsxChildren = stack.pop();\n        advance();\n    }\n    function stackPush(children, descendVNode) {\n        stack.push(jsxChildren, jsxIdx, jsxCount, jsxValue);\n        if (descendVNode) {\n            stack.push(vParent, vCurrent, vNewNode, vSiblings, vSiblingsIdx);\n        }\n        stack.push(descendVNode);\n        if (Array.isArray(children)) {\n            jsxIdx = 0;\n            jsxCount = children.length;\n            jsxChildren = children;\n            jsxValue = jsxCount > 0 ? children[0] : null;\n        }\n        else if (children === undefined) {\n            // no children\n            jsxIdx = 0;\n            jsxValue = null;\n            jsxChildren = null;\n            jsxCount = 0;\n        }\n        else {\n            jsxIdx = 0;\n            jsxValue = children;\n            jsxChildren = null;\n            jsxCount = 1;\n        }\n    }\n    function getInsertBefore() {\n        if (vNewNode) {\n            return vCurrent;\n        }\n        else if (vSiblings !== null) {\n            const nextIdx = vSiblingsIdx + SiblingsArray.NextVNode;\n            return nextIdx < vSiblings.length ? vSiblings[nextIdx] : null;\n        }\n        else {\n            return peekNextSibling();\n        }\n    }\n    /////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////////////\n    function descendContentToProject(children, host) {\n        if (!Array.isArray(children)) {\n            children = [children];\n        }\n        if (children.length) {\n            const createProjectionJSXNode = (slotName) => {\n                return new JSXNodeImpl(Projection, EMPTY_OBJ, null, [], 0, slotName);\n            };\n            const projections = [];\n            if (host) {\n                // we need to create empty projections for all the slots to remove unused slots content\n                for (let i = vnode_getPropStartIndex(host); i < host.length; i = i + 2) {\n                    const prop = host[i];\n                    if (isSlotProp(prop)) {\n                        const slotName = prop;\n                        projections.push(slotName);\n                        projections.push(createProjectionJSXNode(slotName));\n                    }\n                }\n            }\n            /// STEP 1: Bucketize the children based on the projection name.\n            for (let i = 0; i < children.length; i++) {\n                const child = children[i];\n                const slotName = String((isJSXNode(child) && child.props[QSlot]) || QDefaultSlot);\n                const idx = mapApp_findIndx(projections, slotName, 0);\n                let jsxBucket;\n                if (idx >= 0) {\n                    jsxBucket = projections[idx + 1];\n                }\n                else {\n                    projections.splice(~idx, 0, slotName, (jsxBucket = createProjectionJSXNode(slotName)));\n                }\n                const removeProjection = child === false;\n                if (!removeProjection) {\n                    jsxBucket.children.push(child);\n                }\n            }\n            /// STEP 2: remove the names\n            for (let i = projections.length - 2; i >= 0; i = i - 2) {\n                projections.splice(i, 1);\n            }\n            descend(projections, true);\n        }\n    }\n    function expectProjection() {\n        const slotName = jsxValue.key;\n        // console.log('expectProjection', JSON.stringify(slotName));\n        vCurrent = vnode_getProp(vParent, // The parent is the component and it should have our portal.\n        slotName, (id) => vnode_locate(container.rootVNode, id));\n        if (vCurrent == null) {\n            vNewNode = vnode_newVirtual();\n            // you may be tempted to add the projection into the current parent, but\n            // that is wrong. We don't yet know if the projection will be projected, so\n            // we should leave it unattached.\n            // vNewNode[VNodeProps.parent] = vParent;\n            isDev && vnode_setProp(vNewNode, DEBUG_TYPE, VirtualType.Projection);\n            isDev && vnode_setProp(vNewNode, 'q:code', 'expectProjection');\n            vnode_setProp(vNewNode, QSlot, slotName);\n            vnode_setProp(vNewNode, QSlotParent, vParent);\n            vnode_setProp(vParent, slotName, vNewNode);\n        }\n    }\n    function expectSlot() {\n        const vHost = vnode_getProjectionParentComponent(vParent, container.rootVNode);\n        const slotNameKey = getSlotNameKey(vHost);\n        // console.log('expectSlot', JSON.stringify(slotNameKey));\n        const vProjectedNode = vHost\n            ? vnode_getProp(vHost, slotNameKey, \n            // for slots this id is vnode ref id\n            null // Projections should have been resolved through container.ensureProjectionResolved\n            //(id) => vnode_locate(container.rootVNode, id)\n            )\n            : null;\n        // console.log('   ', String(vHost), String(vProjectedNode));\n        if (vProjectedNode == null) {\n            // Nothing to project, so render content of the slot.\n            vnode_insertBefore(journal, vParent, (vNewNode = vnode_newVirtual()), vCurrent && getInsertBefore());\n            vnode_setProp(vNewNode, QSlot, slotNameKey);\n            vHost && vnode_setProp(vHost, slotNameKey, vNewNode);\n            isDev && vnode_setProp(vNewNode, DEBUG_TYPE, VirtualType.Projection);\n            isDev && vnode_setProp(vNewNode, 'q:code', 'expectSlot' + count++);\n            return false;\n        }\n        else if (vProjectedNode === vCurrent) {\n            // All is good.\n            // console.log('  NOOP', String(vCurrent));\n        }\n        else {\n            // move from q:template to the target node\n            vnode_insertBefore(journal, vParent, (vNewNode = vProjectedNode), vCurrent && getInsertBefore());\n            vnode_setProp(vNewNode, QSlot, slotNameKey);\n            vHost && vnode_setProp(vHost, slotNameKey, vNewNode);\n            isDev && vnode_setProp(vNewNode, DEBUG_TYPE, VirtualType.Projection);\n            isDev && vnode_setProp(vNewNode, 'q:code', 'expectSlot' + count++);\n        }\n        return true;\n    }\n    function getSlotNameKey(vHost) {\n        const constProps = jsxValue.constProps;\n        if (constProps && typeof constProps == 'object' && 'name' in constProps) {\n            const constValue = constProps.name;\n            if (constValue instanceof WrappedSignal) {\n                return trackSignal(() => constValue.value, vHost, EffectProperty.COMPONENT, container);\n            }\n        }\n        return jsxValue.props.name || QDefaultSlot;\n    }\n    function drainAsyncQueue() {\n        while (asyncQueue.length) {\n            const jsxNode = asyncQueue.shift();\n            const vHostNode = asyncQueue.shift();\n            if (isPromise(jsxNode)) {\n                return jsxNode.then((jsxNode) => {\n                    diff(jsxNode, vHostNode);\n                    return drainAsyncQueue();\n                });\n            }\n            else {\n                diff(jsxNode, vHostNode);\n            }\n        }\n    }\n    function expectNoChildren() {\n        const vFirstChild = vCurrent && vnode_getFirstChild(vCurrent);\n        if (vFirstChild !== null) {\n            let vChild = vFirstChild;\n            while (vChild) {\n                cleanup(container, vChild);\n                vChild = vnode_getNextSibling(vChild);\n            }\n            vnode_truncate(journal, vCurrent, vFirstChild);\n        }\n    }\n    /** Expect no more nodes - Any nodes which are still at cursor, need to be removed. */\n    function expectNoMore() {\n        assertFalse(vParent === vCurrent, \"Parent and current can't be the same\");\n        if (vCurrent !== null) {\n            while (vCurrent) {\n                const toRemove = vCurrent;\n                advanceToNextSibling();\n                cleanup(container, toRemove);\n                if (vParent === vnode_getParent(toRemove)) {\n                    // If we are diffing projection than the parent is not the parent of the node.\n                    // If that is the case we don't want to remove the node from the parent.\n                    vnode_remove(journal, vParent, toRemove, true);\n                }\n            }\n        }\n    }\n    function expectNoMoreTextNodes() {\n        while (vCurrent !== null && vnode_isTextVNode(vCurrent)) {\n            cleanup(container, vCurrent);\n            const toRemove = vCurrent;\n            advanceToNextSibling();\n            vnode_remove(journal, vParent, toRemove, true);\n        }\n    }\n    /**\n     * Returns whether `qDispatchEvent` needs patching. This is true when one of the `jsx` argument's\n     * const props has the name of an event.\n     *\n     * @returns {boolean}\n     */\n    function createNewElement(jsx, elementName) {\n        const element = createElementWithNamespace(elementName);\n        const { constProps } = jsx;\n        let needsQDispatchEventPatch = false;\n        if (constProps) {\n            // Const props are, well, constant, they will never change!\n            // For this reason we can cheat and write them directly into the DOM.\n            // We never tell the vNode about them saving us time and memory.\n            for (const key in constProps) {\n                let value = constProps[key];\n                if (isJsxPropertyAnEventName(key)) {\n                    // So for event handlers we must add them to the vNode so that qwikloader can look them up\n                    // But we need to mark them so that they don't get pulled into the diff.\n                    const eventName = getEventNameFromJsxProp(key);\n                    const scope = getEventNameScopeFromJsxProp(key);\n                    vnode_setProp(vNewNode, HANDLER_PREFIX + ':' + scope + ':' + eventName, value);\n                    if (eventName) {\n                        registerQwikLoaderEvent(eventName);\n                    }\n                    needsQDispatchEventPatch = true;\n                    continue;\n                }\n                if (key === 'ref') {\n                    if (isSignal(value)) {\n                        value.value = element;\n                        continue;\n                    }\n                    else if (typeof value === 'function') {\n                        value(element);\n                        continue;\n                    }\n                }\n                if (isSignal(value)) {\n                    const signalData = new EffectData({\n                        $scopedStyleIdPrefix$: scopedStyleIdPrefix,\n                        $isConst$: true,\n                    });\n                    value = trackSignal(() => value.value, vNewNode, key, container, signalData);\n                }\n                if (key === dangerouslySetInnerHTML) {\n                    element.innerHTML = value;\n                    element.setAttribute(QContainerAttr, QContainerValue.HTML);\n                    continue;\n                }\n                if (elementName === 'textarea' && key === 'value') {\n                    if (typeof value !== 'string') {\n                        if (isDev) {\n                            throwErrorAndStop('The value of the textarea must be a string');\n                        }\n                        continue;\n                    }\n                    element.value = escapeHTML(value);\n                    continue;\n                }\n                value = serializeAttribute(key, value, scopedStyleIdPrefix);\n                if (value != null) {\n                    element.setAttribute(key, String(value));\n                }\n            }\n        }\n        const key = jsx.key;\n        if (key) {\n            element.setAttribute(ELEMENT_KEY, key);\n            vnode_setProp(vNewNode, ELEMENT_KEY, key);\n        }\n        // append class attribute if styleScopedId exists and there is no class attribute\n        const classAttributeExists = hasClassAttr(jsx.varProps) || (jsx.constProps && hasClassAttr(jsx.constProps));\n        if (!classAttributeExists && scopedStyleIdPrefix) {\n            element.setAttribute('class', scopedStyleIdPrefix);\n        }\n        vnode_insertBefore(journal, vParent, vNewNode, vCurrent);\n        return needsQDispatchEventPatch;\n    }\n    function createElementWithNamespace(elementName) {\n        const domParentVNode = vnode_getDomParentVNode(vParent);\n        const { elementNamespace, elementNamespaceFlag } = getNewElementNamespaceData(domParentVNode, elementName);\n        const element = container.document.createElementNS(elementNamespace, elementName);\n        vNewNode = vnode_newElement(element, elementName);\n        vNewNode[VNodeProps.flags] |= elementNamespaceFlag;\n        return element;\n    }\n    function expectElement(jsx, elementName) {\n        const isSameElementName = vCurrent && vnode_isElementVNode(vCurrent) && elementName === vnode_getElementName(vCurrent);\n        const jsxKey = jsx.key;\n        let needsQDispatchEventPatch = false;\n        if (!isSameElementName || jsxKey !== getKey(vCurrent)) {\n            // So we have a key and it does not match the current node.\n            // We need to do a forward search to find it.\n            // The complication is that once we start taking nodes out of order we can't use `vnode_getNextSibling`\n            vNewNode = retrieveChildWithKey(elementName, jsxKey);\n            if (vNewNode === null) {\n                // No existing node with key exists, just create a new one.\n                needsQDispatchEventPatch = createNewElement(jsx, elementName);\n            }\n            else {\n                // Existing keyed node\n                vnode_insertBefore(journal, vParent, vNewNode, vCurrent);\n            }\n        }\n        // reconcile attributes\n        const jsxAttrs = [];\n        const props = jsx.varProps;\n        for (const key in props) {\n            let value = props[key];\n            value = serializeAttribute(key, value, scopedStyleIdPrefix);\n            if (value != null) {\n                mapArray_set(jsxAttrs, key, value, 0);\n            }\n        }\n        if (jsxKey !== null) {\n            mapArray_set(jsxAttrs, ELEMENT_KEY, jsxKey, 0);\n        }\n        const vNode = (vNewNode || vCurrent);\n        needsQDispatchEventPatch = setBulkProps(vNode, jsxAttrs) || needsQDispatchEventPatch;\n        if (needsQDispatchEventPatch) {\n            // Event handler needs to be patched onto the element.\n            const element = vnode_getNode(vNode);\n            if (!element.qDispatchEvent) {\n                element.qDispatchEvent = (event, scope) => {\n                    const eventName = event.type;\n                    const eventProp = ':' + scope.substring(1) + ':' + eventName;\n                    const qrls = [\n                        vnode_getProp(vNode, eventProp, null),\n                        vnode_getProp(vNode, HANDLER_PREFIX + eventProp, null),\n                    ];\n                    let returnValue = false;\n                    qrls.flat(2).forEach((qrl) => {\n                        if (qrl) {\n                            const value = qrl(event, element);\n                            returnValue = returnValue || value === true;\n                        }\n                    });\n                    return returnValue;\n                };\n            }\n        }\n    }\n    /** @param tag Returns true if `qDispatchEvent` needs patching */\n    function setBulkProps(vnode, srcAttrs) {\n        vnode_ensureElementInflated(vnode);\n        const dstAttrs = vnode;\n        let srcIdx = 0;\n        const srcLength = srcAttrs.length;\n        let dstIdx = ElementVNodeProps.PROPS_OFFSET;\n        let dstLength = dstAttrs.length;\n        let srcKey = srcIdx < srcLength ? srcAttrs[srcIdx++] : null;\n        let dstKey = dstIdx < dstLength ? dstAttrs[dstIdx++] : null;\n        let patchEventDispatch = false;\n        const record = (key, value) => {\n            if (key.startsWith(':')) {\n                vnode_setProp(vnode, key, value);\n                return;\n            }\n            if (key === 'ref') {\n                const element = vnode_getNode(vnode);\n                if (isSignal(value)) {\n                    value.value = element;\n                    return;\n                }\n                else if (typeof value === 'function') {\n                    value(element);\n                    return;\n                }\n            }\n            if (isSignal(value)) {\n                value = untrack(() => value.value);\n            }\n            vnode_setAttr(journal, vnode, key, value);\n            if (value === null) {\n                // if we set `null` than attribute was removed and we need to shorten the dstLength\n                dstLength = dstAttrs.length;\n            }\n        };\n        const recordJsxEvent = (key, value) => {\n            const eventName = getEventNameFromJsxProp(key);\n            if (eventName) {\n                const scope = getEventNameScopeFromJsxProp(key);\n                record(':' + scope + ':' + eventName, value);\n            }\n            // add an event attr with empty value for qwikloader element selector.\n            // We don't need value here. For ssr this value is a QRL,\n            // but for CSR value should be just empty\n            const htmlEvent = convertEventNameFromJsxPropToHtmlAttr(key);\n            if (htmlEvent) {\n                record(htmlEvent, '');\n            }\n            // register an event for qwik loader\n            if (eventName) {\n                registerQwikLoaderEvent(eventName);\n            }\n        };\n        while (srcKey !== null || dstKey !== null) {\n            if (dstKey?.startsWith(HANDLER_PREFIX) || dstKey == ELEMENT_KEY) {\n                // These are a special keys which we use to mark the event handlers as immutable or\n                // element key we need to ignore them.\n                dstIdx++; // skip the destination value, we don't care about it.\n                dstKey = dstIdx < dstLength ? dstAttrs[dstIdx++] : null;\n            }\n            else if (srcKey == null) {\n                // Source has more keys, so we need to remove them from destination\n                if (dstKey && isHtmlAttributeAnEventName(dstKey)) {\n                    patchEventDispatch = true;\n                    dstIdx++;\n                }\n                else {\n                    record(dstKey, null);\n                    dstIdx--;\n                }\n                dstKey = dstIdx < dstLength ? dstAttrs[dstIdx++] : null;\n            }\n            else if (dstKey == null) {\n                // Destination has more keys, so we need to insert them from source.\n                const isEvent = isJsxPropertyAnEventName(srcKey);\n                if (isEvent) {\n                    // Special handling for events\n                    patchEventDispatch = true;\n                    recordJsxEvent(srcKey, srcAttrs[srcIdx]);\n                }\n                else {\n                    record(srcKey, srcAttrs[srcIdx]);\n                }\n                srcIdx++;\n                srcKey = srcIdx < srcLength ? srcAttrs[srcIdx++] : null;\n            }\n            else if (srcKey == dstKey) {\n                const srcValue = srcAttrs[srcIdx++];\n                const dstValue = dstAttrs[dstIdx++];\n                if (srcValue !== dstValue) {\n                    record(dstKey, srcValue);\n                }\n                srcKey = srcIdx < srcLength ? srcAttrs[srcIdx++] : null;\n                dstKey = dstIdx < dstLength ? dstAttrs[dstIdx++] : null;\n            }\n            else if (srcKey < dstKey) {\n                // Destination is missing the key, so we need to insert it.\n                if (isJsxPropertyAnEventName(srcKey)) {\n                    // Special handling for events\n                    patchEventDispatch = true;\n                    recordJsxEvent(srcKey, srcAttrs[srcIdx]);\n                }\n                else {\n                    record(srcKey, srcAttrs[srcIdx]);\n                }\n                srcIdx++;\n                // advance srcValue\n                srcKey = srcIdx < srcLength ? srcAttrs[srcIdx++] : null;\n                // we need to increment dstIdx too, because we added destination key and value to the VNode\n                // and dstAttrs is a reference to the VNode\n                dstIdx++;\n                dstKey = dstIdx < dstLength ? dstAttrs[dstIdx++] : null;\n            }\n            else {\n                // Source is missing the key, so we need to remove it from destination.\n                if (isHtmlAttributeAnEventName(dstKey)) {\n                    patchEventDispatch = true;\n                    dstIdx++;\n                }\n                else {\n                    record(dstKey, null);\n                    dstIdx--;\n                }\n                dstKey = dstIdx < dstLength ? dstAttrs[dstIdx++] : null;\n            }\n        }\n        return patchEventDispatch;\n    }\n    function registerQwikLoaderEvent(eventName) {\n        const window = container.document.defaultView;\n        if (window) {\n            (window.qwikevents || (window.qwikevents = [])).push(eventName);\n        }\n    }\n    /**\n     * Retrieve the child with the given key.\n     *\n     * By retrieving the child with the given key we are effectively removing it from the list of\n     * future elements. This means that we can't just use `vnode_getNextSibling` to find the next\n     * instead we have to keep track of the elements we have already seen.\n     *\n     * We call this materializing the elements.\n     *\n     * `vSiblingsIdx`:\n     *\n     * - -1: Not materialized\n     * - Positive number - the index of the next element in the `vSiblings` array.\n     *\n     * By retrieving the child with the given key we are effectively removing it from the list (hence\n     * we need to splice the `vSiblings` array).\n     *\n     * @param key\n     * @returns Array where: (see: `SiblingsArray`)\n     *\n     *   - Idx%3 == 0 nodeName\n     *   - Idx%3 == 1 key\n     *   - Idx%3 == 2 vNode\n     */\n    function retrieveChildWithKey(nodeName, key) {\n        let vNodeWithKey = null;\n        if (vSiblingsIdx === -1) {\n            // it is not materialized; so materialize it.\n            vSiblings = [];\n            vSiblingsIdx = 0;\n            let vNode = vCurrent;\n            while (vNode) {\n                const name = vnode_isElementVNode(vNode) ? vnode_getElementName(vNode) : null;\n                const vKey = getKey(vNode) || getComponentHash(vNode, container.$getObjectById$);\n                if (vNodeWithKey === null && vKey == key && name == nodeName) {\n                    vNodeWithKey = vNode;\n                }\n                else {\n                    // we only add the elements which we did not find yet.\n                    vSiblings.push(name, vKey, vNode);\n                }\n                vNode = vnode_getNextSibling(vNode);\n            }\n        }\n        else {\n            for (let idx = vSiblingsIdx; idx < vSiblings.length; idx += SiblingsArray.Size) {\n                const name = vSiblings[idx + SiblingsArray.Name];\n                const vKey = vSiblings[idx + SiblingsArray.Key];\n                if (vKey === key && name === nodeName) {\n                    vNodeWithKey = vSiblings[idx + SiblingsArray.VNode];\n                    // remove the node from the siblings array\n                    vSiblings?.splice(idx, SiblingsArray.Size);\n                    break;\n                }\n            }\n        }\n        return vNodeWithKey;\n    }\n    function expectVirtual(type, jsxKey) {\n        if (vCurrent &&\n            vnode_isVirtualVNode(vCurrent) &&\n            vnode_getProp(vCurrent, ELEMENT_KEY, null) === jsxKey) {\n            // All is good.\n            return;\n        }\n        else if (jsxKey !== null) {\n            // We have a key find it\n            vNewNode = retrieveChildWithKey(null, jsxKey);\n            if (vNewNode != null) {\n                // We found it, move it up.\n                vnode_insertBefore(journal, vParent, (vNewNode = vnode_newVirtual()), vCurrent && getInsertBefore());\n                return;\n            }\n        }\n        // Did not find it, insert a new one.\n        vnode_insertBefore(journal, vParent, (vNewNode = vnode_newVirtual()), vCurrent && getInsertBefore());\n        vnode_setProp(vNewNode, ELEMENT_KEY, jsxKey);\n        isDev && vnode_setProp((vNewNode || vCurrent), DEBUG_TYPE, type);\n    }\n    function expectComponent(component) {\n        const componentMeta = component[SERIALIZABLE_STATE];\n        let host = (vNewNode || vCurrent);\n        if (componentMeta) {\n            const jsxProps = jsxValue.props;\n            // QComponent\n            let shouldRender = false;\n            const [componentQRL] = componentMeta;\n            const componentHash = componentQRL.$hash$;\n            const vNodeComponentHash = getComponentHash(host, container.$getObjectById$);\n            const lookupKey = jsxValue.key || componentHash;\n            const vNodeLookupKey = getKey(host) || vNodeComponentHash;\n            const lookupKeysAreEqual = lookupKey === vNodeLookupKey;\n            const hashesAreEqual = componentHash === vNodeComponentHash;\n            if (!lookupKeysAreEqual) {\n                // See if we already have this component later on.\n                vNewNode = retrieveChildWithKey(null, lookupKey);\n                if (vNewNode) {\n                    // We found the component, move it up.\n                    vnode_insertBefore(journal, vParent, vNewNode, vCurrent);\n                }\n                else {\n                    // We did not find the component, create it.\n                    insertNewComponent(host, componentQRL, jsxProps);\n                }\n                host = vNewNode;\n                shouldRender = true;\n            }\n            else if (!hashesAreEqual) {\n                insertNewComponent(host, componentQRL, jsxProps);\n                if (vNewNode) {\n                    if (host) {\n                        // TODO(varixo): not sure why we need to copy flags here.\n                        vNewNode[VNodeProps.flags] = host[VNodeProps.flags];\n                    }\n                    host = vNewNode;\n                    shouldRender = true;\n                }\n            }\n            if (host) {\n                const vNodeProps = vnode_getProp(host, ELEMENT_PROPS, container.$getObjectById$);\n                shouldRender = shouldRender || propsDiffer(jsxProps, vNodeProps);\n                if (shouldRender) {\n                    container.$scheduler$(ChoreType.COMPONENT, host, componentQRL, jsxProps);\n                }\n            }\n            jsxValue.children != null && descendContentToProject(jsxValue.children, host);\n        }\n        else {\n            // Inline Component\n            vnode_insertBefore(journal, vParent, (vNewNode = vnode_newVirtual()), vCurrent && getInsertBefore());\n            isDev && vnode_setProp(vNewNode, DEBUG_TYPE, VirtualType.InlineComponent);\n            vnode_setProp(vNewNode, ELEMENT_PROPS, jsxValue.props);\n            host = vNewNode;\n            let component$Host = host;\n            // Find the closest component host which has `OnRender` prop.\n            while (component$Host &&\n                (vnode_isVirtualVNode(component$Host)\n                    ? vnode_getProp(component$Host, OnRenderProp, null) === null\n                    : true)) {\n                component$Host = vnode_getParent(component$Host);\n            }\n            const jsxOutput = executeComponent2(container, host, (component$Host || container.rootVNode), component, jsxValue.props);\n            asyncQueue.push(jsxOutput, host);\n        }\n    }\n    function insertNewComponent(host, componentQRL, jsxProps) {\n        if (host) {\n            clearVNodeEffectDependencies(host);\n        }\n        vnode_insertBefore(journal, vParent, (vNewNode = vnode_newVirtual()), vCurrent && getInsertBefore());\n        isDev && vnode_setProp(vNewNode, DEBUG_TYPE, VirtualType.Component);\n        container.setHostProp(vNewNode, OnRenderProp, componentQRL);\n        container.setHostProp(vNewNode, ELEMENT_PROPS, jsxProps);\n        container.setHostProp(vNewNode, ELEMENT_KEY, jsxValue.key);\n        // rewrite slot props to the new node\n        if (host) {\n            for (let i = vnode_getPropStartIndex(host); i < host.length; i = i + 2) {\n                const prop = host[i];\n                if (isSlotProp(prop)) {\n                    const value = host[i + 1];\n                    container.setHostProp(vNewNode, prop, value);\n                }\n            }\n        }\n    }\n    function expectText(text) {\n        if (vCurrent !== null) {\n            const type = vnode_getType(vCurrent);\n            if (type === 3 /* Text */) {\n                if (text !== vnode_getText(vCurrent)) {\n                    vnode_setText(journal, vCurrent, text);\n                    return;\n                }\n                return;\n            }\n        }\n        vnode_insertBefore(journal, vParent, (vNewNode = vnode_newText(container.document.createTextNode(text), text)), vCurrent);\n    }\n};\nexport const isQStyleVNode = (vNode) => {\n    return (vnode_isElementVNode(vNode) &&\n        vnode_getElementName(vNode) === 'style' &&\n        vnode_getAttr(vNode, QStyle) !== null);\n};\n/**\n * Retrieve the key from the VNode.\n *\n * @param vNode - VNode to retrieve the key from\n * @returns Key\n */\nfunction getKey(vNode) {\n    if (vNode == null) {\n        return null;\n    }\n    return vnode_getProp(vNode, ELEMENT_KEY, null);\n}\n/**\n * Retrieve the component hash from the VNode.\n *\n * @param vNode - VNode to retrieve the key from\n * @param getObject - Function to retrieve the object by id for QComponent QRL\n * @returns Hash\n */\nfunction getComponentHash(vNode, getObject) {\n    if (vNode == null) {\n        return null;\n    }\n    const qrl = vnode_getProp(vNode, OnRenderProp, getObject);\n    return qrl ? qrl.$hash$ : null;\n}\n/**\n * Marker class for JSX projection.\n *\n * Assume you have component like so\n *\n * ```\n * <SomeComponent>\n *   some-text\n *   <span q:slot=\"name\">some more text</span>\n *   more-text\n * </SomeComponent>\n * ```\n *\n * Before the `<SomeCompetent/>` is processed its children are transformed into:\n *\n * ```\n *   <Projection q:slot=\"\">\n *     some-text\n *     more-text\n *   </Projection>\n *   <Projection q:slot=\"name\">\n *     <span q:slot=\"name\">some more text</span>\n *   </Projection>\n * ```\n */\nfunction Projection() { }\nfunction propsDiffer(src, dst) {\n    if (!src || !dst) {\n        return true;\n    }\n    let srcKeys = removeChildrenKey(Object.keys(src));\n    let dstKeys = removeChildrenKey(Object.keys(dst));\n    if (srcKeys.length !== dstKeys.length) {\n        return true;\n    }\n    srcKeys = srcKeys.sort();\n    dstKeys = dstKeys.sort();\n    for (let idx = 0; idx < srcKeys.length; idx++) {\n        const srcKey = srcKeys[idx];\n        const dstKey = dstKeys[idx];\n        if (srcKey !== dstKey || src[srcKey] !== dst[dstKey]) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction removeChildrenKey(keys) {\n    const childrenIdx = keys.indexOf('children');\n    if (childrenIdx !== -1) {\n        keys.splice(childrenIdx, 1);\n    }\n    return keys;\n}\n/**\n * If vnode is removed, it is necessary to release all subscriptions associated with it.\n *\n * This function will traverse the vnode tree in depth-first order and release all subscriptions.\n *\n * The function takes into account:\n *\n * - Projection nodes by not recursing into them.\n * - Component nodes by recursing into the component content nodes (which may be projected).\n */\nexport function cleanup(container, vNode) {\n    let vCursor = vNode;\n    // Depth first traversal\n    if (vnode_isTextVNode(vNode)) {\n        // Text nodes don't have subscriptions or children;\n        return;\n    }\n    let vParent = null;\n    do {\n        const type = vCursor[VNodeProps.flags];\n        if (type & VNodeFlags.ELEMENT_OR_VIRTUAL_MASK) {\n            // Only elements and virtual nodes need to be traversed for children\n            if (type & VNodeFlags.Virtual) {\n                // Only virtual nodes have subscriptions\n                clearVNodeEffectDependencies(vCursor);\n                markVNodeAsDeleted(vNode, vParent, vCursor);\n                const seq = container.getHostProp(vCursor, ELEMENT_SEQ);\n                if (seq) {\n                    for (let i = 0; i < seq.length; i++) {\n                        const obj = seq[i];\n                        if (isTask(obj)) {\n                            const task = obj;\n                            clearSubscriberEffectDependencies(task);\n                            if (task.$flags$ & TaskFlags.VISIBLE_TASK) {\n                                container.$scheduler$(ChoreType.CLEANUP_VISIBLE, task);\n                            }\n                            else {\n                                cleanupTask(task);\n                            }\n                        }\n                    }\n                }\n            }\n            const isComponent = type & VNodeFlags.Virtual &&\n                vnode_getProp(vCursor, OnRenderProp, null) !== null;\n            if (isComponent) {\n                // SPECIAL CASE: If we are a component, we need to descend into the projected content and release the content.\n                const attrs = vCursor;\n                for (let i = VirtualVNodeProps.PROPS_OFFSET; i < attrs.length; i = i + 2) {\n                    const key = attrs[i];\n                    if (!isParentSlotProp(key) && isSlotProp(key)) {\n                        const value = attrs[i + 1];\n                        if (value) {\n                            attrs[i + 1] = null; // prevent infinite loop\n                            const projection = typeof value === 'string'\n                                ? vnode_locate(container.rootVNode, value)\n                                : value;\n                            let projectionChild = vnode_getFirstChild(projection);\n                            while (projectionChild) {\n                                cleanup(container, projectionChild);\n                                projectionChild = vnode_getNextSibling(projectionChild);\n                            }\n                            cleanupStaleUnclaimedProjection(container.$journal$, projection);\n                        }\n                    }\n                }\n            }\n            const isProjection = type & VNodeFlags.Virtual && vnode_getProp(vCursor, QSlot, null) !== null;\n            // Descend into children\n            if (!isProjection) {\n                // Only if it is not a projection\n                const vFirstChild = vnode_getFirstChild(vCursor);\n                if (vFirstChild) {\n                    vCursor = vFirstChild;\n                    continue;\n                }\n            }\n            else if (vCursor === vNode) {\n                /**\n                 * If it is a projection and we are at the root, then we should only walk the children to\n                 * materialize the projection content. This is because we could have references in the vnode\n                 * refs map which need to be materialized before cleanup.\n                 */\n                const vFirstChild = vnode_getFirstChild(vCursor);\n                if (vFirstChild) {\n                    vnode_walkVNode(vFirstChild);\n                    return;\n                }\n            }\n        }\n        // Out of children\n        if (vCursor === vNode) {\n            // we are where we started, this means that vNode has no children, so we are done.\n            return;\n        }\n        // Out of children, go to next sibling\n        const vNextSibling = vnode_getNextSibling(vCursor);\n        if (vNextSibling) {\n            vCursor = vNextSibling;\n            continue;\n        }\n        // Out of siblings, go to parent\n        vParent = vnode_getParent(vCursor);\n        while (vParent) {\n            if (vParent === vNode) {\n                // We are back where we started, we are done.\n                return;\n            }\n            const vNextParentSibling = vnode_getNextSibling(vParent);\n            if (vNextParentSibling) {\n                vCursor = vNextParentSibling;\n                break;\n            }\n            vParent = vnode_getParent(vParent);\n        }\n        if (vParent == null) {\n            // We are done.\n            return;\n        }\n    } while (true);\n}\nfunction cleanupStaleUnclaimedProjection(journal, projection) {\n    // we are removing a node where the projection would go after slot render.\n    // This is not needed, so we need to cleanup still unclaimed projection\n    const projectionParent = vnode_getParent(projection);\n    if (projectionParent) {\n        const projectionParentType = projectionParent[VNodeProps.flags];\n        if (projectionParentType & VNodeFlags.Element &&\n            vnode_getElementName(projectionParent) === QTemplate) {\n            // if parent is the q:template element then projection is still unclaimed - remove it\n            vnode_remove(journal, projectionParent, projection, true);\n        }\n    }\n}\nfunction markVNodeAsDeleted(vNode, vParent, vCursor) {\n    /**\n     * Marks vCursor as deleted, but only if it is not a projection. We need to do this to prevent\n     * chores from running after the vnode is removed. (for example signal subscriptions)\n     */\n    if (vNode !== vCursor) {\n        vCursor[VNodeProps.flags] |= VNodeFlags.Deleted;\n    }\n    else {\n        const currentVParent = vParent || vnode_getParent(vNode);\n        const isParentProjection = currentVParent && vnode_getProp(currentVParent, QSlot, null) !== null;\n        if (!isParentProjection) {\n            vCursor[VNodeProps.flags] |= VNodeFlags.Deleted;\n        }\n    }\n}\n/**\n * This marks the property as immutable. It is needed for the QRLs so that QwikLoader can get a hold\n * of them. This character must be `:` so that the `vnode_getAttr` can ignore them.\n */\nconst HANDLER_PREFIX = ':';\nlet count = 0;\nvar SiblingsArray;\n(function (SiblingsArray) {\n    SiblingsArray[SiblingsArray[\"Name\"] = 0] = \"Name\";\n    SiblingsArray[SiblingsArray[\"Key\"] = 1] = \"Key\";\n    SiblingsArray[SiblingsArray[\"VNode\"] = 2] = \"VNode\";\n    SiblingsArray[SiblingsArray[\"Size\"] = 3] = \"Size\";\n    SiblingsArray[SiblingsArray[\"NextVNode\"] = 5] = \"NextVNode\";\n})(SiblingsArray || (SiblingsArray = {}));\n//# sourceMappingURL=data:application/json;base64,","/** @file Public APIs for the SSR */\nimport { assertTrue } from '../../error/assert';\nimport { getPlatform } from '../../platform/platform';\nimport { ERROR_CONTEXT, isRecoverable } from '../../render/error-handling';\nimport { EMPTY_ARRAY } from '../../util/flyweight';\nimport { throwErrorAndStop } from '../../util/log';\nimport { ELEMENT_PROPS, ELEMENT_SEQ, ELEMENT_SEQ_IDX, getQFuncs, OnRenderProp, Q_PROPS_SEPARATOR, QBaseAttr, QContainerAttr, QContainerSelector, QCtxAttr, QInstanceAttr, QScopedStyle, QSlotParent, QStyle, QStyleSelector, QSubscribers, USE_ON_LOCAL_SEQ_IDX, } from '../../util/markers';\nimport { isPromise } from '../../util/promises';\nimport { isSlotProp } from '../../util/prop';\nimport { qDev } from '../../util/qdev';\nimport { ChoreType } from '../shared/scheduler';\nimport { addComponentStylePrefix, convertScopedStyleIdsToArray, convertStyleIdsToString, } from '../shared/scoped-styles';\nimport { _SharedContainer } from '../shared/shared-container';\nimport { inflateQRL, parseQRL, wrapDeserializerProxy } from '../shared/shared-serialization';\nimport {} from '../shared/types';\nimport { processVNodeData } from './process-vnode-data';\nimport { VNodeFlags, VNodeProps, } from './types';\nimport { VNodeJournalOpCode, mapArray_get, mapArray_set, vnode_applyJournal, vnode_getDOMChildNodes, vnode_getDomParent, vnode_getParent, vnode_getProp, vnode_getPropStartIndex, vnode_insertBefore, vnode_isVirtualVNode, vnode_locate, vnode_newElement, vnode_newUnMaterializedElement, vnode_setProp, } from './vnode';\nimport { vnode_diff } from './vnode-diff';\n/** @public */\nexport function getDomContainer(element) {\n    const qContainerElement = _getQContainerElement(element);\n    if (!qContainerElement) {\n        throwErrorAndStop('Unable to find q:container.');\n    }\n    return getDomContainerFromQContainerElement(qContainerElement);\n}\nexport function getDomContainerFromQContainerElement(qContainerElement) {\n    const qElement = qContainerElement;\n    let container = qElement.qContainer;\n    if (!container) {\n        container = new DomContainer(qElement);\n        const containerAttributes = {};\n        if (qElement) {\n            const attrs = qElement.attributes;\n            if (attrs) {\n                for (let index = 0; index < attrs.length; index++) {\n                    const attr = attrs[index];\n                    if (attr.name === Q_PROPS_SEPARATOR) {\n                        continue;\n                    }\n                    containerAttributes[attr.name] = attr.value;\n                }\n            }\n        }\n        container.$serverData$ = { containerAttributes };\n        qElement.qContainer = container;\n    }\n    return container;\n}\n/** @internal */\nexport function _getQContainerElement(element) {\n    const qContainerElement = Array.isArray(element)\n        ? vnode_getDomParent(element)\n        : element;\n    return qContainerElement.closest(QContainerSelector);\n}\nexport const isDomContainer = (container) => {\n    return container instanceof DomContainer;\n};\n/** @internal */\nexport class DomContainer extends _SharedContainer {\n    constructor(element) {\n        super(() => this.scheduleRender(), () => vnode_applyJournal(this.$journal$), {}, element.getAttribute('q:locale'));\n        this.renderDone = null;\n        this.$storeProxyMap$ = new WeakMap();\n        this.$styleIds$ = null;\n        this.$vnodeLocate$ = (id) => vnode_locate(this.rootVNode, id);\n        this.$renderCount$ = 0;\n        this.$getObjectById$ = (id) => {\n            if (typeof id === 'string') {\n                id = parseFloat(id);\n            }\n            assertTrue(id < this.$rawStateData$.length, `Invalid reference: ${id} < ${this.$rawStateData$.length}`);\n            return this.stateData[id];\n        };\n        this.qContainer = element.getAttribute(QContainerAttr);\n        if (!this.qContainer) {\n            throwErrorAndStop(\"Element must have 'q:container' attribute.\");\n        }\n        this.$journal$ = [\n            // The first time we render we need to hoist the styles.\n            // (Meaning we need to move all styles from component inline to <head>)\n            // We bulk move all of the styles, because the expensive part is\n            // for the browser to recompute the styles, (not the actual DOM manipulation.)\n            // By moving all of them at once we can minimize the reflow.\n            VNodeJournalOpCode.HoistStyles,\n            element.ownerDocument,\n        ];\n        this.document = element.ownerDocument;\n        this.element = element;\n        this.qBase = element.getAttribute(QBaseAttr);\n        this.$instanceHash$ = element.getAttribute(QInstanceAttr);\n        // this.containerState = createContainerState(element, this.qBase);\n        this.qManifestHash = element.getAttribute('q:manifest-hash');\n        this.rootVNode = vnode_newUnMaterializedElement(this.element);\n        // These are here to initialize all properties at once for single class transition\n        this.$rawStateData$ = null;\n        this.stateData = null;\n        const document = this.element.ownerDocument;\n        if (!document.qVNodeData) {\n            processVNodeData(document);\n        }\n        this.$rawStateData$ = [];\n        this.stateData = [];\n        const qwikStates = element.querySelectorAll('script[type=\"qwik/state\"]');\n        if (qwikStates.length !== 0) {\n            const lastState = qwikStates[qwikStates.length - 1];\n            this.$rawStateData$ = JSON.parse(lastState.textContent);\n            this.stateData = wrapDeserializerProxy(this, this.$rawStateData$);\n        }\n        this.$qFuncs$ = getQFuncs(document, this.$instanceHash$) || EMPTY_ARRAY;\n    }\n    $setRawState$(id, vParent) {\n        this.stateData[id] = vParent;\n    }\n    parseQRL(qrl) {\n        return inflateQRL(this, parseQRL(qrl));\n    }\n    processJsx(host, jsx) {\n        // console.log('>>>> processJsx', String(host));\n        const styleScopedId = this.getHostProp(host, QScopedStyle);\n        return vnode_diff(this, jsx, host, addComponentStylePrefix(styleScopedId));\n    }\n    handleError(err, host) {\n        if (qDev) {\n            // Clean vdom\n            if (typeof document !== 'undefined') {\n                const vHost = host;\n                const errorDiv = document.createElement('errored-host');\n                if (err && err instanceof Error) {\n                    errorDiv.props = { error: err };\n                }\n                errorDiv.setAttribute('q:key', '_error_');\n                const journal = [];\n                vnode_getDOMChildNodes(journal, vHost).forEach((child) => errorDiv.appendChild(child));\n                const vErrorDiv = vnode_newElement(errorDiv, 'error-host');\n                vnode_insertBefore(journal, vHost, vErrorDiv, null);\n                vnode_applyJournal(journal);\n            }\n            if (err && err instanceof Error) {\n                if (!('hostElement' in err)) {\n                    err['hostElement'] = host;\n                }\n            }\n            if (!isRecoverable(err)) {\n                throw err;\n            }\n        }\n        const errorStore = this.resolveContext(host, ERROR_CONTEXT);\n        if (!errorStore) {\n            throw err;\n        }\n        errorStore.error = err;\n    }\n    setContext(host, context, value) {\n        let ctx = this.getHostProp(host, QCtxAttr);\n        if (!ctx) {\n            this.setHostProp(host, QCtxAttr, (ctx = []));\n        }\n        mapArray_set(ctx, context.id, value, 0);\n    }\n    resolveContext(host, contextId) {\n        while (host) {\n            const ctx = this.getHostProp(host, QCtxAttr);\n            if (ctx) {\n                const value = mapArray_get(ctx, contextId.id, 0);\n                if (value) {\n                    return value;\n                }\n            }\n            host = this.getParentHost(host);\n        }\n        return undefined;\n    }\n    getParentHost(host) {\n        let vNode = vnode_getParent(host);\n        while (vNode) {\n            if (vnode_isVirtualVNode(vNode)) {\n                if (vnode_getProp(vNode, OnRenderProp, null) !== null) {\n                    return vNode;\n                }\n                // If virtual node, than it could be a slot so we need to read its parent.\n                const parent = vnode_getProp(vNode, QSlotParent, this.$vnodeLocate$);\n                if (parent) {\n                    vNode = parent;\n                    continue;\n                }\n            }\n            vNode = vnode_getParent(vNode);\n        }\n        return null;\n    }\n    setHostProp(host, name, value) {\n        const vNode = host;\n        vnode_setProp(vNode, name, value);\n    }\n    getHostProp(host, name) {\n        const vNode = host;\n        let getObjectById = null;\n        switch (name) {\n            case ELEMENT_SEQ:\n            case ELEMENT_PROPS:\n            case OnRenderProp:\n            case QCtxAttr:\n            case QSubscribers:\n                getObjectById = this.$getObjectById$;\n                break;\n            case ELEMENT_SEQ_IDX:\n            case USE_ON_LOCAL_SEQ_IDX:\n                getObjectById = parseInt;\n                break;\n        }\n        return vnode_getProp(vNode, name, getObjectById);\n    }\n    scheduleRender() {\n        this.$renderCount$++;\n        this.renderDone || (this.renderDone = getPlatform().nextTick(() => this.processChores()));\n        return this.renderDone;\n    }\n    processChores() {\n        let renderCount = this.$renderCount$;\n        const result = this.$scheduler$(ChoreType.WAIT_FOR_ALL);\n        if (isPromise(result)) {\n            return result.then(async () => {\n                while (renderCount !== this.$renderCount$) {\n                    renderCount = this.$renderCount$;\n                    await this.$scheduler$(ChoreType.WAIT_FOR_ALL);\n                }\n                this.renderDone = null;\n            });\n        }\n        if (renderCount !== this.$renderCount$) {\n            this.processChores();\n            return;\n        }\n        this.renderDone = null;\n    }\n    ensureProjectionResolved(vNode) {\n        if ((vNode[VNodeProps.flags] & VNodeFlags.Resolved) === 0) {\n            vNode[VNodeProps.flags] |= VNodeFlags.Resolved;\n            for (let i = vnode_getPropStartIndex(vNode); i < vNode.length; i = i + 2) {\n                const prop = vNode[i];\n                if (isSlotProp(prop)) {\n                    const value = vNode[i + 1];\n                    if (typeof value == 'string') {\n                        vNode[i + 1] = this.$vnodeLocate$(value);\n                    }\n                }\n            }\n        }\n    }\n    getSyncFn(id) {\n        const fn = this.$qFuncs$[id];\n        assertTrue(typeof fn === 'function', 'Invalid reference: ' + id);\n        return fn;\n    }\n    $appendStyle$(content, styleId, host, scoped) {\n        if (scoped) {\n            const scopedStyleIdsString = this.getHostProp(host, QScopedStyle);\n            const scopedStyleIds = new Set(convertScopedStyleIdsToArray(scopedStyleIdsString));\n            scopedStyleIds.add(styleId);\n            this.setHostProp(host, QScopedStyle, convertStyleIdsToString(scopedStyleIds));\n        }\n        if (this.$styleIds$ == null) {\n            this.$styleIds$ = new Set();\n            this.element.querySelectorAll(QStyleSelector).forEach((style) => {\n                this.$styleIds$.add(style.getAttribute(QStyle));\n            });\n        }\n        if (!this.$styleIds$.has(styleId)) {\n            this.$styleIds$.add(styleId);\n            const styleElement = this.document.createElement('style');\n            styleElement.setAttribute(QStyle, styleId);\n            styleElement.textContent = content;\n            this.$journal$.push(VNodeJournalOpCode.Insert, this.document.head, null, styleElement);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","import { dollar } from '../qrl/qrl.public';\n// <docs markdown=\"../readme.md#implicit$FirstArg\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#implicit$FirstArg instead)\n/**\n * Create a `____$(...)` convenience method from `___(...)`.\n *\n * It is very common for functions to take a lazy-loadable resource as a first argument. For this\n * reason, the Qwik Optimizer automatically extracts the first argument from any function which ends\n * in `$`.\n *\n * This means that `foo$(arg0)` and `foo($(arg0))` are equivalent with respect to Qwik Optimizer.\n * The former is just a shorthand for the latter.\n *\n * For example, these function calls are equivalent:\n *\n * - `component$(() => {...})` is same as `component($(() => {...}))`\n *\n * ```tsx\n * export function myApi(callback: QRL<() => void>): void {\n *   // ...\n * }\n *\n * export const myApi$ = implicit$FirstArg(myApi);\n * // type of myApi$: (callback: () => void): void\n *\n * // can be used as:\n * myApi$(() => console.log('callback'));\n *\n * // will be transpiled to:\n * // FILE: <current file>\n * myApi(qrl('./chunk-abc.js', 'callback'));\n *\n * // FILE: chunk-abc.js\n * export const callback = () => console.log('callback');\n * ```\n *\n * @param fn - A function that should have its first argument automatically `$`.\n * @public\n */\n// </docs>\nexport const implicit$FirstArg = (fn) => {\n    return function (first, ...rest) {\n        return fn.call(null, dollar(first), ...rest);\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wbGljaXRfZG9sbGFyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvaW1wbGljaXRfZG9sbGFyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQVksTUFBTSxtQkFBbUIsQ0FBQztBQUVyRCxtREFBbUQ7QUFDbkQseUNBQXlDO0FBQ3pDLGdEQUFnRDtBQUNoRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQ0c7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FDL0IsRUFBMkMsRUFDTCxFQUFFO0lBQ3hDLE9BQU8sVUFBVSxLQUFZLEVBQUUsR0FBRyxJQUFVO1FBQzFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDL0MsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZG9sbGFyLCB0eXBlIFFSTCB9IGZyb20gJy4uL3FybC9xcmwucHVibGljJztcblxuLy8gPGRvY3MgbWFya2Rvd249XCIuLi9yZWFkbWUubWQjaW1wbGljaXQkRmlyc3RBcmdcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjaW1wbGljaXQkRmlyc3RBcmcgaW5zdGVhZClcbi8qKlxuICogQ3JlYXRlIGEgYF9fX18kKC4uLilgIGNvbnZlbmllbmNlIG1ldGhvZCBmcm9tIGBfX18oLi4uKWAuXG4gKlxuICogSXQgaXMgdmVyeSBjb21tb24gZm9yIGZ1bmN0aW9ucyB0byB0YWtlIGEgbGF6eS1sb2FkYWJsZSByZXNvdXJjZSBhcyBhIGZpcnN0IGFyZ3VtZW50LiBGb3IgdGhpc1xuICogcmVhc29uLCB0aGUgUXdpayBPcHRpbWl6ZXIgYXV0b21hdGljYWxseSBleHRyYWN0cyB0aGUgZmlyc3QgYXJndW1lbnQgZnJvbSBhbnkgZnVuY3Rpb24gd2hpY2ggZW5kc1xuICogaW4gYCRgLlxuICpcbiAqIFRoaXMgbWVhbnMgdGhhdCBgZm9vJChhcmcwKWAgYW5kIGBmb28oJChhcmcwKSlgIGFyZSBlcXVpdmFsZW50IHdpdGggcmVzcGVjdCB0byBRd2lrIE9wdGltaXplci5cbiAqIFRoZSBmb3JtZXIgaXMganVzdCBhIHNob3J0aGFuZCBmb3IgdGhlIGxhdHRlci5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgdGhlc2UgZnVuY3Rpb24gY2FsbHMgYXJlIGVxdWl2YWxlbnQ6XG4gKlxuICogLSBgY29tcG9uZW50JCgoKSA9PiB7Li4ufSlgIGlzIHNhbWUgYXMgYGNvbXBvbmVudCgkKCgpID0+IHsuLi59KSlgXG4gKlxuICogYGBgdHN4XG4gKiBleHBvcnQgZnVuY3Rpb24gbXlBcGkoY2FsbGJhY2s6IFFSTDwoKSA9PiB2b2lkPik6IHZvaWQge1xuICogICAvLyAuLi5cbiAqIH1cbiAqXG4gKiBleHBvcnQgY29uc3QgbXlBcGkkID0gaW1wbGljaXQkRmlyc3RBcmcobXlBcGkpO1xuICogLy8gdHlwZSBvZiBteUFwaSQ6IChjYWxsYmFjazogKCkgPT4gdm9pZCk6IHZvaWRcbiAqXG4gKiAvLyBjYW4gYmUgdXNlZCBhczpcbiAqIG15QXBpJCgoKSA9PiBjb25zb2xlLmxvZygnY2FsbGJhY2snKSk7XG4gKlxuICogLy8gd2lsbCBiZSB0cmFuc3BpbGVkIHRvOlxuICogLy8gRklMRTogPGN1cnJlbnQgZmlsZT5cbiAqIG15QXBpKHFybCgnLi9jaHVuay1hYmMuanMnLCAnY2FsbGJhY2snKSk7XG4gKlxuICogLy8gRklMRTogY2h1bmstYWJjLmpzXG4gKiBleHBvcnQgY29uc3QgY2FsbGJhY2sgPSAoKSA9PiBjb25zb2xlLmxvZygnY2FsbGJhY2snKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBmbiAtIEEgZnVuY3Rpb24gdGhhdCBzaG91bGQgaGF2ZSBpdHMgZmlyc3QgYXJndW1lbnQgYXV0b21hdGljYWxseSBgJGAuXG4gKiBAcHVibGljXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCBpbXBsaWNpdCRGaXJzdEFyZyA9IDxGSVJTVCwgUkVTVCBleHRlbmRzIGFueVtdLCBSRVQ+KFxuICBmbjogKHFybDogUVJMPEZJUlNUPiwgLi4ucmVzdDogUkVTVCkgPT4gUkVUXG4pOiAoKHFybDogRklSU1QsIC4uLnJlc3Q6IFJFU1QpID0+IFJFVCkgPT4ge1xuICByZXR1cm4gZnVuY3Rpb24gKGZpcnN0OiBGSVJTVCwgLi4ucmVzdDogUkVTVCk6IFJFVCB7XG4gICAgcmV0dXJuIGZuLmNhbGwobnVsbCwgZG9sbGFyKGZpcnN0KSwgLi4ucmVzdCk7XG4gIH07XG59O1xuIl19","import { ComputedSignal, Signal, throwIfQRLNotResolved } from './v2-signal';\nexport const createSignal = (value) => {\n    return new Signal(null, value);\n};\nexport const createComputedSignal = (qrl) => {\n    throwIfQRLNotResolved(qrl);\n    return new ComputedSignal(null, qrl);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidjItc2lnbmFsLWFwaS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS92Mi9zaWduYWwvdjItc2lnbmFsLWFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUU1RSxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxLQUFXLEVBQUUsRUFBRTtJQUMxQyxPQUFPLElBQUksTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNqQyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUFJLEdBQWlCLEVBQUUsRUFBRTtJQUMzRCxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMzQixPQUFPLElBQUksY0FBYyxDQUFDLElBQUksRUFBRSxHQUEyQixDQUFDLENBQUM7QUFDL0QsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBRUkxJbnRlcm5hbCB9IGZyb20gJy4uLy4uL3FybC9xcmwtY2xhc3MnO1xuaW1wb3J0IHR5cGUgeyBRUkwgfSBmcm9tICcuLi8uLi9xcmwvcXJsLnB1YmxpYyc7XG5pbXBvcnQgeyBDb21wdXRlZFNpZ25hbCwgU2lnbmFsLCB0aHJvd0lmUVJMTm90UmVzb2x2ZWQgfSBmcm9tICcuL3YyLXNpZ25hbCc7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVTaWduYWwgPSAodmFsdWU/OiBhbnkpID0+IHtcbiAgcmV0dXJuIG5ldyBTaWduYWwobnVsbCwgdmFsdWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUNvbXB1dGVkU2lnbmFsID0gPFQ+KHFybDogUVJMPCgpID0+IFQ+KSA9PiB7XG4gIHRocm93SWZRUkxOb3RSZXNvbHZlZChxcmwpO1xuICByZXR1cm4gbmV3IENvbXB1dGVkU2lnbmFsKG51bGwsIHFybCBhcyBRUkxJbnRlcm5hbDwoKSA9PiBUPik7XG59O1xuIl19","import { implicit$FirstArg } from '../../util/implicit_dollar';\nimport { createSignal as _createSignal, createComputedSignal as _createComputedSignal, } from './v2-signal-api';\nexport { isSignal } from './v2-signal';\n/** @public */\nexport const createSignal = _createSignal;\n/** @public */\nexport const createComputedQrl = _createComputedSignal;\n/** @public */\nexport const createComputed$ = /*#__PURE__*/ implicit$FirstArg(createComputedQrl);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidjItc2lnbmFsLnB1YmxpYy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS92Mi9zaWduYWwvdjItc2lnbmFsLnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUUvRCxPQUFPLEVBQ0wsWUFBWSxJQUFJLGFBQWEsRUFDN0Isb0JBQW9CLElBQUkscUJBQXFCLEdBQzlDLE1BQU0saUJBQWlCLENBQUM7QUFFekIsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQWdDdkMsY0FBYztBQUNkLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FHckIsYUFBYSxDQUFDO0FBRWxCLGNBQWM7QUFDZCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBZ0QscUJBQXFCLENBQUM7QUFFcEcsY0FBYztBQUNkLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxhQUFhLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGltcGxpY2l0JEZpcnN0QXJnIH0gZnJvbSAnLi4vLi4vdXRpbC9pbXBsaWNpdF9kb2xsYXInO1xuaW1wb3J0IHR5cGUgeyBRUkwgfSBmcm9tICcuLi8uLi9xcmwvcXJsLnB1YmxpYyc7XG5pbXBvcnQge1xuICBjcmVhdGVTaWduYWwgYXMgX2NyZWF0ZVNpZ25hbCxcbiAgY3JlYXRlQ29tcHV0ZWRTaWduYWwgYXMgX2NyZWF0ZUNvbXB1dGVkU2lnbmFsLFxufSBmcm9tICcuL3YyLXNpZ25hbC1hcGknO1xuXG5leHBvcnQgeyBpc1NpZ25hbCB9IGZyb20gJy4vdjItc2lnbmFsJztcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVhZG9ubHlTaWduYWw8VCA9IHVua25vd24+IHtcbiAgcmVhZG9ubHkgdmFsdWU6IFQ7XG59XG5cbi8qKlxuICogQSBzaWduYWwgaXMgYSByZWFjdGl2ZSB2YWx1ZSB3aGljaCBjYW4gYmUgcmVhZCBhbmQgd3JpdHRlbi4gV2hlbiB0aGUgc2lnbmFsIGlzIHdyaXR0ZW4sIGFsbCB0YXNrc1xuICogd2hpY2ggYXJlIHRyYWNraW5nIHRoZSBzaWduYWwgd2lsbCBiZSByZS1ydW4gYW5kIGFsbCBjb21wb25lbnRzIHRoYXQgcmVhZCB0aGUgc2lnbmFsIHdpbGwgYmVcbiAqIHJlLXJlbmRlcmVkLlxuICpcbiAqIEZ1cnRoZXJtb3JlLCB3aGVuIGEgc2lnbmFsIHZhbHVlIGlzIHBhc3NlZCBhcyBhIHByb3AgdG8gYSBjb21wb25lbnQsIHRoZSBvcHRpbWl6ZXIgd2lsbFxuICogYXV0b21hdGljYWxseSBmb3J3YXJkIHRoZSBzaWduYWwuIFRoaXMgbWVhbnMgdGhhdCBgcmV0dXJuIDxkaXYgdGl0bGU9e3NpZ25hbC52YWx1ZX0+aGk8L2Rpdj5gXG4gKiB3aWxsIHVwZGF0ZSB0aGUgYHRpdGxlYCBhdHRyaWJ1dGUgd2hlbiB0aGUgc2lnbmFsIGNoYW5nZXMgd2l0aG91dCBoYXZpbmcgdG8gcmUtcmVuZGVyIHRoZVxuICogY29tcG9uZW50LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTaWduYWw8VCA9IGFueT4gZXh0ZW5kcyBSZWFkb25seVNpZ25hbDxUPiB7XG4gIHZhbHVlOiBUO1xufVxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGludGVyZmFjZSBDb21wdXRlZFNpZ25hbDxUPiBleHRlbmRzIFJlYWRvbmx5U2lnbmFsPFQ+IHtcbiAgLyoqXG4gICAqIFVzZSB0aGlzIHRvIGZvcmNlIHJlY2FsY3VsYXRpb24gYW5kIHJ1bm5pbmcgc3Vic2NyaWJlcnMsIGZvciBleGFtcGxlIHdoZW4gdGhlIGNhbGN1bGF0ZWQgdmFsdWVcbiAgICogbXV0YXRlcyBidXQgcmVtYWlucyB0aGUgc2FtZSBvYmplY3QuIFVzZWZ1bCBmb3IgdGhpcmQtcGFydHkgbGlicmFyaWVzLlxuICAgKi9cbiAgZm9yY2UoKTogdm9pZDtcbn1cblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVTaWduYWw6IHtcbiAgPFQ+KCk6IFNpZ25hbDxUIHwgdW5kZWZpbmVkPjtcbiAgPFQ+KHZhbHVlOiBUKTogU2lnbmFsPFQ+O1xufSA9IF9jcmVhdGVTaWduYWw7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgY3JlYXRlQ29tcHV0ZWRRcmw6IDxUPihxcmw6IFFSTDwoKSA9PiBUPikgPT4gQ29tcHV0ZWRTaWduYWw8VD4gPSBfY3JlYXRlQ29tcHV0ZWRTaWduYWw7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgY3JlYXRlQ29tcHV0ZWQkID0gLyojX19QVVJFX18qLyBpbXBsaWNpdCRGaXJzdEFyZyhjcmVhdGVDb21wdXRlZFFybCk7XG4iXX0=","/**\n * Scheduler is responsible for running application code in predictable order.\n *\n * ## What is a Chore?\n *\n * A Chore is a unit of work that needs to be done. It can be:\n *\n * - Task / Resource\n * - Visible Task\n * - Component\n * - Computed\n * - Node Diff\n *\n * ## Order of execution\n *\n * - Parent component chores should run before child component chores.\n * - Visible Tasks should run after journal flush (visible tasks often read DOM layout.)\n *\n * ## Example\n *\n * ```typescript\n * const Child = component$(() => {\n *   useTask$(() => {\n *     console.log('Child task');\n *   });\n *   useVisibleTask$(() => {\n *     console.log('Child visible-task');\n *   });\n *   console.log('Child render');\n *   return <div>Child</div>;\n * });\n *\n * const Parent = component$(() => {\n *   const count = useSignal(0);\n *   useTask$(() => {\n *     console.log('Parent task', count.value);\n *   });\n *   useVisibleTask$(() => {\n *     console.log('Parent visible-task', count.value);\n *     count.value++;\n *   });\n *   console.log('Parent render', count.value);\n *   return <Child/>;\n * });\n * ```\n *\n * ## In the above example, the order of execution is:\n *\n * 1. Parent task 0\n * 2. Parent render 0\n * 3. Child task 0\n * 4. Child render 0\n * 5. Journal flush\n * 6. Parent visible-task 0\n * 7. Parent render 1\n * 8. Journal flush\n * 9. Child visible-task\n *\n * If at any point a new chore is scheduled it will insert itself into the correct order.\n *\n * ## Implementation\n *\n * Chores are kept in a sorted array. When a new chore is scheduled it is inserted into the correct\n * location. Processing of the chores always starts from the beginning of the array. This ensures\n * that parent chores are processed before child chores.\n *\n * ## Sorting\n *\n * Chores are sorted in three levels:\n *\n * - Macro: beforeJournalFlush, journalFlush, afterJournalFlush\n * - Component: depth first order of components\n * - Micro: order of chores within a component.\n *\n * Example of sorting:\n *\n * - Tasks are beforeJournalFlush, than depth first on component and finally in declaration order\n *   within component.\n * - Visible Tasks are sorted afterJournalFlush, than depth first on component and finally in\n *   declaration order within component.\n */\nimport { assertEqual } from '../../error/assert';\nimport { Task, TaskFlags, cleanupTask, runTask2, runResource, } from '../../use/use-task';\nimport { logWarn, throwErrorAndStop } from '../../util/log';\nimport { isPromise, maybeThen, maybeThenPassError, safeCall } from '../../util/promises';\nimport { isDomContainer } from '../client/dom-container';\nimport { ElementVNodeProps, VNodeFlags, VNodeProps, } from '../client/types';\nimport { vnode_documentPosition, vnode_isVNode, vnode_setAttr, VNodeJournalOpCode, } from '../client/vnode';\nimport { vnode_diff } from '../client/vnode-diff';\nimport { executeComponent2 } from './component-execution';\nimport { isSignal } from '../signal/v2-signal.public';\nimport { serializeAttribute } from '../../render/execute-component';\nimport {} from '../client/dom-container';\n// Turn this on to get debug output of what the scheduler is doing.\nconst DEBUG = false;\nexport var ChoreType;\n(function (ChoreType) {\n    /// MASKS defining three levels of sorting\n    ChoreType[ChoreType[\"MACRO\"] = 112] = \"MACRO\";\n    /* order of elements (not encoded here) */\n    ChoreType[ChoreType[\"MICRO\"] = 15] = \"MICRO\";\n    /** Ensure tha the QRL promise is resolved before processing next chores in the queue */\n    ChoreType[ChoreType[\"QRL_RESOLVE\"] = 1] = \"QRL_RESOLVE\";\n    ChoreType[ChoreType[\"RESOURCE\"] = 2] = \"RESOURCE\";\n    ChoreType[ChoreType[\"TASK\"] = 3] = \"TASK\";\n    ChoreType[ChoreType[\"NODE_DIFF\"] = 4] = \"NODE_DIFF\";\n    ChoreType[ChoreType[\"NODE_PROP\"] = 5] = \"NODE_PROP\";\n    ChoreType[ChoreType[\"COMPONENT_SSR\"] = 6] = \"COMPONENT_SSR\";\n    ChoreType[ChoreType[\"COMPONENT\"] = 7] = \"COMPONENT\";\n    ChoreType[ChoreType[\"WAIT_FOR_COMPONENTS\"] = 16] = \"WAIT_FOR_COMPONENTS\";\n    ChoreType[ChoreType[\"JOURNAL_FLUSH\"] = 48] = \"JOURNAL_FLUSH\";\n    ChoreType[ChoreType[\"VISIBLE\"] = 64] = \"VISIBLE\";\n    ChoreType[ChoreType[\"CLEANUP_VISIBLE\"] = 80] = \"CLEANUP_VISIBLE\";\n    ChoreType[ChoreType[\"WAIT_FOR_ALL\"] = 127] = \"WAIT_FOR_ALL\";\n})(ChoreType || (ChoreType = {}));\nexport const createScheduler = (container, scheduleDrain, journalFlush) => {\n    const choreQueue = [];\n    let currentChore = null;\n    let journalFlushScheduled = false;\n    return schedule;\n    ///// IMPLEMENTATION /////\n    function schedule(type, hostOrTask = null, targetOrQrl = null, payload = null) {\n        const runLater = type !== ChoreType.WAIT_FOR_ALL &&\n            type !== ChoreType.WAIT_FOR_COMPONENTS &&\n            type !== ChoreType.COMPONENT_SSR;\n        const isTask = type === ChoreType.TASK ||\n            type === ChoreType.VISIBLE ||\n            type === ChoreType.RESOURCE ||\n            type === ChoreType.CLEANUP_VISIBLE;\n        if (isTask) {\n            hostOrTask.$flags$ |= TaskFlags.DIRTY;\n        }\n        let chore = {\n            $type$: type,\n            $idx$: isTask\n                ? hostOrTask.$index$\n                : typeof targetOrQrl === 'string'\n                    ? targetOrQrl\n                    : 0,\n            $host$: isTask ? hostOrTask.$el$ : hostOrTask,\n            $target$: targetOrQrl,\n            $payload$: isTask ? hostOrTask : payload,\n            $resolve$: null,\n            $promise$: null,\n            $returnValue$: null,\n            $executed$: false,\n        };\n        chore.$promise$ = new Promise((resolve) => (chore.$resolve$ = resolve));\n        DEBUG && debugTrace('schedule', chore, currentChore, choreQueue);\n        chore = sortedInsert(choreQueue, chore);\n        if (!journalFlushScheduled && runLater) {\n            // If we are not currently draining, we need to schedule a drain.\n            journalFlushScheduled = true;\n            schedule(ChoreType.JOURNAL_FLUSH);\n            scheduleDrain();\n        }\n        if (runLater) {\n            return chore.$promise$;\n        }\n        else {\n            return drainUpTo(chore);\n        }\n    }\n    /**\n     * Execute all of the chores up to and including the given chore.\n     *\n     * @param runUptoChore\n     */\n    function drainUpTo(runUptoChore) {\n        // If it already ran, it's not in the queue\n        if (runUptoChore.$executed$) {\n            return runUptoChore.$returnValue$;\n        }\n        if (currentChore) {\n            // Already running chore, which means we're waiting for async completion\n            return runUptoChore.$promise$;\n        }\n        while (choreQueue.length) {\n            const nextChore = choreQueue.shift();\n            const order = choreComparator(nextChore, runUptoChore, false);\n            if (order === null) {\n                continue;\n            }\n            if (order > 0) {\n                // we have processed all of the chores up to and including the given chore.\n                break;\n            }\n            const isDeletedVNode = vNodeAlreadyDeleted(nextChore);\n            if (isDeletedVNode &&\n                // we need to process cleanup tasks for deleted nodes\n                nextChore.$type$ !== ChoreType.CLEANUP_VISIBLE) {\n                DEBUG && debugTrace('skip chore', nextChore, currentChore, choreQueue);\n                continue;\n            }\n            const returnValue = executeChore(nextChore);\n            if (isPromise(returnValue)) {\n                const promise = returnValue.then(() => drainUpTo(runUptoChore));\n                return promise;\n            }\n        }\n        return runUptoChore.$returnValue$;\n    }\n    function executeChore(chore) {\n        const host = chore.$host$;\n        DEBUG && debugTrace('execute', chore, currentChore, choreQueue);\n        assertEqual(currentChore, null, 'Chore already running.');\n        currentChore = chore;\n        let returnValue = null;\n        switch (chore.$type$) {\n            case ChoreType.JOURNAL_FLUSH:\n                returnValue = journalFlush();\n                journalFlushScheduled = false;\n                break;\n            case ChoreType.COMPONENT:\n            case ChoreType.COMPONENT_SSR:\n                returnValue = safeCall(() => executeComponent2(container, host, host, chore.$target$, chore.$payload$), (jsx) => {\n                    return chore.$type$ === ChoreType.COMPONENT\n                        ? maybeThen(container.processJsx(host, jsx), () => jsx)\n                        : jsx;\n                }, (err) => container.handleError(err, host));\n                break;\n            case ChoreType.RESOURCE:\n                // Don't await the return value of the resource, because async resources should not be awaited.\n                // The reason for this is that we should be able to update for example a node with loading\n                // text. If we await the resource, the loading text will not be displayed until the resource\n                // is loaded.\n                const result = runResource(chore.$payload$, container, host);\n                returnValue = isDomContainer(container) ? null : result;\n                break;\n            case ChoreType.TASK:\n                returnValue = runTask2(chore.$payload$, container, host);\n                break;\n            case ChoreType.VISIBLE:\n                returnValue = runTask2(chore.$payload$, container, host);\n                break;\n            case ChoreType.CLEANUP_VISIBLE:\n                const task = chore.$payload$;\n                cleanupTask(task);\n                break;\n            case ChoreType.NODE_DIFF:\n                const parentVirtualNode = chore.$target$;\n                let jsx = chore.$payload$;\n                if (isSignal(jsx)) {\n                    jsx = jsx.value;\n                }\n                returnValue = vnode_diff(container, jsx, parentVirtualNode, null);\n                break;\n            case ChoreType.NODE_PROP:\n                const virtualNode = chore.$host$;\n                const payload = chore.$payload$;\n                let value = payload.$value$;\n                if (isSignal(value)) {\n                    value = value.value;\n                }\n                const isConst = payload.$isConst$;\n                const journal = container.$journal$;\n                const property = chore.$idx$;\n                value = serializeAttribute(property, value, payload.$scopedStyleIdPrefix$);\n                if (isConst) {\n                    const element = virtualNode[ElementVNodeProps.element];\n                    journal.push(VNodeJournalOpCode.SetAttribute, element, property, value);\n                }\n                else {\n                    vnode_setAttr(journal, virtualNode, property, value);\n                }\n                break;\n            case ChoreType.QRL_RESOLVE: {\n                const target = chore.$target$;\n                returnValue = !target.resolved ? target.resolve() : null;\n                break;\n            }\n        }\n        return maybeThenPassError(returnValue, (value) => {\n            DEBUG && debugTrace('execute.DONE', null, currentChore, choreQueue);\n            if (currentChore) {\n                currentChore.$executed$ = true;\n                currentChore.$resolve$?.(value);\n            }\n            currentChore = null;\n            return (chore.$returnValue$ = value);\n        });\n    }\n};\nconst toNumber = (value) => {\n    return typeof value === 'number' ? value : -1;\n};\n/**\n * When a derived signal is update we need to run vnode_diff. However the signal can update multiple\n * times during component execution. For this reason it is necessary for us to update the schedule\n * work with the latest result of the signal.\n */\nconst choreUpdate = (existing, newChore) => {\n    if (existing.$type$ === ChoreType.NODE_DIFF) {\n        existing.$payload$ = newChore.$payload$;\n    }\n};\nfunction vNodeAlreadyDeleted(chore) {\n    return !!(chore.$host$ &&\n        vnode_isVNode(chore.$host$) &&\n        chore.$host$[VNodeProps.flags] & VNodeFlags.Deleted);\n}\nfunction choreComparator(a, b, shouldThrowOnHostMismatch) {\n    const macroTypeDiff = (a.$type$ & ChoreType.MACRO) - (b.$type$ & ChoreType.MACRO);\n    if (macroTypeDiff !== 0) {\n        return macroTypeDiff;\n    }\n    // JOURNAL_FLUSH does not have a host or $idx$, so we can't compare it.\n    if (a.$type$ !== ChoreType.JOURNAL_FLUSH) {\n        const aHost = a.$host$;\n        const bHost = b.$host$;\n        // QRL_RESOLVE does not have a host.\n        if (aHost !== bHost && aHost !== null && bHost !== null) {\n            if (vnode_isVNode(aHost) && vnode_isVNode(bHost)) {\n                // we are running on the client.\n                const hostDiff = vnode_documentPosition(aHost, bHost);\n                if (hostDiff !== 0) {\n                    return hostDiff;\n                }\n            }\n            else {\n                // we are running on the server.\n                // On server we can't schedule task for a different host!\n                // Server is SSR, and therefore scheduling for anything but the current host\n                // implies that things need to be re-run nad that is not supported because of streaming.\n                const errorMessage = 'SERVER: during HTML streaming, it is not possible to cause a re-run of tasks on a different host';\n                if (shouldThrowOnHostMismatch) {\n                    throwErrorAndStop(errorMessage);\n                }\n                logWarn(errorMessage);\n                return null;\n            }\n        }\n        const microTypeDiff = (a.$type$ & ChoreType.MICRO) - (b.$type$ & ChoreType.MICRO);\n        if (microTypeDiff !== 0) {\n            return microTypeDiff;\n        }\n        const idxDiff = toNumber(a.$idx$) - toNumber(b.$idx$);\n        if (idxDiff !== 0) {\n            return idxDiff;\n        }\n        // If the host is the same, we need to compare the target.\n        if (a.$target$ !== b.$target$ &&\n            ((a.$type$ === ChoreType.QRL_RESOLVE && b.$type$ === ChoreType.QRL_RESOLVE) ||\n                (a.$type$ === ChoreType.NODE_PROP && b.$type$ === ChoreType.NODE_PROP))) {\n            // 1 means that we are going to process chores as FIFO\n            return 1;\n        }\n    }\n    return 0;\n}\nfunction sortedFindIndex(sortedArray, value) {\n    /// We need to ensure that the `queue` is sorted by priority.\n    /// 1. Find a place where to insert into.\n    let bottom = 0;\n    let top = sortedArray.length;\n    while (bottom < top) {\n        const middle = bottom + ((top - bottom) >> 1);\n        const midChore = sortedArray[middle];\n        const comp = choreComparator(value, midChore, true);\n        if (comp < 0) {\n            top = middle;\n        }\n        else if (comp > 0) {\n            bottom = middle + 1;\n        }\n        else {\n            // We already have the host in the queue.\n            return middle;\n        }\n    }\n    return ~bottom;\n}\nfunction sortedInsert(sortedArray, value) {\n    /// We need to ensure that the `queue` is sorted by priority.\n    /// 1. Find a place where to insert into.\n    const idx = sortedFindIndex(sortedArray, value);\n    if (idx < 0) {\n        /// 2. Insert the chore into the queue.\n        sortedArray.splice(~idx, 0, value);\n        return value;\n    }\n    const existing = sortedArray[idx];\n    choreUpdate(existing, value);\n    return existing;\n}\nfunction debugChoreToString(chore) {\n    const type = {\n        [ChoreType.QRL_RESOLVE]: 'QRL_RESOLVE',\n        [ChoreType.RESOURCE]: 'RESOURCE',\n        [ChoreType.TASK]: 'TASK',\n        [ChoreType.NODE_DIFF]: 'NODE_DIFF',\n        [ChoreType.NODE_PROP]: 'NODE_PROP',\n        [ChoreType.COMPONENT]: 'COMPONENT',\n        [ChoreType.COMPONENT_SSR]: 'COMPONENT_SSR',\n        [ChoreType.JOURNAL_FLUSH]: 'JOURNAL_FLUSH',\n        [ChoreType.VISIBLE]: 'VISIBLE',\n        [ChoreType.CLEANUP_VISIBLE]: 'CLEANUP_VISIBLE',\n        [ChoreType.WAIT_FOR_ALL]: 'WAIT_FOR_ALL',\n        [ChoreType.WAIT_FOR_COMPONENTS]: 'WAIT_FOR_COMPONENTS',\n    }[chore.$type$] || 'UNKNOWN: ' + chore.$type$;\n    const host = String(chore.$host$).replaceAll(/\\n.*/gim, '');\n    const qrlTarget = chore.$target$?.$symbol$;\n    return `Chore(${type} ${chore.$type$ === ChoreType.QRL_RESOLVE ? qrlTarget : host} ${chore.$idx$})`;\n}\nfunction debugTrace(action, arg, currentChore, queue) {\n    const lines = ['Scheduler: ' + action];\n    if (arg) {\n        lines.push('    arg: ' +\n            ('$type$' in arg ? debugChoreToString(arg) : String(arg).replaceAll(/\\n.*/gim, '')));\n    }\n    if (currentChore) {\n        lines.push('running: ' + debugChoreToString(currentChore));\n    }\n    if (queue) {\n        queue.forEach((chore, idx) => {\n            lines.push((idx == 0 ? '  queue: ' : '         ') + debugChoreToString(chore));\n        });\n    }\n    // eslint-disable-next-line no-console\n    console.log(lines.join('\\n  ') + '\\n');\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @file\n *\n *   Signals come in two types:\n *\n *   1. `Signal` - A storage of data\n *   2. `ComputedSignal` - A signal which is computed from other signals.\n *\n *   ## Why is `ComputedSignal` different?\n *\n *   - It needs to store a function which needs to re-run.\n *   - It is `Readonly` because it is computed.\n */\nimport { pad, qwikDebugToString } from '../../debug';\nimport { assertDefined, assertFalse, assertTrue } from '../../error/assert';\nimport {} from '../../qrl/qrl-class';\nimport { trackSignal, tryGetInvokeContext } from '../../use/use-core';\nimport { Task, TaskFlags, isTask } from '../../use/use-task';\nimport { logError, throwErrorAndStop } from '../../util/log';\nimport { ELEMENT_PROPS, OnRenderProp, QSubscribers } from '../../util/markers';\nimport { isPromise } from '../../util/promises';\nimport { qDev } from '../../util/qdev';\nimport { vnode_getProp, vnode_isVirtualVNode, vnode_isVNode, vnode_setProp } from '../client/vnode';\nimport { ChoreType } from '../shared/scheduler';\nimport { isSubscriber, Subscriber } from './v2-subscriber';\nconst DEBUG = false;\n/**\n * Special value used to mark that a given signal needs to be computed. This is essentially a\n * \"marked as dirty\" flag.\n */\nconst NEEDS_COMPUTATION = {\n    __dirty__: true,\n};\n// eslint-disable-next-line no-console\nconst log = (...args) => console.log('SIGNAL', ...args.map(qwikDebugToString));\nexport const throwIfQRLNotResolved = (qrl) => {\n    const resolved = qrl.resolved;\n    if (!resolved) {\n        // When we are creating a signal using a use method, we need to ensure\n        // that the computation can be lazy and therefore we need to unsure\n        // that the QRL is resolved.\n        // When we re-create the signal from serialization (we don't create the signal\n        // using useMethod) it is OK to not resolve it until the graph is marked as dirty.\n        throw qrl.resolve();\n    }\n};\n/** @public */\nexport const isSignal = (value) => {\n    return value instanceof Signal;\n};\n/** @internal */\nexport class EffectData {\n    constructor(data) {\n        this.data = data;\n    }\n}\nexport var EffectSubscriptionsProp;\n(function (EffectSubscriptionsProp) {\n    EffectSubscriptionsProp[EffectSubscriptionsProp[\"EFFECT\"] = 0] = \"EFFECT\";\n    EffectSubscriptionsProp[EffectSubscriptionsProp[\"PROPERTY\"] = 1] = \"PROPERTY\";\n    EffectSubscriptionsProp[EffectSubscriptionsProp[\"FIRST_BACK_REF_OR_DATA\"] = 2] = \"FIRST_BACK_REF_OR_DATA\";\n})(EffectSubscriptionsProp || (EffectSubscriptionsProp = {}));\nexport var EffectProperty;\n(function (EffectProperty) {\n    EffectProperty[\"COMPONENT\"] = \":\";\n    EffectProperty[\"VNODE\"] = \".\";\n})(EffectProperty || (EffectProperty = {}));\nexport class Signal {\n    constructor(container, value) {\n        /** Store a list of effects which are dependent on this signal. */\n        this.$effects$ = null;\n        this.$container$ = null;\n        this.$container$ = container;\n        this.$untrackedValue$ = value;\n        DEBUG && log('new', this);\n    }\n    get untrackedValue() {\n        return this.$untrackedValue$;\n    }\n    // TODO: should we disallow setting the value directly?\n    set untrackedValue(value) {\n        this.$untrackedValue$ = value;\n    }\n    get value() {\n        const ctx = tryGetInvokeContext();\n        if (ctx) {\n            if (this.$container$ === null) {\n                if (!ctx.$container2$) {\n                    return this.untrackedValue;\n                }\n                // Grab the container now we have access to it\n                this.$container$ = ctx.$container2$;\n            }\n            else {\n                assertTrue(!ctx.$container2$ || ctx.$container2$ === this.$container$, 'Do not use signals across containers');\n            }\n            const effectSubscriber = ctx.$effectSubscriber$;\n            if (effectSubscriber) {\n                const effects = (this.$effects$ || (this.$effects$ = []));\n                // Let's make sure that we have a reference to this effect.\n                // Adding reference is essentially adding a subscription, so if the signal\n                // changes we know who to notify.\n                ensureContainsEffect(effects, effectSubscriber);\n                // But when effect is scheduled in needs to be able to know which signals\n                // to unsubscribe from. So we need to store the reference from the effect back\n                // to this signal.\n                ensureContains(effectSubscriber, this);\n                if (isSubscriber(this)) {\n                    // We need to add the subscriber to the effect so that we can clean it up later\n                    ensureEffectContainsSubscriber(effectSubscriber[EffectSubscriptionsProp.EFFECT], this, this.$container$);\n                }\n                DEBUG && log('read->sub', pad('\\n' + this.toString(), '  '));\n            }\n        }\n        return this.untrackedValue;\n    }\n    set value(value) {\n        if (value !== this.$untrackedValue$) {\n            DEBUG &&\n                log('Signal.set', this.$untrackedValue$, '->', value, pad('\\n' + this.toString(), '  '));\n            this.$untrackedValue$ = value;\n            triggerEffects(this.$container$, this, this.$effects$);\n        }\n    }\n    // prevent accidental use as value\n    valueOf() {\n        if (qDev) {\n            return throwErrorAndStop('Cannot coerce a Signal, use `.value` instead');\n        }\n    }\n    toString() {\n        return (`[${this.constructor.name}${this.$invalid$ ? ' INVALID' : ''} ${String(this.$untrackedValue$)}]` +\n            (this.$effects$?.map((e) => '\\n -> ' + pad(qwikDebugToString(e[0]), '    ')).join('\\n') || ''));\n    }\n    toJSON() {\n        return { value: this.$untrackedValue$ };\n    }\n}\n/** Ensure the item is in array (do nothing if already there) */\nexport const ensureContains = (array, value) => {\n    const isMissing = array.indexOf(value) === -1;\n    if (isMissing) {\n        array.push(value);\n    }\n};\nexport const ensureContainsEffect = (array, effectSubscriptions) => {\n    for (let i = 0; i < array.length; i++) {\n        const existingEffect = array[i];\n        if (existingEffect[0] === effectSubscriptions[0] &&\n            existingEffect[1] === effectSubscriptions[1]) {\n            return;\n        }\n    }\n    array.push(effectSubscriptions);\n};\nexport const ensureEffectContainsSubscriber = (effect, subscriber, container) => {\n    if (isSubscriber(effect)) {\n        effect.$effectDependencies$ || (effect.$effectDependencies$ = []);\n        if (subscriberExistInSubscribers(effect.$effectDependencies$, subscriber)) {\n            return;\n        }\n        effect.$effectDependencies$.push(subscriber);\n    }\n    else if (vnode_isVNode(effect) && vnode_isVirtualVNode(effect)) {\n        let subscribers = vnode_getProp(effect, QSubscribers, container ? container.$getObjectById$ : null);\n        subscribers || (subscribers = []);\n        if (subscriberExistInSubscribers(subscribers, subscriber)) {\n            return;\n        }\n        subscribers.push(subscriber);\n        vnode_setProp(effect, QSubscribers, subscribers);\n    }\n    else if (isSSRNode(effect)) {\n        let subscribers = effect.getProp(QSubscribers);\n        subscribers || (subscribers = []);\n        if (subscriberExistInSubscribers(subscribers, subscriber)) {\n            return;\n        }\n        subscribers.push(subscriber);\n        effect.setProp(QSubscribers, subscribers);\n    }\n};\nconst isSSRNode = (effect) => {\n    return 'setProp' in effect && 'getProp' in effect && 'removeProp' in effect && 'id' in effect;\n};\nconst subscriberExistInSubscribers = (subscribers, subscriber) => {\n    for (let i = 0; i < subscribers.length; i++) {\n        if (subscribers[i] === subscriber) {\n            return true;\n        }\n    }\n    return false;\n};\nexport const triggerEffects = (container, signal, effects) => {\n    if (effects) {\n        const scheduleEffect = (effectSubscriptions) => {\n            const effect = effectSubscriptions[EffectSubscriptionsProp.EFFECT];\n            const property = effectSubscriptions[EffectSubscriptionsProp.PROPERTY];\n            assertDefined(container, 'Container must be defined.');\n            if (isTask(effect)) {\n                effect.$flags$ |= TaskFlags.DIRTY;\n                DEBUG && log('schedule.effect.task', pad('\\n' + String(effect), '  '));\n                let choreType = ChoreType.TASK;\n                if (effect.$flags$ & TaskFlags.VISIBLE_TASK) {\n                    choreType = ChoreType.VISIBLE;\n                }\n                else if (effect.$flags$ & TaskFlags.RESOURCE) {\n                    choreType = ChoreType.RESOURCE;\n                }\n                container.$scheduler$(choreType, effect);\n            }\n            else if (effect instanceof Signal) {\n                // we don't schedule ComputedSignal/DerivedSignal directly, instead we invalidate it and\n                // and schedule the signals effects (recursively)\n                if (effect instanceof ComputedSignal) {\n                    // Ensure that the computed signal's QRL is resolved.\n                    // If not resolved schedule it to be resolved.\n                    if (!effect.$computeQrl$.resolved) {\n                        container.$scheduler$(ChoreType.QRL_RESOLVE, null, effect.$computeQrl$);\n                    }\n                }\n                effect.$invalid$ = true;\n                const previousSignal = signal;\n                try {\n                    signal = effect;\n                    effect.$effects$?.forEach(scheduleEffect);\n                }\n                catch (e) {\n                    logError(e);\n                }\n                finally {\n                    signal = previousSignal;\n                }\n            }\n            else if (property === EffectProperty.COMPONENT) {\n                const host = effect;\n                const qrl = container.getHostProp(host, OnRenderProp);\n                assertDefined(qrl, 'Component must have QRL');\n                const props = container.getHostProp(host, ELEMENT_PROPS);\n                container.$scheduler$(ChoreType.COMPONENT, host, qrl, props);\n            }\n            else if (property === EffectProperty.VNODE) {\n                const host = effect;\n                const target = host;\n                container.$scheduler$(ChoreType.NODE_DIFF, host, target, signal);\n            }\n            else {\n                const host = effect;\n                let effectData = effectSubscriptions[EffectSubscriptionsProp.FIRST_BACK_REF_OR_DATA];\n                if (effectData instanceof EffectData) {\n                    effectData = effectData;\n                    const payload = {\n                        ...effectData.data,\n                        $value$: signal,\n                    };\n                    container.$scheduler$(ChoreType.NODE_PROP, host, property, payload);\n                }\n            }\n        };\n        effects.forEach(scheduleEffect);\n    }\n    DEBUG && log('done scheduling');\n};\n/**\n * A signal which is computed from other signals.\n *\n * The value is available synchronously, but the computation is done lazily.\n */\nexport class ComputedSignal extends Signal {\n    constructor(container, computeTask) {\n        // The value is used for comparison when signals trigger, which can only happen\n        // when it was calculated before. Therefore we can pass whatever we like.\n        super(container, NEEDS_COMPUTATION);\n        // We need a separate flag to know when the computation needs running because\n        // we need the old value to know if effects need running after computation\n        this.$invalid$ = true;\n        this.$computeQrl$ = computeTask;\n    }\n    $invalidate$() {\n        this.$invalid$ = true;\n        if (!this.$effects$?.length) {\n            return;\n        }\n        // We should only call subscribers if the calculation actually changed.\n        // Therefore, we need to calculate the value now.\n        // TODO move this calculation to the beginning of the next tick, add chores to that tick if necessary. New chore type?\n        if (this.$computeIfNeeded$()) {\n            triggerEffects(this.$container$, this, this.$effects$);\n        }\n    }\n    /**\n     * Use this to force running subscribers, for example when the calculated value has mutated but\n     * remained the same object\n     */\n    force() {\n        this.$invalid$ = true;\n        triggerEffects(this.$container$, this, this.$effects$);\n    }\n    get untrackedValue() {\n        this.$computeIfNeeded$();\n        assertFalse(this.$untrackedValue$ === NEEDS_COMPUTATION, 'Invalid state');\n        return this.$untrackedValue$;\n    }\n    $computeIfNeeded$() {\n        if (!this.$invalid$) {\n            return false;\n        }\n        const computeQrl = this.$computeQrl$;\n        assertDefined(computeQrl.resolved, 'Computed signals must run sync. Expected the QRL to be resolved at this point.');\n        throwIfQRLNotResolved(computeQrl);\n        const ctx = tryGetInvokeContext();\n        assertDefined(computeQrl, 'Signal is marked as dirty, but no compute function is provided.');\n        const previousEffectSubscription = ctx?.$effectSubscriber$;\n        ctx && (ctx.$effectSubscriber$ = [this, EffectProperty.VNODE]);\n        assertTrue(!!computeQrl.resolved, 'Computed signals must run sync. Expected the QRL to be resolved at this point.');\n        try {\n            const untrackedValue = computeQrl.getFn(ctx)();\n            assertFalse(isPromise(untrackedValue), 'Computed function must be synchronous.');\n            DEBUG && log('Signal.$compute$', untrackedValue);\n            this.$invalid$ = false;\n            const didChange = untrackedValue !== this.$untrackedValue$;\n            this.$untrackedValue$ = untrackedValue;\n            return didChange;\n        }\n        finally {\n            if (ctx) {\n                ctx.$effectSubscriber$ = previousEffectSubscription;\n            }\n        }\n    }\n    // Getters don't get inherited\n    get value() {\n        return super.value;\n    }\n    set value(_) {\n        throwErrorAndStop('ComputedSignal is read-only');\n    }\n}\nexport class WrappedSignal extends Signal {\n    constructor(container, fn, args, fnStr) {\n        super(container, NEEDS_COMPUTATION);\n        // We need a separate flag to know when the computation needs running because\n        // we need the old value to know if effects need running after computation\n        this.$invalid$ = true;\n        this.$effectDependencies$ = null;\n        this.$args$ = args;\n        this.$func$ = fn;\n        this.$funcStr$ = fnStr;\n    }\n    $invalidate$() {\n        this.$invalid$ = true;\n        if (!this.$effects$?.length) {\n            return;\n        }\n        // We should only call subscribers if the calculation actually changed.\n        // Therefore, we need to calculate the value now.\n        // TODO move this calculation to the beginning of the next tick, add chores to that tick if necessary. New chore type?\n        if (this.$computeIfNeeded$()) {\n            triggerEffects(this.$container$, this, this.$effects$);\n        }\n    }\n    /**\n     * Use this to force running subscribers, for example when the calculated value has mutated but\n     * remained the same object\n     */\n    force() {\n        this.$invalid$ = true;\n        triggerEffects(this.$container$, this, this.$effects$);\n    }\n    get untrackedValue() {\n        this.$computeIfNeeded$();\n        assertFalse(this.$untrackedValue$ === NEEDS_COMPUTATION, 'Invalid state');\n        return this.$untrackedValue$;\n    }\n    $computeIfNeeded$() {\n        if (!this.$invalid$) {\n            return false;\n        }\n        this.$untrackedValue$ = trackSignal(() => this.$func$(...this.$args$), this, EffectProperty.VNODE, this.$container$);\n    }\n    // Getters don't get inherited\n    get value() {\n        return super.value;\n    }\n    set value(_) {\n        throwErrorAndStop('WrappedSignal is read-only');\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","import { isQrl } from '../server/prefetch-strategy';\nimport { isJSXNode } from './render/jsx/jsx-runtime';\nimport { isTask } from './use/use-task';\nimport { vnode_isVNode, vnode_toString } from './v2/client/vnode';\nimport { ComputedSignal, WrappedSignal, isSignal } from './v2/signal/v2-signal';\nimport { isStore } from './v2/signal/v2-store';\nconst stringifyPath = [];\nexport function qwikDebugToString(value) {\n    if (value === null) {\n        return 'null';\n    }\n    else if (value === undefined) {\n        return 'undefined';\n    }\n    else if (typeof value === 'string') {\n        return '\"' + value + '\"';\n    }\n    else if (typeof value === 'number' || typeof value === 'boolean') {\n        return String(value);\n    }\n    else if (isTask(value)) {\n        return `Task(${qwikDebugToString(value.$qrl$)})`;\n    }\n    else if (isQrl(value)) {\n        return `Qrl(${value.$symbol$})`;\n    }\n    else if (typeof value === 'object' || typeof value === 'function') {\n        if (stringifyPath.includes(value)) {\n            return '*';\n        }\n        if (stringifyPath.length > 10) {\n            // debugger;\n        }\n        try {\n            stringifyPath.push(value);\n            if (Array.isArray(value)) {\n                if (vnode_isVNode(value)) {\n                    return vnode_toString.apply(value);\n                }\n                else {\n                    return value.map(qwikDebugToString);\n                }\n            }\n            else if (isSignal(value)) {\n                if (value instanceof WrappedSignal) {\n                    return 'WrappedSignal';\n                }\n                else if (value instanceof ComputedSignal) {\n                    return 'ComputedSignal';\n                }\n                else {\n                    return 'Signal';\n                }\n            }\n            else if (isStore(value)) {\n                return 'Store';\n            }\n            else if (isJSXNode(value)) {\n                return jsxToString(value);\n            }\n        }\n        finally {\n            stringifyPath.pop();\n        }\n    }\n    return value;\n}\nexport const pad = (text, prefix) => {\n    return String(text)\n        .split('\\n')\n        .map((line, idx) => (idx ? prefix : '') + line)\n        .join('\\n');\n};\nexport const jsxToString = (value) => {\n    if (isJSXNode(value)) {\n        let type = value.type;\n        if (typeof type === 'function') {\n            type = type.name || 'Component';\n        }\n        let str = '<' + value.type;\n        if (value.props) {\n            for (const [key, val] of Object.entries(value.props)) {\n                str += ' ' + key + '=' + qwikDebugToString(val);\n            }\n            const children = value.children;\n            if (children != null) {\n                str += '>';\n                if (Array.isArray(children)) {\n                    children.forEach((child) => {\n                        str += jsxToString(child);\n                    });\n                }\n                else {\n                    str += jsxToString(children);\n                }\n                str += '</' + value.type + '>';\n            }\n            else {\n                str += '/>';\n            }\n        }\n        return str;\n    }\n    else {\n        return String(value);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","/**\n * @file\n *\n *   VNode is a DOM like API for walking the DOM but it:\n *\n *   1. Encodes virtual nodes which don't exist in the DOM\n *   2. Can serialize as part of SSR and than deserialize on the client.\n *\n *   # Virtual\n *\n *   You can think of a Virtual node just like an additional `<div>` in that it groups related child\n *   nodes together. But unlike a `<div>` which has a real DOM node and hence implications for CSS,\n *   Virtual nodes have no DOM impact, they are invisible.\n *\n *   # Portal\n *\n *   Two Virtual nodes can be linked together to form a Portal. Portals are useful for projecting\n *   content or just rendering content in a different location in the tree, while maintaining a\n *   logical relationship.\n *\n *   Portals have:\n *\n *   - Portal Source: A Virtual node which can refer to one ore more Destination Portals by name.\n *   - Destination Portal: A Virtual node which acts as a destination but also has a pointer back to the\n *       Portal Source\n *\n *   ## Example:\n *\n *   Given this code:\n *\n *   ```typescript\n *   const Parent = component$(() => {\n *     return (\n *       <Child>\n *         Projection Content\n *         <span q:slot=\"secondary\">Secondary Content</span>\n *         <span q:slot=\"other\">Other Content</span>\n *       </Child>\n *     };\n *   });\n *\n *   const Child = component$(() => {\n *     return (\n *       <div>\n *         <Slot>Default Primary</Slot>\n *         <Slot name=\"secondary\">Default Secondary</Slot>\n *       </div>\n *     );\n *   });\n *\n *   render(<body><main><Parent/></main><body>);\n * ```\n *\n *   Will render like so:\n *\n *   ```html\n *   <body>\n *     <main>\n *       <Virtual Parent q:portal=\":3A;secondary:3B;other:5A\" q:id=\"2A\">\n *         <Virtual Child>\n *           <div>\n *             <Virtual Slot q:id=\"3A\" q:portal=\"^:2A;:3A\"> Projection Content </Virtual>\n *             <Virtual Slot q:id=\"3B\" q:portal=\"^:2A;:3B\">\n *               <span q:slot=\"secondary\">Secondary Content</span>\n *             </Virtual>\n *           </div>\n *         </Virtual>\n *       </Virtual>\n *     </main>\n *     <q:template>\n *       <Virtual q:portal=\"^:2A\" q:id=\"5A\">\n *         <span q:slot=\"other\">Other Content</span>\n *       </Virtual>\n *       <Virtual q:portal=\"^:2A\" q:id=\"3A\">\n *         Default Primary\n *       </Virtual>\n *       <Virtual q:portal=\"^:2A\" q:id=\"3B\">\n *         Default Secondary\n *       </Virtual>\n *     <q:template>\n *   </body>\n * ```\n *\n *   Explanation:\n *\n *   - `q:portal=\":3A;secondary:3B;other:5A\"`\n *\n *       - Name: ``; Ref: `3A` - Where the default content went.\n *       - Name: `secondary`; Ref: `3B` - Where the 'secondary' content went.\n *       - Name: `other`; Ref: `%A` - Where the `other` content went. (Notice in this case the content is\n *               left over and os it ends up en the `q:templates`. We can share one '<q:template>`\n *               for all left over content.)\n *   - `q:portal=\"^:2A;:3A\"`\n *\n *       - Name: `^`; Ref: `2A` - Special pointer to the parent portal\n *       - Name: ``; Ref: `3A` - Location of the default content in case there is nothing projected here.\n *\n *   ## Rendering\n *\n *   During SSR, the rendered can delay rendering the JSX nodes until correct portal comes up. The ID\n *   system is already can make lazy references to the Nodes.\n *\n *   Client side rendering does not need to deal with IDs or `<q:template>` as un-rendered vNodes do\n *   not need to be serialized into DOM, and can remain on heap.\n *\n *   ## Context\n *\n *   When looking up context it is possible to follow you real render parents or follow the portals.\n *   All information is encoded in the portals.\n *\n *   ## Slot Projection\n *\n *   The ultimate user of portals is Slot projection. But the vNode do not understand slots, rather\n *   they understand portal primitives which makes Slot implementation much simpler.\n *\n *   NOTE: The portals need to have IDs during serialization only. Once runtime takes over, there is\n *   no need to have IDs or to write overflow to the `<q:template>`\n */\nimport { isDev } from '@builder.io/qwik/build';\nimport { qwikDebugToString } from '../../debug';\nimport { assertDefined, assertEqual, assertFalse, assertTrue } from '../../error/assert';\nimport { dangerouslySetInnerHTML } from '../../render/execute-component';\nimport { isText } from '../../util/element';\nimport { throwErrorAndStop } from '../../util/log';\nimport { ELEMENT_ID, ELEMENT_KEY, ELEMENT_PROPS, ELEMENT_SEQ, ELEMENT_SEQ_IDX, OnRenderProp, QContainerAttr, QContainerAttrEnd, QContainerIsland, QContainerIslandEnd, QCtxAttr, QIgnore, QIgnoreEnd, QScopedStyle, QSlot, QSlotParent, QSlotRef, QStyle, QStylesAllSelector, Q_PROPS_SEPARATOR, } from '../../util/markers';\nimport { isHtmlElement } from '../../util/types';\nimport { DEBUG_TYPE, QContainerValue, VirtualType, VirtualTypeName } from '../shared/types';\nimport { VNodeDataChar } from '../shared/vnode-data-types';\nimport { getDomContainer } from './dom-container';\nimport { ElementVNodeProps, TextVNodeProps, VNodeFlags, VNodeFlagsIndex, VNodeProps, VirtualVNodeProps, } from './types';\nimport { vnode_getDomChildrenWithCorrectNamespacesToInsert, vnode_getElementNamespaceFlags, } from './vnode-namespace';\nimport { escapeHTML } from '../shared/character-escaping';\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * Fundamental DOM operations are:\n *\n * - Insert new DOM element/text\n * - Remove DOM element/text\n * - Set DOM element attributes\n * - Set text node value\n */\nexport var VNodeJournalOpCode;\n(function (VNodeJournalOpCode) {\n    VNodeJournalOpCode[VNodeJournalOpCode[\"SetText\"] = 1] = \"SetText\";\n    VNodeJournalOpCode[VNodeJournalOpCode[\"SetAttribute\"] = 2] = \"SetAttribute\";\n    VNodeJournalOpCode[VNodeJournalOpCode[\"HoistStyles\"] = 3] = \"HoistStyles\";\n    VNodeJournalOpCode[VNodeJournalOpCode[\"Remove\"] = 4] = \"Remove\";\n    VNodeJournalOpCode[VNodeJournalOpCode[\"Insert\"] = 5] = \"Insert\";\n})(VNodeJournalOpCode || (VNodeJournalOpCode = {}));\n//////////////////////////////////////////////////////////////////////////////////////////////////////\nexport const vnode_newElement = (element, elementName) => {\n    assertEqual(fastNodeType(element), 1 /* ELEMENT_NODE */, 'Expecting element node.');\n    const vnode = VNodeArray.createElement(VNodeFlags.Element | VNodeFlags.Inflated | (-1 << VNodeFlagsIndex.shift), // Flag\n    null, null, null, null, null, element, elementName);\n    assertTrue(vnode_isElementVNode(vnode), 'Incorrect format of ElementVNode.');\n    assertFalse(vnode_isTextVNode(vnode), 'Incorrect format of ElementVNode.');\n    assertFalse(vnode_isVirtualVNode(vnode), 'Incorrect format of ElementVNode.');\n    return vnode;\n};\nexport const vnode_newUnMaterializedElement = (element) => {\n    assertEqual(fastNodeType(element), 1 /* ELEMENT_NODE */, 'Expecting element node.');\n    const vnode = VNodeArray.createElement(VNodeFlags.Element | (-1 << VNodeFlagsIndex.shift), // Flag\n    null, null, null, undefined, undefined, element, undefined);\n    assertTrue(vnode_isElementVNode(vnode), 'Incorrect format of ElementVNode.');\n    assertFalse(vnode_isTextVNode(vnode), 'Incorrect format of ElementVNode.');\n    assertFalse(vnode_isVirtualVNode(vnode), 'Incorrect format of ElementVNode.');\n    return vnode;\n};\nexport const vnode_newSharedText = (previousTextNode, sharedTextNode, textContent) => {\n    sharedTextNode &&\n        assertEqual(fastNodeType(sharedTextNode), 3 /* TEXT_NODE */, 'Expecting element node.');\n    const vnode = VNodeArray.createText(VNodeFlags.Text | (-1 << VNodeFlagsIndex.shift), // Flag\n    null, // Parent\n    previousTextNode, // Previous TextNode (usually first child)\n    null, // Next sibling\n    sharedTextNode, // SharedTextNode\n    textContent // Text Content\n    );\n    assertFalse(vnode_isElementVNode(vnode), 'Incorrect format of TextVNode.');\n    assertTrue(vnode_isTextVNode(vnode), 'Incorrect format of TextVNode.');\n    assertFalse(vnode_isVirtualVNode(vnode), 'Incorrect format of TextVNode.');\n    return vnode;\n};\nexport const vnode_newText = (textNode, textContent) => {\n    const vnode = VNodeArray.createText(VNodeFlags.Text | VNodeFlags.Inflated | (-1 << VNodeFlagsIndex.shift), // Flags\n    null, // Parent\n    null, // No previous sibling\n    null, // We may have a next sibling.\n    textNode, // TextNode\n    textContent // Text Content\n    );\n    assertEqual(fastNodeType(textNode), 3 /* TEXT_NODE */, 'Expecting element node.');\n    assertFalse(vnode_isElementVNode(vnode), 'Incorrect format of TextVNode.');\n    assertTrue(vnode_isTextVNode(vnode), 'Incorrect format of TextVNode.');\n    assertFalse(vnode_isVirtualVNode(vnode), 'Incorrect format of TextVNode.');\n    return vnode;\n};\nexport const vnode_newVirtual = () => {\n    const vnode = VNodeArray.createVirtual(VNodeFlags.Virtual | (-1 << VNodeFlagsIndex.shift), // Flags\n    null, null, null, null, null);\n    assertFalse(vnode_isElementVNode(vnode), 'Incorrect format of TextVNode.');\n    assertFalse(vnode_isTextVNode(vnode), 'Incorrect format of TextVNode.');\n    assertTrue(vnode_isVirtualVNode(vnode), 'Incorrect format of TextVNode.');\n    return vnode;\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////\nexport const vnode_isVNode = (vNode) => {\n    return vNode instanceof VNodeArray;\n};\nexport const vnode_isElementVNode = (vNode) => {\n    assertDefined(vNode, 'Missing vNode');\n    const flag = vNode[VNodeProps.flags];\n    return (flag & VNodeFlags.Element) === VNodeFlags.Element;\n};\nexport const vnode_isElementOrTextVNode = (vNode) => {\n    assertDefined(vNode, 'Missing vNode');\n    const flag = vNode[VNodeProps.flags];\n    return (flag & VNodeFlags.ELEMENT_OR_TEXT_MASK) !== 0;\n};\nexport const vnode_isElementOrVirtualVNode = (vNode) => {\n    assertDefined(vNode, 'Missing vNode');\n    const flag = vNode[VNodeProps.flags];\n    return (flag & VNodeFlags.ELEMENT_OR_VIRTUAL_MASK) !== 0;\n};\nexport const vnode_isMaterialized = (vNode) => {\n    assertDefined(vNode, 'Missing vNode');\n    const flag = vNode[VNodeProps.flags];\n    return ((flag & VNodeFlags.Element) === VNodeFlags.Element &&\n        vNode[ElementVNodeProps.firstChild] !== undefined &&\n        vNode[ElementVNodeProps.lastChild] !== undefined);\n};\nexport const vnode_isTextVNode = (vNode) => {\n    assertDefined(vNode, 'Missing vNode');\n    const flag = vNode[VNodeProps.flags];\n    return (flag & VNodeFlags.Text) === VNodeFlags.Text;\n};\nexport const vnode_isVirtualVNode = (vNode) => {\n    assertDefined(vNode, 'Missing vNode');\n    const flag = vNode[VNodeProps.flags];\n    return (flag & VNodeFlags.Virtual) === VNodeFlags.Virtual;\n};\nconst ensureTextVNode = (vNode) => {\n    assertTrue(vnode_isTextVNode(vNode), 'Expecting TextVNode was: ' + vnode_getNodeTypeName(vNode));\n    return vNode;\n};\nconst ensureElementOrVirtualVNode = (vNode) => {\n    assertDefined(vNode, 'Missing vNode');\n    assertTrue((vNode[VNodeProps.flags] & VNodeFlags.ELEMENT_OR_VIRTUAL_MASK) !== 0, 'Expecting ElementVNode or VirtualVNode was: ' + vnode_getNodeTypeName(vNode));\n};\nexport const ensureElementVNode = (vNode) => {\n    assertTrue(vnode_isElementVNode(vNode), 'Expecting ElementVNode was: ' + vnode_getNodeTypeName(vNode));\n    return vNode;\n};\nexport const vnode_getNodeTypeName = (vNode) => {\n    if (vNode) {\n        const flags = vNode[VNodeProps.flags];\n        switch (flags & VNodeFlags.TYPE_MASK) {\n            case VNodeFlags.Element:\n                return 'Element';\n            case VNodeFlags.Virtual:\n                return 'Virtual';\n            case VNodeFlags.Text:\n                return 'Text';\n        }\n    }\n    return '<unknown>';\n};\nexport const vnode_ensureElementInflated = (vnode) => {\n    const flags = vnode[VNodeProps.flags];\n    if ((flags & VNodeFlags.INFLATED_TYPE_MASK) === VNodeFlags.Element) {\n        const elementVNode = vnode;\n        elementVNode[VNodeProps.flags] ^= VNodeFlags.Inflated;\n        const element = elementVNode[ElementVNodeProps.element];\n        const attributes = element.attributes;\n        for (let idx = 0; idx < attributes.length; idx++) {\n            const attr = attributes[idx];\n            const key = attr.name;\n            if (key == Q_PROPS_SEPARATOR || !key) {\n                // SVG in Domino does not support ':' so it becomes an empty string.\n                // all attributes after the ':' are considered immutable, and so we ignore them.\n                break;\n            }\n            else if (key.startsWith(QContainerAttr)) {\n                if (attr.value === QContainerValue.HTML) {\n                    mapArray_set(elementVNode, dangerouslySetInnerHTML, element.innerHTML, ElementVNodeProps.PROPS_OFFSET);\n                }\n                else if (attr.value === QContainerValue.TEXT && 'value' in element) {\n                    mapArray_set(elementVNode, 'value', element.value, ElementVNodeProps.PROPS_OFFSET);\n                }\n            }\n            else if (!key.startsWith('on:')) {\n                const value = attr.value;\n                mapArray_set(elementVNode, key, value, ElementVNodeProps.PROPS_OFFSET);\n            }\n        }\n    }\n};\n/** Walks the VNode tree and materialize it using `vnode_getFirstChild`. */\nexport function vnode_walkVNode(vNode, callback) {\n    let vCursor = vNode;\n    // Depth first traversal\n    if (vnode_isTextVNode(vNode)) {\n        // Text nodes don't have subscriptions or children;\n        return;\n    }\n    let vParent = null;\n    do {\n        callback?.(vCursor, vParent);\n        const vFirstChild = vnode_getFirstChild(vCursor);\n        if (vFirstChild) {\n            vCursor = vFirstChild;\n            continue;\n        }\n        // Out of children\n        if (vCursor === vNode) {\n            // we are where we started, this means that vNode has no children, so we are done.\n            return;\n        }\n        // Out of children, go to next sibling\n        const vNextSibling = vnode_getNextSibling(vCursor);\n        if (vNextSibling) {\n            vCursor = vNextSibling;\n            continue;\n        }\n        // Out of siblings, go to parent\n        vParent = vnode_getParent(vCursor);\n        while (vParent) {\n            if (vParent === vNode) {\n                // We are back where we started, we are done.\n                return;\n            }\n            const vNextParentSibling = vnode_getNextSibling(vParent);\n            if (vNextParentSibling) {\n                vCursor = vNextParentSibling;\n                break;\n            }\n            vParent = vnode_getParent(vParent);\n        }\n        if (vParent == null) {\n            // We are done.\n            return;\n        }\n    } while (true);\n}\nexport function vnode_getDOMChildNodes(journal, root, isVNode = false, childNodes = []) {\n    if (vnode_isElementOrTextVNode(root)) {\n        if (vnode_isTextVNode(root)) {\n            /**\n             * If we are collecting text nodes, we need to ensure that they are inflated. If not inflated\n             * we would return a single text node which represents many actual text nodes, or removing a\n             * single text node would remove many text nodes.\n             */\n            vnode_ensureTextInflated(journal, root);\n        }\n        childNodes.push(isVNode ? root : vnode_getNode(root));\n        return childNodes;\n    }\n    let vNode = vnode_getFirstChild(root);\n    while (vNode) {\n        if (vnode_isElementVNode(vNode)) {\n            childNodes.push(isVNode ? vNode : vnode_getNode(vNode));\n        }\n        else if (vnode_isTextVNode(vNode)) {\n            /**\n             * If we are collecting text nodes, we need to ensure that they are inflated. If not inflated\n             * we would return a single text node which represents many actual text nodes, or removing a\n             * single text node would remove many text nodes.\n             */\n            vnode_ensureTextInflated(journal, vNode);\n            childNodes.push(isVNode ? vNode : vnode_getNode(vNode));\n        }\n        else {\n            isVNode\n                ? vnode_getDOMChildNodes(journal, vNode, true, childNodes)\n                : vnode_getDOMChildNodes(journal, vNode, false, childNodes);\n        }\n        vNode = vnode_getNextSibling(vNode);\n    }\n    return childNodes;\n}\n/**\n * Returns the previous/next sibling but from the point of view of the DOM.\n *\n * Given:\n *\n * ```\n * <div>\n *   <>a</>\n *   <>\n *     <></>\n *     <>b</>\n *     <></>\n *   </>\n *   <>c</>\n * </div>\n * ```\n *\n * Then:\n *\n * - Next: if we start at `a` the next DOM sibling is `b`, than `c`.\n * - Previous: if we start at `c` the next DOM sibling is `b`, than `a`.\n *\n * @param vNode - Starting node\n * @param nextDirection - Direction to search true=next, false=previous\n * @param descend - If true, than we will descend into the children first.\n * @returns\n */\nconst vnode_getDomSibling = (vNode, nextDirection, descend) => {\n    const childProp = nextDirection ? VirtualVNodeProps.firstChild : VirtualVNodeProps.lastChild;\n    const siblingProp = nextDirection ? VNodeProps.nextSibling : VNodeProps.previousSibling;\n    let cursor = vNode;\n    // first make sure we have a DOM node or no children.\n    while (descend && cursor && vnode_isVirtualVNode(cursor)) {\n        const child = cursor[childProp];\n        if (!child) {\n            break;\n        }\n        if (child[VNodeProps.flags] & VNodeFlags.ELEMENT_OR_TEXT_MASK) {\n            return child;\n        }\n        cursor = child;\n    }\n    while (cursor) {\n        // Look at the previous/next sibling.\n        let sibling = cursor[siblingProp];\n        if (sibling && sibling[VNodeProps.flags] & VNodeFlags.ELEMENT_OR_TEXT_MASK) {\n            // we found a previous/next DOM node, return it.\n            return sibling;\n        }\n        else if (!sibling) {\n            // If we don't have a sibling than walk up the tree until you find one.\n            let virtual = cursor[VNodeProps.parent];\n            if (virtual && !vnode_isVirtualVNode(virtual)) {\n                return null;\n            }\n            while (virtual && !(sibling = virtual[siblingProp])) {\n                virtual = virtual[VNodeProps.parent];\n                if (virtual && !vnode_isVirtualVNode(virtual)) {\n                    // the parent node is not virtual, so we are done here.\n                    return null;\n                }\n            }\n            if (!sibling) {\n                // If we did not find a sibling, than we are done.\n                return null;\n            }\n            if (vnode_isTextVNode(sibling) && virtual && vnode_isElementVNode(virtual)) {\n                // sibling to the real element is a text node, this is not a sibling\n                return null;\n            }\n        }\n        // At this point `sibling` is a next node to look at.\n        // Next step is to descend until we find a DOM done.\n        while (sibling) {\n            cursor = sibling;\n            if (cursor[VNodeProps.flags] & VNodeFlags.ELEMENT_OR_TEXT_MASK && vnode_getNode(cursor)) {\n                // we have to check that we actually have a node, because it could be a text node which is\n                // zero length and which does not have a representation in the DOM.\n                return cursor;\n            }\n            sibling = cursor[childProp];\n        }\n        // If we are here we did not find anything and we need to go up the tree again.\n    }\n    return null;\n};\nconst vnode_ensureInflatedIfText = (journal, vNode) => {\n    if (vnode_isTextVNode(vNode)) {\n        vnode_ensureTextInflated(journal, vNode);\n    }\n};\nconst vnode_ensureTextInflated = (journal, vnode) => {\n    const textVNode = ensureTextVNode(vnode);\n    const flags = textVNode[VNodeProps.flags];\n    if ((flags & VNodeFlags.Inflated) === 0) {\n        const parentNode = vnode_getDomParent(vnode);\n        const sharedTextNode = textVNode[TextVNodeProps.node];\n        const doc = parentNode.ownerDocument;\n        // Walk the previous siblings and inflate them.\n        let cursor = vnode_getDomSibling(vnode, false, true);\n        // If text node is 0 length, than there is no text node.\n        // In that case we use the next node as a reference, in which\n        // case we know that the next node MUST be either NULL or an Element.\n        const insertBeforeNode = sharedTextNode ||\n            (vnode_getDomSibling(vnode, true, true)?.[ElementVNodeProps.element] || null);\n        let lastPreviousTextNode = insertBeforeNode;\n        while (cursor && vnode_isTextVNode(cursor)) {\n            if ((cursor[VNodeProps.flags] & VNodeFlags.Inflated) === 0) {\n                const textNode = doc.createTextNode(cursor[TextVNodeProps.text]);\n                journal.push(VNodeJournalOpCode.Insert, parentNode, lastPreviousTextNode, textNode);\n                lastPreviousTextNode = textNode;\n                cursor[TextVNodeProps.node] = textNode;\n                cursor[VNodeProps.flags] |= VNodeFlags.Inflated;\n            }\n            cursor = vnode_getDomSibling(cursor, false, true);\n        }\n        // Walk the next siblings and inflate them.\n        cursor = vnode;\n        while (cursor && vnode_isTextVNode(cursor)) {\n            const next = vnode_getDomSibling(cursor, true, true);\n            const isLastNode = next ? !vnode_isTextVNode(next) : true;\n            if ((cursor[VNodeProps.flags] & VNodeFlags.Inflated) === 0) {\n                if (isLastNode && sharedTextNode) {\n                    journal.push(VNodeJournalOpCode.SetText, sharedTextNode, cursor[TextVNodeProps.text]);\n                }\n                else {\n                    const textNode = doc.createTextNode(cursor[TextVNodeProps.text]);\n                    journal.push(VNodeJournalOpCode.Insert, parentNode, insertBeforeNode, textNode);\n                    cursor[TextVNodeProps.node] = textNode;\n                }\n                cursor[VNodeProps.flags] |= VNodeFlags.Inflated;\n            }\n            cursor = next;\n        }\n    }\n};\nexport const vnode_locate = (rootVNode, id) => {\n    ensureElementVNode(rootVNode);\n    let vNode = rootVNode;\n    const containerElement = rootVNode[ElementVNodeProps.element];\n    const { qVNodeRefs } = containerElement;\n    let elementOffset = -1;\n    let refElement;\n    if (typeof id === 'string') {\n        assertDefined(qVNodeRefs, 'Missing qVNodeRefs.');\n        elementOffset = parseInt(id);\n        refElement = qVNodeRefs.get(elementOffset);\n    }\n    else {\n        refElement = id;\n    }\n    assertDefined(refElement, 'Missing refElement.');\n    if (!vnode_isVNode(refElement)) {\n        assertTrue(containerElement.contains(refElement), `Couldn't find the element inside the container while locating the VNode.`);\n        // We need to find the vnode.\n        let parent = refElement;\n        const elementPath = [refElement];\n        while (parent && parent !== containerElement) {\n            parent = parent.parentElement;\n            elementPath.push(parent);\n        }\n        // Start at rootVNode and follow the `elementPath` to find the vnode.\n        for (let i = elementPath.length - 2; i >= 0; i--) {\n            vNode = vnode_getVNodeForChildNode(vNode, elementPath[i]);\n        }\n        elementOffset != -1 && qVNodeRefs.set(elementOffset, vNode);\n    }\n    else {\n        vNode = refElement;\n    }\n    if (typeof id === 'string') {\n        // process virtual node search.\n        const idLength = id.length;\n        let idx = indexOfAlphanumeric(id, idLength);\n        let childIdx = 0;\n        while (idx < idLength) {\n            const ch = id.charCodeAt(idx);\n            childIdx *= 26 /* a-z */;\n            if (ch >= 97 /* a */) {\n                // is lowercase\n                childIdx += ch - 97 /* a */;\n            }\n            else {\n                // is uppercase\n                childIdx += ch - 65 /* A */;\n                vNode = vnode_getChildWithIdx(vNode, childIdx);\n                childIdx = 0;\n            }\n            idx++;\n        }\n    }\n    return vNode;\n};\nconst vnode_getChildWithIdx = (vNode, childIdx) => {\n    let child = vnode_getFirstChild(vNode);\n    assertDefined(child, 'Missing child.');\n    while (child[VNodeProps.flags] >>> VNodeFlagsIndex.shift !== childIdx) {\n        child = vnode_getNextSibling(child);\n        assertDefined(child, 'Missing child.');\n    }\n    return child;\n};\nconst vNodeStack = [];\nexport const vnode_getVNodeForChildNode = (vNode, childElement) => {\n    ensureElementVNode(vNode);\n    let child = vnode_getFirstChild(vNode);\n    assertDefined(child, 'Missing child.');\n    // console.log(\n    //   'SEARCHING',\n    //   child[VNodeProps.flags],\n    //   child[VNodeProps.node]?.outerHTML,\n    //   childNode.outerHTML\n    // );\n    while (child && child[ElementVNodeProps.element] !== childElement) {\n        // console.log('CHILD', child[VNodeProps.node]?.outerHTML, childNode.outerHTML);\n        if (vnode_isVirtualVNode(child)) {\n            const next = vnode_getNextSibling(child);\n            const firstChild = vnode_getFirstChild(child);\n            if (firstChild) {\n                next && vNodeStack.push(next);\n                child = firstChild;\n            }\n            else {\n                child = next || (vNodeStack.length ? vNodeStack.pop() : null);\n            }\n        }\n        else {\n            const next = vnode_getNextSibling(child);\n            if (next) {\n                child = next;\n            }\n            else {\n                child = next || vNodeStack.pop();\n            }\n        }\n        assertDefined(child, 'Missing child.');\n    }\n    while (vNodeStack.length) {\n        vNodeStack.pop();\n    }\n    ensureElementVNode(child);\n    assertEqual(child[ElementVNodeProps.element], childElement, 'Child not found.');\n    // console.log('FOUND', child[VNodeProps.node]?.outerHTML);\n    return child;\n};\nconst indexOfAlphanumeric = (id, length) => {\n    let idx = 0;\n    while (idx < length) {\n        if (id.charCodeAt(idx) <= 57 /* 9 */) {\n            idx++;\n        }\n        else {\n            return idx;\n        }\n    }\n    return length;\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////\nexport const vnode_journalToString = (journal) => {\n    const lines = ['JOURNAL:'];\n    let idx = 0;\n    const length = journal.length;\n    function stringify(...args) {\n        lines.push('  ' +\n            args\n                .map((arg) => {\n                if (typeof arg === 'string') {\n                    return arg;\n                }\n                else if (arg && isHtmlElement(arg)) {\n                    const html = arg.outerHTML;\n                    const idx = html.indexOf('>');\n                    return '\\n    ' + (idx > 0 ? html.substring(0, idx + 1) : html);\n                }\n                else if (arg && isText(arg)) {\n                    return JSON.stringify(arg.nodeValue);\n                }\n                else {\n                    return String(arg);\n                }\n            })\n                .join(' '));\n    }\n    while (idx < length) {\n        const op = journal[idx++];\n        switch (op) {\n            case VNodeJournalOpCode.SetText:\n                stringify('SetText', journal[idx++], journal[idx++]);\n                break;\n            case VNodeJournalOpCode.SetAttribute:\n                stringify('SetAttribute', journal[idx++], journal[idx++], journal[idx++]);\n                break;\n            case VNodeJournalOpCode.HoistStyles:\n                stringify('HoistStyles');\n                break;\n            case VNodeJournalOpCode.Remove:\n                stringify('Remove', journal[idx++]);\n                let nodeToRemove;\n                while (idx < length && typeof (nodeToRemove = journal[idx]) !== 'number') {\n                    stringify('  ', nodeToRemove);\n                    idx++;\n                }\n                break;\n            case VNodeJournalOpCode.Insert:\n                stringify('Insert', journal[idx++], journal[idx++]);\n                let newChild;\n                while (idx < length && typeof (newChild = journal[idx]) !== 'number') {\n                    stringify('  ', newChild);\n                    idx++;\n                }\n                break;\n        }\n    }\n    lines.push('END JOURNAL');\n    return lines.join('\\n');\n};\nconst parseBoolean = (value) => {\n    if (value === 'false') {\n        return false;\n    }\n    return Boolean(value);\n};\nconst isBooleanAttr = (element, key) => {\n    const isBoolean = key == 'allowfullscreen' ||\n        key == 'async' ||\n        key == 'autofocus' ||\n        key == 'autoplay' ||\n        key == 'checked' ||\n        key == 'controls' ||\n        key == 'default' ||\n        key == 'defer' ||\n        key == 'disabled' ||\n        key == 'formnovalidate' ||\n        key == 'inert' ||\n        key == 'ismap' ||\n        key == 'itemscope' ||\n        key == 'loop' ||\n        key == 'multiple' ||\n        key == 'muted' ||\n        key == 'nomodule' ||\n        key == 'novalidate' ||\n        key == 'open' ||\n        key == 'playsinline' ||\n        key == 'readonly' ||\n        key == 'required' ||\n        key == 'reversed' ||\n        key == 'selected';\n    return isBoolean && key in element;\n};\nexport const vnode_applyJournal = (journal) => {\n    // console.log('APPLY JOURNAL', vnode_journalToString(journal));\n    let idx = 0;\n    const length = journal.length;\n    while (idx < length) {\n        const op = journal[idx++];\n        switch (op) {\n            case VNodeJournalOpCode.SetText:\n                const text = journal[idx++];\n                text.nodeValue = journal[idx++];\n                break;\n            case VNodeJournalOpCode.SetAttribute:\n                const element = journal[idx++];\n                let key = journal[idx++];\n                if (key === 'className') {\n                    key = 'class';\n                }\n                const value = journal[idx++];\n                if (isBooleanAttr(element, key)) {\n                    element[key] = parseBoolean(value);\n                }\n                else if (key === 'value' && key in element) {\n                    element.value = escapeHTML(String(value));\n                }\n                else if (key === dangerouslySetInnerHTML) {\n                    element.innerHTML = value;\n                }\n                else {\n                    if (value == null || value === false) {\n                        element.removeAttribute(key);\n                    }\n                    else {\n                        element.setAttribute(key, String(value));\n                    }\n                }\n                break;\n            case VNodeJournalOpCode.HoistStyles:\n                const document = journal[idx++];\n                const head = document.head;\n                const styles = document.querySelectorAll(QStylesAllSelector);\n                for (let i = 0; i < styles.length; i++) {\n                    head.appendChild(styles[i]);\n                }\n                break;\n            case VNodeJournalOpCode.Remove:\n                const removeParent = journal[idx++];\n                let nodeToRemove;\n                while (idx < length && typeof (nodeToRemove = journal[idx]) !== 'number') {\n                    removeParent.removeChild(nodeToRemove);\n                    idx++;\n                }\n                break;\n            case VNodeJournalOpCode.Insert:\n                const insertParent = journal[idx++];\n                const insertBefore = journal[idx++];\n                let newChild;\n                while (idx < length && typeof (newChild = journal[idx]) !== 'number') {\n                    insertParent.insertBefore(newChild, insertBefore);\n                    idx++;\n                }\n                break;\n        }\n    }\n    journal.length = 0;\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////\nexport const mapApp_findIndx = (elementVNode, key, start) => {\n    assertTrue(start % 2 === 0, 'Expecting even number.');\n    let bottom = start >> 1;\n    let top = (elementVNode.length - 2) >> 1;\n    while (bottom <= top) {\n        const mid = bottom + ((top - bottom) >> 1);\n        const midKey = elementVNode[mid << 1];\n        if (midKey === key) {\n            return mid << 1;\n        }\n        if (midKey < key) {\n            bottom = mid + 1;\n        }\n        else {\n            top = mid - 1;\n        }\n    }\n    return (bottom << 1) ^ -1;\n};\nexport const mapArray_set = (elementVNode, key, value, start) => {\n    const indx = mapApp_findIndx(elementVNode, key, start);\n    if (indx >= 0) {\n        if (value == null) {\n            elementVNode.splice(indx, 2);\n        }\n        else {\n            elementVNode[indx + 1] = value;\n        }\n    }\n    else if (value != null) {\n        elementVNode.splice(indx ^ -1, 0, key, value);\n    }\n};\nexport const mapApp_remove = (elementVNode, key, start) => {\n    const indx = mapApp_findIndx(elementVNode, key, start);\n    let value = null;\n    if (indx >= 0) {\n        value = elementVNode[indx + 1];\n        elementVNode.splice(indx, 2);\n        return value;\n    }\n    return value;\n};\nexport const mapArray_get = (elementVNode, key, start) => {\n    const indx = mapApp_findIndx(elementVNode, key, start);\n    if (indx >= 0) {\n        return elementVNode[indx + 1];\n    }\n    else {\n        return null;\n    }\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////\nexport const vnode_insertBefore = (journal, parent, newChild, insertBefore) => {\n    ensureElementOrVirtualVNode(parent);\n    if (vnode_isElementVNode(parent)) {\n        ensureMaterialized(parent);\n    }\n    let adjustedInsertBefore = null;\n    if (insertBefore == null) {\n        if (vnode_isVirtualVNode(parent)) {\n            // If `insertBefore` is null, than we need to insert at the end of the list.\n            // Well, not quite. If the parent is a virtual node, our \"last node\" is not the same\n            // as the DOM \"last node\". So in that case we need to look for the \"next node\" from\n            // our parent.\n            adjustedInsertBefore = vnode_getDomSibling(parent, true, false);\n        }\n    }\n    else if (vnode_isVirtualVNode(insertBefore)) {\n        // If the `insertBefore` is virtual, than we need to descend into the virtual and find e actual\n        adjustedInsertBefore = vnode_getDomSibling(insertBefore, true, true);\n    }\n    else {\n        adjustedInsertBefore = insertBefore;\n    }\n    adjustedInsertBefore && vnode_ensureInflatedIfText(journal, adjustedInsertBefore);\n    // If `insertBefore` is null, than we need to insert at the end of the list.\n    // Well, not quite. If the parent is a virtual node, our \"last node\" is not the same\n    // as the DOM \"last node\". So in that case we need to look for the \"next node\" from\n    // our parent.\n    // const shouldWeUseParentVirtual = insertBefore == null && vnode_isVirtualVNode(parent);\n    // const insertBeforeNode = shouldWeUseParentVirtual\n    //   ? vnode_getDomSibling(parent, true)\n    //   : insertBefore;\n    const domParentVNode = vnode_getDomParentVNode(parent);\n    const parentNode = domParentVNode && domParentVNode[ElementVNodeProps.element];\n    if (parentNode) {\n        const domChildren = vnode_getDomChildrenWithCorrectNamespacesToInsert(journal, domParentVNode, newChild);\n        domChildren.length &&\n            journal.push(VNodeJournalOpCode.Insert, parentNode, vnode_getNode(adjustedInsertBefore), ...domChildren);\n    }\n    // ensure that the previous node is unlinked.\n    const newChildCurrentParent = newChild[VNodeProps.parent];\n    if (newChildCurrentParent &&\n        (newChild[VNodeProps.previousSibling] ||\n            newChild[VNodeProps.nextSibling] ||\n            (vnode_isElementVNode(newChildCurrentParent) && newChildCurrentParent !== parent))) {\n        vnode_remove(journal, newChildCurrentParent, newChild, false);\n    }\n    // link newChild into the previous/next list\n    const vNext = insertBefore;\n    const vPrevious = vNext\n        ? vNext[VNodeProps.previousSibling]\n        : parent[ElementVNodeProps.lastChild];\n    if (vNext) {\n        vNext[VNodeProps.previousSibling] = newChild;\n    }\n    else {\n        parent[ElementVNodeProps.lastChild] = newChild;\n    }\n    if (vPrevious) {\n        vPrevious[VNodeProps.nextSibling] = newChild;\n    }\n    else {\n        parent[ElementVNodeProps.firstChild] = newChild;\n    }\n    newChild[VNodeProps.previousSibling] = vPrevious;\n    newChild[VNodeProps.nextSibling] = vNext;\n    newChild[VNodeProps.parent] = parent;\n};\nexport const vnode_getDomParent = (vnode) => {\n    vnode = vnode_getDomParentVNode(vnode);\n    return (vnode && vnode[ElementVNodeProps.element]);\n};\nexport const vnode_getDomParentVNode = (vnode) => {\n    while (vnode && !vnode_isElementVNode(vnode)) {\n        vnode = vnode[VNodeProps.parent];\n    }\n    return vnode;\n};\nexport const vnode_remove = (journal, vParent, vToRemove, removeDOM) => {\n    assertEqual(vParent, vnode_getParent(vToRemove), 'Parent mismatch.');\n    if (vnode_isTextVNode(vToRemove)) {\n        vnode_ensureTextInflated(journal, vToRemove);\n    }\n    const vPrevious = vToRemove[VNodeProps.previousSibling];\n    const vNext = vToRemove[VNodeProps.nextSibling];\n    if (vPrevious) {\n        vPrevious[VNodeProps.nextSibling] = vNext;\n    }\n    else {\n        vParent[ElementVNodeProps.firstChild] = vNext;\n    }\n    if (vNext) {\n        vNext[VNodeProps.previousSibling] = vPrevious;\n    }\n    else {\n        vParent[ElementVNodeProps.lastChild] = vPrevious;\n    }\n    vToRemove[VNodeProps.previousSibling] = null;\n    vToRemove[VNodeProps.nextSibling] = null;\n    if (removeDOM) {\n        const domParent = vnode_getDomParent(vParent);\n        const isInnerHTMLParent = vnode_getAttr(vParent, dangerouslySetInnerHTML);\n        if (isInnerHTMLParent) {\n            // ignore children, as they are inserted via innerHTML\n            return;\n        }\n        const children = vnode_getDOMChildNodes(journal, vToRemove);\n        domParent && children.length && journal.push(VNodeJournalOpCode.Remove, domParent, ...children);\n    }\n};\nexport const vnode_queryDomNodes = (vNode, selector, cb) => {\n    if (vnode_isElementVNode(vNode)) {\n        const element = vnode_getNode(vNode);\n        if (element.matches(selector)) {\n            cb(element);\n        }\n        else {\n            element.querySelectorAll(selector).forEach(cb);\n        }\n    }\n    else {\n        let child = vnode_getFirstChild(vNode);\n        while (child) {\n            vnode_queryDomNodes(child, selector, cb);\n            child = vnode_getNextSibling(child);\n        }\n    }\n};\nexport const vnode_truncate = (journal, vParent, vDelete) => {\n    assertDefined(vDelete, 'Missing vDelete.');\n    const parent = vnode_getDomParent(vParent);\n    const children = vnode_getDOMChildNodes(journal, vDelete);\n    parent && children.length && journal.push(VNodeJournalOpCode.Remove, parent, ...children);\n    const vPrevious = vDelete[VNodeProps.previousSibling];\n    if (vPrevious) {\n        vPrevious[VNodeProps.nextSibling] = null;\n    }\n    else {\n        vParent[ElementVNodeProps.firstChild] = null;\n    }\n    vParent[ElementVNodeProps.lastChild] = vPrevious;\n};\nexport const vnode_isChildOf = (vParent, vChild) => {\n    let vNode = vChild;\n    while (vNode) {\n        if (vNode === vParent) {\n            return true;\n        }\n        vNode = vnode_getParent(vNode);\n    }\n    return false;\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////\nexport const vnode_getElementName = (vnode) => {\n    const elementVNode = ensureElementVNode(vnode);\n    let elementName = elementVNode[ElementVNodeProps.elementName];\n    if (elementName === undefined) {\n        elementName = elementVNode[ElementVNodeProps.elementName] =\n            elementVNode[ElementVNodeProps.element].nodeName.toLowerCase();\n        elementVNode[VNodeProps.flags] |= vnode_getElementNamespaceFlags(elementName);\n    }\n    return elementName;\n};\nexport const vnode_getText = (vnode) => {\n    const textVNode = ensureTextVNode(vnode);\n    let text = textVNode[TextVNodeProps.text];\n    if (text === undefined) {\n        text = textVNode[TextVNodeProps.text] = textVNode[TextVNodeProps.node].nodeValue;\n    }\n    return text;\n};\nexport const vnode_setText = (journal, textVNode, text) => {\n    vnode_ensureTextInflated(journal, textVNode);\n    const textNode = textVNode[TextVNodeProps.node];\n    journal.push(VNodeJournalOpCode.SetText, textNode, (textVNode[TextVNodeProps.text] = text));\n};\nexport const vnode_getFirstChild = (vnode) => {\n    if (vnode_isTextVNode(vnode)) {\n        return null;\n    }\n    let vFirstChild = vnode[ElementVNodeProps.firstChild];\n    if (vFirstChild === undefined) {\n        vFirstChild = ensureMaterialized(vnode);\n    }\n    return vFirstChild;\n};\nexport const vnode_materialize = (vNode) => {\n    const element = vNode[ElementVNodeProps.element];\n    const firstChild = fastFirstChild(element);\n    const vNodeData = element.ownerDocument?.qVNodeData?.get(element);\n    const vFirstChild = vNodeData\n        ? materializeFromVNodeData(vNode, vNodeData, element, firstChild)\n        : materializeFromDOM(vNode, firstChild);\n    return vFirstChild;\n};\nconst ensureMaterialized = (vnode) => {\n    const vParent = ensureElementVNode(vnode);\n    let vFirstChild = vParent[ElementVNodeProps.firstChild];\n    if (vFirstChild === undefined) {\n        // need to materialize the vNode.\n        const element = vParent[ElementVNodeProps.element];\n        if (vParent[VNodeProps.parent] && shouldIgnoreChildren(element)) {\n            // We have a container with html value, must ignore the content.\n            vFirstChild =\n                vParent[ElementVNodeProps.firstChild] =\n                    vParent[ElementVNodeProps.lastChild] =\n                        null;\n        }\n        else {\n            vFirstChild = vnode_materialize(vParent);\n        }\n    }\n    assertTrue(vParent[ElementVNodeProps.firstChild] !== undefined, 'Did not materialize.');\n    assertTrue(vParent[ElementVNodeProps.lastChild] !== undefined, 'Did not materialize.');\n    return vFirstChild;\n};\nlet _fastHasAttribute = null;\nexport const shouldIgnoreChildren = (node) => {\n    if (!_fastHasAttribute) {\n        _fastHasAttribute = node.hasAttribute;\n    }\n    return _fastHasAttribute.call(node, QContainerAttr);\n};\nlet _fastNodeType = null;\nconst fastNodeType = (node) => {\n    if (!_fastNodeType) {\n        _fastNodeType = fastGetter(node, 'nodeType');\n    }\n    return _fastNodeType.call(node);\n};\nconst fastIsTextOrElement = (node) => {\n    const type = fastNodeType(node);\n    return type === /* Node.TEXT_NODE */ 3 || type === /* Node.ELEMENT_NODE */ 1;\n};\nlet _fastNextSibling = null;\nexport const fastNextSibling = (node) => {\n    if (!_fastNextSibling) {\n        _fastNextSibling = fastGetter(node, 'nextSibling');\n    }\n    if (!_fastFirstChild) {\n        _fastFirstChild = fastGetter(node, 'firstChild');\n    }\n    while (node) {\n        node = _fastNextSibling.call(node);\n        if (node !== null) {\n            const type = fastNodeType(node);\n            if (type === /* Node.TEXT_NODE */ 3 || type === /* Node.ELEMENT_NODE */ 1) {\n                break;\n            }\n            else if (type === /* Node.COMMENT_NODE */ 8) {\n                const nodeValue = node.nodeValue;\n                if (nodeValue?.startsWith(QIgnore)) {\n                    return getNodeAfterCommentNode(node, QContainerIsland, _fastNextSibling, _fastFirstChild);\n                }\n                else if (node.nodeValue?.startsWith(QContainerIslandEnd)) {\n                    return getNodeAfterCommentNode(node, QIgnoreEnd, _fastNextSibling, _fastFirstChild);\n                }\n                else if (nodeValue?.startsWith(QContainerAttr)) {\n                    while (node && (node = _fastNextSibling.call(node))) {\n                        if (fastNodeType(node) === /* Node.COMMENT_NODE */ 8 &&\n                            node.nodeValue?.startsWith(QContainerAttrEnd)) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return node;\n};\nfunction getNodeAfterCommentNode(node, commentValue, nextSibling, firstChild) {\n    while (node) {\n        if (node.nodeValue?.startsWith(commentValue)) {\n            node = nextSibling.call(node) || null;\n            return node;\n        }\n        let nextNode = firstChild.call(node);\n        if (!nextNode) {\n            nextNode = nextSibling.call(node);\n        }\n        if (!nextNode) {\n            nextNode = fastParentNode(node);\n            if (nextNode) {\n                nextNode = nextSibling.call(nextNode);\n            }\n        }\n        node = nextNode;\n    }\n    return null;\n}\nlet _fastParentNode = null;\nconst fastParentNode = (node) => {\n    if (!_fastParentNode) {\n        _fastParentNode = fastGetter(node, 'parentNode');\n    }\n    return _fastParentNode.call(node);\n};\nlet _fastFirstChild = null;\nconst fastFirstChild = (node) => {\n    if (!_fastFirstChild) {\n        _fastFirstChild = fastGetter(node, 'firstChild');\n    }\n    node = node && _fastFirstChild.call(node);\n    while (node && !fastIsTextOrElement(node)) {\n        node = fastNextSibling(node);\n    }\n    return node;\n};\nconst fastGetter = (prototype, name) => {\n    let getter;\n    while (prototype && !(getter = Object.getOwnPropertyDescriptor(prototype, name)?.get)) {\n        prototype = Object.getPrototypeOf(prototype);\n    }\n    return (getter ||\n        function () {\n            return this[name];\n        });\n};\nconst isQStyleElement = (node) => {\n    return (isElement(node) &&\n        node.nodeName === 'STYLE' &&\n        (node.hasAttribute(QScopedStyle) || node.hasAttribute(QStyle)));\n};\nconst materializeFromDOM = (vParent, firstChild) => {\n    let vFirstChild = null;\n    // materialize from DOM\n    let child = firstChild;\n    while (isQStyleElement(child)) {\n        // skip over style elements, as those need to be moved to the head.\n        // VNode pretends that `<style q:style q:sstyle>` elements do not exist.\n        child = fastNextSibling(child);\n    }\n    let vChild = null;\n    while (child) {\n        const nodeType = fastNodeType(child);\n        let vNextChild = null;\n        if (nodeType === /* Node.TEXT_NODE */ 3) {\n            vNextChild = vnode_newText(child, child.textContent ?? undefined);\n        }\n        else if (nodeType === /* Node.ELEMENT_NODE */ 1) {\n            vNextChild = vnode_newUnMaterializedElement(child);\n        }\n        if (vNextChild) {\n            vNextChild[VNodeProps.parent] = vParent;\n            vChild && (vChild[VNodeProps.nextSibling] = vNextChild);\n            vNextChild[VNodeProps.previousSibling] = vChild;\n            vChild = vNextChild;\n        }\n        if (!vFirstChild) {\n            vParent[ElementVNodeProps.firstChild] = vFirstChild = vChild;\n        }\n        child = fastNextSibling(child);\n    }\n    vParent[ElementVNodeProps.lastChild] = vChild || null;\n    vParent[ElementVNodeProps.firstChild] = vFirstChild;\n    return vFirstChild;\n};\nexport const vnode_getNextSibling = (vnode) => {\n    return vnode[VNodeProps.nextSibling];\n};\nexport const vnode_getPreviousSibling = (vnode) => {\n    return vnode[VNodeProps.previousSibling];\n};\nexport const vnode_getAttrKeys = (vnode) => {\n    const type = vnode[VNodeProps.flags];\n    if ((type & VNodeFlags.ELEMENT_OR_VIRTUAL_MASK) !== 0) {\n        vnode_ensureElementInflated(vnode);\n        const keys = [];\n        for (let i = vnode_getPropStartIndex(vnode); i < vnode.length; i = i + 2) {\n            const key = vnode[i];\n            if (!key.startsWith(':')) {\n                keys.push(key);\n            }\n        }\n        return keys;\n    }\n    return [];\n};\nexport const vnode_setAttr = (journal, vnode, key, value) => {\n    const type = vnode[VNodeProps.flags];\n    if ((type & VNodeFlags.ELEMENT_OR_VIRTUAL_MASK) !== 0) {\n        vnode_ensureElementInflated(vnode);\n        const idx = mapApp_findIndx(vnode, key, vnode_getPropStartIndex(vnode));\n        if (idx >= 0) {\n            if (vnode[idx + 1] != value && (type & VNodeFlags.Element) !== 0) {\n                // Values are different, update DOM\n                const element = vnode[ElementVNodeProps.element];\n                journal && journal.push(VNodeJournalOpCode.SetAttribute, element, key, value);\n            }\n            if (value == null) {\n                vnode.splice(idx, 2);\n            }\n            else {\n                vnode[idx + 1] = value;\n            }\n        }\n        else if (value != null) {\n            vnode.splice(idx ^ -1, 0, key, value);\n            if ((type & VNodeFlags.Element) !== 0) {\n                // New value, update DOM\n                const element = vnode[ElementVNodeProps.element];\n                journal && journal.push(VNodeJournalOpCode.SetAttribute, element, key, value);\n            }\n        }\n    }\n};\nexport const vnode_getAttr = (vnode, key) => {\n    const type = vnode[VNodeProps.flags];\n    if ((type & VNodeFlags.ELEMENT_OR_VIRTUAL_MASK) !== 0) {\n        vnode_ensureElementInflated(vnode);\n        return mapArray_get(vnode, key, vnode_getPropStartIndex(vnode));\n    }\n    return null;\n};\nexport const vnode_getProp = (vnode, key, getObject) => {\n    const type = vnode[VNodeProps.flags];\n    if ((type & VNodeFlags.ELEMENT_OR_VIRTUAL_MASK) !== 0) {\n        type & VNodeFlags.Element && vnode_ensureElementInflated(vnode);\n        const idx = mapApp_findIndx(vnode, key, vnode_getPropStartIndex(vnode));\n        if (idx >= 0) {\n            let value = vnode[idx + 1];\n            if (typeof value === 'string' && getObject) {\n                vnode[idx + 1] = value = getObject(value);\n            }\n            return value;\n        }\n    }\n    return null;\n};\nexport const vnode_setProp = (vnode, key, value) => {\n    ensureElementOrVirtualVNode(vnode);\n    const idx = mapApp_findIndx(vnode, key, vnode_getPropStartIndex(vnode));\n    if (idx >= 0) {\n        vnode[idx + 1] = value;\n    }\n    else if (value != null) {\n        vnode.splice(idx ^ -1, 0, key, value);\n    }\n};\nexport const vnode_getPropStartIndex = (vnode) => {\n    const type = vnode[VNodeProps.flags] & VNodeFlags.TYPE_MASK;\n    if (type === VNodeFlags.Element) {\n        return ElementVNodeProps.PROPS_OFFSET;\n    }\n    else if (type === VNodeFlags.Virtual) {\n        return VirtualVNodeProps.PROPS_OFFSET;\n    }\n    throw throwErrorAndStop('Invalid vnode type.');\n};\nexport const vnode_propsToRecord = (vnode) => {\n    const props = {};\n    if (!vnode_isTextVNode(vnode)) {\n        for (let i = vnode_getPropStartIndex(vnode); i < vnode.length;) {\n            const key = vnode[i++];\n            const value = vnode[i++];\n            props[key] = value;\n        }\n    }\n    return props;\n};\nexport const vnode_getParent = (vnode) => {\n    return vnode[VNodeProps.parent] || null;\n};\nexport const vnode_getNode = (vnode) => {\n    if (vnode === null || vnode_isVirtualVNode(vnode)) {\n        return null;\n    }\n    if (vnode_isElementVNode(vnode)) {\n        return vnode[ElementVNodeProps.element];\n    }\n    assertTrue(vnode_isTextVNode(vnode), 'Expecting Text Node.');\n    return vnode[TextVNodeProps.node];\n};\nexport function vnode_toString(depth = 10, offset = '', materialize = false) {\n    let vnode = this;\n    if (depth === 0) {\n        return '...';\n    }\n    if (vnode === null) {\n        return 'null';\n    }\n    if (vnode === undefined) {\n        return 'undefined';\n    }\n    const strings = [];\n    do {\n        if (vnode_isTextVNode(vnode)) {\n            strings.push(qwikDebugToString(vnode_getText(vnode)));\n        }\n        else if (vnode_isVirtualVNode(vnode)) {\n            const idx = vnode[VNodeProps.flags] >>> VNodeFlagsIndex.shift;\n            const attrs = ['[' + String(idx) + ']'];\n            vnode_getAttrKeys(vnode).forEach((key) => {\n                if (key !== DEBUG_TYPE) {\n                    const value = vnode_getAttr(vnode, key);\n                    attrs.push(' ' + key + '=' + qwikDebugToString(value));\n                }\n            });\n            const name = VirtualTypeName[vnode_getAttr(vnode, DEBUG_TYPE) || VirtualType.Virtual] ||\n                VirtualTypeName[VirtualType.Virtual];\n            strings.push('<' + name + attrs.join('') + '>');\n            const child = vnode_getFirstChild(vnode);\n            child && strings.push('  ' + vnode_toString.call(child, depth - 1, offset + '  ', true));\n            strings.push('</' + name + '>');\n        }\n        else if (vnode_isElementVNode(vnode)) {\n            const tag = vnode_getElementName(vnode);\n            const attrs = [];\n            const keys = vnode_getAttrKeys(vnode);\n            keys.forEach((key) => {\n                const value = vnode_getAttr(vnode, key);\n                attrs.push(' ' + key + '=' + qwikDebugToString(value));\n            });\n            const node = vnode_getNode(vnode);\n            if (node) {\n                const vnodeData = node.ownerDocument.qVNodeData?.get(node);\n                if (vnodeData) {\n                    attrs.push(' q:vnodeData=' + qwikDebugToString(vnodeData));\n                }\n            }\n            const domAttrs = node.attributes;\n            for (let i = 0; i < domAttrs.length; i++) {\n                const attr = domAttrs[i];\n                if (keys.indexOf(attr.name) === -1) {\n                    attrs.push(' ' + attr.name + (attr.value ? '=' + qwikDebugToString(attr.value) : ''));\n                }\n            }\n            strings.push('<' + tag + attrs.join('') + '>');\n            if (vnode_isMaterialized(vnode) || materialize) {\n                const child = vnode_getFirstChild(vnode);\n                child && strings.push('  ' + vnode_toString.call(child, depth - 1, offset + '  ', true));\n            }\n            else {\n                strings.push('  <!-- not materialized --!>');\n            }\n            strings.push('</' + tag + '>');\n        }\n        vnode = vnode_getNextSibling(vnode) || null;\n    } while (vnode);\n    return strings.join('\\n' + offset);\n}\nconst isNumber = (ch) => /* `0` */ 48 <= ch && ch <= 57; /* `9` */\nconst isLowercase = (ch) => /* `a` */ 97 <= ch && ch <= 122; /* `z` */\nconst stack = [];\nfunction materializeFromVNodeData(vParent, vData, element, child) {\n    let idx = 0;\n    let nextToConsumeIdx = 0;\n    let vFirst = null;\n    let vLast = null;\n    let previousTextNode = null;\n    let ch = 0;\n    let peekCh = 0;\n    const peek = () => {\n        if (peekCh !== 0) {\n            return peekCh;\n        }\n        else {\n            return (peekCh = nextToConsumeIdx < vData.length ? vData.charCodeAt(nextToConsumeIdx) : 0);\n        }\n    };\n    const consume = () => {\n        ch = peek();\n        peekCh = 0;\n        nextToConsumeIdx++;\n        return ch;\n    };\n    const addVNode = (node) => {\n        node[VNodeProps.flags] =\n            (node[VNodeProps.flags] & VNodeFlagsIndex.negated_mask) | (idx << VNodeFlagsIndex.shift);\n        idx++;\n        vLast && (vLast[VNodeProps.nextSibling] = node);\n        node[VNodeProps.previousSibling] = vLast;\n        node[VNodeProps.parent] = vParent;\n        if (!vFirst) {\n            vParent[ElementVNodeProps.firstChild] = vFirst = node;\n        }\n        vLast = node;\n    };\n    const consumeValue = () => {\n        consume();\n        const start = nextToConsumeIdx;\n        while ((peek() <= 58 /* `:` */ && peekCh !== 0) ||\n            peekCh === 95 /* `_` */ ||\n            (peekCh >= 65 /* `A` */ && peekCh <= 90) /* `Z` */ ||\n            (peekCh >= 97 /* `a` */ && peekCh <= 122) /* `z` */) {\n            consume();\n        }\n        return vData.substring(start, nextToConsumeIdx);\n    };\n    let textIdx = 0;\n    let combinedText = null;\n    let container = null;\n    // console.log(\n    //   'processVNodeData',\n    //   vNodeData,\n    //   (child?.parentNode as HTMLElement | undefined)?.outerHTML\n    // );\n    while (peek() !== 0) {\n        if (isNumber(peek())) {\n            // Element counts get encoded as numbers.\n            while (!isElement(child)) {\n                child = fastNextSibling(child);\n                if (!child) {\n                    throwErrorAndStop('Materialize error: missing element: ' + vData + ' ' + peek() + ' ' + nextToConsumeIdx);\n                }\n            }\n            // We pretend that style element's don't exist as they can get moved out.\n            while (isQStyleElement(child)) {\n                // skip over style elements, as those need to be moved to the head\n                // and are not included in the counts.\n                child = fastNextSibling(child);\n            }\n            combinedText = null;\n            previousTextNode = null;\n            let value = 0;\n            while (isNumber(peek())) {\n                value *= 10;\n                value += consume() - 48; /* `0` */\n            }\n            while (value--) {\n                addVNode(vnode_newUnMaterializedElement(child));\n                child = fastNextSibling(child);\n            }\n            // collect the elements;\n        }\n        else if (peek() === VNodeDataChar.SCOPED_STYLE) {\n            vnode_setAttr(null, vParent, QScopedStyle, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.RENDER_FN) {\n            vnode_setAttr(null, vParent, OnRenderProp, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.ID) {\n            if (!container) {\n                container = getDomContainer(element);\n            }\n            const id = consumeValue();\n            container.$setRawState$(parseInt(id), vParent);\n            isDev && vnode_setAttr(null, vParent, ELEMENT_ID, id);\n        }\n        else if (peek() === VNodeDataChar.PROPS) {\n            vnode_setAttr(null, vParent, ELEMENT_PROPS, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.SLOT_REF) {\n            vnode_setAttr(null, vParent, QSlotRef, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.KEY) {\n            vnode_setAttr(null, vParent, ELEMENT_KEY, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.SEQ) {\n            vnode_setAttr(null, vParent, ELEMENT_SEQ, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.SEQ_IDX) {\n            vnode_setAttr(null, vParent, ELEMENT_SEQ_IDX, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.CONTEXT) {\n            vnode_setAttr(null, vParent, QCtxAttr, consumeValue());\n        }\n        else if (peek() === VNodeDataChar.OPEN) {\n            consume();\n            addVNode(vnode_newVirtual());\n            stack.push(vParent, vFirst, vLast, previousTextNode, idx);\n            idx = 0;\n            vParent = vLast;\n            vFirst = vLast = null;\n        }\n        else if (peek() === VNodeDataChar.SEPARATOR) {\n            const key = consumeValue();\n            const value = consumeValue();\n            vnode_setAttr(null, vParent, key, value);\n        }\n        else if (peek() === VNodeDataChar.CLOSE) {\n            consume();\n            vParent[ElementVNodeProps.lastChild] = vLast;\n            idx = stack.pop();\n            previousTextNode = stack.pop();\n            vLast = stack.pop();\n            vFirst = stack.pop();\n            vParent = stack.pop();\n        }\n        else if (peek() === VNodeDataChar.SLOT) {\n            vnode_setAttr(null, vParent, QSlot, consumeValue());\n        }\n        else {\n            const textNode = child && fastNodeType(child) === /* Node.TEXT_NODE */ 3 ? child : null;\n            // must be alphanumeric\n            if (combinedText === null) {\n                combinedText = textNode ? textNode.nodeValue : null;\n                textIdx = 0;\n            }\n            let length = 0;\n            while (isLowercase(peek())) {\n                length += consume() - 97; /* `a` */\n                length *= 26;\n            }\n            length += consume() - 65; /* `A` */\n            const text = combinedText === null ? '' : combinedText.substring(textIdx, textIdx + length);\n            addVNode((previousTextNode = vnode_newSharedText(previousTextNode, textNode, text)));\n            textIdx += length;\n            // Text nodes get encoded as alphanumeric characters.\n        }\n    }\n    vParent[ElementVNodeProps.lastChild] = vLast;\n    return vFirst;\n}\nexport const vnode_getType = (vnode) => {\n    const type = vnode[VNodeProps.flags];\n    if (type & VNodeFlags.Element) {\n        return 1 /* Element */;\n    }\n    else if (type & VNodeFlags.Virtual) {\n        return 11 /* Virtual */;\n    }\n    else if (type & VNodeFlags.Text) {\n        return 3 /* Text */;\n    }\n    throw throwErrorAndStop('Unknown vnode type: ' + type);\n};\nconst isElement = (node) => node && typeof node == 'object' && fastNodeType(node) === /** Node.ELEMENT_NODE* */ 1;\n/// These global variables are used to avoid creating new arrays for each call to `vnode_getPathToClosestDomNode`.\nconst aPath = [];\nconst bPath = [];\nexport const vnode_documentPosition = (a, b) => {\n    if (a === b) {\n        return 0;\n    }\n    let aDepth = -1;\n    let bDepth = -1;\n    while (a) {\n        a = (aPath[++aDepth] = a)[VNodeProps.parent];\n    }\n    while (b) {\n        b = (bPath[++bDepth] = b)[VNodeProps.parent];\n    }\n    while (aDepth >= 0 && bDepth >= 0) {\n        a = aPath[aDepth];\n        b = bPath[bDepth];\n        if (a === b) {\n            // if the nodes are the same, we need to check the next level.\n            aDepth--;\n            bDepth--;\n        }\n        else {\n            // We found a difference so we need to scan nodes at this level.\n            let cursor = b;\n            do {\n                cursor = vnode_getNextSibling(cursor);\n                if (cursor === a) {\n                    return 1;\n                }\n            } while (cursor);\n            cursor = b;\n            do {\n                cursor = vnode_getPreviousSibling(cursor);\n                if (cursor === a) {\n                    return -1;\n                }\n            } while (cursor);\n            // The node is not in the list of siblings, that means it must be disconnected.\n            return 1;\n        }\n    }\n    return aDepth < bDepth ? -1 : 1;\n};\n/**\n * Use this method to find the parent component for projection.\n *\n * Normally the parent component is just the first component which we encounter while traversing the\n * parents.\n *\n * However, if during traversal we encounter a projection, than we have to follow the projection,\n * and nod weth the projection component is further away (it is the parent's parent of the\n * projection's)\n *\n * So in general we have to go up as many parent components as there are projections nestings.\n *\n * - No projection nesting first parent component.\n * - One projection nesting, second parent component (parent's parent).\n * - Three projection nesting, third parent component (parent's parent's parent).\n * - And so on.\n *\n * @param vHost\n * @param getObjectById\n * @returns\n */\nexport const vnode_getProjectionParentComponent = (vHost, rootVNode) => {\n    let projectionDepth = 1;\n    while (projectionDepth--) {\n        while (vHost &&\n            (vnode_isVirtualVNode(vHost) ? vnode_getProp(vHost, OnRenderProp, null) === null : true)) {\n            const qSlotParentProp = vnode_getProp(vHost, QSlotParent, null);\n            const qSlotParent = qSlotParentProp &&\n                (typeof qSlotParentProp === 'string'\n                    ? vnode_locate(rootVNode, qSlotParentProp)\n                    : qSlotParentProp);\n            const vProjectionParent = vnode_isVirtualVNode(vHost) && qSlotParent;\n            if (vProjectionParent) {\n                // We found a projection, so we need to go up one more level.\n                projectionDepth++;\n            }\n            vHost = vProjectionParent || vnode_getParent(vHost);\n        }\n        if (projectionDepth > 0) {\n            vHost = vnode_getParent(vHost);\n        }\n    }\n    return vHost;\n};\nconst VNodeArray = class VNode extends Array {\n    static createElement(flags, parent, previousSibling, nextSibling, firstChild, lastChild, element, elementName) {\n        const vnode = new VNode(flags, parent, previousSibling, nextSibling);\n        vnode.push(firstChild, lastChild, element, elementName);\n        return vnode;\n    }\n    static createText(flags, parent, previousSibling, nextSibling, textNode, text) {\n        const vnode = new VNode(flags, parent, previousSibling, nextSibling);\n        vnode.push(textNode, text);\n        return vnode;\n    }\n    static createVirtual(flags, parent, previousSibling, nextSibling, firstChild, lastChild) {\n        const vnode = new VNode(flags, parent, previousSibling, nextSibling);\n        vnode.push(firstChild, lastChild);\n        return vnode;\n    }\n    constructor(flags, parent, previousSibling, nextSibling) {\n        super();\n        this.push(flags, parent, previousSibling, nextSibling);\n        if (isDev) {\n            this.toString = vnode_toString;\n        }\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined } from '../error/assert';\nimport { QScopedStyle, RenderEvent } from '../util/markers';\nimport { maybeThen, promiseAllLazy, safeCall } from '../util/promises';\nimport { newInvokeContext } from '../use/use-core';\nimport { isArray, isFunction, isString } from '../util/types';\nimport { intToStr } from '../container/container';\nimport { fromCamelToKebabCase } from '../util/case';\nimport { qError, QError_stringifyClassOrStyle } from '../error/error';\nimport { seal } from '../util/qdev';\nimport { SkipRender } from './jsx/utils.public';\nimport { handleError } from './error-handling';\nimport { HOST_FLAG_DIRTY, HOST_FLAG_MOUNTED } from '../state/context';\nimport { isSignalV1, SignalUnassignedException } from '../state/signal';\nimport { isJSXNode } from './jsx/jsx-runtime';\nimport { isUnitlessNumber } from '../util/unitless_number';\nimport { isServerPlatform } from '../platform/platform';\nimport { executeSSRTasks } from './dom/notify-render';\nimport { logWarn } from '../util/log';\nimport { SubscriptionType } from '../state/common';\nimport {} from '../../server/qwik-types';\nimport { vnode_getProp, vnode_isVNode } from '../v2/client/vnode';\nimport { isClassAttr } from '../v2/shared/scoped-styles';\nimport { isPreventDefault } from '../v2/shared/event-names';\nexport const executeComponent = (rCtx, elCtx, attempt) => {\n    elCtx.$flags$ &= ~HOST_FLAG_DIRTY;\n    elCtx.$flags$ |= HOST_FLAG_MOUNTED;\n    elCtx.$slots$ = [];\n    elCtx.li.length = 0;\n    const hostElement = elCtx.$element$;\n    const componentQRL = elCtx.$componentQrl$;\n    const props = elCtx.$props$;\n    const iCtx = newInvokeContext(rCtx.$static$.$locale$, hostElement, undefined, RenderEvent);\n    const waitOn = (iCtx.$waitOn$ = []);\n    assertDefined(componentQRL, `render: host element to render must have a $renderQrl$:`, elCtx);\n    assertDefined(props, `render: host element to render must have defined props`, elCtx);\n    // Set component context\n    const newCtx = pushRenderContext(rCtx);\n    newCtx.$cmpCtx$ = elCtx;\n    newCtx.$slotCtx$ = undefined;\n    // Invoke render hook\n    iCtx.$subscriber$ = [SubscriptionType.HOST, hostElement];\n    iCtx.$renderCtx$ = rCtx;\n    // Resolve render function\n    componentQRL.$setContainer$(rCtx.$static$.$containerState$.$containerEl$);\n    const componentFn = componentQRL.getFn(iCtx);\n    return safeCall(() => componentFn(props), (jsxNode) => {\n        return maybeThen(isServerPlatform()\n            ? maybeThen(promiseAllLazy(waitOn), () => \n            // Run dirty tasks before SSR output is generated.\n            maybeThen(executeSSRTasks(rCtx.$static$.$containerState$, rCtx), () => promiseAllLazy(waitOn)))\n            : promiseAllLazy(waitOn), () => {\n            if (elCtx.$flags$ & HOST_FLAG_DIRTY) {\n                if (attempt && attempt > 100) {\n                    logWarn(`Infinite loop detected. Element: ${elCtx.$componentQrl$?.$symbol$}`);\n                }\n                else {\n                    return executeComponent(rCtx, elCtx, attempt ? attempt + 1 : 1);\n                }\n            }\n            return {\n                node: jsxNode,\n                rCtx: newCtx,\n            };\n        });\n    }, (err) => {\n        if (err === SignalUnassignedException) {\n            if (attempt && attempt > 100) {\n                logWarn(`Infinite loop detected. Element: ${elCtx.$componentQrl$?.$symbol$}`);\n            }\n            else {\n                return maybeThen(promiseAllLazy(waitOn), () => {\n                    return executeComponent(rCtx, elCtx, attempt ? attempt + 1 : 1);\n                });\n            }\n        }\n        handleError(err, hostElement, rCtx.$static$.$containerState$);\n        return {\n            node: SkipRender,\n            rCtx: newCtx,\n        };\n    });\n};\nexport const createRenderContext = (doc, containerState) => {\n    const ctx = {\n        $static$: {\n            $doc$: doc,\n            $locale$: containerState.$serverData$.locale,\n            $containerState$: containerState,\n            $hostElements$: new Set(),\n            $operations$: [],\n            $postOperations$: [],\n            $roots$: [],\n            $addSlots$: [],\n            $rmSlots$: [],\n            $visited$: [],\n        },\n        $cmpCtx$: null,\n        $slotCtx$: undefined,\n    };\n    seal(ctx);\n    seal(ctx.$static$);\n    return ctx;\n};\nexport const pushRenderContext = (ctx) => {\n    const newCtx = {\n        $static$: ctx.$static$,\n        $cmpCtx$: ctx.$cmpCtx$,\n        $slotCtx$: ctx.$slotCtx$,\n    };\n    return newCtx;\n};\nexport const serializeClassWithHost = (obj, hostCtx) => {\n    if (hostCtx?.$scopeIds$?.length) {\n        return hostCtx.$scopeIds$.join(' ') + ' ' + serializeClass(obj);\n    }\n    return serializeClass(obj);\n};\nexport const serializeClassWithHost2 = (obj, host) => {\n    if (host) {\n        const scopedStyleIdsString = vnode_isVNode(host)\n            ? vnode_getProp(host, QScopedStyle, null)\n            : host.getProp(QScopedStyle);\n        if (scopedStyleIdsString && scopedStyleIdsString.length) {\n            return scopedStyleIdsString + ' ' + serializeClass(obj);\n        }\n    }\n    return serializeClass(obj);\n};\nexport const serializeClass = (obj) => {\n    if (!obj) {\n        return '';\n    }\n    if (isString(obj)) {\n        return obj.trim();\n    }\n    const classes = [];\n    if (isArray(obj)) {\n        for (const o of obj) {\n            const classList = serializeClass(o);\n            if (classList) {\n                classes.push(classList);\n            }\n        }\n    }\n    else {\n        for (const [key, value] of Object.entries(obj)) {\n            if (value) {\n                classes.push(key.trim());\n            }\n        }\n    }\n    return classes.join(' ');\n};\nexport const stringifyStyle = (obj) => {\n    if (obj == null) {\n        return '';\n    }\n    if (typeof obj == 'object') {\n        if (isArray(obj)) {\n            throw qError(QError_stringifyClassOrStyle, obj, 'style');\n        }\n        else {\n            const chunks = [];\n            for (const key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    const value = obj[key];\n                    if (value != null) {\n                        if (key.startsWith('--')) {\n                            chunks.push(key + ':' + value);\n                        }\n                        else {\n                            chunks.push(fromCamelToKebabCase(key) + ':' + setValueForStyle(key, value));\n                        }\n                    }\n                }\n            }\n            return chunks.join(';');\n        }\n    }\n    return String(obj);\n};\nexport const serializeBooleanOrNumberAttribute = (value) => {\n    return value != null ? String(value) : null;\n};\nexport function serializeAttribute(key, value, styleScopedId) {\n    if (isClassAttr(key)) {\n        const serializedClass = serializeClass(value);\n        value = styleScopedId\n            ? styleScopedId + (serializedClass.length ? ' ' + serializedClass : serializedClass)\n            : serializedClass;\n    }\n    else if (key === 'style') {\n        value = stringifyStyle(value);\n    }\n    else if (isEnumeratedBooleanAttribute(key) || typeof value === 'number') {\n        // aria attrs, tabindex etc.\n        value = serializeBooleanOrNumberAttribute(value);\n    }\n    else if (value === false || value == null) {\n        value = null;\n    }\n    else if (value === true && isPreventDefault(key)) {\n        value = '';\n    }\n    return value;\n}\nfunction isEnumeratedBooleanAttribute(key) {\n    return isAriaAttribute(key) || ['spellcheck', 'draggable', 'contenteditable'].includes(key);\n}\nconst setValueForStyle = (styleName, value) => {\n    if (typeof value === 'number' && value !== 0 && !isUnitlessNumber(styleName)) {\n        return value + 'px';\n    }\n    return value;\n};\nexport const getNextIndex = (ctx) => {\n    return intToStr(ctx.$static$.$containerState$.$elementIndex$++);\n};\nexport const getNextUniqueIndex = (container) => {\n    return intToStr(container.$currentUniqueId$++);\n};\nexport const setQId = (rCtx, elCtx) => {\n    const id = getNextIndex(rCtx);\n    elCtx.$id$ = id;\n};\nexport const jsxToString = (data) => {\n    if (isSignalV1(data)) {\n        return jsxToString(data.value);\n    }\n    return data == null || typeof data === 'boolean' ? '' : String(data);\n};\nexport function isAriaAttribute(prop) {\n    return prop.startsWith('aria-');\n}\nexport const shouldWrapFunctional = (res, node) => {\n    if (node.key) {\n        return !isJSXNode(res) || (!isFunction(res.type) && res.key != node.key);\n    }\n    return false;\n};\nexport const static_listeners = 1 << 0;\nexport const static_subtree = 1 << 1;\nexport const dangerouslySetInnerHTML = 'dangerouslySetInnerHTML';\n//# sourceMappingURL=data:application/json;base64,","import { assertEqual, assertNumber, assertTrue } from '../error/assert';\nimport { QError_immutableProps, qError } from '../error/error';\nimport { tryGetInvokeContext } from '../use/use-core';\nimport { logError, logWarn } from '../util/log';\nimport { ComputedEvent, RenderEvent } from '../util/markers';\nimport { qDev, qSerialize } from '../util/qdev';\nimport { isArray, isObject, isSerializableObject } from '../util/types';\nimport { SERIALIZER_PROXY_UNWRAP, SerializationConstant } from '../v2/shared/shared-serialization';\nimport { LocalSubscriptionManager, fastSkipSerialize, unwrapProxy, verifySerializable, } from './common';\nimport { QObjectFlagsSymbol, QObjectImmutable, QObjectManagerSymbol, QObjectRecursive, QObjectTargetSymbol, _CONST_PROPS, } from './constants';\nimport { isSignalV1 } from './signal';\n/** Creates a proxy that notifies of any writes. */\nexport const getOrCreateProxy = (target, storeMgr, flags = 0) => {\n    const proxy = storeMgr.$proxyMap$.get(target);\n    if (proxy) {\n        return proxy;\n    }\n    if (flags !== 0) {\n        setObjectFlags(target, flags);\n    }\n    return createProxy(target, storeMgr, undefined);\n};\nexport const isStore = (target) => {\n    const unwrap = unwrapProxy(target);\n    return unwrap !== target;\n};\nexport const createProxy = (target, storeTracker, subs) => {\n    assertEqual(unwrapProxy(target), target, 'Unexpected proxy at this location', target);\n    assertTrue(!storeTracker.$proxyMap$.has(target), 'Proxy was already created', target);\n    assertTrue(isObject(target), 'Target must be an object');\n    assertTrue(isSerializableObject(target) || isArray(target), 'Target must be a serializable object');\n    const manager = storeTracker.$subsManager$.$createManager$(subs);\n    const getSerializedState = (target) => {\n        return target[SerializationConstant.Store_CHAR];\n    };\n    const subscriptionManagerFromString = null;\n    const removeSerializedState = (target) => {\n        delete target[SerializationConstant.Store_CHAR];\n    };\n    const addSubscriptions = (serializedState, serializedStateObject, target) => {\n        removeSerializedState(serializedStateObject);\n        setObjectFlags(target, serializedState.charCodeAt(0) - 48 /*'0'*/);\n        subscriptionManagerFromString(manager, serializedState.substring(1), storeTracker.$getObjectById$);\n    };\n    /**\n     * If we have an `SerializationConstant.UNDEFINED_CHAR` as a prop, then this means that this is\n     * serialized store with an array as a value. We need to handle this separately, because the proxy\n     * target is now the value of the `SerializationConstant.UNDEFINED_CHAR` prop\n     */\n    const serializedArrayTarget = target[SerializationConstant.UNDEFINED_CHAR];\n    if (serializedArrayTarget) {\n        const proxy = new Proxy(serializedArrayTarget, new ReadWriteProxyHandler(storeTracker, manager));\n        storeTracker.$proxyMap$.set(target, proxy);\n        const serializedState = getSerializedState(target);\n        if (serializedState) {\n            addSubscriptions(serializedState, target, serializedArrayTarget);\n        }\n        return proxy;\n    }\n    else {\n        const proxy = new Proxy(target, new ReadWriteProxyHandler(storeTracker, manager));\n        storeTracker.$proxyMap$.set(target, proxy);\n        const serializedState = getSerializedState(target);\n        if (serializedState) {\n            addSubscriptions(serializedState, target, target);\n        }\n        return proxy;\n    }\n};\nexport const createPropsState = () => {\n    const props = {};\n    setObjectFlags(props, QObjectImmutable);\n    return props;\n};\nexport const setObjectFlags = (obj, flags) => {\n    Object.defineProperty(obj, QObjectFlagsSymbol, { value: flags, enumerable: false });\n};\n/** @internal */\nexport const _restProps = (props, omit, target = {}) => {\n    for (const key in props) {\n        if (!omit.includes(key)) {\n            target[key] = props[key];\n        }\n    }\n    return target;\n};\nexport class ReadWriteProxyHandler {\n    constructor($storeTracker$, $manager$) {\n        this.$storeTracker$ = $storeTracker$;\n        this.$manager$ = $manager$;\n    }\n    deleteProperty(target, prop) {\n        if (target[QObjectFlagsSymbol] & QObjectImmutable) {\n            throw qError(QError_immutableProps);\n        }\n        if (typeof prop != 'string' || !delete target[prop]) {\n            return false;\n        }\n        this.$manager$.$notifySubs$(isArray(target) ? undefined : prop);\n        return true;\n    }\n    get(target, prop) {\n        if (typeof prop === 'symbol') {\n            if (prop === QObjectTargetSymbol) {\n                return target;\n            }\n            if (prop === QObjectManagerSymbol) {\n                return this.$manager$;\n            }\n            if (prop === SERIALIZER_PROXY_UNWRAP) {\n                // SERIALIZER_PROXY_UNWRAP is used by v2 serialization to unwrap proxies.\n                // Our target may be a v2 serialization proxy so if we let it through\n                // we will return the naked object which removes ourselves,\n                // and that is not the intention so prevent of SERIALIZER_PROXY_UNWRAP.\n                return undefined;\n            }\n            return target[prop];\n        }\n        const flags = target[QObjectFlagsSymbol] ?? 0;\n        assertNumber(flags, 'flags must be an number');\n        const invokeCtx = tryGetInvokeContext();\n        const recursive = (flags & QObjectRecursive) !== 0;\n        const immutable = (flags & QObjectImmutable) !== 0;\n        let subscriber;\n        if (invokeCtx) {\n            subscriber = invokeCtx.$subscriber$;\n        }\n        if (immutable && (!(prop in target) || immutableValue(target[_CONST_PROPS]?.[prop]))) {\n            subscriber = null;\n        }\n        const value = target[prop];\n        if (subscriber) {\n            const isA = isArray(target);\n            this.$manager$.$addSub$(subscriber, isA ? undefined : prop);\n        }\n        return recursive ? wrap(value, this.$storeTracker$) : value;\n    }\n    set(target, prop, newValue) {\n        // we need deserializer proxy only to get the value, not to set it\n        // target = unwrapDeserializerProxy(target) as TargetType;\n        if (typeof prop === 'symbol') {\n            target[prop] = newValue;\n            return true;\n        }\n        const flags = target[QObjectFlagsSymbol] ?? 0;\n        assertNumber(flags, 'flags must be an number');\n        const immutable = (flags & QObjectImmutable) !== 0;\n        if (immutable) {\n            throw qError(QError_immutableProps);\n        }\n        const recursive = (flags & QObjectRecursive) !== 0;\n        const unwrappedNewValue = recursive ? unwrapProxy(newValue) : newValue;\n        if (qDev) {\n            if (qSerialize) {\n                verifySerializable(unwrappedNewValue);\n            }\n            const invokeCtx = tryGetInvokeContext();\n            if (invokeCtx) {\n                if (invokeCtx.$event$ === RenderEvent) {\n                    logError('State mutation inside render function. Move mutation to useTask$() or useVisibleTask$()', prop);\n                }\n                else if (invokeCtx.$event$ === ComputedEvent) {\n                    logWarn('State mutation inside useComputed$() is an antipattern. Use useTask$() instead', String(invokeCtx.$hostElement$));\n                }\n            }\n        }\n        const isA = isArray(target);\n        if (isA) {\n            target[prop] = unwrappedNewValue;\n            this.$manager$.$notifySubs$();\n            return true;\n        }\n        const oldValue = target[prop];\n        target[prop] = unwrappedNewValue;\n        if (oldValue !== unwrappedNewValue) {\n            this.$manager$.$notifySubs$(prop);\n        }\n        return true;\n    }\n    has(target, property) {\n        if (property === QObjectTargetSymbol) {\n            return true;\n        }\n        const hasOwnProperty = Object.prototype.hasOwnProperty;\n        if (hasOwnProperty.call(target, property)) {\n            return true;\n        }\n        return false;\n    }\n    ownKeys(target) {\n        const flags = target[QObjectFlagsSymbol] ?? 0;\n        assertNumber(flags, 'flags must be an number');\n        const immutable = (flags & QObjectImmutable) !== 0;\n        if (!immutable) {\n            let subscriber = null;\n            const invokeCtx = tryGetInvokeContext();\n            if (invokeCtx) {\n                subscriber = invokeCtx.$subscriber$;\n            }\n            if (subscriber) {\n                this.$manager$.$addSub$(subscriber);\n            }\n        }\n        return Reflect.ownKeys(target);\n    }\n    getOwnPropertyDescriptor(target, prop) {\n        if (isArray(target) || typeof prop === 'symbol') {\n            return Object.getOwnPropertyDescriptor(target, prop);\n        }\n        return {\n            enumerable: true,\n            configurable: true,\n        };\n    }\n}\nconst immutableValue = (value) => {\n    return value === _CONST_PROPS || isSignalV1(value);\n};\nconst wrap = (value, storeTracker) => {\n    if (isObject(value)) {\n        if (Object.isFrozen(value)) {\n            return value;\n        }\n        const nakedValue = unwrapProxy(value);\n        if (nakedValue !== value) {\n            // already a proxy return;\n            return value;\n        }\n        if (fastSkipSerialize(nakedValue)) {\n            return value;\n        }\n        if (isSerializableObject(nakedValue) || isArray(nakedValue)) {\n            const proxy = storeTracker.$proxyMap$.get(nakedValue);\n            return proxy ? proxy : getOrCreateProxy(nakedValue, storeTracker, QObjectRecursive);\n        }\n    }\n    return value;\n};\n//# sourceMappingURL=data:application/json;base64,","var _a;\nimport { createContainerState, getEventName, setRef, } from '../../container/container';\nimport { PREVENT_DEFAULT, groupListeners, isOnProp, setEvent, } from '../../state/listeners';\nimport { logError, logWarn } from '../../util/log';\nimport { ELEMENT_ID, OnRenderProp, QScopedStyle, QSlot, QSlotS, QStyle } from '../../util/markers';\nimport { isPromise, maybeThen } from '../../util/promises';\nimport { newInvokeContext, invoke, trackSignalV1 } from '../../use/use-core';\nimport { Virtual, _jsxSorted, createJSXError, isJSXNode } from '../jsx/jsx-runtime';\nimport { isArray, isFunction, isString } from '../../util/types';\nimport { version } from '../../version';\nimport { createRenderContext, dangerouslySetInnerHTML, executeComponent, getNextIndex, isAriaAttribute, jsxToString, pushRenderContext, serializeClass, shouldWrapFunctional, static_subtree, stringifyStyle, } from '../execute-component';\nimport { InternalSSRStream, SSRRaw } from '../jsx/utils.public';\nimport { assertDefined } from '../../error/assert';\nimport { serializeSStyle } from '../../style/qrl-styles';\nimport { qDev, qInspector, seal } from '../../util/qdev';\nimport { qError, QError_canNotRenderHTML } from '../../error/error';\nimport { isSignalV1 } from '../../state/signal';\nimport { serializeQRLs } from '../../qrl/qrl';\nimport { EMPTY_OBJ } from '../../util/flyweight';\nimport { createContext, HOST_FLAG_DIRTY, HOST_FLAG_NEED_ATTACH_LISTENER, HOST_FLAG_DYNAMIC, } from '../../state/context';\nimport { createPropsState, createProxy } from '../../state/store';\nimport { Q_CTX, _CONST_PROPS } from '../../state/constants';\nimport { SubscriptionType } from '../../state/common';\nconst FLUSH_COMMENT = '<!--qkssr-f-->';\nconst IS_HEAD = 1 << 0;\nconst IS_HTML = 1 << 2;\nconst IS_TEXT = 1 << 3;\nconst IS_INVISIBLE = 1 << 4;\nconst IS_PHASING = 1 << 5;\nconst IS_ANCHOR = 1 << 6;\nconst IS_BUTTON = 1 << 7;\nconst IS_TABLE = 1 << 8;\nconst IS_PHRASING_CONTAINER = 1 << 9;\nconst IS_IMMUTABLE = 1 << 10;\nclass MockElement {\n    constructor(nodeType) {\n        this.nodeType = nodeType;\n        this[_a] = null;\n        seal(this);\n    }\n}\n_a = Q_CTX;\nconst createDocument = () => {\n    return new MockElement(9);\n};\n/** @internal */\nexport const _renderSSR = async (node, opts) => {\n    const root = opts.containerTagName;\n    const containerEl = createMockQContext(1).$element$;\n    const containerState = createContainerState(containerEl, opts.base ?? '/');\n    containerState.$serverData$.locale = opts.serverData?.locale;\n    const doc = createDocument();\n    const rCtx = createRenderContext(doc, containerState);\n    const headNodes = opts.beforeContent ?? [];\n    if (qDev) {\n        if (root in phasingContent ||\n            root in emptyElements ||\n            root in tableContent ||\n            root in startPhasingContent ||\n            root in invisibleElements) {\n            throw new Error(`The \"containerTagName\" can not be \"${root}\". Please choose a different tag name like: \"div\", \"html\", \"custom-container\".`);\n        }\n    }\n    const ssrCtx = {\n        $static$: {\n            $contexts$: [],\n            $headNodes$: root === 'html' ? headNodes : [],\n            $locale$: opts.serverData?.locale,\n            $textNodes$: new Map(),\n        },\n        $projectedChildren$: undefined,\n        $projectedCtxs$: undefined,\n        $invocationContext$: undefined,\n    };\n    seal(ssrCtx);\n    const locale = opts.serverData?.locale;\n    const containerAttributes = opts.containerAttributes;\n    const qRender = containerAttributes['q:render'];\n    containerAttributes['q:container'] = 'paused';\n    containerAttributes['q:version'] = version ?? 'dev';\n    containerAttributes['q:render'] = (qRender ? qRender + '-' : '') + (qDev ? 'ssr-dev' : 'ssr');\n    containerAttributes['q:base'] = opts.base || '';\n    containerAttributes['q:locale'] = locale;\n    containerAttributes['q:manifest-hash'] = opts.manifestHash;\n    containerAttributes['q:instance'] = hash();\n    const children = root === 'html' ? [node] : [headNodes, node];\n    if (root !== 'html') {\n        containerAttributes.class =\n            'qc📦' + (containerAttributes.class ? ' ' + containerAttributes.class : '');\n    }\n    if (opts.serverData) {\n        containerState.$serverData$ = opts.serverData;\n    }\n    const rootNode = _jsxSorted(root, EMPTY_OBJ, containerAttributes, children, HOST_FLAG_DIRTY | HOST_FLAG_NEED_ATTACH_LISTENER, null);\n    containerState.$hostsRendering$ = new Set();\n    await Promise.resolve().then(() => renderRoot(rootNode, rCtx, ssrCtx, opts.stream, containerState, opts));\n};\nconst hash = () => Math.random().toString(36).slice(2);\nconst renderRoot = async (node, rCtx, ssrCtx, stream, containerState, opts) => {\n    const beforeClose = opts.beforeClose;\n    await renderNode(node, rCtx, ssrCtx, stream, 0, beforeClose\n        ? (stream) => {\n            const result = beforeClose(ssrCtx.$static$.$contexts$, containerState, false, ssrCtx.$static$.$textNodes$);\n            return processData(result, rCtx, ssrCtx, stream, 0, undefined);\n        }\n        : undefined);\n    if (qDev) {\n        if (ssrCtx.$static$.$headNodes$.length > 0) {\n            logError('Missing <head>. Global styles could not be rendered. Please render a <head> element at the root of the app');\n        }\n    }\n    return rCtx;\n};\nconst renderGenerator = async (node, rCtx, ssrCtx, stream, flags) => {\n    stream.write(FLUSH_COMMENT);\n    const generator = node.props.children;\n    let value;\n    if (isFunction(generator)) {\n        const v = generator({\n            write(chunk) {\n                stream.write(chunk);\n                stream.write(FLUSH_COMMENT);\n            },\n        });\n        if (isPromise(v)) {\n            return v;\n        }\n        value = v;\n    }\n    else {\n        value = generator;\n    }\n    for await (const chunk of value) {\n        await processData(chunk, rCtx, ssrCtx, stream, flags, undefined);\n        stream.write(FLUSH_COMMENT);\n    }\n};\nconst renderNodeVirtual = (node, elCtx, extraNodes, rCtx, ssrCtx, stream, flags, beforeClose) => {\n    const props = node.props;\n    const renderQrl = props[OnRenderProp];\n    if (renderQrl) {\n        elCtx.$componentQrl$ = renderQrl;\n        return renderSSRComponent(rCtx, ssrCtx, stream, elCtx, node, flags, beforeClose);\n    }\n    let virtualComment = '<!--qv' + renderVirtualAttributes(props);\n    const isSlot = QSlotS in props;\n    const key = node.key != null ? String(node.key) : null;\n    if (isSlot) {\n        assertDefined(rCtx.$cmpCtx$?.$id$, 'hostId must be defined for a slot');\n        virtualComment += ' q:sref=' + rCtx.$cmpCtx$.$id$;\n    }\n    if (key != null) {\n        virtualComment += ' q:key=' + key;\n    }\n    virtualComment += '-->';\n    stream.write(virtualComment);\n    const html = node.props[dangerouslySetInnerHTML];\n    if (html) {\n        stream.write(html);\n        stream.write(CLOSE_VIRTUAL);\n        return;\n    }\n    if (extraNodes) {\n        for (const node of extraNodes) {\n            // We trust that the attributes are strings\n            renderNodeElementSync(node.type, node.props, stream);\n        }\n    }\n    const promise = walkChildren(node.children, rCtx, ssrCtx, stream, flags);\n    return maybeThen(promise, () => {\n        // Fast path\n        if (!isSlot && !beforeClose) {\n            stream.write(CLOSE_VIRTUAL);\n            return;\n        }\n        let promise;\n        if (isSlot) {\n            assertDefined(key, 'key must be defined for a slot');\n            const content = ssrCtx.$projectedChildren$?.[key];\n            if (content) {\n                const [rCtx, sCtx] = ssrCtx.$projectedCtxs$;\n                const newSlotRctx = pushRenderContext(rCtx);\n                newSlotRctx.$slotCtx$ = elCtx;\n                ssrCtx.$projectedChildren$[key] = undefined;\n                promise = processData(content, newSlotRctx, sCtx, stream, flags);\n            }\n        }\n        // Inject before close\n        if (beforeClose) {\n            promise = maybeThen(promise, () => beforeClose(stream));\n        }\n        return maybeThen(promise, () => {\n            stream.write(CLOSE_VIRTUAL);\n        });\n    });\n};\nconst CLOSE_VIRTUAL = `<!--/qv-->`;\nconst renderAttributes = (attributes) => {\n    let text = '';\n    for (const prop in attributes) {\n        if (prop === dangerouslySetInnerHTML) {\n            continue;\n        }\n        const value = attributes[prop];\n        if (value != null) {\n            text += ' ' + (value === '' ? prop : prop + '=\"' + value + '\"');\n        }\n    }\n    return text;\n};\nconst renderVirtualAttributes = (attributes) => {\n    let text = '';\n    for (const prop in attributes) {\n        if (prop === 'children' || prop === dangerouslySetInnerHTML) {\n            continue;\n        }\n        const value = attributes[prop];\n        if (value != null) {\n            text += ' ' + (value === '' ? prop : prop + '=' + value + '');\n        }\n    }\n    return text;\n};\nconst renderNodeElementSync = (tagName, attributes, stream) => {\n    stream.write('<' + tagName + renderAttributes(attributes) + '>');\n    const empty = !!emptyElements[tagName];\n    if (empty) {\n        return;\n    }\n    // Render innerHTML\n    const innerHTML = attributes[dangerouslySetInnerHTML];\n    if (innerHTML != null) {\n        stream.write(innerHTML);\n    }\n    stream.write(`</${tagName}>`);\n};\n/** Render a component$ */\nconst renderSSRComponent = (rCtx, ssrCtx, stream, elCtx, node, flags, beforeClose) => {\n    const props = node.props;\n    setComponentProps(rCtx, elCtx, props.props);\n    return maybeThen(executeComponent(rCtx, elCtx), (res) => {\n        const hostElement = elCtx.$element$;\n        const newRCtx = res.rCtx;\n        const iCtx = newInvokeContext(ssrCtx.$static$.$locale$, hostElement, undefined);\n        iCtx.$subscriber$ = [SubscriptionType.HOST, hostElement];\n        iCtx.$renderCtx$ = newRCtx;\n        const newSSrContext = {\n            $static$: ssrCtx.$static$,\n            $projectedChildren$: splitProjectedChildren(node.children, ssrCtx),\n            $projectedCtxs$: [rCtx, ssrCtx],\n            $invocationContext$: iCtx,\n        };\n        const extraNodes = [];\n        if (elCtx.$appendStyles$) {\n            const isHTML = !!(flags & IS_HTML);\n            const array = isHTML ? ssrCtx.$static$.$headNodes$ : extraNodes;\n            for (const style of elCtx.$appendStyles$) {\n                array.push(_jsxSorted('style', {\n                    [dangerouslySetInnerHTML]: style.content,\n                    hidden: '',\n                    [QStyle]: style.styleId,\n                }, null, null, 0, null));\n            }\n        }\n        const newID = getNextIndex(rCtx);\n        const scopeId = elCtx.$scopeIds$ ? serializeSStyle(elCtx.$scopeIds$) : undefined;\n        const processedNode = _jsxSorted(node.type, {\n            [ELEMENT_ID]: newID,\n            [QScopedStyle]: scopeId,\n        }, null, res.node, 0, node.key);\n        elCtx.$id$ = newID;\n        ssrCtx.$static$.$contexts$.push(elCtx);\n        return renderNodeVirtual(processedNode, elCtx, extraNodes, newRCtx, newSSrContext, stream, flags, (stream) => {\n            if (elCtx.$flags$ & HOST_FLAG_NEED_ATTACH_LISTENER) {\n                const placeholderCtx = createMockQContext(1);\n                const listeners = placeholderCtx.li;\n                listeners.push(...elCtx.li);\n                elCtx.$flags$ &= ~HOST_FLAG_NEED_ATTACH_LISTENER;\n                placeholderCtx.$id$ = getNextIndex(rCtx);\n                const attributes = {\n                    type: 'placeholder',\n                    hidden: '',\n                    'q:id': placeholderCtx.$id$,\n                };\n                ssrCtx.$static$.$contexts$.push(placeholderCtx);\n                const groups = groupListeners(listeners);\n                for (const listener of groups) {\n                    const eventName = normalizeInvisibleEvents(listener[0]);\n                    attributes[eventName] = serializeQRLs(listener[1], rCtx.$static$.$containerState$, placeholderCtx);\n                    registerQwikEvent(eventName, rCtx.$static$.$containerState$);\n                }\n                renderNodeElementSync('script', attributes, stream);\n            }\n            const projectedChildren = newSSrContext.$projectedChildren$;\n            let missingSlotsDone;\n            if (projectedChildren) {\n                const nodes = Object.keys(projectedChildren).map((slotName) => {\n                    const content = projectedChildren[slotName];\n                    // projectedChildren[slotName] = undefined;\n                    if (content) {\n                        return _jsxSorted('q:template', { [QSlot]: slotName || true, hidden: true, 'aria-hidden': 'true' }, null, content, 0, null);\n                    }\n                });\n                const [_rCtx, sCtx] = newSSrContext.$projectedCtxs$;\n                const newSlotRctx = pushRenderContext(_rCtx);\n                newSlotRctx.$slotCtx$ = elCtx;\n                missingSlotsDone = processData(nodes, newSlotRctx, sCtx, stream, 0, undefined);\n            }\n            return beforeClose\n                ? maybeThen(missingSlotsDone, () => beforeClose(stream))\n                : missingSlotsDone;\n        });\n    });\n};\nconst splitProjectedChildren = (children, ssrCtx) => {\n    const flatChildren = flatVirtualChildren(children, ssrCtx);\n    if (flatChildren === null) {\n        return undefined;\n    }\n    const slotMap = {};\n    for (const child of flatChildren) {\n        let slotName = '';\n        if (isJSXNode(child)) {\n            slotName = child.props[QSlot] || '';\n        }\n        (slotMap[slotName] || (slotMap[slotName] = [])).push(child);\n    }\n    return slotMap;\n};\nconst createMockQContext = (nodeType) => {\n    const elm = new MockElement(nodeType);\n    return createContext(elm);\n};\nconst renderNode = (node, rCtx, ssrCtx, stream, flags, beforeClose) => {\n    const tagName = node.type;\n    const hostCtx = rCtx.$cmpCtx$;\n    if (typeof tagName === 'string') {\n        const key = node.key;\n        const props = node.props;\n        const immutable = node.constProps;\n        const elCtx = createMockQContext(1);\n        const elm = elCtx.$element$;\n        const isHead = tagName === 'head';\n        let openingElement = '<' + tagName;\n        let useSignal = false;\n        let hasRef = false;\n        let classStr = '';\n        let htmlStr = null;\n        const handleProp = (rawProp, value, isImmutable) => {\n            if (rawProp === 'ref') {\n                if (value !== undefined) {\n                    setRef(value, elm);\n                    hasRef = true;\n                }\n                return;\n            }\n            if (rawProp === 'children') {\n                // Already passed to the JSXNode\n                return;\n            }\n            if (isOnProp(rawProp)) {\n                setEvent(elCtx.li, rawProp, value, undefined);\n                return;\n            }\n            if (isSignalV1(value)) {\n                assertDefined(hostCtx, 'Signals can not be used outside the root');\n                if (isImmutable) {\n                    value = trackSignalV1(value, [\n                        SubscriptionType.PROP_IMMUTABLE,\n                        elm,\n                        value,\n                        hostCtx.$element$,\n                        rawProp,\n                        undefined,\n                    ]);\n                }\n                else {\n                    value = trackSignalV1(value, [\n                        SubscriptionType.PROP_MUTABLE,\n                        hostCtx.$element$,\n                        value,\n                        elm,\n                        rawProp,\n                        undefined,\n                    ]);\n                }\n                useSignal = true;\n            }\n            if (rawProp === dangerouslySetInnerHTML) {\n                htmlStr = value;\n                return;\n            }\n            if (rawProp.startsWith(PREVENT_DEFAULT)) {\n                registerQwikEvent(rawProp.slice(PREVENT_DEFAULT.length), rCtx.$static$.$containerState$);\n            }\n            let attrValue;\n            const prop = rawProp === 'htmlFor' ? 'for' : rawProp;\n            if (prop === 'class' || prop === 'className') {\n                classStr = serializeClass(value);\n            }\n            else if (prop === 'style') {\n                attrValue = stringifyStyle(value);\n            }\n            else if (isAriaAttribute(prop) || prop === 'draggable' || prop === 'spellcheck') {\n                attrValue = value != null ? String(value) : null;\n                value = attrValue;\n            }\n            else if (value === false || value == null) {\n                attrValue = null;\n            }\n            else {\n                attrValue = String(value);\n            }\n            if (attrValue != null) {\n                if (prop === 'value' && tagName === 'textarea') {\n                    htmlStr = escapeHtml(attrValue);\n                }\n                else if (isSSRUnsafeAttr(prop)) {\n                    if (qDev) {\n                        logError('Attribute value is unsafe for SSR');\n                    }\n                }\n                else {\n                    openingElement +=\n                        ' ' + (value === true ? prop : prop + '=\"' + escapeHtml(attrValue) + '\"');\n                }\n            }\n        };\n        for (const prop in props) {\n            handleProp(prop, props[prop], false);\n        }\n        if (immutable) {\n            for (const prop in immutable) {\n                handleProp(prop, props[prop], true);\n            }\n        }\n        const listeners = elCtx.li;\n        if (hostCtx) {\n            if (qDev) {\n                if (tagName === 'html') {\n                    throw qError(QError_canNotRenderHTML);\n                }\n            }\n            if (hostCtx.$scopeIds$?.length) {\n                const extra = hostCtx.$scopeIds$.join(' ');\n                classStr = classStr ? `${extra} ${classStr}` : extra;\n            }\n            if (hostCtx.$flags$ & HOST_FLAG_NEED_ATTACH_LISTENER) {\n                listeners.push(...hostCtx.li);\n                hostCtx.$flags$ &= ~HOST_FLAG_NEED_ATTACH_LISTENER;\n            }\n        }\n        // Reset HOST flags\n        if (qDev) {\n            if (flags & IS_PHASING && !(flags & IS_PHRASING_CONTAINER)) {\n                if (!(tagName in phasingContent)) {\n                    throw createJSXError(`<${tagName}> can not be rendered because one of its ancestor is a <p> or a <pre>.\\n\nThis goes against the HTML spec: https://html.spec.whatwg.org/multipage/dom.html#phrasing-content-2`, node);\n                }\n            }\n            if (tagName === 'table') {\n                flags |= IS_TABLE;\n            }\n            else {\n                if (flags & IS_TABLE && !(tagName in tableContent)) {\n                    throw createJSXError(`The <table> element requires that its direct children to be '<tbody>', '<thead>', '<tfoot>' or '<caption>' instead, '<${tagName}>' was rendered.`, node);\n                }\n                flags &= ~IS_TABLE;\n            }\n            if (tagName === 'button') {\n                if (flags & IS_BUTTON) {\n                    throw createJSXError(`<${tagName}> can not be rendered because one of its ancestor is already a <button>.\\n\nThis goes against the HTML spec: https://html.spec.whatwg.org/multipage/dom.html#interactive-content`, node);\n                }\n                else {\n                    flags |= IS_BUTTON;\n                }\n            }\n            if (tagName === 'a') {\n                if (flags & IS_ANCHOR) {\n                    throw createJSXError(`<${tagName}> can not be rendered because one of its ancestor is already a <a>.\\n\nThis goes against the HTML spec: https://html.spec.whatwg.org/multipage/dom.html#interactive-content`, node);\n                }\n                else {\n                    flags |= IS_ANCHOR;\n                }\n            }\n            if (tagName === 'svg' || tagName === 'math') {\n                // These types of elements are considered phrasing content, but contain children that aren't phrasing content.\n                flags |= IS_PHRASING_CONTAINER;\n            }\n            if (flags & IS_HEAD) {\n                if (!(tagName in headContent)) {\n                    throw createJSXError(`<${tagName}> can not be rendered because it's not a valid children of the <head> element. https://html.spec.whatwg.org/multipage/dom.html#metadata-content`, node);\n                }\n            }\n            if (flags & IS_HTML) {\n                if (!(tagName in htmlContent)) {\n                    throw createJSXError(`<${tagName}> can not be rendered because it's not a valid direct children of the <html> element, only <head> and <body> are allowed.`, node);\n                }\n            }\n            else if (tagName in htmlContent) {\n                throw createJSXError(`<${tagName}> can not be rendered because its parent is not a <html> element. Make sure the 'containerTagName' is set to 'html' in entry.ssr.tsx`, node);\n            }\n            if (tagName in startPhasingContent) {\n                flags |= IS_PHASING;\n            }\n        }\n        if (isHead) {\n            flags |= IS_HEAD;\n        }\n        if (tagName in invisibleElements) {\n            flags |= IS_INVISIBLE;\n        }\n        if (tagName in textOnlyElements) {\n            flags |= IS_TEXT;\n        }\n        if (classStr) {\n            openingElement += ' class=\"' + escapeHtml(classStr) + '\"';\n        }\n        if (listeners.length > 0) {\n            const groups = groupListeners(listeners);\n            const isInvisible = (flags & IS_INVISIBLE) !== 0;\n            for (const listener of groups) {\n                const eventName = isInvisible ? normalizeInvisibleEvents(listener[0]) : listener[0];\n                openingElement +=\n                    ' ' +\n                        eventName +\n                        '=\"' +\n                        serializeQRLs(listener[1], rCtx.$static$.$containerState$, elCtx) +\n                        '\"';\n                registerQwikEvent(eventName, rCtx.$static$.$containerState$);\n            }\n        }\n        if (key != null) {\n            openingElement += ' q:key=\"' + escapeHtml(key) + '\"';\n        }\n        if (hasRef || useSignal || listeners.length > 0) {\n            if (hasRef || useSignal || listenersNeedId(listeners)) {\n                const newID = getNextIndex(rCtx);\n                openingElement += ' q:id=\"' + newID + '\"';\n                elCtx.$id$ = newID;\n            }\n            ssrCtx.$static$.$contexts$.push(elCtx);\n        }\n        if (flags & IS_HEAD) {\n            openingElement += ' q:head';\n        }\n        if (qDev && qInspector && node.dev && !(flags & IS_HEAD)) {\n            const sanitizedFileName = node?.dev?.fileName?.replace(/\\\\/g, '/');\n            if (sanitizedFileName && !/data-qwik-inspector/.test(openingElement)) {\n                openingElement += ` data-qwik-inspector=\"${escapeHtml(`${sanitizedFileName}:${node.dev.lineNumber}:${node.dev.columnNumber}`)}\"`;\n            }\n        }\n        openingElement += '>';\n        stream.write(openingElement);\n        if (tagName in emptyElements) {\n            return;\n        }\n        if (htmlStr != null) {\n            stream.write(String(htmlStr));\n            stream.write(`</${tagName}>`);\n            return;\n        }\n        if (tagName === 'html') {\n            flags |= IS_HTML;\n        }\n        else {\n            flags &= ~IS_HTML;\n        }\n        if (node.flags & static_subtree) {\n            flags |= IS_IMMUTABLE;\n        }\n        const promise = processData(node.children, rCtx, ssrCtx, stream, flags);\n        return maybeThen(promise, () => {\n            // If head inject base styles\n            if (isHead) {\n                for (const node of ssrCtx.$static$.$headNodes$) {\n                    renderNodeElementSync(node.type, node.props, stream);\n                }\n                ssrCtx.$static$.$headNodes$.length = 0;\n            }\n            // Fast path\n            if (!beforeClose) {\n                stream.write(`</${tagName}>`);\n                return;\n            }\n            // Inject before close\n            return maybeThen(beforeClose(stream), () => {\n                stream.write(`</${tagName}>`);\n            });\n        });\n    }\n    if (tagName === Virtual) {\n        const elCtx = createMockQContext(111);\n        if (rCtx.$slotCtx$) {\n            elCtx.$parentCtx$ = rCtx.$slotCtx$;\n            elCtx.$realParentCtx$ = rCtx.$cmpCtx$;\n        }\n        else {\n            elCtx.$parentCtx$ = rCtx.$cmpCtx$;\n        }\n        if (hostCtx && hostCtx.$flags$ & HOST_FLAG_DYNAMIC) {\n            addDynamicSlot(hostCtx, elCtx);\n        }\n        return renderNodeVirtual(node, elCtx, undefined, rCtx, ssrCtx, stream, flags, beforeClose);\n    }\n    if (tagName === SSRRaw) {\n        stream.write(node.props.data);\n        return;\n    }\n    if (tagName === InternalSSRStream) {\n        return renderGenerator(node, rCtx, ssrCtx, stream, flags);\n    }\n    // Inline component\n    const res = invoke(ssrCtx.$invocationContext$, tagName, node.props, node.key, node.flags, node.dev);\n    if (!shouldWrapFunctional(res, node)) {\n        return processData(res, rCtx, ssrCtx, stream, flags, beforeClose);\n    }\n    return renderNode(_jsxSorted(Virtual, EMPTY_OBJ, null, res, 0, node.key), rCtx, ssrCtx, stream, flags, beforeClose);\n};\n/** Embed metadata while rendering the tree, to be used when resuming */\nconst processData = (node, rCtx, ssrCtx, stream, flags, beforeClose) => {\n    if (node == null || typeof node === 'boolean') {\n        return;\n    }\n    if (isString(node) || typeof node === 'number') {\n        stream.write(escapeHtml(String(node)));\n    }\n    else if (isJSXNode(node)) {\n        return renderNode(node, rCtx, ssrCtx, stream, flags, beforeClose);\n    }\n    else if (isArray(node)) {\n        return walkChildren(node, rCtx, ssrCtx, stream, flags);\n    }\n    else if (isSignalV1(node)) {\n        const insideText = flags & IS_TEXT;\n        const hostEl = rCtx.$cmpCtx$?.$element$;\n        let value;\n        if (hostEl) {\n            if (!insideText) {\n                const id = getNextIndex(rCtx);\n                const subs = flags & IS_IMMUTABLE\n                    ? [\n                        SubscriptionType.TEXT_IMMUTABLE,\n                        ('#' + id),\n                        node,\n                        ('#' + id),\n                    ]\n                    : [SubscriptionType.TEXT_MUTABLE, hostEl, node, ('#' + id)];\n                value = trackSignalV1(node, subs);\n                if (isString(value)) {\n                    const str = jsxToString(value);\n                    ssrCtx.$static$.$textNodes$.set(str, id);\n                }\n                stream.write(`<!--t=${id}-->`);\n                processData(value, rCtx, ssrCtx, stream, flags, beforeClose);\n                stream.write(`<!---->`);\n                return;\n            }\n            else {\n                value = invoke(ssrCtx.$invocationContext$, () => node.value);\n            }\n        }\n        stream.write(escapeHtml(jsxToString(value)));\n        return;\n    }\n    else if (isPromise(node)) {\n        stream.write(FLUSH_COMMENT);\n        return node.then((node) => processData(node, rCtx, ssrCtx, stream, flags, beforeClose));\n    }\n    else {\n        logWarn('A unsupported value was passed to the JSX, skipping render. Value:', node);\n        return;\n    }\n};\nconst walkChildren = (children, rCtx, ssrContext, stream, flags) => {\n    if (children == null) {\n        return;\n    }\n    if (!isArray(children)) {\n        return processData(children, rCtx, ssrContext, stream, flags);\n    }\n    const len = children.length;\n    if (len === 1) {\n        return processData(children[0], rCtx, ssrContext, stream, flags);\n    }\n    if (len === 0) {\n        return;\n    }\n    let currentIndex = 0;\n    const buffers = [];\n    return children.reduce((prevPromise, child, index) => {\n        const buffer = [];\n        buffers.push(buffer);\n        const localStream = prevPromise\n            ? {\n                write(chunk) {\n                    if (currentIndex === index) {\n                        stream.write(chunk);\n                    }\n                    else {\n                        buffer.push(chunk);\n                    }\n                },\n            }\n            : stream;\n        const rendered = processData(child, rCtx, ssrContext, localStream, flags);\n        if (prevPromise || isPromise(rendered)) {\n            const next = () => {\n                currentIndex++;\n                if (buffers.length > currentIndex) {\n                    buffers[currentIndex].forEach((chunk) => stream.write(chunk));\n                }\n            };\n            if (isPromise(rendered)) {\n                if (prevPromise) {\n                    return Promise.all([rendered, prevPromise]).then(next);\n                }\n                else {\n                    return rendered.then(next);\n                }\n            }\n            return prevPromise.then(next);\n        }\n        else {\n            currentIndex++;\n            return undefined;\n        }\n    }, undefined);\n};\nconst flatVirtualChildren = (children, ssrCtx) => {\n    if (children == null) {\n        return null;\n    }\n    const result = _flatVirtualChildren(children, ssrCtx);\n    const nodes = isArray(result) ? result : [result];\n    if (nodes.length === 0) {\n        return null;\n    }\n    return nodes;\n};\nconst _flatVirtualChildren = (children, ssrCtx) => {\n    if (children == null) {\n        return null;\n    }\n    if (isArray(children)) {\n        return children.flatMap((c) => _flatVirtualChildren(c, ssrCtx));\n    }\n    else if (isJSXNode(children) &&\n        isFunction(children.type) &&\n        children.type !== SSRRaw &&\n        children.type !== InternalSSRStream &&\n        children.type !== Virtual) {\n        const res = invoke(ssrCtx.$invocationContext$, children.type, children.props, children.key, children.flags);\n        return flatVirtualChildren(res, ssrCtx);\n    }\n    return children;\n};\nconst setComponentProps = (rCtx, elCtx, expectProps) => {\n    const keys = Object.keys(expectProps);\n    const target = createPropsState();\n    elCtx.$props$ = createProxy(target, rCtx.$static$.$containerState$);\n    if (keys.length === 0) {\n        return;\n    }\n    const immutableMeta = (target[_CONST_PROPS] =\n        expectProps[_CONST_PROPS] ?? EMPTY_OBJ);\n    for (const prop of keys) {\n        if (prop === 'children' || prop === QSlot) {\n            continue;\n        }\n        if (isSignalV1(immutableMeta[prop])) {\n            target['_IMMUTABLE_PREFIX' + prop] = immutableMeta[prop];\n        }\n        else {\n            target[prop] = expectProps[prop];\n        }\n    }\n};\nconst invisibleElements = {\n    head: true,\n    style: true,\n    script: true,\n    link: true,\n    meta: true,\n};\nconst textOnlyElements = {\n    title: true,\n    style: true,\n    script: true,\n    noframes: true,\n    textarea: true,\n};\nconst emptyElements = {\n    area: true,\n    base: true,\n    basefont: true,\n    bgsound: true,\n    br: true,\n    col: true,\n    embed: true,\n    frame: true,\n    hr: true,\n    img: true,\n    input: true,\n    keygen: true,\n    link: true,\n    meta: true,\n    param: true,\n    source: true,\n    track: true,\n    wbr: true,\n};\nconst startPhasingContent = {\n    p: true,\n    pre: true,\n};\nconst htmlContent = {\n    head: true,\n    body: true,\n};\nconst tableContent = {\n    tbody: true,\n    thead: true,\n    tfoot: true,\n    caption: true,\n    colgroup: true,\n};\nconst headContent = {\n    meta: true,\n    title: true,\n    link: true,\n    style: true,\n    script: true,\n    noscript: true,\n    template: true,\n    base: true,\n};\nconst phasingContent = {\n    a: true,\n    abbr: true,\n    area: true,\n    audio: true,\n    b: true,\n    bdi: true,\n    bdo: true,\n    br: true,\n    button: true,\n    canvas: true,\n    cite: true,\n    code: true,\n    command: true,\n    data: true,\n    datalist: true,\n    del: true,\n    dfn: true,\n    em: true,\n    embed: true,\n    i: true,\n    iframe: true,\n    img: true,\n    input: true,\n    ins: true,\n    itemprop: true,\n    kbd: true,\n    keygen: true,\n    label: true,\n    link: true,\n    map: true,\n    mark: true,\n    math: true,\n    meta: true,\n    meter: true,\n    noscript: true,\n    object: true,\n    option: true,\n    output: true,\n    picture: true,\n    progress: true,\n    q: true,\n    ruby: true,\n    s: true,\n    samp: true,\n    script: true,\n    select: true,\n    slot: true,\n    small: true,\n    span: true,\n    strong: true,\n    sub: true,\n    sup: true,\n    svg: true,\n    template: true,\n    textarea: true,\n    time: true,\n    u: true,\n    var: true,\n    video: true,\n    wbr: true,\n};\nconst ESCAPE_HTML = /[&<>'\"]/g;\nexport const registerQwikEvent = (prop, containerState) => {\n    containerState.$events$.add(getEventName(prop));\n};\nconst escapeHtml = (s) => {\n    return s.replace(ESCAPE_HTML, (c) => {\n        switch (c) {\n            case '&':\n                return '&amp;';\n            case '<':\n                return '&lt;';\n            case '>':\n                return '&gt;';\n            case '\"':\n                return '&quot;';\n            case \"'\":\n                return '&#39;';\n            default:\n                return '';\n        }\n    });\n};\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\nconst unsafeAttrCharRE = /[>/=\"'\\u0009\\u000a\\u000c\\u0020]/; // eslint-disable-line no-control-regex\nexport const isSSRUnsafeAttr = (name) => {\n    return unsafeAttrCharRE.test(name);\n};\nconst listenersNeedId = (listeners) => {\n    return listeners.some((l) => l[1].$captureRef$ && l[1].$captureRef$.length > 0);\n};\nconst addDynamicSlot = (hostCtx, elCtx) => {\n    const dynamicSlots = (hostCtx.$dynamicSlots$ || (hostCtx.$dynamicSlots$ = []));\n    if (!dynamicSlots.includes(elCtx)) {\n        dynamicSlots.push(elCtx);\n    }\n};\nconst normalizeInvisibleEvents = (eventName) => {\n    return eventName === 'on:qvisible' ? 'on-document:qinit' : eventName;\n};\n//# sourceMappingURL=data:application/json;base64,","export function isAsyncGenerator(value) {\n    return !!value[Symbol.asyncIterator];\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXN5bmMtZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvYXN5bmMtZ2VuZXJhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxLQUFhO0lBQzVDLE9BQU8sQ0FBQyxDQUFFLEtBQXdCLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzNELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaXNBc3luY0dlbmVyYXRvcih2YWx1ZTogb2JqZWN0KTogdmFsdWUgaXMgQXN5bmNHZW5lcmF0b3Ige1xuICByZXR1cm4gISEodmFsdWUgYXMgQXN5bmNHZW5lcmF0b3IpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXTtcbn1cbiJdfQ==","import {} from '../../component/component.public';\nimport { SERIALIZABLE_STATE } from '../../container/serializers';\nimport { ELEMENT_KEY, ELEMENT_PROPS, OnRenderProp } from '../../util/markers';\nimport {} from './ssr-types';\nimport { executeComponent2 } from '../shared/component-execution';\nimport { ChoreType } from '../shared/scheduler';\nexport const applyInlineComponent = (ssr, component$Host, component, jsx) => {\n    const host = ssr.getLastNode();\n    return executeComponent2(ssr, host, component$Host, component, jsx.props);\n};\nexport const applyQwikComponentBody = (ssr, jsx, component) => {\n    const host = ssr.getLastNode();\n    const [componentQrl] = component[SERIALIZABLE_STATE];\n    const srcProps = jsx.props;\n    if (srcProps && srcProps.children) {\n        delete srcProps.children;\n    }\n    const scheduler = ssr.$scheduler$;\n    host.setProp(OnRenderProp, componentQrl);\n    host.setProp(ELEMENT_PROPS, srcProps);\n    if (jsx.key !== null) {\n        host.setProp(ELEMENT_KEY, jsx.key);\n    }\n    return scheduler(ChoreType.COMPONENT_SSR, host, componentQrl, srcProps);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3NyLXJlbmRlci1jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdjIvc3NyL3Nzci1yZW5kZXItY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBbUMsTUFBTSxrQ0FBa0MsQ0FBQztBQUNuRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUVqRSxPQUFPLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM5RSxPQUFPLEVBQW9DLE1BQU0sYUFBYSxDQUFDO0FBQy9ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUloRCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUNsQyxHQUFpQixFQUNqQixjQUF3QixFQUN4QixTQUEwQixFQUMxQixHQUFZLEVBQ1osRUFBRTtJQUNGLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMvQixPQUFPLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNUUsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsQ0FDcEMsR0FBaUIsRUFDakIsR0FBWSxFQUNaLFNBQW9CLEVBQ08sRUFBRTtJQUM3QixNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDL0IsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFJLFNBQWlCLENBQUMsa0JBQWtCLENBQW1DLENBQUM7SUFDaEcsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztJQUMzQixJQUFJLFFBQVEsSUFBSSxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbEMsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFDRCxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDO0lBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLElBQUksR0FBRyxDQUFDLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUNELE9BQU8sU0FBUyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztBQUMxRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEpTWE5vZGUgfSBmcm9tICdAYnVpbGRlci5pby9xd2lrJztcbmltcG9ydCB7IHR5cGUgQ29tcG9uZW50LCB0eXBlIE9uUmVuZGVyRm4gfSBmcm9tICcuLi8uLi9jb21wb25lbnQvY29tcG9uZW50LnB1YmxpYyc7XG5pbXBvcnQgeyBTRVJJQUxJWkFCTEVfU1RBVEUgfSBmcm9tICcuLi8uLi9jb250YWluZXIvc2VyaWFsaXplcnMnO1xuaW1wb3J0IHR5cGUgeyBRUkxJbnRlcm5hbCB9IGZyb20gJy4uLy4uL3FybC9xcmwtY2xhc3MnO1xuaW1wb3J0IHsgRUxFTUVOVF9LRVksIEVMRU1FTlRfUFJPUFMsIE9uUmVuZGVyUHJvcCB9IGZyb20gJy4uLy4uL3V0aWwvbWFya2Vycyc7XG5pbXBvcnQgeyB0eXBlIElTc3JOb2RlLCB0eXBlIFNTUkNvbnRhaW5lciB9IGZyb20gJy4vc3NyLXR5cGVzJztcbmltcG9ydCB7IGV4ZWN1dGVDb21wb25lbnQyIH0gZnJvbSAnLi4vc2hhcmVkL2NvbXBvbmVudC1leGVjdXRpb24nO1xuaW1wb3J0IHsgQ2hvcmVUeXBlIH0gZnJvbSAnLi4vc2hhcmVkL3NjaGVkdWxlcic7XG5pbXBvcnQgdHlwZSB7IFZhbHVlT3JQcm9taXNlIH0gZnJvbSAnLi4vLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IEpTWE91dHB1dCB9IGZyb20gJy4uLy4uL3JlbmRlci9qc3gvdHlwZXMvanN4LW5vZGUnO1xuXG5leHBvcnQgY29uc3QgYXBwbHlJbmxpbmVDb21wb25lbnQgPSAoXG4gIHNzcjogU1NSQ29udGFpbmVyLFxuICBjb21wb25lbnQkSG9zdDogSVNzck5vZGUsXG4gIGNvbXBvbmVudDogT25SZW5kZXJGbjxhbnk+LFxuICBqc3g6IEpTWE5vZGVcbikgPT4ge1xuICBjb25zdCBob3N0ID0gc3NyLmdldExhc3ROb2RlKCk7XG4gIHJldHVybiBleGVjdXRlQ29tcG9uZW50Mihzc3IsIGhvc3QsIGNvbXBvbmVudCRIb3N0LCBjb21wb25lbnQsIGpzeC5wcm9wcyk7XG59O1xuXG5leHBvcnQgY29uc3QgYXBwbHlRd2lrQ29tcG9uZW50Qm9keSA9IChcbiAgc3NyOiBTU1JDb250YWluZXIsXG4gIGpzeDogSlNYTm9kZSxcbiAgY29tcG9uZW50OiBDb21wb25lbnRcbik6IFZhbHVlT3JQcm9taXNlPEpTWE91dHB1dD4gPT4ge1xuICBjb25zdCBob3N0ID0gc3NyLmdldExhc3ROb2RlKCk7XG4gIGNvbnN0IFtjb21wb25lbnRRcmxdID0gKGNvbXBvbmVudCBhcyBhbnkpW1NFUklBTElaQUJMRV9TVEFURV0gYXMgW1FSTEludGVybmFsPE9uUmVuZGVyRm48YW55Pj5dO1xuICBjb25zdCBzcmNQcm9wcyA9IGpzeC5wcm9wcztcbiAgaWYgKHNyY1Byb3BzICYmIHNyY1Byb3BzLmNoaWxkcmVuKSB7XG4gICAgZGVsZXRlIHNyY1Byb3BzLmNoaWxkcmVuO1xuICB9XG4gIGNvbnN0IHNjaGVkdWxlciA9IHNzci4kc2NoZWR1bGVyJDtcbiAgaG9zdC5zZXRQcm9wKE9uUmVuZGVyUHJvcCwgY29tcG9uZW50UXJsKTtcbiAgaG9zdC5zZXRQcm9wKEVMRU1FTlRfUFJPUFMsIHNyY1Byb3BzKTtcbiAgaWYgKGpzeC5rZXkgIT09IG51bGwpIHtcbiAgICBob3N0LnNldFByb3AoRUxFTUVOVF9LRVksIGpzeC5rZXkpO1xuICB9XG4gIHJldHVybiBzY2hlZHVsZXIoQ2hvcmVUeXBlLkNPTVBPTkVOVF9TU1IsIGhvc3QsIGNvbXBvbmVudFFybCwgc3JjUHJvcHMpO1xufTtcbiJdfQ==","import { isDev } from '@builder.io/qwik/build';\nimport { isQwikComponent } from '../../component/component.public';\nimport { isQrl } from '../../qrl/qrl-class';\nimport { serializeAttribute } from '../../render/execute-component';\nimport { Fragment } from '../../render/jsx/jsx-runtime';\nimport { Slot } from '../../render/jsx/slot.public';\nimport { SSRComment, SSRRaw, SSRStream, } from '../../render/jsx/utils.public';\nimport { trackSignal } from '../../use/use-core';\nimport { isAsyncGenerator } from '../../util/async-generator';\nimport { EMPTY_ARRAY } from '../../util/flyweight';\nimport { throwErrorAndStop } from '../../util/log';\nimport { ELEMENT_KEY, FLUSH_COMMENT, QDefaultSlot, QScopedStyle, QSlot } from '../../util/markers';\nimport { isPromise } from '../../util/promises';\nimport { isFunction } from '../../util/types';\nimport { convertEventNameFromJsxPropToHtmlAttr, getEventNameFromJsxProp, isJsxPropertyAnEventName, isPreventDefault, } from '../shared/event-names';\nimport { addComponentStylePrefix, hasClassAttr, isClassAttr } from '../shared/scoped-styles';\nimport { qrlToString } from '../shared/shared-serialization';\nimport { DEBUG_TYPE, VirtualType } from '../shared/types';\nimport { WrappedSignal, EffectProperty, isSignal } from '../signal/v2-signal';\nimport { applyInlineComponent, applyQwikComponentBody } from './ssr-render-component';\nimport { qInspector } from '../../util/qdev';\nclass SetScopedStyle {\n    constructor($scopedStyle$) {\n        this.$scopedStyle$ = $scopedStyle$;\n    }\n}\n/** @internal */\nexport function _walkJSX(ssr, value, allowPromises, currentStyleScoped) {\n    const stack = [value];\n    let resolveDrain;\n    let rejectDrain;\n    const drained = allowPromises &&\n        new Promise((res, rej) => {\n            resolveDrain = res;\n            rejectDrain = rej;\n        });\n    const enqueue = (value) => stack.push(value);\n    const resolveValue = (value) => {\n        stack.push(value);\n        drain();\n    };\n    const drain = () => {\n        while (stack.length) {\n            const value = stack.pop();\n            if (value instanceof SetScopedStyle) {\n                currentStyleScoped = value.$scopedStyle$;\n                continue;\n            }\n            else if (typeof value === 'function') {\n                if (value === Promise) {\n                    if (!allowPromises) {\n                        return throwErrorAndStop('Promises not expected here.');\n                    }\n                    stack.pop().then(resolveValue, rejectDrain);\n                    return;\n                }\n                const waitOn = value.apply(ssr);\n                if (waitOn) {\n                    if (!allowPromises) {\n                        return throwErrorAndStop('Promises not expected here.');\n                    }\n                    waitOn.then(drain, rejectDrain);\n                    return;\n                }\n                continue;\n            }\n            processJSXNode(ssr, enqueue, value, currentStyleScoped);\n        }\n        if (stack.length === 0 && allowPromises) {\n            resolveDrain();\n        }\n    };\n    drain();\n    return drained;\n}\nfunction processJSXNode(ssr, enqueue, value, styleScoped) {\n    // console.log('processJSXNode', value);\n    if (value === null || value === undefined) {\n        ssr.textNode('');\n    }\n    else if (typeof value === 'boolean') {\n        ssr.textNode('');\n    }\n    else if (typeof value === 'number') {\n        ssr.textNode(String(value));\n    }\n    else if (typeof value === 'string') {\n        ssr.textNode(value);\n    }\n    else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n            for (let i = value.length - 1; i >= 0; i--) {\n                enqueue(value[i]);\n            }\n        }\n        else if (isSignal(value)) {\n            ssr.openFragment(isDev ? [DEBUG_TYPE, VirtualType.WrappedSignal] : EMPTY_ARRAY);\n            const signalNode = ssr.getLastNode();\n            // TODO(mhevery): It is unclear to me why we need to serialize host for WrappedSignal.\n            // const host = ssr.getComponentFrame(0)!.componentNode as fixMeAny;\n            enqueue(ssr.closeFragment);\n            enqueue(trackSignal(() => value.value, signalNode, EffectProperty.VNODE, ssr));\n        }\n        else if (isPromise(value)) {\n            ssr.openFragment(isDev ? [DEBUG_TYPE, VirtualType.Awaited] : EMPTY_ARRAY);\n            enqueue(ssr.closeFragment);\n            enqueue(value);\n            enqueue(Promise);\n            enqueue(() => ssr.commentNode(FLUSH_COMMENT));\n        }\n        else if (isAsyncGenerator(value)) {\n            enqueue(async () => {\n                for await (const chunk of value) {\n                    await _walkJSX(ssr, chunk, true, styleScoped);\n                    ssr.commentNode(FLUSH_COMMENT);\n                }\n            });\n        }\n        else {\n            const jsx = value;\n            const type = jsx.type;\n            // Below, JSXChildren allows functions and regexes, but we assume the dev only uses those as appropriate.\n            if (typeof type === 'string') {\n                // append class attribute if styleScopedId exists and there is no class attribute\n                const classAttributeExists = hasClassAttr(jsx.varProps) || (jsx.constProps && hasClassAttr(jsx.constProps));\n                if (!classAttributeExists && styleScoped) {\n                    if (!jsx.constProps) {\n                        jsx.constProps = {};\n                    }\n                    jsx.constProps['class'] = '';\n                }\n                appendQwikInspectorAttribute(jsx);\n                const innerHTML = ssr.openElement(type, varPropsToSsrAttrs(jsx.varProps, jsx.constProps, ssr.serializationCtx, styleScoped, jsx.key), constPropsToSsrAttrs(jsx.constProps, jsx.varProps, ssr.serializationCtx, styleScoped));\n                if (innerHTML) {\n                    ssr.htmlNode(innerHTML);\n                }\n                enqueue(ssr.closeElement);\n                if (type === 'head') {\n                    enqueue(ssr.additionalHeadNodes);\n                    enqueue(ssr.emitQwikLoaderAtTopIfNeeded);\n                }\n                else if (type === 'body') {\n                    enqueue(ssr.additionalBodyNodes);\n                }\n                const children = jsx.children;\n                children != null && enqueue(children);\n            }\n            else if (isFunction(type)) {\n                if (type === Fragment) {\n                    let attrs = jsx.key != null ? [ELEMENT_KEY, jsx.key] : EMPTY_ARRAY;\n                    if (isDev) {\n                        attrs = [DEBUG_TYPE, VirtualType.Fragment, ...attrs]; // Add debug info.\n                    }\n                    ssr.openFragment(attrs);\n                    enqueue(ssr.closeFragment);\n                    // In theory we could get functions or regexes, but we assume all is well\n                    const children = jsx.children;\n                    children != null && enqueue(children);\n                }\n                else if (type === Slot) {\n                    const componentFrame = ssr.getNearestComponentFrame() || ssr.unclaimedProjectionComponentFrameQueue.shift();\n                    const projectionAttrs = isDev ? [DEBUG_TYPE, VirtualType.Projection] : [];\n                    if (componentFrame) {\n                        const compId = componentFrame.componentNode.id || '';\n                        projectionAttrs.push(':', compId);\n                        ssr.openProjection(projectionAttrs);\n                        const host = componentFrame.componentNode;\n                        const node = ssr.getLastNode();\n                        const slotName = getSlotName(host, jsx, ssr);\n                        projectionAttrs.push(QSlot, slotName);\n                        enqueue(new SetScopedStyle(styleScoped));\n                        enqueue(ssr.closeProjection);\n                        const slotDefaultChildren = jsx.children || null;\n                        const slotChildren = componentFrame.consumeChildrenForSlot(node, slotName) || slotDefaultChildren;\n                        if (slotDefaultChildren && slotChildren !== slotDefaultChildren) {\n                            ssr.addUnclaimedProjection(componentFrame, QDefaultSlot, slotDefaultChildren);\n                        }\n                        enqueue(slotChildren);\n                        enqueue(new SetScopedStyle(componentFrame.childrenScopedStyle));\n                    }\n                    else {\n                        // Even thought we are not projecting we still need to leave a marker for the slot.\n                        ssr.openFragment(isDev ? [DEBUG_TYPE, VirtualType.Projection] : EMPTY_ARRAY);\n                        ssr.closeFragment();\n                    }\n                }\n                else if (type === SSRComment) {\n                    ssr.commentNode(jsx.props.data || '');\n                }\n                else if (type === SSRStream) {\n                    ssr.commentNode(FLUSH_COMMENT);\n                    const generator = jsx.children;\n                    let value;\n                    if (isFunction(generator)) {\n                        value = generator({\n                            async write(chunk) {\n                                await _walkJSX(ssr, chunk, true, styleScoped);\n                                ssr.commentNode(FLUSH_COMMENT);\n                            },\n                        });\n                    }\n                    else {\n                        value = generator;\n                    }\n                    enqueue(value);\n                    isPromise(value) && enqueue(Promise);\n                }\n                else if (type === SSRRaw) {\n                    ssr.htmlNode(jsx.props.data);\n                }\n                else if (isQwikComponent(type)) {\n                    // prod: use new instance of an array for props, we always modify props for a component\n                    ssr.openComponent(isDev ? [DEBUG_TYPE, VirtualType.Component] : []);\n                    const host = ssr.getLastNode();\n                    ssr.getComponentFrame(0).distributeChildrenIntoSlots(jsx.children, styleScoped);\n                    const jsxOutput = applyQwikComponentBody(ssr, jsx, type);\n                    const compStyleComponentId = addComponentStylePrefix(host.getProp(QScopedStyle));\n                    enqueue(new SetScopedStyle(styleScoped));\n                    enqueue(ssr.closeComponent);\n                    enqueue(jsxOutput);\n                    isPromise(jsxOutput) && enqueue(Promise);\n                    enqueue(new SetScopedStyle(compStyleComponentId));\n                }\n                else {\n                    ssr.openFragment(isDev ? [DEBUG_TYPE, VirtualType.InlineComponent] : EMPTY_ARRAY);\n                    enqueue(ssr.closeFragment);\n                    const component = ssr.getComponentFrame(0);\n                    const jsxOutput = applyInlineComponent(ssr, component && component.componentNode, type, jsx);\n                    enqueue(jsxOutput);\n                    isPromise(jsxOutput) && enqueue(Promise);\n                }\n            }\n        }\n    }\n}\nexport function varPropsToSsrAttrs(varProps, constProps, serializationCtx, styleScopedId, key) {\n    return toSsrAttrs(varProps, constProps, serializationCtx, true, styleScopedId, key);\n}\nexport function constPropsToSsrAttrs(constProps, varProps, serializationCtx, styleScopedId) {\n    return toSsrAttrs(constProps, varProps, serializationCtx, false, styleScopedId);\n}\nexport function toSsrAttrs(record, anotherRecord, serializationCtx, pushMergedEventProps, styleScopedId, key) {\n    if (record == null) {\n        return null;\n    }\n    const ssrAttrs = [];\n    for (const key in record) {\n        let value = record[key];\n        if (isJsxPropertyAnEventName(key)) {\n            if (anotherRecord) {\n                /**\n                 * If we have two sources of the same event like this:\n                 *\n                 * ```tsx\n                 * const Counter = component$((props: { initial: number }) => {\n                 *  const count = useSignal(props.initial);\n                 *  useOnWindow(\n                 *    'dblclick',\n                 *    $(() => count.value++)\n                 *  );\n                 *  return <button window:onDblClick$={() => count.value++}>Count: {count.value}!</button>;\n                 * });\n                 * ```\n                 *\n                 * Then we can end with the const and var props with the same (doubled) event. We process\n                 * the const and var props separately, so:\n                 *\n                 * - For the var props we need to merge them into the one value (array)\n                 * - For the const props we need to just skip, because we will handle this in the var props\n                 */\n                const anotherValue = getEventProp(anotherRecord, key);\n                if (anotherValue) {\n                    if (pushMergedEventProps) {\n                        // merge values from the const props with the var props\n                        value = getMergedEventPropValues(value, anotherValue);\n                    }\n                    else {\n                        continue;\n                    }\n                }\n            }\n            const eventValue = setEvent(serializationCtx, key, value);\n            if (eventValue) {\n                ssrAttrs.push(convertEventNameFromJsxPropToHtmlAttr(key), eventValue);\n            }\n            continue;\n        }\n        if (isSignal(value)) {\n            // write signal as is. We will track this signal inside `writeAttrs`\n            if (isClassAttr(key)) {\n                // additionally append styleScopedId for class attr\n                ssrAttrs.push(key, [value, styleScopedId]);\n            }\n            else {\n                ssrAttrs.push(key, value);\n            }\n            continue;\n        }\n        if (isPreventDefault(key)) {\n            addPreventDefaultEventToSerializationContext(serializationCtx, key);\n        }\n        value = serializeAttribute(key, value, styleScopedId);\n        ssrAttrs.push(key, value);\n    }\n    if (key != null) {\n        ssrAttrs.push(ELEMENT_KEY, key);\n    }\n    return ssrAttrs;\n}\nfunction getMergedEventPropValues(value, anotherValue) {\n    let mergedValue = value;\n    // merge values from the const props with the var props\n    if (Array.isArray(value) && Array.isArray(anotherValue)) {\n        // both values are arrays\n        mergedValue = value.concat(anotherValue);\n    }\n    else if (Array.isArray(mergedValue)) {\n        // only first value is array\n        mergedValue.push(anotherValue);\n    }\n    else if (Array.isArray(anotherValue)) {\n        // only second value is array\n        mergedValue = anotherValue;\n        mergedValue.push(value);\n    }\n    else {\n        // none of these values are array\n        mergedValue = [value, anotherValue];\n    }\n    return mergedValue;\n}\nfunction getEventProp(record, propKey) {\n    const eventProp = propKey.toLowerCase();\n    for (const prop in record) {\n        if (prop.toLowerCase() === eventProp) {\n            return record[prop];\n        }\n    }\n    return null;\n}\nfunction setEvent(serializationCtx, key, rawValue) {\n    let value = null;\n    const qrls = rawValue;\n    const appendToValue = (valueToAppend) => {\n        value = (value == null ? '' : value + '\\n') + valueToAppend;\n    };\n    if (Array.isArray(qrls)) {\n        for (let i = 0; i <= qrls.length; i++) {\n            const qrl = qrls[i];\n            if (isQrl(qrl)) {\n                appendToValue(qrlToString(serializationCtx, qrl));\n                addQwikEventToSerializationContext(serializationCtx, key, qrl);\n            }\n            else if (qrl != null) {\n                // nested arrays etc.\n                const nestedValue = setEvent(serializationCtx, key, qrl);\n                if (nestedValue) {\n                    appendToValue(nestedValue);\n                }\n            }\n        }\n    }\n    else if (isQrl(qrls)) {\n        value = qrlToString(serializationCtx, qrls);\n        addQwikEventToSerializationContext(serializationCtx, key, qrls);\n    }\n    return value;\n}\nfunction addQwikEventToSerializationContext(serializationCtx, key, qrl) {\n    const eventName = getEventNameFromJsxProp(key);\n    if (eventName) {\n        serializationCtx.$eventNames$.add(eventName);\n        serializationCtx.$eventQrls$.add(qrl);\n    }\n}\nfunction addPreventDefaultEventToSerializationContext(serializationCtx, key) {\n    // skip first 15 chars, this is length of the `preventdefault:`\n    const eventName = key.substring(15);\n    if (eventName) {\n        serializationCtx.$eventNames$.add(eventName);\n    }\n}\nfunction getSlotName(host, jsx, ssr) {\n    const constProps = jsx.constProps;\n    if (constProps && typeof constProps == 'object' && 'name' in constProps) {\n        const constValue = constProps.name;\n        if (constValue instanceof WrappedSignal) {\n            return trackSignal(() => constValue.value, host, EffectProperty.COMPONENT, ssr);\n        }\n    }\n    return jsx.props.name || QDefaultSlot;\n}\nfunction appendQwikInspectorAttribute(jsx) {\n    if (isDev && qInspector && jsx.dev && jsx.type !== 'head') {\n        const sanitizedFileName = jsx.dev.fileName?.replace(/\\\\/g, '/');\n        const qwikInspectorAttr = 'data-qwik-inspector';\n        if (sanitizedFileName && !(qwikInspectorAttr in jsx.props)) {\n            if (!jsx.constProps) {\n                jsx.constProps = {};\n            }\n            jsx.constProps[qwikInspectorAttr] =\n                `${sanitizedFileName}:${jsx.dev.lineNumber}:${jsx.dev.columnNumber}`;\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined } from '../error/assert';\nimport { SignalDerived } from '../state/signal';\nimport { qSerialize } from '../util/qdev';\nimport { WrappedSignal } from '../v2/signal/v2-signal';\n/** @internal */\nexport const _fnSignal = (fn, args, fnStr) => {\n    return new WrappedSignal(null, fn, args, fnStr || null);\n};\nexport const serializeDerivedSignalFunc = (signal) => {\n    const fnBody = qSerialize ? signal.$funcStr$ : 'null';\n    assertDefined(fnBody, 'If qSerialize is true then fnStr must be provided.');\n    let args = '';\n    for (let i = 0; i < signal.$args$.length; i++) {\n        args += `p${i},`;\n    }\n    return `(${args})=>(${fnBody})`;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5saW5lZC1mbi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9xcmwvaW5saW5lZC1mbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDMUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXZELGdCQUFnQjtBQUNoQixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FDdkIsRUFBSyxFQUNMLElBQW1CLEVBQ25CLEtBQWMsRUFDZCxFQUFFO0lBQ0YsT0FBTyxJQUFJLGFBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLElBQUksSUFBSSxDQUFDLENBQUM7QUFDMUQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsQ0FBQyxNQUFxQixFQUFFLEVBQUU7SUFDbEUsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDdEQsYUFBYSxDQUFDLE1BQU0sRUFBRSxvREFBb0QsQ0FBQyxDQUFDO0lBQzVFLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNkLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQzlDLElBQUksSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ25CLENBQUM7SUFDRCxPQUFPLElBQUksSUFBSSxPQUFPLE1BQU0sR0FBRyxDQUFDO0FBQ2xDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydERlZmluZWQgfSBmcm9tICcuLi9lcnJvci9hc3NlcnQnO1xuaW1wb3J0IHsgU2lnbmFsRGVyaXZlZCB9IGZyb20gJy4uL3N0YXRlL3NpZ25hbCc7XG5pbXBvcnQgeyBxU2VyaWFsaXplIH0gZnJvbSAnLi4vdXRpbC9xZGV2JztcbmltcG9ydCB7IFdyYXBwZWRTaWduYWwgfSBmcm9tICcuLi92Mi9zaWduYWwvdjItc2lnbmFsJztcblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IF9mblNpZ25hbCA9IDxUIGV4dGVuZHMgKC4uLmFyZ3M6IGFueSkgPT4gYW55PihcbiAgZm46IFQsXG4gIGFyZ3M6IFBhcmFtZXRlcnM8VD4sXG4gIGZuU3RyPzogc3RyaW5nXG4pID0+IHtcbiAgcmV0dXJuIG5ldyBXcmFwcGVkU2lnbmFsKG51bGwsIGZuLCBhcmdzLCBmblN0ciB8fCBudWxsKTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXJpYWxpemVEZXJpdmVkU2lnbmFsRnVuYyA9IChzaWduYWw6IFNpZ25hbERlcml2ZWQpID0+IHtcbiAgY29uc3QgZm5Cb2R5ID0gcVNlcmlhbGl6ZSA/IHNpZ25hbC4kZnVuY1N0ciQgOiAnbnVsbCc7XG4gIGFzc2VydERlZmluZWQoZm5Cb2R5LCAnSWYgcVNlcmlhbGl6ZSBpcyB0cnVlIHRoZW4gZm5TdHIgbXVzdCBiZSBwcm92aWRlZC4nKTtcbiAgbGV0IGFyZ3MgPSAnJztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaWduYWwuJGFyZ3MkLmxlbmd0aDsgaSsrKSB7XG4gICAgYXJncyArPSBgcCR7aX0sYDtcbiAgfVxuICByZXR1cm4gYCgke2FyZ3N9KT0+KCR7Zm5Cb2R5fSlgO1xufTtcbiJdfQ==","/** @file Shared types */\n/** @internal */\nexport function isStringifiable(value) {\n    return (value === null ||\n        typeof value === 'string' ||\n        typeof value === 'number' ||\n        typeof value === 'boolean');\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkLXR5cGVzLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3YyL3NoYXJlZC10eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx5QkFBeUI7QUFLekIsZ0JBQWdCO0FBQ2hCLE1BQU0sVUFBVSxlQUFlLENBQUMsS0FBYztJQUM1QyxPQUFPLENBQ0wsS0FBSyxLQUFLLElBQUk7UUFDZCxPQUFPLEtBQUssS0FBSyxRQUFRO1FBQ3pCLE9BQU8sS0FBSyxLQUFLLFFBQVE7UUFDekIsT0FBTyxLQUFLLEtBQUssU0FBUyxDQUMzQixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAZmlsZSBTaGFyZWQgdHlwZXMgKi9cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IHR5cGUgU3RyaW5naWZpYWJsZSA9IHN0cmluZyB8IGJvb2xlYW4gfCBudW1iZXIgfCBudWxsO1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpbmdpZmlhYmxlKHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgU3RyaW5naWZpYWJsZSB7XG4gIHJldHVybiAoXG4gICAgdmFsdWUgPT09IG51bGwgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gICk7XG59XG4iXX0=","import {} from '../../component/component.public';\nimport { _CONST_PROPS } from '../../internal';\nimport {} from '../../qrl/qrl-class';\nimport { _VAR_PROPS } from '../../state/constants';\nimport { untrack } from '../../use/use-core';\nimport { EMPTY_OBJ } from '../../util/flyweight';\nimport { logOnceWarn, logWarn } from '../../util/log';\nimport { ELEMENT_ID, OnRenderProp, QScopedStyle, QSlot, QSlotS } from '../../util/markers';\nimport { qDev, seal } from '../../util/qdev';\nimport { isArray, isObject, isString } from '../../util/types';\nimport { WrappedSignal } from '../../v2/signal/v2-signal';\nimport { static_subtree } from '../execute-component';\n/**\n * Create a JSXNode with the properties fully split into variable and constant parts, and children\n * separated out. Furthermore, the varProps must be a sorted object, that is, the keys must be\n * sorted in ascending utf-8 value order.\n *\n * The constant parts are expected to be the same on every render, and are not checked for changes.\n * This means that they are constant scalars or refs. When the ref is a signal or a store, it can\n * still update the attribute on the vnode.\n *\n * @param type - The JSX type\n * @param varProps - The properties of the tag, sorted, excluding children, excluding any constProps\n * @param constProps - The properties of the tag that are known to be constant references and don't\n *   need checking for changes on re-render\n * @param children - JSX children. Any `children` in the props objects are ignored.\n * @internal\n */\nexport const _jsxSorted = (type, varProps, constProps, children, flags, key, dev) => {\n    const processed = key == null ? null : String(key);\n    const node = new JSXNodeImpl(type, varProps || {}, constProps || null, children, flags, processed);\n    if (qDev && dev) {\n        node.dev = {\n            stack: new Error().stack,\n            ...dev,\n        };\n    }\n    seal(node);\n    return node;\n};\n/**\n * Create a JSXNode, with the properties split into variable and constant parts, but the variable\n * parts could include keys from constProps, as well as `key` and `children`.\n *\n * The constant parts are expected to be the same on every render, and are not checked for changes.\n * This means that they are constant scalars or refs. When the ref is a signal or a store, it can\n * still update the attribute on the vnode.\n *\n * If `children` is defined, any `children` in the props will be ignored.\n *\n * @param type - The tag type\n * @param varProps - The properties of the tag that could change, including children\n * @param constProps - The properties of the tag that are known to be static and don't need checking\n *   for changes on re-render\n * @internal\n */\nexport const _jsxSplit = (type, varProps, constProps, children, flags, key, dev) => {\n    let sortedProps;\n    if (varProps) {\n        // filter and sort\n        sortedProps = Object.fromEntries(untrack(() => Object.entries(varProps))\n            .filter((entry) => {\n            const attr = entry[0];\n            if (attr === 'children') {\n                // side-effect!\n                children ?? (children = entry[1]);\n                return false;\n            }\n            else if (attr === 'key') {\n                key = entry[1];\n                return false;\n            }\n            return (!constProps ||\n                !(attr in constProps) ||\n                // special case for event handlers, they merge\n                /^on[A-Z].*\\$$/.test(attr));\n        })\n            // sort for fast compare in vNodes\n            // keys can never be the same so we don't check for that\n            .sort(([a], [b]) => (a < b ? -1 : 1)));\n    }\n    else {\n        sortedProps = typeof type === 'string' ? EMPTY_OBJ : {};\n    }\n    if (constProps && 'children' in constProps) {\n        children = constProps.children;\n        constProps.children = undefined;\n    }\n    return _jsxSorted(type, sortedProps, constProps, children, flags, key, dev);\n};\n/** @internal @deprecated v1 compat */\nexport const _jsxC = (type, mutable, _flags, key) => jsx(type, mutable, key);\n/** @internal @deprecated v1 compat */\nexport const _jsxS = (type, mutable, immutable, _flags, key) => jsx(type, { ...immutable, ...mutable }, key);\n/** @internal @deprecated v1 compat */\nexport const _jsxQ = (type, mutable, immutable, children, _flags, key) => jsx(type, { ...immutable, ...mutable, children }, key);\n/**\n * @public\n * Used by the JSX transpilers to create a JSXNode.\n * Note that the optimizer will not use this, instead using _jsxSplit and _jsxSorted directly.\n */\nexport const jsx = (type, props, key) => {\n    return _jsxSplit(type, props, null, null, 0, key || null);\n};\nexport const flattenArray = (array, dst) => {\n    // Yes this function is just Array.flat, but we need to run on old versions of Node.\n    if (!dst) {\n        dst = [];\n    }\n    for (const item of array) {\n        if (isArray(item)) {\n            flattenArray(item, dst);\n        }\n        else {\n            dst.push(item);\n        }\n    }\n    return dst;\n};\n/**\n * The legacy transform, used in special cases like `<div {...props} key=\"key\" />`. Note that the\n * children are spread arguments, instead of a prop like in jsx() calls.\n *\n * Also note that this disables optimizations.\n *\n * @public\n */\nexport function h(type, props, ...children) {\n    const normalizedProps = {\n        children: arguments.length > 2 ? flattenArray(children) : null,\n    };\n    let key = null;\n    for (const i in props) {\n        if (i == 'key') {\n            key = props[i];\n        }\n        else {\n            normalizedProps[i] = props[i];\n        }\n    }\n    if (typeof type === 'string' && !key && 'dangerouslySetInnerHTML' in normalizedProps) {\n        key = 'innerhtml';\n    }\n    return _jsxSplit(type, props, null, normalizedProps.children, 0, key);\n}\nexport const SKIP_RENDER_TYPE = ':skipRender';\nexport const isPropsProxy = (obj) => {\n    return obj && obj[_VAR_PROPS] !== undefined;\n};\nexport class JSXNodeImpl {\n    constructor(type, varProps, constProps, children, flags, key = null) {\n        this.type = type;\n        this.varProps = varProps;\n        this.constProps = constProps;\n        this.children = children;\n        this.flags = flags;\n        this.key = key;\n        this._proxy = null;\n        if (qDev) {\n            if (typeof varProps !== 'object') {\n                throw new Error(`JSXNodeImpl: varProps must be objects: ` + JSON.stringify(varProps));\n            }\n            if (typeof constProps !== 'object') {\n                throw new Error(`JSXNodeImpl: constProps must be objects: ` + JSON.stringify(constProps));\n            }\n        }\n    }\n    get props() {\n        // We use a proxy to merge the constProps if they exist and to evaluate derived signals\n        if (!this._proxy) {\n            this._proxy = createPropsProxy(this.varProps, this.constProps, this.children);\n        }\n        return this._proxy;\n    }\n}\n/** @private */\nexport const Virtual = (props) => props.children;\n/** @public */\nexport const RenderOnce = (props, key) => {\n    return new JSXNodeImpl(Virtual, EMPTY_OBJ, null, props.children, static_subtree, key);\n};\n/** @internal */\nexport const isJSXNode = (n) => {\n    if (qDev) {\n        if (n instanceof JSXNodeImpl) {\n            return true;\n        }\n        if (isObject(n) && 'key' in n && 'props' in n && 'type' in n) {\n            logWarn(`Duplicate implementations of \"JSXNode\" found`);\n            return true;\n        }\n        return false;\n    }\n    else {\n        return n instanceof JSXNodeImpl;\n    }\n};\n/** @public */\nexport const Fragment = (props) => props.children;\n/** @public */\nexport const jsxDEV = (type, props, key, _isStatic, opts, _ctx) => {\n    const processed = key == null ? null : String(key);\n    const children = untrack(() => {\n        const c = props.children;\n        if (typeof type === 'string') {\n            delete props.children;\n        }\n        return c;\n    });\n    if (isString(type)) {\n        if ('className' in props) {\n            props.class = props.className;\n            delete props.className;\n            if (qDev) {\n                logOnceWarn('jsx: `className` is deprecated. Use `class` instead.');\n            }\n        }\n    }\n    const node = new JSXNodeImpl(type, props, null, children, 0, processed);\n    node.dev = {\n        stack: new Error().stack,\n        ...opts,\n    };\n    seal(node);\n    return node;\n};\nexport const createJSXError = (message, node) => {\n    const error = new Error(message);\n    if (!node.dev) {\n        return error;\n    }\n    error.stack = `JSXError: ${message}\\n${filterStack(node.dev.stack, 1)}`;\n    return error;\n};\nconst filterStack = (stack, offset = 0) => {\n    return stack.split('\\n').slice(offset).join('\\n');\n};\nexport function createPropsProxy(varProps, constProps, children) {\n    return new Proxy({}, new PropsProxyHandler(varProps, constProps, children));\n}\nclass PropsProxyHandler {\n    constructor($varProps$, $constProps$, $children$) {\n        this.$varProps$ = $varProps$;\n        this.$constProps$ = $constProps$;\n        this.$children$ = $children$;\n    }\n    get(_, prop) {\n        // escape hatch to get the separated props from a component\n        if (prop === _CONST_PROPS) {\n            return this.$constProps$;\n        }\n        if (prop === _VAR_PROPS) {\n            return this.$varProps$;\n        }\n        if (this.$children$ != null && prop === 'children') {\n            return this.$children$;\n        }\n        const value = this.$constProps$ && prop in this.$constProps$\n            ? this.$constProps$[prop]\n            : this.$varProps$[prop];\n        // a proxied value that the optimizer made\n        return value instanceof WrappedSignal ? value.value : value;\n    }\n    set(_, prop, value) {\n        if (prop === _CONST_PROPS) {\n            this.$constProps$ = value;\n            return true;\n        }\n        if (prop === _VAR_PROPS) {\n            this.$varProps$ = value;\n            return true;\n        }\n        if (this.$constProps$ && prop in this.$constProps$) {\n            this.$constProps$[prop] = value;\n        }\n        else {\n            this.$varProps$[prop] = value;\n        }\n        return true;\n    }\n    deleteProperty(_, prop) {\n        if (typeof prop !== 'string') {\n            return false;\n        }\n        let didDelete = delete this.$varProps$[prop];\n        if (this.$constProps$) {\n            didDelete = delete this.$constProps$[prop] || didDelete;\n        }\n        if (this.$children$ != null && prop === 'children') {\n            this.$children$ = null;\n        }\n        return didDelete;\n    }\n    has(_, prop) {\n        const hasProp = (prop === 'children' && this.$children$ != null) ||\n            prop === _CONST_PROPS ||\n            prop === _VAR_PROPS ||\n            prop in this.$varProps$ ||\n            (this.$constProps$ ? prop in this.$constProps$ : false);\n        return hasProp;\n    }\n    getOwnPropertyDescriptor(target, p) {\n        const value = p === 'children' && this.$children$ != null\n            ? this.$children$\n            : this.$constProps$ && p in this.$constProps$\n                ? this.$constProps$[p]\n                : this.$varProps$[p];\n        return {\n            configurable: true,\n            enumerable: true,\n            value: value,\n        };\n    }\n    ownKeys() {\n        const out = Object.keys(this.$varProps$);\n        if (this.$children$ != null && out.indexOf('children') === -1) {\n            out.push('children');\n        }\n        if (this.$constProps$) {\n            for (const key in this.$constProps$) {\n                if (out.indexOf(key) === -1) {\n                    out.push(key);\n                }\n            }\n        }\n        return out;\n    }\n}\nexport { jsx as jsxs };\n//# sourceMappingURL=data:application/json;base64,","import { verifySerializable } from '../state/common';\nimport {} from '../state/context';\nimport { ELEMENT_SEQ, ELEMENT_SEQ_IDX } from '../util/markers';\nimport { qDev, qSerialize } from '../util/qdev';\nimport { useInvokeContext } from './use-core';\n/**\n * @internal\n * The storage provider for hooks. Each invocation increases index i. Data is stored in an array.\n */\nexport const useSequentialScope = () => {\n    const iCtx = useInvokeContext();\n    const hostElement = iCtx.$hostElement$;\n    const host = hostElement;\n    let seq = iCtx.$container2$.getHostProp(host, ELEMENT_SEQ);\n    if (seq === null) {\n        seq = [];\n        iCtx.$container2$.setHostProp(host, ELEMENT_SEQ, seq);\n    }\n    let seqIdx = iCtx.$container2$.getHostProp(host, ELEMENT_SEQ_IDX);\n    if (seqIdx === null) {\n        seqIdx = 0;\n    }\n    iCtx.$container2$.setHostProp(host, ELEMENT_SEQ_IDX, seqIdx + 1);\n    while (seq.length <= seqIdx) {\n        seq.push(undefined);\n    }\n    const set = (value) => {\n        if (qDev && qSerialize) {\n            verifySerializable(value);\n        }\n        return (seq[seqIdx] = value);\n    };\n    return {\n        val: seq[seqIdx],\n        set,\n        i: seqIdx,\n        iCtx,\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXNlcXVlbnRpYWwtc2NvcGUuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXNlL3VzZS1zZXF1ZW50aWFsLXNjb3BlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3JELE9BQU8sRUFBaUIsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRWhELE9BQU8sRUFBRSxnQkFBZ0IsRUFBNEIsTUFBTSxZQUFZLENBQUM7QUFheEU7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsR0FBMEIsRUFBRTtJQUM1RCxNQUFNLElBQUksR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ2hDLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDdkMsTUFBTSxJQUFJLEdBQWdCLFdBQWtCLENBQUM7SUFDN0MsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQVEsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ2xFLElBQUksR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDO1FBQ2pCLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDVCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFDRCxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBUyxJQUFJLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDMUUsSUFBSSxNQUFNLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDcEIsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNiLENBQUM7SUFDRCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNqRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLElBQUksTUFBTSxFQUFFLENBQUM7UUFDNUIsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBQ0QsTUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFRLEVBQUUsRUFBRTtRQUN2QixJQUFJLElBQUksSUFBSSxVQUFVLEVBQUUsQ0FBQztZQUN2QixrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QixDQUFDO1FBQ0QsT0FBTyxDQUFDLEdBQUksQ0FBQyxNQUFPLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDLENBQUM7SUFFRixPQUFPO1FBQ0wsR0FBRyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFDaEIsR0FBRztRQUNILENBQUMsRUFBRSxNQUFNO1FBQ1QsSUFBSTtLQUNPLENBQUM7QUFDaEIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdmVyaWZ5U2VyaWFsaXphYmxlIH0gZnJvbSAnLi4vc3RhdGUvY29tbW9uJztcbmltcG9ydCB7IHR5cGUgUUNvbnRleHQgfSBmcm9tICcuLi9zdGF0ZS9jb250ZXh0JztcbmltcG9ydCB7IEVMRU1FTlRfU0VRLCBFTEVNRU5UX1NFUV9JRFggfSBmcm9tICcuLi91dGlsL21hcmtlcnMnO1xuaW1wb3J0IHsgcURldiwgcVNlcmlhbGl6ZSB9IGZyb20gJy4uL3V0aWwvcWRldic7XG5pbXBvcnQgdHlwZSB7IGZpeE1lQW55LCBIb3N0RWxlbWVudCB9IGZyb20gJy4uL3YyL3NoYXJlZC90eXBlcyc7XG5pbXBvcnQgeyB1c2VJbnZva2VDb250ZXh0LCB0eXBlIFJlbmRlckludm9rZUNvbnRleHQgfSBmcm9tICcuL3VzZS1jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBTZXF1ZW50aWFsU2NvcGU8VD4ge1xuICAvKiogVGhlIGN1cnJlbnRseSBzdG9yZWQgZGF0YSBmb3IgdGhlIGhvb2sgdGhhdCBjYWxscyB0aGlzICovXG4gIHJlYWRvbmx5IHZhbDogVCB8IHVuZGVmaW5lZDtcbiAgLyoqIFN0b3JlIG5ldyBkYXRhIGZvciB0aGUgaG9vayB0aGF0IGNhbGxzIHRoaXMgKi9cbiAgcmVhZG9ubHkgc2V0OiAodjogVCkgPT4gVDtcbiAgLyoqIEluZGV4IG9mIHRoZSBob29rICovXG4gIHJlYWRvbmx5IGk6IG51bWJlcjtcbiAgcmVhZG9ubHkgaUN0eDogUmVuZGVySW52b2tlQ29udGV4dDtcbiAgcmVhZG9ubHkgZWxDdHg6IFFDb250ZXh0O1xufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICogVGhlIHN0b3JhZ2UgcHJvdmlkZXIgZm9yIGhvb2tzLiBFYWNoIGludm9jYXRpb24gaW5jcmVhc2VzIGluZGV4IGkuIERhdGEgaXMgc3RvcmVkIGluIGFuIGFycmF5LlxuICovXG5leHBvcnQgY29uc3QgdXNlU2VxdWVudGlhbFNjb3BlID0gPFQ+KCk6IFNlcXVlbnRpYWxTY29wZTxUPiA9PiB7XG4gIGNvbnN0IGlDdHggPSB1c2VJbnZva2VDb250ZXh0KCk7XG4gIGNvbnN0IGhvc3RFbGVtZW50ID0gaUN0eC4kaG9zdEVsZW1lbnQkO1xuICBjb25zdCBob3N0OiBIb3N0RWxlbWVudCA9IGhvc3RFbGVtZW50IGFzIGFueTtcbiAgbGV0IHNlcSA9IGlDdHguJGNvbnRhaW5lcjIkLmdldEhvc3RQcm9wPGFueVtdPihob3N0LCBFTEVNRU5UX1NFUSk7XG4gIGlmIChzZXEgPT09IG51bGwpIHtcbiAgICBzZXEgPSBbXTtcbiAgICBpQ3R4LiRjb250YWluZXIyJC5zZXRIb3N0UHJvcChob3N0LCBFTEVNRU5UX1NFUSwgc2VxKTtcbiAgfVxuICBsZXQgc2VxSWR4ID0gaUN0eC4kY29udGFpbmVyMiQuZ2V0SG9zdFByb3A8bnVtYmVyPihob3N0LCBFTEVNRU5UX1NFUV9JRFgpO1xuICBpZiAoc2VxSWR4ID09PSBudWxsKSB7XG4gICAgc2VxSWR4ID0gMDtcbiAgfVxuICBpQ3R4LiRjb250YWluZXIyJC5zZXRIb3N0UHJvcChob3N0LCBFTEVNRU5UX1NFUV9JRFgsIHNlcUlkeCArIDEpO1xuICB3aGlsZSAoc2VxLmxlbmd0aCA8PSBzZXFJZHgpIHtcbiAgICBzZXEucHVzaCh1bmRlZmluZWQpO1xuICB9XG4gIGNvbnN0IHNldCA9ICh2YWx1ZTogVCkgPT4ge1xuICAgIGlmIChxRGV2ICYmIHFTZXJpYWxpemUpIHtcbiAgICAgIHZlcmlmeVNlcmlhbGl6YWJsZSh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiAoc2VxIVtzZXFJZHghXSA9IHZhbHVlKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHZhbDogc2VxW3NlcUlkeF0sXG4gICAgc2V0LFxuICAgIGk6IHNlcUlkeCxcbiAgICBpQ3R4LFxuICB9IGFzIGZpeE1lQW55O1xufTtcbiJdfQ==","import { isServerPlatform } from '../platform/platform';\nimport { assertQrl } from '../qrl/qrl-class';\nimport { dollar } from '../qrl/qrl.public';\nimport { Fragment, _jsxSorted } from '../render/jsx/jsx-runtime';\nimport { untrack, useBindInvokeContext } from './use-core';\nimport { Task, TaskFlags, runResource, } from './use-task';\nimport {} from '../state/signal';\nimport { isPromise } from '../util/promises';\nimport { isObject } from '../util/types';\nimport { StoreFlags, createStore, getStoreTarget } from '../v2/signal/v2-store';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { isSignal } from '../v2/signal/v2-signal';\nconst DEBUG = false;\nfunction debugLog(...arg) {\n    // eslint-disable-next-line no-console\n    console.log(arg.join(', '));\n}\n// <docs markdown=\"../readme.md#useResource\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResource instead)\n/**\n * This method works like an async memoized function that runs whenever some tracked value changes\n * and returns some data.\n *\n * `useResource` however returns immediate a `ResourceReturn` object that contains the data and a\n * state that indicates if the data is available or not.\n *\n * The status can be one of the following:\n *\n * - `pending` - the data is not yet available.\n * - `resolved` - the data is available.\n * - `rejected` - the data is not available due to an error or timeout.\n *\n * Avoid using a `try/catch` statement in `useResource$`. If you catch the error instead of passing\n * it, the resource status will never be `rejected`.\n *\n * ### Example\n *\n * Example showing how `useResource` to perform a fetch to request the weather, whenever the input\n * city name changes.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const cityS = useSignal('');\n *\n *   const weatherResource = useResource$(async ({ track, cleanup }) => {\n *     const cityName = track(cityS);\n *     const abortController = new AbortController();\n *     cleanup(() => abortController.abort('cleanup'));\n *     const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n *       signal: abortController.signal,\n *     });\n *     const data = await res.json();\n *     return data as { temp: number };\n *   });\n *\n *   return (\n *     <div>\n *       <input name=\"city\" bind:value={cityS} />\n *       <Resource\n *         value={weatherResource}\n *         onResolved={(weather) => {\n *           return <div>Temperature: {weather.temp}</div>;\n *         }}\n *       />\n *     </div>\n *   );\n * });\n * ```\n *\n * @public\n * @see Resource\n * @see ResourceReturn\n */\n// </docs>\nexport const useResourceQrl = (qrl, opts) => {\n    const { val, set, i, iCtx } = useSequentialScope();\n    if (val != null) {\n        return val;\n    }\n    assertQrl(qrl);\n    const container = iCtx.$container2$;\n    const resource = createResourceReturn(container, opts);\n    const el = iCtx.$hostElement$;\n    const task = new Task(TaskFlags.DIRTY | TaskFlags.RESOURCE, i, el, qrl, resource, null);\n    runResource(task, container, iCtx.$hostElement$);\n    set(resource);\n    return resource;\n};\n// <docs markdown=\"../readme.md#useResource\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResource instead)\n/**\n * This method works like an async memoized function that runs whenever some tracked value changes\n * and returns some data.\n *\n * `useResource` however returns immediate a `ResourceReturn` object that contains the data and a\n * state that indicates if the data is available or not.\n *\n * The status can be one of the following:\n *\n * - 'pending' - the data is not yet available.\n * - 'resolved' - the data is available.\n * - 'rejected' - the data is not available due to an error or timeout.\n *\n * ### Example\n *\n * Example showing how `useResource` to perform a fetch to request the weather, whenever the input\n * city name changes.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const cityS = useSignal('');\n *\n *   const weatherResource = useResource$(async ({ track, cleanup }) => {\n *     const cityName = track(cityS);\n *     const abortController = new AbortController();\n *     cleanup(() => abortController.abort('cleanup'));\n *     const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n *       signal: abortController.signal,\n *     });\n *     const data = await res.json();\n *     return data as { temp: number };\n *   });\n *\n *   return (\n *     <div>\n *       <input name=\"city\" bind:value={cityS} />\n *       <Resource\n *         value={weatherResource}\n *         onResolved={(weather) => {\n *           return <div>Temperature: {weather.temp}</div>;\n *         }}\n *       />\n *     </div>\n *   );\n * });\n * ```\n *\n * @public\n * @see Resource\n * @see ResourceReturn\n */\n// </docs>\nexport const useResource$ = (generatorFn, opts) => {\n    return useResourceQrl(dollar(generatorFn), opts);\n};\n// <docs markdown=\"../readme.md#useResource\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResource instead)\n/**\n * This method works like an async memoized function that runs whenever some tracked value changes\n * and returns some data.\n *\n * `useResource` however returns immediate a `ResourceReturn` object that contains the data and a\n * state that indicates if the data is available or not.\n *\n * The status can be one of the following:\n *\n * - 'pending' - the data is not yet available.\n * - 'resolved' - the data is available.\n * - 'rejected' - the data is not available due to an error or timeout.\n *\n * ### Example\n *\n * Example showing how `useResource` to perform a fetch to request the weather, whenever the input\n * city name changes.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const cityS = useSignal('');\n *\n *   const weatherResource = useResource$(async ({ track, cleanup }) => {\n *     const cityName = track(cityS);\n *     const abortController = new AbortController();\n *     cleanup(() => abortController.abort('cleanup'));\n *     const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n *       signal: abortController.signal,\n *     });\n *     const data = await res.json();\n *     return data as { temp: number };\n *   });\n *\n *   return (\n *     <div>\n *       <input name=\"city\" bind:value={cityS} />\n *       <Resource\n *         value={weatherResource}\n *         onResolved={(weather) => {\n *           return <div>Temperature: {weather.temp}</div>;\n *         }}\n *       />\n *     </div>\n *   );\n * });\n * ```\n *\n * @public\n * @see Resource\n * @see ResourceReturn\n */\n// </docs>\nexport const Resource = (props) => {\n    // Resource path\n    return _jsxSorted(Fragment, null, null, getResourceValueAsPromise(props), 0, null);\n};\nfunction getResourceValueAsPromise(props) {\n    const resource = props.value;\n    if (isResourceReturn(resource)) {\n        const isBrowser = !isServerPlatform();\n        if (isBrowser) {\n            // create a subscription for the resource._state changes\n            const state = resource._state;\n            DEBUG && debugLog(`RESOURCE_CMP.${state}`, 'VALUE: ' + untrack(() => resource._resolved));\n            if (state === 'pending' && props.onPending) {\n                return Promise.resolve(props.onPending());\n            }\n            else if (state === 'rejected' && props.onRejected) {\n                return Promise.resolve(resource._error).then(props.onRejected);\n            }\n            else {\n                // resolved, pending without onPending prop or rejected with onRejected prop\n                return Promise.resolve(untrack(() => resource._resolved)).then(props.onResolved);\n            }\n        }\n        return resource.value.then(useBindInvokeContext(props.onResolved), useBindInvokeContext(props.onRejected));\n    }\n    else if (isPromise(resource)) {\n        return resource.then(useBindInvokeContext(props.onResolved), useBindInvokeContext(props.onRejected));\n    }\n    else if (isSignal(resource)) {\n        return Promise.resolve(resource.value).then(useBindInvokeContext(props.onResolved), useBindInvokeContext(props.onRejected));\n    }\n    else {\n        return Promise.resolve(resource).then(useBindInvokeContext(props.onResolved), useBindInvokeContext(props.onRejected));\n    }\n}\nexport const _createResourceReturn = (opts) => {\n    const resource = {\n        __brand: 'resource',\n        value: undefined,\n        loading: isServerPlatform() ? false : true,\n        _resolved: undefined,\n        _error: undefined,\n        _state: 'pending',\n        _timeout: opts?.timeout ?? -1,\n        _cache: 0,\n    };\n    return resource;\n};\nexport const createResourceReturn = (container, opts, initialPromise) => {\n    const result = _createResourceReturn(opts);\n    result.value = initialPromise;\n    return createStore(container, result, StoreFlags.RECURSIVE);\n};\nexport const getInternalResource = (resource) => {\n    return getStoreTarget(resource);\n};\nexport const isResourceReturn = (obj) => {\n    return isObject(obj) && (getStoreTarget(obj) || obj).__brand === 'resource';\n};\n// TODO: to remove - serializers v1\nexport const serializeResource = (resource, getObjId) => {\n    const state = resource._state;\n    if (state === 'resolved') {\n        return `0 ${getObjId(resource._resolved)}`;\n    }\n    else if (state === 'pending') {\n        return `1`;\n    }\n    else {\n        return `2 ${getObjId(resource._error)}`;\n    }\n};\n// TODO: to remove - serializers v1\nexport const parseResourceReturn = (data) => {\n    const [first, id] = data.split(' ');\n    const result = _createResourceReturn();\n    result.value = Promise.resolve();\n    if (first === '0') {\n        result._state = 'resolved';\n        result._resolved = id;\n        result.loading = false;\n    }\n    else if (first === '1') {\n        result._state = 'pending';\n        result.value = new Promise(() => { });\n        result.loading = true;\n    }\n    else if (first === '2') {\n        result._state = 'rejected';\n        result._error = id;\n        result.loading = false;\n    }\n    return result;\n};\n//# sourceMappingURL=data:application/json;base64,","import { componentQrl, isQwikComponent, } from '../component/component.public';\nimport { parseQRL, serializeQRL } from '../qrl/qrl';\nimport { isQrl } from '../qrl/qrl-class';\nimport { intToStr } from './container';\nimport { isResourceReturn, parseResourceReturn, serializeResource } from '../use/use-resource';\nimport { isSubscriberDescriptor, parseTask, serializeTask, } from '../use/use-task';\nimport { isDocument } from '../util/element';\nimport { QObjectSignalFlags, SIGNAL_IMMUTABLE, SignalDerived, SignalImpl, SignalWrapper, } from '../state/signal';\nimport { collectSubscriptions, collectValue, mapJoin } from './pause';\nimport { fastWeakSerialize, getSubscriptionManager, LocalSubscriptionManager, } from '../state/common';\nimport { getOrCreateProxy } from '../state/store';\nimport { QObjectManagerSymbol } from '../state/constants';\nimport { serializeDerivedSignalFunc } from '../qrl/inlined-fn';\nimport { assertString, assertTrue } from '../error/assert';\nimport { Fragment, JSXNodeImpl, isJSXNode } from '../render/jsx/jsx-runtime';\nimport { Slot } from '../render/jsx/slot.public';\n/**\n * - 0, 8, 9, A, B, C, D\n * - `\\0`: null character (U+0000 NULL) (only if the next character is not a decimal digit; else it’s\n *   an octal escape sequence)\n * - `\\b`: backspace (U+0008 BACKSPACE)\n * - `\\t`: horizontal tab (U+0009 CHARACTER TABULATION)\n * - `\\n`: line feed (U+000A LINE FEED)\n * - `\\v`: vertical tab (U+000B LINE TABULATION)\n * - `\\f`: form feed (U+000C FORM FEED)\n * - `\\r`: carriage return (U+000D CARRIAGE RETURN)\n * - `\\\"`: double quote (U+0022 QUOTATION MARK)\n * - `\\'`: single quote (U+0027 APOSTROPHE)\n * - `\\\\`: backslash (U+005C REVERSE SOLIDUS)\n */\nexport const UNDEFINED_PREFIX = '\\u0001';\n/**\n * Normalize the shape of the serializer for better inline-cache performance.\n *\n * @param serializer\n * @returns\n */\nfunction serializer(serializer) {\n    return {\n        $prefixCode$: serializer.$prefix$.charCodeAt(0),\n        $prefixChar$: serializer.$prefix$,\n        $test$: serializer.$test$,\n        $serialize$: serializer.$serialize$,\n        $prepare$: serializer.$prepare$,\n        $fill$: serializer.$fill$,\n        $collect$: serializer.$collect$,\n        $subs$: serializer.$subs$,\n    };\n}\nconst QRLSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0002',\n    $test$: (v) => isQrl(v),\n    $collect$: (v, collector, leaks) => {\n        if (v.$captureRef$) {\n            for (const item of v.$captureRef$) {\n                collectValue(item, collector, leaks);\n            }\n        }\n        if (collector.$prefetch$ === 0) {\n            collector.$qrls$.push(v);\n        }\n    },\n    $serialize$: (obj, getObjId) => {\n        return serializeQRL(obj, {\n            $getObjId$: getObjId,\n        });\n    },\n    $prepare$: (data, containerState) => {\n        return parseQRL(data, containerState.$containerEl$);\n    },\n    $fill$: (qrl, getObject) => {\n        if (qrl.$capture$ && qrl.$capture$.length > 0) {\n            qrl.$captureRef$ = qrl.$capture$.map(getObject);\n            qrl.$capture$ = null;\n        }\n    },\n});\nconst TaskSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0003',\n    $test$: (v) => isSubscriberDescriptor(v),\n    $collect$: (v, collector, leaks) => {\n        collectValue(v.$qrl$, collector, leaks);\n        if (v.$state$) {\n            collectValue(v.$state$, collector, leaks);\n            if (leaks === true && v.$state$ instanceof SignalImpl) {\n                collectSubscriptions(v.$state$[QObjectManagerSymbol], collector, true);\n            }\n        }\n    },\n    $serialize$: (obj, getObjId) => serializeTask(obj, getObjId),\n    $prepare$: (data) => parseTask(data),\n    $fill$: (task, getObject) => {\n        task.$el$ = getObject(task.$el$);\n        task.$qrl$ = getObject(task.$qrl$);\n        if (task.$state$) {\n            task.$state$ = getObject(task.$state$);\n        }\n    },\n});\nconst ResourceSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0004',\n    $test$: (v) => isResourceReturn(v),\n    $collect$: (obj, collector, leaks) => {\n        collectValue(obj.value, collector, leaks);\n        collectValue(obj._resolved, collector, leaks);\n    },\n    $serialize$: (obj, getObjId) => {\n        return serializeResource(obj, getObjId);\n    },\n    $prepare$: (data) => {\n        return parseResourceReturn(data);\n    },\n    $fill$: (resource, getObject) => {\n        if (resource._state === 'resolved') {\n            resource._resolved = getObject(resource._resolved);\n            resource.value = Promise.resolve(resource._resolved);\n        }\n        else if (resource._state === 'rejected') {\n            const p = Promise.reject(resource._error);\n            p.catch(() => null);\n            resource._error = getObject(resource._error);\n            resource.value = p;\n        }\n    },\n});\nconst URLSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0005',\n    $test$: (v) => v instanceof URL,\n    $serialize$: (obj) => obj.href,\n    $prepare$: (data) => new URL(data),\n});\nconst DateSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0006',\n    $test$: (v) => v instanceof Date,\n    $serialize$: (obj) => obj.toISOString(),\n    $prepare$: (data) => new Date(data),\n});\nconst RegexSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0007',\n    $test$: (v) => v instanceof RegExp,\n    $serialize$: (obj) => `${obj.flags} ${obj.source}`,\n    $prepare$: (data) => {\n        const space = data.indexOf(' ');\n        const source = data.slice(space + 1);\n        const flags = data.slice(0, space);\n        return new RegExp(source, flags);\n    },\n});\nconst ErrorSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u000E',\n    $test$: (v) => v instanceof Error,\n    $serialize$: (obj) => {\n        return obj.message;\n    },\n    $prepare$: (text) => {\n        const err = new Error(text);\n        err.stack = undefined;\n        return err;\n    },\n});\nconst DocumentSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u000F',\n    $test$: (v) => !!v && typeof v === 'object' && isDocument(v),\n    $prepare$: (_, _c, doc) => {\n        return doc;\n    },\n});\nexport const SERIALIZABLE_STATE = Symbol('serializable-data');\nconst ComponentSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0010',\n    $test$: (obj) => isQwikComponent(obj),\n    $serialize$: (obj, getObjId) => {\n        const [qrl] = obj[SERIALIZABLE_STATE];\n        return serializeQRL(qrl, {\n            $getObjId$: getObjId,\n        });\n    },\n    $prepare$: (data, containerState) => {\n        const qrl = parseQRL(data, containerState.$containerEl$);\n        return componentQrl(qrl);\n    },\n    $fill$: (component, getObject) => {\n        const [qrl] = component[SERIALIZABLE_STATE];\n        if (qrl.$capture$?.length) {\n            qrl.$captureRef$ = qrl.$capture$.map(getObject);\n            qrl.$capture$ = null;\n        }\n    },\n});\nconst DerivedSignalSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0011',\n    $test$: (obj) => obj instanceof SignalDerived,\n    $collect$: (obj, collector, leaks) => {\n        if (obj.$args$) {\n            for (const arg of obj.$args$) {\n                collectValue(arg, collector, leaks);\n            }\n        }\n    },\n    $serialize$: (signal, getObjID, collector) => {\n        const serialized = serializeDerivedSignalFunc(signal);\n        let index = collector.$inlinedFunctions$.indexOf(serialized);\n        if (index < 0) {\n            index = collector.$inlinedFunctions$.length;\n            collector.$inlinedFunctions$.push(serialized);\n        }\n        return mapJoin(signal.$args$, getObjID, ' ') + ' @' + intToStr(index);\n    },\n    $prepare$: (data) => {\n        const ids = data.split(' ');\n        const args = ids.slice(0, -1);\n        const fn = ids[ids.length - 1];\n        return new SignalDerived(fn, args, fn);\n    },\n    $fill$: (fn, getObject) => {\n        assertString(fn.$func$, 'fn.$func$ should be a string');\n        fn.$func$ = getObject(fn.$func$);\n        fn.$args$ = fn.$args$.map(getObject);\n    },\n});\nconst SignalSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0012',\n    $test$: (v) => v instanceof SignalImpl,\n    $collect$: (obj, collector, leaks) => {\n        collectValue(obj.untrackedValue, collector, leaks);\n        const mutable = (obj[QObjectSignalFlags] & SIGNAL_IMMUTABLE) === 0;\n        if (leaks === true && mutable) {\n            collectSubscriptions(obj[QObjectManagerSymbol], collector, true);\n        }\n        return obj;\n    },\n    $serialize$: (obj, getObjId) => {\n        return getObjId(obj.untrackedValue);\n    },\n    $prepare$: (data, containerState) => {\n        return new SignalImpl(data, containerState?.$subsManager$?.$createManager$(), 0);\n    },\n    $subs$: (signal, subs) => {\n        signal[QObjectManagerSymbol].$addSubs$(subs);\n    },\n    $fill$: (signal, getObject) => {\n        signal.untrackedValue = getObject(signal.untrackedValue);\n    },\n});\nconst SignalWrapperSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0013',\n    $test$: (v) => v instanceof SignalWrapper,\n    $collect$(obj, collector, leaks) {\n        collectValue(obj.ref, collector, leaks);\n        if (fastWeakSerialize(obj.ref)) {\n            const localManager = getSubscriptionManager(obj.ref);\n            if (isTreeShakeable(collector.$containerState$.$subsManager$, localManager, leaks)) {\n                collectValue(obj.ref[obj.prop], collector, leaks);\n            }\n        }\n        return obj;\n    },\n    $serialize$: (obj, getObjId) => {\n        return `${getObjId(obj.ref)} ${obj.prop}`;\n    },\n    $prepare$: (data) => {\n        const [id, prop] = data.split(' ');\n        return new SignalWrapper(id, prop);\n    },\n    $fill$: (signal, getObject) => {\n        signal.ref = getObject(signal.ref);\n    },\n});\nconst NoFiniteNumberSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0014',\n    $test$: (v) => typeof v === 'number',\n    $serialize$: (v) => {\n        return String(v);\n    },\n    $prepare$: (data) => {\n        return Number(data);\n    },\n});\nconst URLSearchParamsSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0015',\n    $test$: (v) => v instanceof URLSearchParams,\n    $serialize$: (obj) => obj.toString(),\n    $prepare$: (data) => new URLSearchParams(data),\n});\nconst FormDataSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0016',\n    $test$: (v) => typeof FormData !== 'undefined' && v instanceof globalThis.FormData,\n    $serialize$: (formData) => {\n        const array = [];\n        formData.forEach((value, key) => {\n            if (typeof value === 'string') {\n                array.push([key, value]);\n            }\n            else {\n                array.push([key, value.name]);\n            }\n        });\n        return JSON.stringify(array);\n    },\n    $prepare$: (data) => {\n        const array = JSON.parse(data);\n        const formData = new FormData();\n        for (const [key, value] of array) {\n            formData.append(key, value);\n        }\n        return formData;\n    },\n});\nconst JSXNodeSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0017',\n    $test$: (v) => isJSXNode(v),\n    $collect$: (node, collector, leaks) => {\n        collectValue(node.children, collector, leaks);\n        collectValue(node.props, collector, leaks);\n        collectValue(node.constProps, collector, leaks);\n        collectValue(node.key, collector, leaks);\n        let type = node.type;\n        if (type === Slot) {\n            type = ':slot';\n        }\n        else if (type === Fragment) {\n            type = ':fragment';\n        }\n        collectValue(type, collector, leaks);\n    },\n    $serialize$: (node, getObjID) => {\n        let type = node.type;\n        if (type === Slot) {\n            type = ':slot';\n        }\n        else if (type === Fragment) {\n            type = ':fragment';\n        }\n        return `${getObjID(type)} ${getObjID(node.props)} ${getObjID(node.constProps)} ${getObjID(node.key)} ${getObjID(node.children)} ${node.flags}`;\n    },\n    $prepare$: (data) => {\n        const [type, props, immutableProps, key, children, flags] = data.split(' ');\n        const node = new JSXNodeImpl(type, props, immutableProps, children, parseInt(flags, 10), key);\n        return node;\n    },\n    $fill$: (node, getObject) => {\n        node.type = getResolveJSXType(getObject(node.type));\n        node.props = getObject(node.props);\n        node.constProps = getObject(node.constProps);\n        node.key = getObject(node.key);\n        node.children = getObject(node.children);\n    },\n});\nconst BigIntSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0018',\n    $test$: (v) => typeof v === 'bigint',\n    $serialize$: (v) => {\n        return v.toString();\n    },\n    $prepare$: (data) => {\n        return BigInt(data);\n    },\n});\nconst Uint8ArraySerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u001c',\n    $test$: (v) => v instanceof Uint8Array,\n    $serialize$: (v) => {\n        let buf = '';\n        for (const c of v) {\n            buf += String.fromCharCode(c);\n        }\n        return btoa(buf).replace(/=+$/, '');\n    },\n    $prepare$: (data) => {\n        const buf = atob(data);\n        const bytes = new Uint8Array(buf.length);\n        let i = 0;\n        for (const s of buf) {\n            bytes[i++] = s.charCodeAt(0);\n        }\n        return bytes;\n    },\n    $fill$: undefined,\n});\nconst DATA = Symbol();\nconst SetSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u0019',\n    $test$: (v) => v instanceof Set,\n    $collect$: (set, collector, leaks) => {\n        set.forEach((value) => collectValue(value, collector, leaks));\n    },\n    $serialize$: (v, getObjID) => {\n        return Array.from(v).map(getObjID).join(' ');\n    },\n    $prepare$: (data) => {\n        const set = new Set();\n        set[DATA] = data;\n        return set;\n    },\n    $fill$: (set, getObject) => {\n        const data = set[DATA];\n        set[DATA] = undefined;\n        assertString(data, 'SetSerializer should be defined');\n        const items = data.length === 0 ? [] : data.split(' ');\n        for (const id of items) {\n            set.add(getObject(id));\n        }\n    },\n});\nconst MapSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u001a',\n    $test$: (v) => v instanceof Map,\n    $collect$: (map, collector, leaks) => {\n        map.forEach((value, key) => {\n            collectValue(value, collector, leaks);\n            collectValue(key, collector, leaks);\n        });\n    },\n    $serialize$: (map, getObjID) => {\n        const result = [];\n        map.forEach((value, key) => {\n            result.push(getObjID(key) + ' ' + getObjID(value));\n        });\n        return result.join(' ');\n    },\n    $prepare$: (data) => {\n        const set = new Map();\n        set[DATA] = data;\n        return set;\n    },\n    $fill$: (set, getObject) => {\n        const data = set[DATA];\n        set[DATA] = undefined;\n        assertString(data, 'SetSerializer should be defined');\n        const items = data.length === 0 ? [] : data.split(' ');\n        assertTrue(items.length % 2 === 0, 'MapSerializer should have even number of items');\n        for (let i = 0; i < items.length; i += 2) {\n            set.set(getObject(items[i]), getObject(items[i + 1]));\n        }\n    },\n});\nconst StringSerializer = /*#__PURE__*/ serializer({\n    $prefix$: '\\u001b',\n    $test$: (v) => !!getSerializer(v) || v === UNDEFINED_PREFIX,\n    $serialize$: (v) => v,\n    $prepare$: (data) => data,\n});\nconst serializers = [\n    // NULL                       \\u0000\n    // UNDEFINED_PREFIX           \\u0001\n    QRLSerializer, ////////////// \\u0002\n    TaskSerializer, ///////////// \\u0003\n    ResourceSerializer, ///////// \\u0004\n    URLSerializer, ////////////// \\u0005\n    DateSerializer, ///////////// \\u0006\n    RegexSerializer, //////////// \\u0007\n    // BACKSPACE                  \\u0008\n    // HORIZONTAL TAB             \\u0009\n    // NEW LINE                   \\u000A\n    // VERTICAL TAB               \\u000B\n    // FORM FEED                  \\u000C\n    // CARRIAGE RETURN            \\u000D\n    ErrorSerializer, //////////// \\u000E\n    DocumentSerializer, ///////// \\u000F\n    ComponentSerializer, //////// \\u0010\n    DerivedSignalSerializer, //// \\u0011\n    SignalSerializer, /////////// \\u0012\n    SignalWrapperSerializer, //// \\u0013\n    NoFiniteNumberSerializer, /// \\u0014\n    URLSearchParamsSerializer, // \\u0015\n    FormDataSerializer, ///////// \\u0016\n    JSXNodeSerializer, ////////// \\u0017\n    BigIntSerializer, /////////// \\u0018\n    SetSerializer, ////////////// \\u0019\n    MapSerializer, ////////////// \\u001a\n    StringSerializer, /////////// \\u001b\n    Uint8ArraySerializer, /////// \\u001c\n];\nconst serializerByPrefix = /*#__PURE__*/ (() => {\n    const serializerByPrefix = [];\n    serializers.forEach((s) => {\n        const prefix = s.$prefixCode$;\n        while (serializerByPrefix.length < prefix) {\n            serializerByPrefix.push(undefined);\n        }\n        serializerByPrefix.push(s);\n    });\n    return serializerByPrefix;\n})();\nexport function getSerializer(obj) {\n    if (typeof obj === 'string') {\n        const prefix = obj.charCodeAt(0);\n        if (prefix < serializerByPrefix.length) {\n            return serializerByPrefix[prefix];\n        }\n    }\n    return undefined;\n}\nconst collectorSerializers = /*#__PURE__*/ serializers.filter((a) => a.$collect$);\nexport const canSerialize = (obj) => {\n    for (const s of serializers) {\n        if (s.$test$(obj)) {\n            return true;\n        }\n    }\n    return false;\n};\nexport const collectDeps = (obj, collector, leaks) => {\n    for (const s of collectorSerializers) {\n        if (s.$test$(obj)) {\n            s.$collect$(obj, collector, leaks);\n            return true;\n        }\n    }\n    return false;\n};\nexport const serializeValue = (obj, getObjID, collector, containerState) => {\n    for (const s of serializers) {\n        if (s.$test$(obj)) {\n            let value = s.$prefixChar$;\n            if (s.$serialize$) {\n                value += s.$serialize$(obj, getObjID, collector, containerState);\n            }\n            return value;\n        }\n    }\n    if (typeof obj === 'string') {\n        return obj;\n    }\n    return undefined;\n};\nexport const createParser = (containerState, doc) => {\n    const fillMap = new Map();\n    const subsMap = new Map();\n    return {\n        prepare(data) {\n            const serializer = getSerializer(data);\n            if (serializer) {\n                const value = serializer.$prepare$(data.slice(1), containerState, doc);\n                if (serializer.$fill$) {\n                    fillMap.set(value, serializer);\n                }\n                if (serializer.$subs$) {\n                    subsMap.set(value, serializer);\n                }\n                return value;\n            }\n            return data;\n        },\n        subs(obj, subs) {\n            const serializer = subsMap.get(obj);\n            if (serializer) {\n                serializer.$subs$(obj, subs, containerState);\n                return true;\n            }\n            return false;\n        },\n        fill(obj, getObject) {\n            const serializer = fillMap.get(obj);\n            if (serializer) {\n                serializer.$fill$(obj, getObject, containerState);\n                return true;\n            }\n            return false;\n        },\n    };\n};\nexport const OBJECT_TRANSFORMS = {\n    '!': (obj, containerState) => {\n        return containerState.$proxyMap$.get(obj) ?? getOrCreateProxy(obj, containerState);\n    },\n    '~': (obj) => {\n        return Promise.resolve(obj);\n    },\n    _: (obj) => {\n        return Promise.reject(obj);\n    },\n};\nconst isTreeShakeable = (manager, target, leaks) => {\n    if (typeof leaks === 'boolean') {\n        return leaks;\n    }\n    const localManager = manager.$groupToManagers$.get(leaks);\n    if (localManager && localManager.length > 0) {\n        if (localManager.length === 1) {\n            return localManager[0] !== target;\n        }\n        return true;\n    }\n    return false;\n};\nconst getResolveJSXType = (type) => {\n    if (type === ':slot') {\n        return Slot;\n    }\n    if (type === ':fragment') {\n        return Fragment;\n    }\n    return type;\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined, assertElement, assertEqual } from '../error/assert';\nimport { getDocument } from '../util/dom';\nimport { isComment, isDocument, isElement, isNode, isQwikElement, isText, isVirtualElement, } from '../util/element';\nimport { logWarn } from '../util/log';\nimport { ELEMENT_ID, ELEMENT_ID_PREFIX, QContainerAttr, QScopedStyle } from '../util/markers';\nimport { qDev } from '../util/qdev';\nimport { QError_containerAlreadyPaused, QError_missingObjectId, QError_verifySerializable, qError, } from '../error/error';\nimport { serializeQRLs } from '../qrl/qrl';\nimport { processVirtualNodes, } from '../render/dom/virtual-element';\nimport { directGetAttribute, directSetAttribute } from '../render/fast-calls';\nimport { LocalSubscriptionManager, fastSkipSerialize, fastWeakSerialize, getProxyFlags, getProxyTarget, getSubscriptionManager, isConnected, serializeSubscription, } from '../state/common';\nimport { QObjectImmutable, QObjectRecursive } from '../state/constants';\nimport { HOST_FLAG_DYNAMIC, tryGetContext } from '../state/context';\nimport { groupListeners } from '../state/listeners';\nimport { SignalImpl } from '../state/signal';\nimport { serializeSStyle } from '../style/qrl-styles';\nimport { TaskFlags, cleanupTask, isResourceTask, } from '../use/use-task';\nimport { isNotNullable, isPromise } from '../util/promises';\nimport { isArray, isObject, isSerializableObject } from '../util/types';\nimport { FILTER_REJECT, FILTER_SKIP, SHOW_COMMENT, SHOW_ELEMENT, _getContainerState, intToStr, } from './container';\nimport { UNDEFINED_PREFIX, collectDeps, serializeValue } from './serializers';\nimport { isQrl } from '../qrl/qrl-class';\n// <docs markdown=\"../readme.md#pauseContainer\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#pauseContainer instead)\n// </docs>\n/** This pauses a running container in the browser. It is not used for SSR */\n// TODO(mhevery): this is a remnant when you could have paused on client. Should be deleted.\nexport const pauseContainer = async (elmOrDoc, defaultParentJSON) => {\n    const doc = getDocument(elmOrDoc);\n    const documentElement = doc.documentElement;\n    const containerEl = isDocument(elmOrDoc) ? documentElement : elmOrDoc;\n    if (directGetAttribute(containerEl, QContainerAttr) === 'paused') {\n        throw qError(QError_containerAlreadyPaused);\n    }\n    const parentJSON = defaultParentJSON ?? (containerEl === doc.documentElement ? doc.body : containerEl);\n    const containerState = _getContainerState(containerEl);\n    const contexts = getNodesInScope(containerEl, hasContext);\n    // Set container to paused\n    directSetAttribute(containerEl, QContainerAttr, 'paused');\n    // Update elements with context\n    for (const elCtx of contexts) {\n        const elm = elCtx.$element$;\n        const listeners = elCtx.li;\n        if (elCtx.$scopeIds$) {\n            const value = serializeSStyle(elCtx.$scopeIds$);\n            if (value) {\n                elm.setAttribute(QScopedStyle, value);\n            }\n        }\n        if (elCtx.$id$) {\n            elm.setAttribute(ELEMENT_ID, elCtx.$id$);\n        }\n        if (isElement(elm) && listeners.length > 0) {\n            const groups = groupListeners(listeners);\n            for (const listener of groups) {\n                elm.setAttribute(listener[0], serializeQRLs(listener[1], containerState, elCtx));\n            }\n        }\n    }\n    // Serialize data\n    const data = await _pauseFromContexts(contexts, containerState, (el) => {\n        if (isNode(el) && isText(el)) {\n            return getTextID(el, containerState);\n        }\n        return null;\n    });\n    // Emit Qwik JSON\n    const qwikJson = doc.createElement('script');\n    directSetAttribute(qwikJson, 'type', 'qwik/json');\n    qwikJson.textContent = escapeText(JSON.stringify(data.state, undefined, qDev ? '  ' : undefined));\n    parentJSON.appendChild(qwikJson);\n    // Emit event registration\n    const extraListeners = Array.from(containerState.$events$, (s) => JSON.stringify(s));\n    const eventsScript = doc.createElement('script');\n    eventsScript.textContent = `(window.qwikevents||=[]).push(${extraListeners.join(', ')})`;\n    parentJSON.appendChild(eventsScript);\n    return data;\n};\n/**\n * Grab all state needed to resume the container later.\n *\n * @internal\n */\nexport const _pauseFromContexts = async (allContexts, containerState, fallbackGetObjId, textNodes) => {\n    const collector = createCollector(containerState);\n    textNodes?.forEach((_, key) => {\n        collector.$seen$.add(key);\n    });\n    let hasListeners = false;\n    // Collect resources\n    // TODO: optimize\n    for (const ctx of allContexts) {\n        if (ctx.$tasks$) {\n            for (const task of ctx.$tasks$) {\n                if (qDev) {\n                    if (task.$flags$ & TaskFlags.DIRTY) {\n                        logWarn(`Serializing dirty task. Looks like an internal error. \nTask Symbol: ${task.$qrl$.$symbol$}\n`);\n                    }\n                    if (!isConnected(task)) {\n                        logWarn('Serializing disconnected task. Looks like an internal error.');\n                    }\n                }\n                if (isResourceTask(task)) {\n                    collector.$resources$.push(task.$state$);\n                }\n                cleanupTask(task);\n            }\n        }\n    }\n    // Find all listeners. They are the \"entries\" for resuming the container.\n    // Any lexical scope they reference must be serialized.\n    for (const ctx of allContexts) {\n        const el = ctx.$element$;\n        const ctxListeners = ctx.li;\n        for (const listener of ctxListeners) {\n            if (isElement(el)) {\n                const qrl = listener[1];\n                const captured = qrl.$captureRef$;\n                if (captured) {\n                    for (const obj of captured) {\n                        /**\n                         * Collect the lexical scope used by the listener. This also collects all the\n                         * subscribers of any reactive state in scope, since the listener might change that\n                         * state\n                         */\n                        collectValue(obj, collector, true);\n                    }\n                }\n                collector.$qrls$.push(qrl);\n                hasListeners = true;\n            }\n        }\n    }\n    // No listeners implies static page\n    if (!hasListeners) {\n        return {\n            state: {\n                refs: {},\n                ctx: {},\n                objs: [],\n                subs: [],\n            },\n            objs: [],\n            funcs: [],\n            qrls: [],\n            resources: collector.$resources$,\n            mode: 'static',\n        };\n    }\n    // Wait for remaining promises\n    let promises;\n    while ((promises = collector.$promises$).length > 0) {\n        collector.$promises$ = [];\n        await Promise.all(promises);\n    }\n    // If at this point any component can render, we need to capture Context and Props\n    const canRender = collector.$elements$.length > 0;\n    if (canRender) {\n        for (const elCtx of collector.$deferElements$) {\n            collectElementData(elCtx, collector, elCtx.$element$);\n        }\n        for (const ctx of allContexts) {\n            collectProps(ctx, collector);\n        }\n    }\n    // Wait for remaining promises\n    while ((promises = collector.$promises$).length > 0) {\n        collector.$promises$ = [];\n        await Promise.all(promises);\n    }\n    // Convert objSet to array\n    const elementToIndex = new Map();\n    const objs = Array.from(collector.$objSet$.keys());\n    const objToId = new Map();\n    const getElementID = (el) => {\n        let id = elementToIndex.get(el);\n        if (id === undefined) {\n            id = getQId(el);\n            if (!id) {\n                console.warn('Missing ID', el);\n            }\n            elementToIndex.set(el, id);\n        }\n        return id;\n    };\n    const getObjId = (obj) => {\n        let suffix = '';\n        if (isPromise(obj)) {\n            const promiseValue = getPromiseValue(obj);\n            if (!promiseValue) {\n                return null;\n            }\n            obj = promiseValue.value;\n            if (promiseValue.resolved) {\n                suffix += '~';\n            }\n            else {\n                suffix += '_';\n            }\n        }\n        if (isObject(obj)) {\n            const target = getProxyTarget(obj);\n            if (target) {\n                suffix += '!';\n                obj = target;\n            }\n            else if (isQwikElement(obj)) {\n                const elID = getElementID(obj);\n                if (elID) {\n                    return ELEMENT_ID_PREFIX + elID + suffix;\n                }\n                return null;\n            }\n        }\n        const id = objToId.get(obj);\n        if (id) {\n            return id + suffix;\n        }\n        const textId = textNodes?.get(obj);\n        if (textId) {\n            return '*' + textId;\n        }\n        if (fallbackGetObjId) {\n            return fallbackGetObjId(obj);\n        }\n        return null;\n    };\n    const mustGetObjId = (obj) => {\n        const key = getObjId(obj);\n        if (key === null) {\n            // TODO(mhevery): this is a hack as we should never get here.\n            // This as a workaround for https://github.com/QwikDev/qwik/issues/4979\n            if (isQrl(obj)) {\n                const id = intToStr(objToId.size);\n                objToId.set(obj, id);\n                return id;\n            }\n            else {\n                throw qError(QError_missingObjectId, obj);\n            }\n        }\n        return key;\n    };\n    // Compute subscriptions\n    const subsMap = new Map();\n    for (const obj of objs) {\n        const subs = getManager(obj, containerState)?.$subs$;\n        if (!subs) {\n            continue;\n        }\n        const flags = getProxyFlags(obj) ?? 0;\n        const converted = [];\n        if (flags & QObjectRecursive) {\n            converted.push(flags);\n        }\n        for (const sub of subs) {\n            const host = sub[1];\n            if (sub[0] === 0 && isNode(host) && isVirtualElement(host)) {\n                if (!collector.$elements$.includes(tryGetContext(host))) {\n                    continue;\n                }\n            }\n            converted.push(sub);\n        }\n        if (converted.length > 0) {\n            subsMap.set(obj, converted);\n        }\n    }\n    // Sort objects: the ones with subscriptions go first\n    objs.sort((a, b) => {\n        const isProxyA = subsMap.has(a) ? 0 : 1;\n        const isProxyB = subsMap.has(b) ? 0 : 1;\n        return isProxyA - isProxyB;\n    });\n    // Generate object ID by using a monotonic counter\n    let count = 0;\n    for (const obj of objs) {\n        objToId.set(obj, intToStr(count));\n        count++;\n    }\n    if (collector.$noSerialize$.length > 0) {\n        const undefinedID = objToId.get(undefined);\n        assertDefined(undefinedID, 'undefined ID must be defined');\n        for (const obj of collector.$noSerialize$) {\n            objToId.set(obj, undefinedID);\n        }\n    }\n    // Serialize object subscriptions\n    const subs = [];\n    for (const obj of objs) {\n        const value = subsMap.get(obj);\n        if (value == null) {\n            break;\n        }\n        subs.push(value\n            .map((s) => {\n            if (typeof s === 'number') {\n                return `_${s}`;\n            }\n            return serializeSubscription(s, getObjId);\n        })\n            .filter(isNotNullable));\n    }\n    assertEqual(subs.length, subsMap.size, 'missing subscriptions to serialize', subs, subsMap);\n    const convertedObjs = serializeObjects(objs, mustGetObjId, getObjId, collector, containerState);\n    const meta = {};\n    const refs = {};\n    // Write back to the dom\n    for (const ctx of allContexts) {\n        const node = ctx.$element$;\n        const elementCaptured = isVirtualElement(node) && collector.$elements$.includes(ctx);\n        const value = serializeComponentContext(ctx, getObjId, mustGetObjId, elementCaptured, canRender, refs);\n        if (value) {\n            meta[ctx.$id$] = value;\n        }\n    }\n    // Sanity check of serialized element\n    if (qDev) {\n        elementToIndex.forEach((value, el) => {\n            if (!value) {\n                logWarn('unconnected element', el.nodeName, '\\n');\n            }\n        });\n    }\n    return {\n        state: {\n            refs,\n            ctx: meta,\n            objs: convertedObjs,\n            subs,\n        },\n        objs,\n        funcs: collector.$inlinedFunctions$,\n        resources: collector.$resources$,\n        qrls: collector.$qrls$,\n        mode: canRender ? 'render' : 'listeners',\n    };\n};\nexport const mapJoin = (objects, getObjectId, sep) => {\n    let output = '';\n    for (const obj of objects) {\n        const id = getObjectId(obj);\n        if (id !== null) {\n            if (output !== '') {\n                output += sep;\n            }\n            output += id;\n        }\n    }\n    return output;\n};\nexport const getNodesInScope = (parent, predicate) => {\n    const results = [];\n    const v = predicate(parent);\n    if (v !== undefined) {\n        results.push(v);\n    }\n    const walker = parent.ownerDocument.createTreeWalker(parent, SHOW_ELEMENT | SHOW_COMMENT, {\n        acceptNode(node) {\n            if (isContainer(node)) {\n                return FILTER_REJECT;\n            }\n            const v = predicate(node);\n            if (v !== undefined) {\n                results.push(v);\n            }\n            return FILTER_SKIP;\n        },\n    });\n    while (walker.nextNode()) {\n        // do nothing\n    }\n    return results;\n};\n// Collect props proxy objects\nconst collectProps = (elCtx, collector) => {\n    const parentCtx = elCtx.$realParentCtx$ || elCtx.$parentCtx$;\n    const props = elCtx.$props$;\n    // Collect only if the parent (which changes the props) is part of the listener graph\n    if (parentCtx && props && !isEmptyObj(props) && collector.$elements$.includes(parentCtx)) {\n        const subs = getSubscriptionManager(props)?.$subs$;\n        const el = elCtx.$element$;\n        if (subs) {\n            for (const [type, host] of subs) {\n                if (type === 0) {\n                    if (host !== el) {\n                        collectSubscriptions(getSubscriptionManager(props), collector, false);\n                    }\n                    if (isNode(host)) {\n                        collectElement(host, collector);\n                    }\n                    else {\n                        collectValue(host, collector, true);\n                    }\n                }\n                else {\n                    collectValue(props, collector, false);\n                    collectSubscriptions(getSubscriptionManager(props), collector, false);\n                }\n            }\n        }\n    }\n};\nconst createCollector = (containerState) => {\n    const inlinedFunctions = [];\n    containerState.$inlineFns$.forEach((id, fnStr) => {\n        while (inlinedFunctions.length <= id) {\n            inlinedFunctions.push('');\n        }\n        inlinedFunctions[id] = fnStr;\n    });\n    return {\n        $containerState$: containerState,\n        $seen$: new Set(),\n        $objSet$: new Set(),\n        $prefetch$: 0,\n        $noSerialize$: [],\n        $inlinedFunctions$: inlinedFunctions,\n        $resources$: [],\n        $elements$: [],\n        $qrls$: [],\n        $deferElements$: [],\n        $promises$: [],\n    };\n};\nconst collectDeferElement = (el, collector) => {\n    const ctx = tryGetContext(el);\n    if (collector.$elements$.includes(ctx)) {\n        return;\n    }\n    collector.$elements$.push(ctx);\n    if (ctx.$flags$ & HOST_FLAG_DYNAMIC) {\n        collector.$prefetch$++;\n        collectElementData(ctx, collector, true);\n        collector.$prefetch$--;\n    }\n    else {\n        collector.$deferElements$.push(ctx);\n    }\n};\nconst collectElement = (el, collector) => {\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        if (collector.$elements$.includes(ctx)) {\n            return;\n        }\n        collector.$elements$.push(ctx);\n        collectElementData(ctx, collector, el);\n    }\n};\nexport const collectElementData = (elCtx, collector, dynamicCtx) => {\n    if (elCtx.$props$ && !isEmptyObj(elCtx.$props$)) {\n        collectValue(elCtx.$props$, collector, dynamicCtx);\n        collectSubscriptions(getSubscriptionManager(elCtx.$props$), collector, dynamicCtx);\n    }\n    if (elCtx.$componentQrl$) {\n        collectValue(elCtx.$componentQrl$, collector, dynamicCtx);\n    }\n    if (elCtx.$seq$) {\n        for (const obj of elCtx.$seq$) {\n            collectValue(obj, collector, dynamicCtx);\n        }\n    }\n    if (elCtx.$tasks$) {\n        const map = collector.$containerState$.$subsManager$.$groupToManagers$;\n        for (const obj of elCtx.$tasks$) {\n            if (map.has(obj)) {\n                collectValue(obj, collector, dynamicCtx);\n            }\n        }\n    }\n    if (dynamicCtx === true) {\n        collectContext(elCtx, collector);\n        if (elCtx.$dynamicSlots$) {\n            for (const slotCtx of elCtx.$dynamicSlots$) {\n                collectContext(slotCtx, collector);\n            }\n        }\n    }\n};\nconst collectContext = (elCtx, collector) => {\n    while (elCtx) {\n        if (elCtx.$contexts$) {\n            for (const obj of elCtx.$contexts$.values()) {\n                collectValue(obj, collector, true);\n            }\n        }\n        elCtx = elCtx.$parentCtx$;\n    }\n};\nexport const escapeText = (str) => {\n    return str.replace(/<(\\/?script)/gi, '\\\\x3C$1');\n};\n// Collect all the subscribers of this manager\nexport const collectSubscriptions = (manager, collector, leaks) => {\n    // if (!leaks) {\n    //   return;\n    // }\n    if (collector.$seen$.has(manager)) {\n        return;\n    }\n    collector.$seen$.add(manager);\n    const subs = manager.$subs$;\n    assertDefined(subs, 'subs must be defined');\n    for (const sub of subs) {\n        const type = sub[0];\n        if (type > 0) {\n            collectValue(sub[2], collector, leaks);\n        }\n        if (leaks === true) {\n            const host = sub[1];\n            if (isNode(host) && isVirtualElement(host)) {\n                if (sub[0] === 0) {\n                    collectDeferElement(host, collector);\n                }\n            }\n            else {\n                collectValue(host, collector, true);\n            }\n        }\n    }\n};\nconst PROMISE_VALUE = Symbol();\nconst resolvePromise = (promise) => {\n    return promise.then((value) => {\n        const v = {\n            resolved: true,\n            value,\n        };\n        promise[PROMISE_VALUE] = v;\n        return value;\n    }, (value) => {\n        const v = {\n            resolved: false,\n            value,\n        };\n        promise[PROMISE_VALUE] = v;\n        return value;\n    });\n};\nconst getPromiseValue = (promise) => {\n    return promise[PROMISE_VALUE];\n};\nexport const collectValue = (obj, collector, leaks) => {\n    if (obj != null) {\n        switch (typeof obj) {\n            case 'function':\n            case 'object': {\n                if (collector.$seen$.has(obj)) {\n                    return;\n                }\n                collector.$seen$.add(obj);\n                if (fastSkipSerialize(obj)) {\n                    collector.$objSet$.add(undefined);\n                    collector.$noSerialize$.push(obj);\n                    return;\n                }\n                /** The possibly proxied `obj` */\n                const input = obj;\n                const target = getProxyTarget(obj);\n                if (target) {\n                    // `obj` is now the non-proxied object\n                    obj = target;\n                    // NOTE: You may be tempted to add the `target` to the `seen` set,\n                    // but that would not work as it is possible for the `target` object\n                    // to already be in `seen` set if it was passed in directly, so\n                    // we can't short circuit and need to do the work.\n                    // Issue: https://github.com/QwikDev/qwik/issues/5001\n                    const mutable = (getProxyFlags(obj) & QObjectImmutable) === 0;\n                    if (leaks && mutable) {\n                        collectSubscriptions(getSubscriptionManager(input), collector, leaks);\n                    }\n                    if (fastWeakSerialize(input)) {\n                        collector.$objSet$.add(obj);\n                        return;\n                    }\n                }\n                const collected = collectDeps(obj, collector, leaks);\n                if (collected) {\n                    collector.$objSet$.add(obj);\n                    return;\n                }\n                if (isPromise(obj)) {\n                    collector.$promises$.push(resolvePromise(obj).then((value) => {\n                        collectValue(value, collector, leaks);\n                    }));\n                    return;\n                }\n                if (typeof obj === 'object') {\n                    if (isNode(obj)) {\n                        return;\n                    }\n                    if (isArray(obj)) {\n                        for (let i = 0; i < obj.length; i++) {\n                            collectValue(input[i], collector, leaks);\n                        }\n                    }\n                    else if (isSerializableObject(obj)) {\n                        for (const key in obj) {\n                            collectValue(input[key], collector, leaks);\n                        }\n                    }\n                }\n                break;\n            }\n        }\n    }\n    collector.$objSet$.add(obj);\n};\nexport const isContainer = (el) => {\n    return isElement(el) && el.hasAttribute(QContainerAttr);\n};\nconst hasContext = (el) => {\n    const node = processVirtualNodes(el);\n    if (isQwikElement(node)) {\n        const ctx = tryGetContext(node);\n        if (ctx && ctx.$id$) {\n            return ctx;\n        }\n    }\n    return undefined;\n};\nconst getManager = (obj, containerState) => {\n    if (!isObject(obj)) {\n        return undefined;\n    }\n    if (obj instanceof SignalImpl) {\n        return getSubscriptionManager(obj);\n    }\n    const proxy = containerState.$proxyMap$.get(obj);\n    if (proxy) {\n        return getSubscriptionManager(proxy);\n    }\n    return undefined;\n};\nconst getQId = (el) => {\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        return ctx.$id$;\n    }\n    return null;\n};\nconst getTextID = (node, containerState) => {\n    const prev = node.previousSibling;\n    if (prev && isComment(prev)) {\n        if (prev.data.startsWith('t=')) {\n            return ELEMENT_ID_PREFIX + prev.data.slice(2);\n        }\n    }\n    const doc = node.ownerDocument;\n    const id = intToStr(containerState.$elementIndex$++);\n    const open = doc.createComment(`t=${id}`);\n    const close = doc.createComment('');\n    const parent = node.parentElement;\n    parent.insertBefore(open, node);\n    parent.insertBefore(close, node.nextSibling);\n    return ELEMENT_ID_PREFIX + id;\n};\nconst isEmptyObj = (obj) => {\n    return Object.keys(obj).length === 0;\n};\nexport function serializeComponentContext(ctx, getObjId, mustGetObjId, elementCaptured, canRender, refs) {\n    const node = ctx.$element$;\n    const ref = ctx.$refMap$;\n    const props = ctx.$props$;\n    const contexts = ctx.$contexts$;\n    const tasks = ctx.$tasks$;\n    const renderQrl = ctx.$componentQrl$;\n    const seq = ctx.$seq$;\n    const metaValue = {};\n    assertDefined(ctx.$id$, `pause: can not generate ID for dom node`, node);\n    if (ref.length > 0) {\n        assertElement(node);\n        const value = mapJoin(ref, mustGetObjId, ' ');\n        if (value) {\n            refs[ctx.$id$] = value;\n        }\n    }\n    else if (canRender) {\n        let add = false;\n        if (elementCaptured) {\n            assertDefined(renderQrl, 'renderQrl must be defined');\n            const propsId = getObjId(props);\n            metaValue.h = mustGetObjId(renderQrl) + (propsId ? ' ' + propsId : '');\n            add = true;\n        }\n        else {\n            const propsId = getObjId(props);\n            if (propsId) {\n                metaValue.h = ' ' + propsId;\n                add = true;\n            }\n        }\n        if (tasks && tasks.length > 0) {\n            const value = mapJoin(tasks, getObjId, ' ');\n            if (value) {\n                metaValue.w = value;\n                add = true;\n            }\n        }\n        if (elementCaptured && seq && seq.length > 0) {\n            const value = mapJoin(seq, mustGetObjId, ' ');\n            metaValue.s = value;\n            add = true;\n        }\n        if (contexts) {\n            const serializedContexts = [];\n            contexts.forEach((value, key) => {\n                const id = getObjId(value);\n                if (id) {\n                    serializedContexts.push(`${key}=${id}`);\n                }\n            });\n            const value = serializedContexts.join(' ');\n            if (value) {\n                metaValue.c = value;\n                add = true;\n            }\n        }\n        if (add) {\n            return metaValue;\n        }\n    }\n}\nfunction serializeObjects(objs, mustGetObjId, getObjId, collector, containerState) {\n    return objs.map((obj) => {\n        if (obj === null) {\n            return null;\n        }\n        const typeObj = typeof obj;\n        switch (typeObj) {\n            case 'undefined':\n                return UNDEFINED_PREFIX;\n            case 'number':\n                if (!Number.isFinite(obj)) {\n                    break;\n                }\n                return obj;\n            case 'string':\n                if (obj.charCodeAt(0) < 32 /* space */) {\n                    // if strings starts with a special character let the string serializer handle it\n                    // to deal with escape sequences.\n                    break;\n                }\n                else {\n                    // Fast path of just serializing the string.\n                    return obj;\n                }\n            case 'boolean':\n                return obj;\n        }\n        const value = serializeValue(obj, mustGetObjId, collector, containerState);\n        if (value !== undefined) {\n            return value;\n        }\n        if (typeObj === 'object') {\n            if (isArray(obj)) {\n                return obj.map(mustGetObjId);\n            }\n            if (isSerializableObject(obj)) {\n                const output = {};\n                for (const key in obj) {\n                    if (getObjId) {\n                        const id = getObjId(obj[key]);\n                        if (id !== null) {\n                            output[key] = id;\n                        }\n                    }\n                    else {\n                        output[key] = mustGetObjId(obj[key]);\n                    }\n                }\n                return output;\n            }\n        }\n        throw qError(QError_verifySerializable, obj);\n    });\n}\n//# sourceMappingURL=data:application/json;base64,","import { EMPTY_ARRAY } from '../util/flyweight';\nimport { assertQrl, createQRL, emitEvent, getSymbolHash, isSyncQrl, } from './qrl-class';\nimport { isFunction, isString } from '../util/types';\nimport { qError, QError_dynamicImportFailed, QError_qrlMissingChunk, QError_unknownTypeArgument, } from '../error/error';\nimport { qRuntimeQrl, qSerialize } from '../util/qdev';\nimport { getPlatform } from '../platform/platform';\nimport { assertDefined, assertTrue, assertElement } from '../error/assert';\nimport { mapJoin } from '../container/pause';\nimport { throwErrorAndStop } from '../util/log';\n// https://regexr.com/68v72\nconst EXTRACT_IMPORT_PATH = /\\(\\s*(['\"])([^\\1]+)\\1\\s*\\)/;\n// https://regexr.com/690ds\nconst EXTRACT_SELF_IMPORT = /Promise\\s*\\.\\s*resolve/;\n// https://regexr.com/6a83h\nconst EXTRACT_FILE_NAME = /[\\\\/(]([\\w\\d.\\-_]+\\.(js|ts)x?):/;\nconst announcedQRL = /*#__PURE__*/ new Set();\n// <docs markdown=\"../readme.md#qrl\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#qrl instead)\n/**\n * Used by Qwik Optimizer to point to lazy-loaded resources.\n *\n * This function should be used by the Qwik Optimizer only. The function should not be directly\n * referred to in the source code of the application.\n *\n * @param chunkOrFn - Chunk name (or function which is stringified to extract chunk name)\n * @param symbol - Symbol to lazy load\n * @param lexicalScopeCapture - A set of lexically scoped variables to capture.\n * @public\n * @see `QRL`, `$(...)`\n */\n// </docs>\nexport const qrl = (chunkOrFn, symbol, lexicalScopeCapture = EMPTY_ARRAY, stackOffset = 0) => {\n    let chunk = null;\n    let symbolFn = null;\n    if (isFunction(chunkOrFn)) {\n        symbolFn = chunkOrFn;\n        if (qSerialize) {\n            let match;\n            const srcCode = String(chunkOrFn);\n            if ((match = srcCode.match(EXTRACT_IMPORT_PATH)) && match[2]) {\n                chunk = match[2];\n            }\n            else if ((match = srcCode.match(EXTRACT_SELF_IMPORT))) {\n                const ref = 'QWIK-SELF';\n                const frames = new Error(ref).stack.split('\\n');\n                const start = frames.findIndex((f) => f.includes(ref));\n                const frame = frames[start + 2 + stackOffset];\n                match = frame.match(EXTRACT_FILE_NAME);\n                if (!match) {\n                    chunk = 'main';\n                }\n                else {\n                    chunk = match[1];\n                }\n            }\n            else {\n                throw qError(QError_dynamicImportFailed, srcCode);\n            }\n        }\n    }\n    else if (isString(chunkOrFn)) {\n        chunk = chunkOrFn;\n    }\n    else {\n        throw qError(QError_unknownTypeArgument, chunkOrFn);\n    }\n    if (!announcedQRL.has(symbol)) {\n        // Emit event\n        announcedQRL.add(symbol);\n        emitEvent('qprefetch', {\n            symbols: [getSymbolHash(symbol)],\n            bundles: chunk && [chunk],\n        });\n    }\n    // Unwrap subscribers\n    return createQRL(chunk, symbol, null, symbolFn, null, lexicalScopeCapture, null);\n};\n/** @internal */\nexport const inlinedQrl = (symbol, symbolName, lexicalScopeCapture = EMPTY_ARRAY) => {\n    // Unwrap subscribers\n    return createQRL(null, symbolName, symbol, null, null, lexicalScopeCapture, null);\n};\n/** @internal */\nexport const _noopQrl = (symbolName, lexicalScopeCapture = EMPTY_ARRAY) => {\n    return createQRL(null, symbolName, null, null, null, lexicalScopeCapture, null);\n};\n/** @internal */\nexport const _noopQrlDEV = (symbolName, opts, lexicalScopeCapture = EMPTY_ARRAY) => {\n    const newQrl = _noopQrl(symbolName, lexicalScopeCapture);\n    newQrl.dev = opts;\n    return newQrl;\n};\n/** @internal */\nexport const qrlDEV = (chunkOrFn, symbol, opts, lexicalScopeCapture = EMPTY_ARRAY) => {\n    const newQrl = qrl(chunkOrFn, symbol, lexicalScopeCapture, 1);\n    newQrl.dev = opts;\n    return newQrl;\n};\n/** @internal */\nexport const inlinedQrlDEV = (symbol, symbolName, opts, lexicalScopeCapture = EMPTY_ARRAY) => {\n    const qrl = inlinedQrl(symbol, symbolName, lexicalScopeCapture);\n    qrl.dev = opts;\n    return qrl;\n};\nexport const serializeQRL = (qrl, opts = {}) => {\n    assertTrue(qSerialize, 'In order to serialize a QRL, qSerialize must be true');\n    assertQrl(qrl);\n    let symbol = qrl.$symbol$;\n    let chunk = qrl.$chunk$;\n    const refSymbol = qrl.$refSymbol$ ?? symbol;\n    const platform = getPlatform();\n    if (platform) {\n        const result = platform.chunkForSymbol(refSymbol, chunk, qrl.dev?.file);\n        if (result) {\n            chunk = result[1];\n            if (!qrl.$refSymbol$) {\n                symbol = result[0];\n            }\n        }\n        else {\n            console.error('serializeQRL: Cannot resolve symbol', symbol, 'in', chunk, qrl.dev?.file);\n        }\n    }\n    if (qRuntimeQrl && chunk == null) {\n        chunk = '/runtimeQRL';\n        symbol = '_';\n    }\n    if (chunk == null) {\n        throw qError(QError_qrlMissingChunk, qrl.$symbol$);\n    }\n    if (chunk.startsWith('./')) {\n        chunk = chunk.slice(2);\n    }\n    if (isSyncQrl(qrl)) {\n        if (opts.$containerState$) {\n            const fn = qrl.resolved;\n            const containerState = opts.$containerState$;\n            const fnStrKey = fn.toString();\n            let id = containerState.$inlineFns$.get(fnStrKey);\n            if (id === undefined) {\n                id = containerState.$inlineFns$.size;\n                containerState.$inlineFns$.set(fnStrKey, id);\n            }\n            symbol = String(id);\n        }\n        else {\n            throwErrorAndStop('Sync QRL without containerState');\n        }\n    }\n    let output = `${chunk}#${symbol}`;\n    const capture = qrl.$capture$;\n    const captureRef = qrl.$captureRef$;\n    if (captureRef && captureRef.length) {\n        if (opts.$getObjId$) {\n            output += `[${mapJoin(captureRef, opts.$getObjId$, ' ')}]`;\n        }\n        else if (opts.$addRefMap$) {\n            output += `[${mapJoin(captureRef, opts.$addRefMap$, ' ')}]`;\n        }\n    }\n    else if (capture && capture.length > 0) {\n        output += `[${capture.join(' ')}]`;\n    }\n    return output;\n};\nexport const serializeQRLs = (existingQRLs, containerState, elCtx) => {\n    assertElement(elCtx.$element$);\n    const opts = {\n        $containerState$: containerState,\n        $addRefMap$: (obj) => addToArray(elCtx.$refMap$, obj),\n    };\n    return mapJoin(existingQRLs, (qrl) => serializeQRL(qrl, opts), '\\n');\n};\n/** `./chunk#symbol[captures] */\nexport const parseQRL = (qrl, containerEl) => {\n    const endIdx = qrl.length;\n    const hashIdx = indexOf(qrl, 0, '#');\n    const captureIdx = indexOf(qrl, hashIdx, '[');\n    const chunkEndIdx = Math.min(hashIdx, captureIdx);\n    const chunk = qrl.substring(0, chunkEndIdx);\n    const symbolStartIdx = hashIdx == endIdx ? hashIdx : hashIdx + 1;\n    const symbolEndIdx = captureIdx;\n    const symbol = symbolStartIdx == symbolEndIdx ? 'default' : qrl.substring(symbolStartIdx, symbolEndIdx);\n    const captureStartIdx = captureIdx;\n    const captureEndIdx = endIdx;\n    const capture = captureStartIdx === captureEndIdx\n        ? EMPTY_ARRAY\n        : qrl.substring(captureStartIdx + 1, captureEndIdx - 1).split(' ');\n    const iQrl = createQRL(chunk, symbol, null, null, capture, null, null);\n    if (containerEl) {\n        iQrl.$setContainer$(containerEl);\n    }\n    return iQrl;\n};\nconst indexOf = (text, startIdx, char) => {\n    const endIdx = text.length;\n    const charIdx = text.indexOf(char, startIdx == endIdx ? 0 : startIdx);\n    return charIdx == -1 ? endIdx : charIdx;\n};\nconst addToArray = (array, obj) => {\n    const index = array.indexOf(obj);\n    if (index === -1) {\n        array.push(obj);\n        return String(array.length - 1);\n    }\n    return String(index);\n};\nexport const inflateQrl = (qrl, elCtx) => {\n    assertDefined(qrl.$capture$, 'invoke: qrl capture must be defined inside useLexicalScope()', qrl);\n    return (qrl.$captureRef$ = qrl.$capture$.map((idx) => {\n        const int = parseInt(idx, 10);\n        const obj = elCtx.$refMap$[int];\n        assertTrue(elCtx.$refMap$.length > int, 'out of bounds inflate access', idx);\n        return obj;\n    }));\n};\n/** @internal */\nexport const _regSymbol = (symbol, hash) => {\n    if (typeof globalThis.__qwik_reg_symbols === 'undefined') {\n        globalThis.__qwik_reg_symbols = new Map();\n    }\n    globalThis.__qwik_reg_symbols.set(hash, symbol);\n    return symbol;\n};\n//# sourceMappingURL=data:application/json;base64,","import { inflateQrl, parseQRL } from '../qrl/qrl';\nimport { assertQrl, isQrl } from '../qrl/qrl-class';\nimport { dollar } from '../qrl/qrl.public';\nimport { isArray } from '../util/types';\nimport { assertTrue } from '../error/assert';\nimport { EMPTY_ARRAY } from '../util/flyweight';\nimport { qRuntimeQrl, qSerialize } from '../util/qdev';\nimport { fromCamelToKebabCase } from '../util/case';\nconst ON_PROP_REGEX = /^(on|window:|document:)/;\nexport const PREVENT_DEFAULT = 'preventdefault:';\nexport const isOnProp = (prop) => {\n    return prop.endsWith('$') && ON_PROP_REGEX.test(prop);\n};\nexport const groupListeners = (listeners) => {\n    if (listeners.length === 0) {\n        return EMPTY_ARRAY;\n    }\n    if (listeners.length === 1) {\n        const listener = listeners[0];\n        return [[listener[0], [listener[1]]]];\n    }\n    const keys = [];\n    for (let i = 0; i < listeners.length; i++) {\n        const eventName = listeners[i][0];\n        if (!keys.includes(eventName)) {\n            keys.push(eventName);\n        }\n    }\n    return keys.map((eventName) => {\n        return [eventName, listeners.filter((l) => l[0] === eventName).map((a) => a[1])];\n    });\n};\nexport const setEvent = (existingListeners, prop, input, containerEl) => {\n    assertTrue(prop.endsWith('$'), 'render: event property does not end with $', prop);\n    prop = normalizeOnProp(prop.slice(0, -1));\n    if (input) {\n        if (isArray(input)) {\n            const processed = input\n                .flat(Infinity)\n                .filter((q) => q != null)\n                .map((q) => [prop, ensureQrl(q, containerEl)]);\n            existingListeners.push(...processed);\n        }\n        else {\n            existingListeners.push([prop, ensureQrl(input, containerEl)]);\n        }\n    }\n    return prop;\n};\nconst PREFIXES = ['on', 'window:on', 'document:on'];\nconst SCOPED = ['on', 'on-window', 'on-document'];\nexport const normalizeOnProp = (prop) => {\n    let scope = 'on';\n    for (let i = 0; i < PREFIXES.length; i++) {\n        const prefix = PREFIXES[i];\n        if (prop.startsWith(prefix)) {\n            scope = SCOPED[i];\n            prop = prop.slice(prefix.length);\n            break;\n        }\n    }\n    if (prop.startsWith('-')) {\n        prop = fromCamelToKebabCase(prop.slice(1));\n    }\n    else {\n        prop = prop.toLowerCase();\n    }\n    return scope + ':' + prop;\n};\nconst ensureQrl = (value, containerEl) => {\n    if (qSerialize && !qRuntimeQrl) {\n        assertQrl(value);\n        value.$setContainer$(containerEl);\n        return value;\n    }\n    const qrl = isQrl(value) ? value : dollar(value);\n    qrl.$setContainer$(containerEl);\n    return qrl;\n};\nexport const getDomListeners = (elCtx, containerEl) => {\n    const attributes = elCtx.$element$.attributes;\n    const listeners = [];\n    for (let i = 0; i < attributes.length; i++) {\n        const { name, value } = attributes.item(i);\n        if (name.startsWith('on:') ||\n            name.startsWith('on-window:') ||\n            name.startsWith('on-document:')) {\n            const urls = value.split('\\n');\n            for (const url of urls) {\n                const qrl = parseQRL(url, containerEl);\n                if (qrl.$capture$) {\n                    inflateQrl(qrl, elCtx);\n                }\n                listeners.push([name, qrl]);\n            }\n        }\n    }\n    return listeners;\n};\n//# sourceMappingURL=data:application/json;base64,","import { qError, QError_invalidJsxNodeType } from '../../error/error';\nimport { SubscriptionType } from '../../state/common';\nimport { HOST_FLAG_MOUNTED } from '../../state/context';\nimport { isSignalV1 } from '../../state/signal';\nimport { invoke, newInvokeContext } from '../../use/use-core';\nimport { EMPTY_ARRAY, EMPTY_OBJ } from '../../util/flyweight';\nimport { logWarn } from '../../util/log';\nimport { isNotNullable, isPromise, maybeThen, promiseAll } from '../../util/promises';\nimport { qDev, qInspector, seal } from '../../util/qdev';\nimport { isArray, isFunction, isObject, isString } from '../../util/types';\nimport { executeComponent, shouldWrapFunctional } from '../execute-component';\nimport { _jsxSorted, isJSXNode, SKIP_RENDER_TYPE, Virtual } from '../jsx/jsx-runtime';\nimport { SkipRender } from '../jsx/utils.public';\nimport { appendHeadStyle } from './operations';\nimport { VIRTUAL } from './virtual-element';\nimport { domToVnode, smartUpdateChildren } from './visitor';\nexport const renderComponent = (rCtx, elCtx, flags) => {\n    const justMounted = !(elCtx.$flags$ & HOST_FLAG_MOUNTED);\n    const hostElement = elCtx.$element$;\n    const containerState = rCtx.$static$.$containerState$;\n    // Component is not dirty any more\n    containerState.$hostsStaging$.delete(elCtx);\n    // Clean current subscription before render\n    containerState.$subsManager$.$clearSub$(hostElement);\n    // TODO, serialize scopeIds\n    return maybeThen(executeComponent(rCtx, elCtx), (res) => {\n        const staticCtx = rCtx.$static$;\n        const newCtx = res.rCtx;\n        const iCtx = newInvokeContext(rCtx.$static$.$locale$, hostElement);\n        staticCtx.$hostElements$.add(hostElement);\n        iCtx.$subscriber$ = [SubscriptionType.HOST, hostElement];\n        iCtx.$renderCtx$ = newCtx;\n        if (justMounted) {\n            if (elCtx.$appendStyles$) {\n                for (const style of elCtx.$appendStyles$) {\n                    appendHeadStyle(staticCtx, style);\n                }\n            }\n        }\n        const processedJSXNode = processData(res.node, iCtx);\n        return maybeThen(processedJSXNode, (processedJSXNode) => {\n            // Old code path\n            const newVdom = wrapJSX(hostElement, processedJSXNode);\n            // const oldVdom = getVdom(hostElement);\n            const oldVdom = getVdom(elCtx);\n            return maybeThen(smartUpdateChildren(newCtx, oldVdom, newVdom, flags), () => {\n                // setVdom(hostElement, newVdom);\n                elCtx.$vdom$ = newVdom;\n            });\n        });\n    });\n};\nexport const getVdom = (elCtx) => {\n    if (!elCtx.$vdom$) {\n        elCtx.$vdom$ = domToVnode(elCtx.$element$);\n    }\n    return elCtx.$vdom$;\n};\nexport class ProcessedJSXNodeImpl {\n    constructor($type$, $varProps$, $constProps$, $children$, $flags$, $key$) {\n        this.$type$ = $type$;\n        this.$varProps$ = $varProps$;\n        this.$constProps$ = $constProps$;\n        this.$children$ = $children$;\n        this.$flags$ = $flags$;\n        this.$key$ = $key$;\n        this.$elm$ = null;\n        this.$text$ = '';\n        this.$signal$ = null;\n        this.$id$ = $type$ + ($key$ ? ':' + $key$ : '');\n        if (qDev && qInspector) {\n            this.$dev$ = undefined;\n        }\n        seal(this);\n    }\n}\nexport const processNode = (node, invocationContext) => {\n    const { key, type, varProps, children, flags, constProps } = node;\n    let textType = '';\n    if (isString(type)) {\n        textType = type;\n    }\n    else if (type === Virtual) {\n        textType = VIRTUAL;\n    }\n    else if (isFunction(type)) {\n        const res = invoke(invocationContext, type, node.props, key, flags, node.dev);\n        if (!shouldWrapFunctional(res, node)) {\n            return processData(res, invocationContext);\n        }\n        return processNode(_jsxSorted(Virtual, null, null, res, 0, key), invocationContext);\n    }\n    else {\n        throw qError(QError_invalidJsxNodeType, type);\n    }\n    let convertedChildren = EMPTY_ARRAY;\n    if (children != null) {\n        return maybeThen(processData(children, invocationContext), (result) => {\n            if (result !== undefined) {\n                convertedChildren = isArray(result) ? result : [result];\n            }\n            const vnode = new ProcessedJSXNodeImpl(textType, varProps, constProps, convertedChildren, flags, key);\n            if (qDev && qInspector) {\n                vnode.$dev$ = node.dev;\n            }\n            return vnode;\n        });\n    }\n    else {\n        const vnode = new ProcessedJSXNodeImpl(textType, varProps, constProps, convertedChildren, flags, key);\n        if (qDev && qInspector) {\n            vnode.$dev$ = node.dev;\n        }\n        return vnode;\n    }\n};\nexport const wrapJSX = (element, input) => {\n    const children = input === undefined ? EMPTY_ARRAY : isArray(input) ? input : [input];\n    const node = new ProcessedJSXNodeImpl(':virtual', {}, null, children, 0, null);\n    node.$elm$ = element;\n    return node;\n};\nexport const processData = (node, invocationContext) => {\n    if (node == null || typeof node === 'boolean') {\n        return undefined;\n    }\n    if (isPrimitive(node)) {\n        const newNode = new ProcessedJSXNodeImpl('#text', EMPTY_OBJ, null, EMPTY_ARRAY, 0, null);\n        newNode.$text$ = String(node);\n        return newNode;\n    }\n    else if (isJSXNode(node)) {\n        return processNode(node, invocationContext);\n    }\n    else if (isSignalV1(node)) {\n        const newNode = new ProcessedJSXNodeImpl('#signal', EMPTY_OBJ, null, EMPTY_ARRAY, 0, null);\n        newNode.$signal$ = node;\n        return newNode;\n    }\n    else if (isArray(node)) {\n        const output = promiseAll(node.flatMap((n) => processData(n, invocationContext)));\n        return maybeThen(output, (array) => array.flat(100).filter(isNotNullable));\n    }\n    else if (isPromise(node)) {\n        return node.then((node) => processData(node, invocationContext));\n    }\n    else if (node === SkipRender) {\n        return new ProcessedJSXNodeImpl(SKIP_RENDER_TYPE, EMPTY_OBJ, null, EMPTY_ARRAY, 0, null);\n    }\n    else {\n        logWarn('A unsupported value was passed to the JSX, skipping render. Value:', node);\n        return undefined;\n    }\n};\nexport const isProcessedJSXNode = (n) => {\n    if (qDev) {\n        if (n instanceof ProcessedJSXNodeImpl) {\n            return true;\n        }\n        if (isObject(n) && n.constructor.name === ProcessedJSXNodeImpl.name) {\n            throw new Error(`Duplicate implementations of \"ProcessedJSXNodeImpl\" found`);\n        }\n        return false;\n    }\n    else {\n        return n instanceof ProcessedJSXNodeImpl;\n    }\n};\nexport const isPrimitive = (obj) => {\n    return isString(obj) || typeof obj === 'number';\n};\n//# sourceMappingURL=data:application/json;base64,","import { getEventName, setRef } from '../../container/container';\nimport { assertDefined, assertElement, assertEqual, assertFail, assertQwikElement, assertTrue, } from '../../error/assert';\nimport { assertQrl, isQrl } from '../../qrl/qrl-class';\nimport { PREVENT_DEFAULT, isOnProp, setEvent } from '../../state/listeners';\nimport { isElement, isQwikElement, isText, isVirtualElement } from '../../util/element';\nimport { logWarn } from '../../util/log';\nimport { ELEMENT_ID, OnRenderProp, QSlot, QSlotRef, QSlotS, QStyle } from '../../util/markers';\nimport { isPromise, maybeThen, promiseAll, promiseAllLazy } from '../../util/promises';\nimport { qDev, qInspector, qTest } from '../../util/qdev';\nimport { dangerouslySetInnerHTML, isAriaAttribute, jsxToString, pushRenderContext, serializeClassWithHost, setQId, static_listeners, static_subtree, stringifyStyle, } from '../execute-component';\nimport { directGetAttribute, directSetAttribute } from '../fast-calls';\nimport { SKIP_RENDER_TYPE, isJSXNode } from '../jsx/jsx-runtime';\nimport { ProcessedJSXNodeImpl, getVdom, processData, renderComponent, } from './render-dom';\nimport { VIRTUAL, getRootNode, newVirtualElement, processVirtualNodes, queryAllVirtualByAttribute, } from './virtual-element';\nimport { isBrowser } from '@builder.io/qwik/build';\nimport { getProxyTarget, getSubscriptionManager, SubscriptionType, } from '../../state/common';\nimport { _CONST_PROPS } from '../../state/constants';\nimport { HOST_FLAG_DIRTY, HOST_FLAG_NEED_ATTACH_LISTENER, cleanupContext, createContext, getContext, tryGetContext, } from '../../state/context';\nimport { isSignalV1 } from '../../state/signal';\nimport { ReadWriteProxyHandler, createPropsState, createProxy } from '../../state/store';\nimport { trackSignalV1 } from '../../use/use-core';\nimport { EMPTY_OBJ } from '../../util/flyweight';\nimport { appendChild, createElement, createTemplate, executeDOMRender, getKey, insertAfter, insertBefore, prepend, removeNode, setAttribute, setKey, setProperty, setPropertyPost, } from './operations';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\nexport const IS_SVG = 1 << 0;\nexport const IS_HEAD = 1 << 1;\nexport const IS_IMMUTABLE = 1 << 2;\nconst CHILDREN_PLACEHOLDER = [];\nexport const smartUpdateChildren = (ctx, oldVnode, newVnode, flags) => {\n    assertQwikElement(oldVnode.$elm$);\n    const ch = newVnode.$children$;\n    if (ch.length === 1 && ch[0].$type$ === SKIP_RENDER_TYPE) {\n        newVnode.$children$ = oldVnode.$children$;\n        return;\n    }\n    const elm = oldVnode.$elm$;\n    const needsDOMRead = oldVnode.$children$ === CHILDREN_PLACEHOLDER;\n    let filter = isChildComponent;\n    if (needsDOMRead) {\n        const isHead = elm.nodeName === 'HEAD';\n        if (isHead) {\n            filter = isHeadChildren;\n            flags |= IS_HEAD;\n        }\n    }\n    const oldCh = getVnodeChildren(oldVnode, filter);\n    if (oldCh.length > 0 && ch.length > 0) {\n        return diffChildren(ctx, elm, oldCh, ch, flags);\n    }\n    else if (oldCh.length > 0 && ch.length === 0) {\n        return removeChildren(ctx.$static$, oldCh, 0, oldCh.length - 1);\n    }\n    else if (ch.length > 0) {\n        return addChildren(ctx, elm, null, ch, 0, ch.length - 1, flags);\n    }\n};\nexport const getVnodeChildren = (oldVnode, filter) => {\n    const oldCh = oldVnode.$children$;\n    const elm = oldVnode.$elm$;\n    if (oldCh === CHILDREN_PLACEHOLDER) {\n        return (oldVnode.$children$ = getChildrenVnodes(elm, filter));\n    }\n    return oldCh;\n};\nexport const diffChildren = (ctx, parentElm, oldCh, newCh, flags) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let oldKeyToIdx;\n    let idxInOld;\n    let elmToMove;\n    const results = [];\n    const staticCtx = ctx.$static$;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (oldStartVnode.$id$ === newStartVnode.$id$) {\n            results.push(diffVnode(ctx, oldStartVnode, newStartVnode, flags));\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (oldEndVnode.$id$ === newEndVnode.$id$) {\n            results.push(diffVnode(ctx, oldEndVnode, newEndVnode, flags));\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (oldStartVnode.$key$ && oldStartVnode.$id$ === newEndVnode.$id$) {\n            assertDefined(oldStartVnode.$elm$, 'oldStartVnode $elm$ must be defined');\n            assertDefined(oldEndVnode.$elm$, 'oldEndVnode $elm$ must be defined');\n            // Vnode moved right\n            results.push(diffVnode(ctx, oldStartVnode, newEndVnode, flags));\n            insertAfter(staticCtx, parentElm, oldStartVnode.$elm$, oldEndVnode.$elm$);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (oldEndVnode.$key$ && oldEndVnode.$id$ === newStartVnode.$id$) {\n            assertDefined(oldStartVnode.$elm$, 'oldStartVnode $elm$ must be defined');\n            assertDefined(oldEndVnode.$elm$, 'oldEndVnode $elm$ must be defined');\n            // Vnode moved left\n            results.push(diffVnode(ctx, oldEndVnode, newStartVnode, flags));\n            insertBefore(staticCtx, parentElm, oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            if (oldKeyToIdx === undefined) {\n                oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n            }\n            idxInOld = oldKeyToIdx[newStartVnode.$key$];\n            if (idxInOld === undefined) {\n                // New element\n                const newElm = createElm(ctx, newStartVnode, flags, results);\n                insertBefore(staticCtx, parentElm, newElm, oldStartVnode?.$elm$);\n            }\n            else {\n                elmToMove = oldCh[idxInOld];\n                if (elmToMove.$type$ !== newStartVnode.$type$) {\n                    const newElm = createElm(ctx, newStartVnode, flags, results);\n                    // TO CHECK: should we not await these promises?\n                    maybeThen(newElm, (newElm) => {\n                        insertBefore(staticCtx, parentElm, newElm, oldStartVnode?.$elm$);\n                    });\n                }\n                else {\n                    results.push(diffVnode(ctx, elmToMove, newStartVnode, flags));\n                    oldCh[idxInOld] = undefined;\n                    assertDefined(elmToMove.$elm$, 'elmToMove $elm$ must be defined');\n                    insertBefore(staticCtx, parentElm, elmToMove.$elm$, oldStartVnode.$elm$);\n                }\n            }\n            newStartVnode = newCh[++newStartIdx];\n        }\n    }\n    if (newStartIdx <= newEndIdx) {\n        const before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$;\n        results.push(addChildren(ctx, parentElm, before, newCh, newStartIdx, newEndIdx, flags));\n    }\n    let wait = promiseAll(results);\n    if (oldStartIdx <= oldEndIdx) {\n        wait = maybeThen(wait, () => {\n            removeChildren(staticCtx, oldCh, oldStartIdx, oldEndIdx);\n        });\n    }\n    return wait;\n};\nexport const getChildren = (elm, filter) => {\n    const end = isVirtualElement(elm) ? elm.close : null;\n    const nodes = [];\n    let node = elm.firstChild;\n    while ((node = processVirtualNodes(node))) {\n        if (filter(node)) {\n            nodes.push(node);\n        }\n        node = node.nextSibling;\n        if (node === end) {\n            break;\n        }\n    }\n    return nodes;\n};\n// export const getChildren = (elm: QwikElement, mode: ChildrenMode): (Node | VirtualElement)[] => {\n//   // console.warn('DOM READ: getChildren()', elm);\n//   switch (mode) {\n//     case 'root':\n//       return getCh(elm, isChildComponent);\n//     case 'head':\n//       return getCh(elm, isHeadChildren);\n//     case 'elements':\n//       return getCh(elm, isNodeElement);\n//   }\n// };\nconst getChildrenVnodes = (elm, filter) => {\n    return getChildren(elm, filter).map(getVnodeFromEl);\n};\nexport const getVnodeFromEl = (el) => {\n    if (isElement(el)) {\n        return tryGetContext(el)?.$vdom$ ?? domToVnode(el);\n    }\n    return domToVnode(el);\n};\nexport const domToVnode = (node) => {\n    if (isQwikElement(node)) {\n        const t = new ProcessedJSXNodeImpl(node.localName, {}, null, CHILDREN_PLACEHOLDER, 0, getKey(node));\n        t.$elm$ = node;\n        return t;\n    }\n    else if (isText(node)) {\n        const t = new ProcessedJSXNodeImpl(node.nodeName, EMPTY_OBJ, null, CHILDREN_PLACEHOLDER, 0, null);\n        t.$text$ = node.data;\n        t.$elm$ = node;\n        return t;\n    }\n    assertFail('Invalid node type');\n};\nconst isHeadChildren = (node) => {\n    const type = node.nodeType;\n    if (type === 1) {\n        return node.hasAttribute('q:head');\n    }\n    return type === 111;\n};\nexport const isSlotTemplate = (node) => {\n    return node.nodeName === 'Q:TEMPLATE';\n};\nexport const isChildComponent = (node) => {\n    const type = node.nodeType;\n    if (type === 3 || type === 111) {\n        return true;\n    }\n    if (type !== 1) {\n        return false;\n    }\n    const nodeName = node.nodeName;\n    if (nodeName === 'Q:TEMPLATE') {\n        return false;\n    }\n    if (nodeName === 'HEAD') {\n        return node.hasAttribute('q:head');\n    }\n    if (nodeName === 'STYLE') {\n        return !node.hasAttribute(QStyle);\n    }\n    return true;\n};\nexport const splitChildren = (input) => {\n    const output = {};\n    for (const item of input) {\n        const key = getSlotName(item);\n        const node = output[key] ??\n            (output[key] = new ProcessedJSXNodeImpl(VIRTUAL, {\n                [QSlotS]: '',\n            }, null, [], 0, key));\n        node.$children$.push(item);\n    }\n    return output;\n};\nexport const diffVnode = (rCtx, oldVnode, newVnode, flags) => {\n    assertEqual(oldVnode.$type$, newVnode.$type$, 'old and new vnodes type must be the same');\n    assertEqual(oldVnode.$key$, newVnode.$key$, 'old and new vnodes key must be the same');\n    assertEqual(oldVnode.$id$, newVnode.$id$, 'old and new vnodes key must be the same');\n    const elm = oldVnode.$elm$;\n    const tag = newVnode.$type$;\n    const staticCtx = rCtx.$static$;\n    const containerState = staticCtx.$containerState$;\n    const currentComponent = rCtx.$cmpCtx$;\n    assertDefined(elm, 'while patching element must be defined');\n    assertDefined(currentComponent, 'while patching current component must be defined');\n    newVnode.$elm$ = elm;\n    // Render text nodes\n    if (tag === '#text') {\n        staticCtx.$visited$.push(elm);\n        const signal = newVnode.$signal$;\n        if (signal) {\n            newVnode.$text$ = jsxToString(trackSignalV1(signal, [\n                SubscriptionType.TEXT_MUTABLE,\n                currentComponent.$element$,\n                signal,\n                elm,\n            ]));\n        }\n        setProperty(staticCtx, elm, 'data', newVnode.$text$);\n        return;\n    }\n    else if (tag === '#signal') {\n        return;\n    }\n    assertQwikElement(elm);\n    const props = newVnode.$varProps$;\n    const vnodeFlags = newVnode.$flags$;\n    const elCtx = getContext(elm, containerState);\n    if (tag !== VIRTUAL) {\n        // Track SVG state\n        let isSvg = (flags & IS_SVG) !== 0;\n        if (!isSvg && tag === 'svg') {\n            flags |= IS_SVG;\n            isSvg = true;\n        }\n        if (props !== EMPTY_OBJ) {\n            // elCtx.$vdom$ = newVnode;\n            if ((vnodeFlags & static_listeners) === 0) {\n                elCtx.li.length = 0;\n            }\n            const values = oldVnode.$varProps$;\n            newVnode.$varProps$ = values;\n            for (const prop in props) {\n                let newValue = props[prop];\n                if (prop === 'ref') {\n                    assertElement(elm);\n                    if (newValue !== undefined) {\n                        setRef(newValue, elm);\n                    }\n                    continue;\n                }\n                if (isOnProp(prop)) {\n                    const normalized = setEvent(elCtx.li, prop, newValue, containerState.$containerEl$);\n                    addQwikEvent(staticCtx, elm, normalized);\n                    continue;\n                }\n                if (isSignalV1(newValue)) {\n                    newValue = trackSignalV1(newValue, [\n                        SubscriptionType.PROP_IMMUTABLE,\n                        currentComponent.$element$,\n                        newValue,\n                        elm,\n                        prop,\n                        undefined,\n                    ]);\n                }\n                if (prop === 'class') {\n                    newValue = serializeClassWithHost(newValue, currentComponent);\n                }\n                else if (prop === 'style') {\n                    newValue = stringifyStyle(newValue);\n                }\n                if (values[prop] !== newValue) {\n                    values[prop] = newValue;\n                    smartSetProperty(staticCtx, elm, prop, newValue, isSvg);\n                }\n            }\n        }\n        if (vnodeFlags & static_subtree) {\n            return;\n        }\n        if (isSvg && tag === 'foreignObject') {\n            flags &= ~IS_SVG;\n        }\n        const setsInnerHTML = props[dangerouslySetInnerHTML] !== undefined;\n        if (setsInnerHTML) {\n            if (qDev && newVnode.$children$.length > 0) {\n                logWarn('Node can not have children when innerHTML is set');\n            }\n            return;\n        }\n        if (tag === 'textarea') {\n            return;\n        }\n        return smartUpdateChildren(rCtx, oldVnode, newVnode, flags);\n    }\n    else if (OnRenderProp in props) {\n        const cmpProps = props.props;\n        setComponentProps(containerState, elCtx, cmpProps);\n        let needsRender = !!(elCtx.$flags$ & HOST_FLAG_DIRTY);\n        // TODO: review this corner case\n        if (!needsRender && !elCtx.$componentQrl$ && !elCtx.$element$.hasAttribute(ELEMENT_ID)) {\n            setQId(rCtx, elCtx);\n            elCtx.$componentQrl$ = cmpProps[OnRenderProp];\n            assertQrl(elCtx.$componentQrl$);\n            needsRender = true;\n        }\n        // Rendering of children of component is more complicated,\n        // since the children must be projected into the rendered slots\n        // In addition, nested children might need rerendering, if that's the case\n        // we need to render the nested component, and wait before projecting the content\n        // since otherwise we don't know where the slots\n        if (needsRender) {\n            return maybeThen(renderComponent(rCtx, elCtx, flags), () => renderContentProjection(rCtx, elCtx, newVnode, flags));\n        }\n        return renderContentProjection(rCtx, elCtx, newVnode, flags);\n    }\n    else if (QSlotS in props) {\n        assertDefined(currentComponent.$slots$, 'current component slots must be a defined array');\n        currentComponent.$slots$.push(newVnode);\n        return;\n    }\n    else if (dangerouslySetInnerHTML in props) {\n        setProperty(staticCtx, elm, 'innerHTML', props[dangerouslySetInnerHTML]);\n        return;\n    }\n    if (vnodeFlags & static_subtree) {\n        return;\n    }\n    return smartUpdateChildren(rCtx, oldVnode, newVnode, flags);\n};\nconst renderContentProjection = (rCtx, hostCtx, vnode, flags) => {\n    if (vnode.$flags$ & static_subtree) {\n        return;\n    }\n    const newChildren = vnode.$children$;\n    const staticCtx = rCtx.$static$;\n    const splittedNewChildren = splitChildren(newChildren);\n    const slotMaps = getSlotMap(hostCtx);\n    // Remove content from empty slots\n    for (const key in slotMaps.slots) {\n        if (!splittedNewChildren[key]) {\n            const slotEl = slotMaps.slots[key];\n            const oldCh = getChildrenVnodes(slotEl, isChildComponent);\n            if (oldCh.length > 0) {\n                // getVdom(slotEl).$children$ = [];\n                const slotCtx = tryGetContext(slotEl);\n                if (slotCtx && slotCtx.$vdom$) {\n                    slotCtx.$vdom$.$children$ = [];\n                }\n                removeChildren(staticCtx, oldCh, 0, oldCh.length - 1);\n            }\n        }\n    }\n    // Remove empty templates\n    for (const key in slotMaps.templates) {\n        const templateEl = slotMaps.templates[key];\n        if (templateEl && !splittedNewChildren[key]) {\n            slotMaps.templates[key] = undefined;\n            removeNode(staticCtx, templateEl);\n        }\n    }\n    // Render into slots\n    return promiseAll(Object.keys(splittedNewChildren).map((slotName) => {\n        const newVdom = splittedNewChildren[slotName];\n        const slotCtx = getSlotCtx(staticCtx, slotMaps, hostCtx, slotName, rCtx.$static$.$containerState$);\n        const oldVdom = getVdom(slotCtx);\n        const slotRctx = pushRenderContext(rCtx);\n        const slotEl = slotCtx.$element$;\n        slotRctx.$slotCtx$ = slotCtx;\n        slotCtx.$vdom$ = newVdom;\n        newVdom.$elm$ = slotEl;\n        let newFlags = flags & ~IS_SVG;\n        if (slotEl.isSvg) {\n            newFlags |= IS_SVG;\n        }\n        const index = staticCtx.$addSlots$.findIndex((slot) => slot[0] === slotEl);\n        if (index >= 0) {\n            staticCtx.$addSlots$.splice(index, 1);\n        }\n        return smartUpdateChildren(slotRctx, oldVdom, newVdom, newFlags);\n    }));\n};\nconst addChildren = (ctx, parentElm, before, vnodes, startIdx, endIdx, flags) => {\n    const promises = [];\n    for (; startIdx <= endIdx; ++startIdx) {\n        const ch = vnodes[startIdx];\n        assertDefined(ch, 'render: node must be defined at index', startIdx, vnodes);\n        const elm = createElm(ctx, ch, flags, promises);\n        insertBefore(ctx.$static$, parentElm, elm, before);\n    }\n    return promiseAllLazy(promises);\n};\nconst removeChildren = (staticCtx, nodes, startIdx, endIdx) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        const ch = nodes[startIdx];\n        if (ch) {\n            assertDefined(ch.$elm$, 'vnode elm must be defined');\n            removeNode(staticCtx, ch.$elm$);\n        }\n    }\n};\nconst getSlotCtx = (staticCtx, slotMaps, hostCtx, slotName, containerState) => {\n    // If a slot is known, render children inside\n    const slotEl = slotMaps.slots[slotName];\n    if (slotEl) {\n        return getContext(slotEl, containerState);\n    }\n    // Otherwise we park the children in a template\n    const templateEl = slotMaps.templates[slotName];\n    if (templateEl) {\n        return getContext(templateEl, containerState);\n    }\n    const template = createTemplate(staticCtx.$doc$, slotName);\n    const elCtx = createContext(template);\n    elCtx.$parentCtx$ = hostCtx;\n    prepend(staticCtx, hostCtx.$element$, template);\n    slotMaps.templates[slotName] = template;\n    return elCtx;\n};\nconst getSlotName = (node) => {\n    return node.$varProps$[QSlot] ?? '';\n};\nexport const createElm = (rCtx, vnode, flags, promises) => {\n    const tag = vnode.$type$;\n    const doc = rCtx.$static$.$doc$;\n    const currentComponent = rCtx.$cmpCtx$;\n    if (tag === '#text') {\n        return (vnode.$elm$ = doc.createTextNode(vnode.$text$));\n    }\n    if (tag === '#signal') {\n        const signal = vnode.$signal$;\n        assertDefined(signal, 'expecting signal here');\n        assertDefined(currentComponent, 'signals can not be used outside components');\n        const signalValue = signal.value;\n        if (isJSXNode(signalValue)) {\n            // convert signal value to ProcessedJSXNode\n            const processedSignal = processData(signalValue);\n            if (isSignalV1(processedSignal)) {\n                throw new Error('NOT IMPLEMENTED: Promise');\n            }\n            else if (Array.isArray(processedSignal)) {\n                throw new Error('NOT IMPLEMENTED: Array');\n            }\n            else {\n                // crate elements\n                const elm = createElm(rCtx, processedSignal, flags, promises);\n                // create subscription\n                trackSignalV1(signal, flags & IS_IMMUTABLE\n                    ? [SubscriptionType.TEXT_IMMUTABLE, elm, signal, elm]\n                    : [\n                        SubscriptionType.TEXT_MUTABLE,\n                        currentComponent.$element$,\n                        signal,\n                        elm,\n                    ]);\n                // update the vNode for future diff.\n                return (vnode.$elm$ = elm);\n            }\n        }\n        else {\n            // create element\n            const elm = doc.createTextNode(vnode.$text$);\n            elm.data = vnode.$text$ = jsxToString(signalValue);\n            // create subscription\n            trackSignalV1(signal, flags & IS_IMMUTABLE\n                ? [SubscriptionType.TEXT_IMMUTABLE, elm, signal, elm]\n                : [\n                    SubscriptionType.TEXT_MUTABLE,\n                    currentComponent.$element$,\n                    signal,\n                    elm,\n                ]);\n            // update the vNode for future diff.\n            return (vnode.$elm$ = elm);\n        }\n    }\n    let elm;\n    let isSvg = !!(flags & IS_SVG);\n    if (!isSvg && tag === 'svg') {\n        flags |= IS_SVG;\n        isSvg = true;\n    }\n    const isVirtual = tag === VIRTUAL;\n    const props = vnode.$varProps$;\n    const staticCtx = rCtx.$static$;\n    const containerState = staticCtx.$containerState$;\n    if (isVirtual) {\n        elm = newVirtualElement(doc, isSvg);\n    }\n    else if (tag === 'head') {\n        elm = doc.head;\n        flags |= IS_HEAD;\n    }\n    else {\n        elm = createElement(doc, tag, isSvg);\n        flags &= ~IS_HEAD;\n    }\n    if (vnode.$flags$ & static_subtree) {\n        flags |= IS_IMMUTABLE;\n    }\n    vnode.$elm$ = elm;\n    const elCtx = createContext(elm);\n    if (rCtx.$slotCtx$) {\n        elCtx.$parentCtx$ = rCtx.$slotCtx$;\n        elCtx.$realParentCtx$ = rCtx.$cmpCtx$;\n    }\n    else {\n        elCtx.$parentCtx$ = rCtx.$cmpCtx$;\n    }\n    if (!isVirtual) {\n        if (qDev && qInspector) {\n            const dev = vnode.$dev$;\n            if (dev) {\n                directSetAttribute(elm, 'data-qwik-inspector', `${dev.fileName}:${dev.lineNumber}:${dev.columnNumber}`);\n            }\n        }\n        if (vnode.$constProps$) {\n            setProperties(staticCtx, elCtx, currentComponent, vnode.$constProps$, isSvg, true);\n        }\n        if (props !== EMPTY_OBJ) {\n            elCtx.$vdom$ = vnode;\n            vnode.$varProps$ = setProperties(staticCtx, elCtx, currentComponent, props, isSvg, false);\n        }\n        if (isSvg && tag === 'foreignObject') {\n            isSvg = false;\n            flags &= ~IS_SVG;\n        }\n        if (currentComponent) {\n            const scopedIds = currentComponent.$scopeIds$;\n            if (scopedIds) {\n                scopedIds.forEach((styleId) => {\n                    elm.classList.add(styleId);\n                });\n            }\n            if (currentComponent.$flags$ & HOST_FLAG_NEED_ATTACH_LISTENER) {\n                elCtx.li.push(...currentComponent.li);\n                currentComponent.$flags$ &= ~HOST_FLAG_NEED_ATTACH_LISTENER;\n            }\n        }\n        for (const listener of elCtx.li) {\n            addQwikEvent(staticCtx, elm, listener[0]);\n        }\n        const setsInnerHTML = props[dangerouslySetInnerHTML] !== undefined;\n        if (setsInnerHTML) {\n            if (qDev && vnode.$children$.length > 0) {\n                logWarn('Node can not have children when innerHTML is set');\n            }\n            return elm;\n        }\n        if (isSvg && tag === 'foreignObject') {\n            isSvg = false;\n            flags &= ~IS_SVG;\n        }\n    }\n    else if (OnRenderProp in props) {\n        const renderQRL = props[OnRenderProp];\n        assertQrl(renderQRL);\n        const target = createPropsState();\n        const manager = containerState.$subsManager$.$createManager$();\n        const proxy = new Proxy(target, new ReadWriteProxyHandler(containerState, manager));\n        const expectProps = props.props;\n        containerState.$proxyMap$.set(target, proxy);\n        elCtx.$props$ = proxy;\n        if (expectProps !== EMPTY_OBJ) {\n            const immutableMeta = (target[_CONST_PROPS] =\n                expectProps[_CONST_PROPS] ?? EMPTY_OBJ);\n            for (const prop in expectProps) {\n                if (prop !== 'children' && prop !== QSlot) {\n                    const immutableValue = immutableMeta[prop];\n                    if (isSignalV1(immutableValue)) {\n                        target['_IMMUTABLE_PREFIX' + prop] = immutableValue;\n                    }\n                    else {\n                        target[prop] = expectProps[prop];\n                    }\n                }\n            }\n        }\n        setQId(rCtx, elCtx);\n        // Run mount hook\n        elCtx.$componentQrl$ = renderQRL;\n        const wait = maybeThen(renderComponent(rCtx, elCtx, flags), () => {\n            let children = vnode.$children$;\n            if (children.length === 0) {\n                return;\n            }\n            if (children.length === 1 && children[0].$type$ === SKIP_RENDER_TYPE) {\n                children = children[0].$children$;\n            }\n            const slotMap = getSlotMap(elCtx);\n            const p = [];\n            const splittedNewChildren = splitChildren(children);\n            for (const slotName in splittedNewChildren) {\n                const newVnode = splittedNewChildren[slotName];\n                const slotCtx = getSlotCtx(staticCtx, slotMap, elCtx, slotName, staticCtx.$containerState$);\n                const slotRctx = pushRenderContext(rCtx);\n                const slotEl = slotCtx.$element$;\n                slotRctx.$slotCtx$ = slotCtx;\n                slotCtx.$vdom$ = newVnode;\n                newVnode.$elm$ = slotEl;\n                let newFlags = flags & ~IS_SVG;\n                if (slotEl.isSvg) {\n                    newFlags |= IS_SVG;\n                }\n                for (const node of newVnode.$children$) {\n                    const nodeElm = createElm(slotRctx, node, newFlags, p);\n                    assertDefined(node.$elm$, 'vnode elm must be defined');\n                    assertEqual(nodeElm, node.$elm$, 'vnode elm must be defined');\n                    appendChild(staticCtx, slotEl, nodeElm);\n                }\n            }\n            return promiseAllLazy(p);\n        });\n        if (isPromise(wait)) {\n            promises.push(wait);\n        }\n        return elm;\n    }\n    else if (QSlotS in props) {\n        assertDefined(currentComponent, 'slot can only be used inside component');\n        assertDefined(currentComponent.$slots$, 'current component slots must be a defined array');\n        setKey(elm, vnode.$key$);\n        directSetAttribute(elm, QSlotRef, currentComponent.$id$);\n        directSetAttribute(elm, QSlotS, '');\n        currentComponent.$slots$.push(vnode);\n        staticCtx.$addSlots$.push([elm, currentComponent.$element$]);\n    }\n    else if (dangerouslySetInnerHTML in props) {\n        setProperty(staticCtx, elm, 'innerHTML', props[dangerouslySetInnerHTML]);\n        return elm;\n    }\n    let children = vnode.$children$;\n    if (children.length === 0) {\n        return elm;\n    }\n    if (children.length === 1 && children[0].$type$ === SKIP_RENDER_TYPE) {\n        children = children[0].$children$;\n    }\n    const nodes = children.map((ch) => createElm(rCtx, ch, flags, promises));\n    for (const node of nodes) {\n        directAppendChild(elm, node);\n    }\n    return elm;\n};\nconst getSlots = (elCtx) => {\n    const slots = elCtx.$slots$;\n    if (!slots) {\n        const parent = elCtx.$element$.parentElement;\n        assertDefined(parent, 'component should be already attached to the dom');\n        return (elCtx.$slots$ = readDOMSlots(elCtx));\n    }\n    return slots;\n};\nconst getSlotMap = (elCtx) => {\n    const slotsArray = getSlots(elCtx);\n    const slots = {};\n    const templates = {};\n    const t = Array.from(elCtx.$element$.childNodes).filter(isSlotTemplate);\n    // Map virtual slots\n    for (const vnode of slotsArray) {\n        assertQwikElement(vnode.$elm$);\n        slots[vnode.$key$ ?? ''] = vnode.$elm$;\n    }\n    // Map templates\n    for (const elm of t) {\n        templates[directGetAttribute(elm, QSlot) ?? ''] = elm;\n    }\n    return { slots, templates };\n};\nconst readDOMSlots = (elCtx) => {\n    const parent = elCtx.$element$.parentElement;\n    assertDefined(parent, 'component should be already attached to the dom');\n    return queryAllVirtualByAttribute(parent, QSlotRef, elCtx.$id$).map(domToVnode);\n};\nconst handleStyle = (ctx, elm, newValue) => {\n    setProperty(ctx, elm.style, 'cssText', newValue);\n    return true;\n};\nconst handleClass = (ctx, elm, newValue) => {\n    assertTrue(newValue == null || typeof newValue === 'string', 'class newValue must be either nullish or string', newValue);\n    if (elm.namespaceURI === SVG_NS) {\n        setAttribute(ctx, elm, 'class', newValue);\n    }\n    else {\n        setProperty(ctx, elm, 'className', newValue);\n    }\n    return true;\n};\nconst checkBeforeAssign = (ctx, elm, newValue, prop) => {\n    if (prop in elm) {\n        // a selected <option> is different from a selected <option value> (innerText vs '')\n        if (elm[prop] !== newValue || (prop === 'value' && !elm.hasAttribute(prop))) {\n            if (\n            // we must set value last so that it adheres to min,max,step\n            prop === 'value' &&\n                // but we must also set options first so they are present before updating select\n                elm.tagName !== 'OPTION') {\n                setPropertyPost(ctx, elm, prop, newValue);\n            }\n            else {\n                setProperty(ctx, elm, prop, newValue);\n            }\n        }\n        return true;\n    }\n    return false;\n};\nconst forceAttribute = (ctx, elm, newValue, prop) => {\n    setAttribute(ctx, elm, prop.toLowerCase(), newValue);\n    return true;\n};\nconst setInnerHTML = (ctx, elm, newValue) => {\n    setProperty(ctx, elm, 'innerHTML', newValue);\n    return true;\n};\nconst noop = () => {\n    return true;\n};\nexport const PROP_HANDLER_MAP = {\n    style: handleStyle,\n    class: handleClass,\n    className: handleClass,\n    value: checkBeforeAssign,\n    checked: checkBeforeAssign,\n    href: forceAttribute,\n    list: forceAttribute,\n    form: forceAttribute,\n    tabIndex: forceAttribute,\n    download: forceAttribute,\n    innerHTML: noop,\n    [dangerouslySetInnerHTML]: setInnerHTML,\n    // handled by jsx\n    children: noop,\n};\nexport const smartSetProperty = (staticCtx, elm, prop, newValue, isSvg) => {\n    // aria attribute value should be rendered as string\n    if (isAriaAttribute(prop)) {\n        setAttribute(staticCtx, elm, prop, newValue != null ? String(newValue) : newValue);\n        return;\n    }\n    // Check if its an exception\n    const exception = PROP_HANDLER_MAP[prop];\n    if (exception) {\n        if (exception(staticCtx, elm, newValue, prop)) {\n            return;\n        }\n    }\n    // Check if property in prototype\n    if (!isSvg && prop in elm) {\n        setProperty(staticCtx, elm, prop, newValue);\n        return;\n    }\n    if (prop.startsWith(PREVENT_DEFAULT)) {\n        registerQwikEvent(prop.slice(PREVENT_DEFAULT.length));\n    }\n    // Fallback to render attribute\n    setAttribute(staticCtx, elm, prop, newValue);\n};\nexport const areExactQRLs = (oldValue, newValue) => {\n    if (!isQrl(oldValue) || !isQrl(newValue) || oldValue.$hash$ !== newValue.$hash$) {\n        return false;\n    }\n    const cA = oldValue.$captureRef$;\n    const cB = newValue.$captureRef$;\n    if (cA && cB) {\n        return sameArrays(cA, cB);\n    }\n    return false;\n};\nexport const sameArrays = (a1, a2) => {\n    const len = a1.length;\n    if (len !== a2.length) {\n        return false;\n    }\n    for (let i = 0; i < len; i++) {\n        if (a1[i] !== a2[i]) {\n            return false;\n        }\n    }\n    return true;\n};\nexport const setProperties = (staticCtx, elCtx, hostCtx, newProps, isSvg, immutable) => {\n    const values = {};\n    const elm = elCtx.$element$;\n    for (const prop in newProps) {\n        let newValue = newProps[prop];\n        if (prop === 'ref') {\n            assertElement(elm);\n            if (newValue !== undefined) {\n                setRef(newValue, elm);\n            }\n            continue;\n        }\n        if (isOnProp(prop)) {\n            setEvent(elCtx.li, prop, newValue, staticCtx.$containerState$.$containerEl$);\n            continue;\n        }\n        if (isSignalV1(newValue)) {\n            assertDefined(hostCtx, 'Signals can only be used in components');\n            newValue = trackSignalV1(newValue, immutable\n                ? [SubscriptionType.PROP_IMMUTABLE, elm, newValue, hostCtx.$element$, prop, undefined]\n                : [SubscriptionType.PROP_MUTABLE, hostCtx.$element$, newValue, elm, prop, undefined]);\n        }\n        if (prop === 'class') {\n            if (qDev && values.class) {\n                throw new TypeError('Can only provide one of class or className');\n            }\n            newValue = serializeClassWithHost(newValue, hostCtx);\n            if (!newValue) {\n                continue;\n            }\n        }\n        else if (prop === 'style') {\n            newValue = stringifyStyle(newValue);\n        }\n        values[prop] = newValue;\n        smartSetProperty(staticCtx, elm, prop, newValue, isSvg);\n    }\n    return values;\n};\nexport const setComponentProps = (containerState, elCtx, expectProps) => {\n    let props = elCtx.$props$;\n    if (!props) {\n        elCtx.$props$ = props = createProxy(createPropsState(), containerState);\n    }\n    if (expectProps === EMPTY_OBJ) {\n        return;\n    }\n    const manager = getSubscriptionManager(props);\n    assertDefined(manager, `props have to be a proxy, but it is not`, props);\n    const target = getProxyTarget(props);\n    assertDefined(target, `props have to be a proxy, but it is not`, props);\n    const immutableMeta = (target[_CONST_PROPS] =\n        expectProps[_CONST_PROPS] ?? EMPTY_OBJ);\n    for (const prop in expectProps) {\n        if (prop !== 'children' && prop !== QSlot && !immutableMeta[prop]) {\n            const value = expectProps[prop];\n            if (target[prop] !== value) {\n                target[prop] = value;\n                manager.$notifySubs$(prop);\n            }\n        }\n    }\n};\nexport const cleanupTree = (elm, staticCtx, subsManager, stopSlots) => {\n    subsManager.$clearSub$(elm);\n    if (isQwikElement(elm)) {\n        if (stopSlots && elm.hasAttribute(QSlotS)) {\n            staticCtx.$rmSlots$.push(elm);\n            return;\n        }\n        const ctx = tryGetContext(elm);\n        if (ctx) {\n            cleanupContext(ctx, subsManager);\n        }\n        const end = isVirtualElement(elm) ? elm.close : null;\n        let node = elm.firstChild;\n        while ((node = processVirtualNodes(node))) {\n            cleanupTree(node, staticCtx, subsManager, true);\n            node = node.nextSibling;\n            if (node === end) {\n                break;\n            }\n        }\n    }\n};\nconst restoreScroll = () => {\n    if (document.__q_scroll_restore__) {\n        document.__q_scroll_restore__();\n        document.__q_scroll_restore__ = undefined;\n    }\n};\nexport const executeContextWithScrollAndTransition = async (ctx) => {\n    // try to use `document.startViewTransition`\n    if (isBrowser && !qTest) {\n        if (document.__q_view_transition__) {\n            document.__q_view_transition__ = undefined;\n            if (document.startViewTransition) {\n                await document.startViewTransition(() => {\n                    executeDOMRender(ctx);\n                    restoreScroll();\n                }).finished;\n                return;\n            }\n        }\n    }\n    // fallback\n    executeDOMRender(ctx);\n    if (isBrowser) {\n        restoreScroll();\n    }\n};\nexport const directAppendChild = (parent, child) => {\n    if (isVirtualElement(child)) {\n        child.appendTo(parent);\n    }\n    else {\n        parent.appendChild(child);\n    }\n};\nexport const directRemoveChild = (parent, child) => {\n    if (isVirtualElement(child)) {\n        child.remove();\n    }\n    else {\n        parent.removeChild(child);\n    }\n};\nexport const directInsertAfter = (parent, child, ref) => {\n    if (isVirtualElement(child)) {\n        child.insertBeforeTo(parent, ref?.nextSibling ?? null);\n    }\n    else {\n        parent.insertBefore(child, ref?.nextSibling ?? null);\n    }\n};\nexport const directInsertBefore = (parent, child, ref) => {\n    if (isVirtualElement(child)) {\n        child.insertBeforeTo(parent, getRootNode(ref));\n    }\n    else {\n        parent.insertBefore(child, getRootNode(ref));\n    }\n};\nconst createKeyToOldIdx = (children, beginIdx, endIdx) => {\n    const map = {};\n    for (let i = beginIdx; i <= endIdx; ++i) {\n        const child = children[i];\n        const key = child.$key$;\n        if (key != null) {\n            map[key] = i;\n        }\n    }\n    return map;\n};\nexport const addQwikEvent = (staticCtx, elm, prop) => {\n    if (!prop.startsWith('on:')) {\n        setAttribute(staticCtx, elm, prop, '');\n    }\n    registerQwikEvent(prop);\n};\nexport const registerQwikEvent = (prop) => {\n    var _a;\n    if (!qTest) {\n        const eventName = getEventName(prop);\n        try {\n            // This is managed by qwik-loader\n            ((_a = globalThis).qwikevents || (_a.qwikevents = [])).push(eventName);\n        }\n        catch (err) {\n            logWarn(err);\n        }\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined } from '../../error/assert';\nimport { codeToText, QError_setProperty } from '../../error/error';\nimport { getDocument } from '../../util/dom';\nimport { isElement, isNode, isQwikElement } from '../../util/element';\nimport { logDebug, logError, logWarn } from '../../util/log';\nimport { QSlot, QSlotRef, QStyle } from '../../util/markers';\nimport { qDev } from '../../util/qdev';\nimport { directGetAttribute, directSetAttribute } from '../fast-calls';\nimport { cleanupTree, directAppendChild, directInsertAfter, directInsertBefore, directRemoveChild, getChildren, isChildComponent, isSlotTemplate, SVG_NS, } from './visitor';\nexport const setAttribute = (staticCtx, el, prop, value) => {\n    staticCtx.$operations$.push({\n        $operation$: _setAttribute,\n        $args$: [el, prop, value],\n    });\n};\nconst _setAttribute = (el, prop, value) => {\n    if (value == null || value === false) {\n        el.removeAttribute(prop);\n    }\n    else {\n        // element.setAttribute requires string. Boolean attributes automatically convert \"\" to `true`\n        const str = value === true ? '' : String(value);\n        directSetAttribute(el, prop, str);\n    }\n};\nexport const setProperty = (staticCtx, node, key, value) => {\n    staticCtx.$operations$.push({\n        $operation$: _setProperty,\n        $args$: [node, key, value],\n    });\n};\nexport const setPropertyPost = (staticCtx, node, key, value) => {\n    staticCtx.$postOperations$.push({\n        $operation$: _setProperty,\n        $args$: [node, key, value],\n    });\n};\nconst _setProperty = (node, key, value) => {\n    try {\n        node[key] = value == null ? '' : value;\n        if (value == null && isNode(node) && isElement(node)) {\n            node.removeAttribute(key);\n        }\n    }\n    catch (err) {\n        logError(codeToText(QError_setProperty), key, { node, value }, err);\n    }\n};\nexport const createElement = (doc, expectTag, isSvg) => {\n    const el = isSvg ? doc.createElementNS(SVG_NS, expectTag) : doc.createElement(expectTag);\n    return el;\n};\nexport const insertBefore = (staticCtx, parent, newChild, refChild) => {\n    staticCtx.$operations$.push({\n        $operation$: directInsertBefore,\n        $args$: [parent, newChild, refChild ? refChild : null],\n    });\n    return newChild;\n};\nexport const insertAfter = (staticCtx, parent, newChild, refChild) => {\n    staticCtx.$operations$.push({\n        $operation$: directInsertAfter,\n        $args$: [parent, newChild, refChild ? refChild : null],\n    });\n    return newChild;\n};\nexport const appendChild = (staticCtx, parent, newChild) => {\n    staticCtx.$operations$.push({\n        $operation$: directAppendChild,\n        $args$: [parent, newChild],\n    });\n    return newChild;\n};\nexport const appendHeadStyle = (staticCtx, styleTask) => {\n    staticCtx.$containerState$.$styleIds$.add(styleTask.styleId);\n    staticCtx.$postOperations$.push({\n        $operation$: _appendHeadStyle,\n        $args$: [staticCtx.$containerState$, styleTask],\n    });\n};\nexport const setClasslist = (staticCtx, elm, toRemove, toAdd) => {\n    staticCtx.$operations$.push({\n        $operation$: _setClasslist,\n        $args$: [elm, toRemove, toAdd],\n    });\n};\nexport const _setClasslist = (elm, toRemove, toAdd) => {\n    const classList = elm.classList;\n    classList.remove(...toRemove);\n    classList.add(...toAdd);\n};\nexport const _appendHeadStyle = (containerState, styleTask) => {\n    const containerEl = containerState.$containerEl$;\n    const doc = getDocument(containerEl);\n    const isDoc = doc.documentElement === containerEl;\n    const headEl = doc.head;\n    const style = doc.createElement('style');\n    if (isDoc && !headEl) {\n        logWarn('document.head is undefined');\n    }\n    directSetAttribute(style, QStyle, styleTask.styleId);\n    directSetAttribute(style, 'hidden', '');\n    style.textContent = styleTask.content;\n    if (isDoc && headEl) {\n        directAppendChild(headEl, style);\n    }\n    else {\n        directInsertBefore(containerEl, style, containerEl.firstChild);\n    }\n};\nexport const prepend = (staticCtx, parent, newChild) => {\n    staticCtx.$operations$.push({\n        $operation$: directPrepend,\n        $args$: [parent, newChild],\n    });\n};\nexport const directPrepend = (parent, newChild) => {\n    directInsertBefore(parent, newChild, parent.firstChild);\n};\nexport const removeNode = (staticCtx, el) => {\n    if (isQwikElement(el)) {\n        const subsManager = staticCtx.$containerState$.$subsManager$;\n        cleanupTree(el, staticCtx, subsManager, true);\n    }\n    staticCtx.$operations$.push({\n        $operation$: _removeNode,\n        $args$: [el, staticCtx],\n    });\n};\nconst _removeNode = (el, staticCtx) => {\n    const parent = el.parentElement;\n    if (parent) {\n        directRemoveChild(parent, el);\n    }\n    else if (qDev) {\n        logWarn('Trying to remove component already removed', el);\n    }\n};\nexport const createTemplate = (doc, slotName) => {\n    const template = createElement(doc, 'q:template', false);\n    directSetAttribute(template, QSlot, slotName);\n    directSetAttribute(template, 'hidden', '');\n    directSetAttribute(template, 'aria-hidden', 'true');\n    return template;\n};\nexport const executeDOMRender = (staticCtx) => {\n    for (const op of staticCtx.$operations$) {\n        // PERF(misko): polymorphic execution\n        op.$operation$.apply(undefined, op.$args$);\n    }\n    resolveSlotProjection(staticCtx);\n};\nexport const getKey = (el) => {\n    return directGetAttribute(el, 'q:key');\n};\nexport const setKey = (el, key) => {\n    if (key !== null) {\n        directSetAttribute(el, 'q:key', key);\n    }\n};\nexport const resolveSlotProjection = (staticCtx) => {\n    // Slots removed\n    const subsManager = staticCtx.$containerState$.$subsManager$;\n    for (const slotEl of staticCtx.$rmSlots$) {\n        const key = getKey(slotEl);\n        assertDefined(key, 'slots must have a key');\n        const slotChildren = getChildren(slotEl, isChildComponent);\n        if (slotChildren.length > 0) {\n            const sref = slotEl.getAttribute(QSlotRef);\n            const hostCtx = staticCtx.$roots$.find((r) => r.$id$ === sref);\n            if (hostCtx) {\n                const hostElm = hostCtx.$element$;\n                if (hostElm.isConnected) {\n                    const hasTemplate = getChildren(hostElm, isSlotTemplate).some((node) => directGetAttribute(node, QSlot) === key);\n                    if (!hasTemplate) {\n                        const template = createTemplate(staticCtx.$doc$, key);\n                        for (const child of slotChildren) {\n                            directAppendChild(template, child);\n                        }\n                        directInsertBefore(hostElm, template, hostElm.firstChild);\n                    }\n                    else {\n                        cleanupTree(slotEl, staticCtx, subsManager, false);\n                    }\n                }\n                else {\n                    cleanupTree(slotEl, staticCtx, subsManager, false);\n                }\n            }\n            else {\n                // If slot content cannot be relocated, it means it's content is definitely removed\n                // Cleanup needs to be executed\n                cleanupTree(slotEl, staticCtx, subsManager, false);\n            }\n        }\n    }\n    // Slots added\n    for (const [slotEl, hostElm] of staticCtx.$addSlots$) {\n        const key = getKey(slotEl);\n        assertDefined(key, 'slots must have a key');\n        const template = getChildren(hostElm, isSlotTemplate).find((node) => {\n            return node.getAttribute(QSlot) === key;\n        });\n        if (template) {\n            getChildren(template, isChildComponent).forEach((child) => {\n                directAppendChild(slotEl, child);\n            });\n            template.remove();\n        }\n    }\n};\nexport const printRenderStats = (staticCtx) => {\n    if (qDev) {\n        if (typeof window !== 'undefined' && window.document != null) {\n            const byOp = {};\n            for (const op of staticCtx.$operations$) {\n                byOp[op.$operation$.name] = (byOp[op.$operation$.name] ?? 0) + 1;\n            }\n            const stats = {\n                byOp,\n                roots: staticCtx.$roots$.map((ctx) => ctx.$element$),\n                hostElements: Array.from(staticCtx.$hostElements$),\n                operations: staticCtx.$operations$.map((v) => [v.$operation$.name, ...v.$args$]),\n            };\n            const noOps = staticCtx.$operations$.length === 0;\n            logDebug('Render stats.', noOps ? 'No operations' : '', stats);\n        }\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvZG9tL29wZXJhdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxVQUFVLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVuRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDdEUsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDN0QsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUd2RSxPQUFPLEVBQ0wsV0FBVyxFQUNYLGlCQUFpQixFQUNqQixpQkFBaUIsRUFDakIsa0JBQWtCLEVBQ2xCLGlCQUFpQixFQUNqQixXQUFXLEVBQ1gsZ0JBQWdCLEVBQ2hCLGNBQWMsRUFDZCxNQUFNLEdBQ1AsTUFBTSxXQUFXLENBQUM7QUFFbkIsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQzFCLFNBQThCLEVBQzlCLEVBQWUsRUFDZixJQUFZLEVBQ1osS0FBVSxFQUNWLEVBQUU7SUFDRixTQUFTLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztRQUMxQixXQUFXLEVBQUUsYUFBYTtRQUMxQixNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQztLQUMxQixD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bEQsVUFBVSxFQUFFLFNBQVMsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ2pGLENBQUM7WUFDRixNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsWUFBWSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7WUFDbEQsUUFBUSxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2pFLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDb250YWluZXJTdGF0ZSB9IGZyb20gJy4uLy4uL2NvbnRhaW5lci9jb250YWluZXInO1xuaW1wb3J0IHsgYXNzZXJ0RGVmaW5lZCB9IGZyb20gJy4uLy4uL2Vycm9yL2Fzc2VydCc7XG5pbXBvcnQgeyBjb2RlVG9UZXh0LCBRRXJyb3Jfc2V0UHJvcGVydHkgfSBmcm9tICcuLi8uLi9lcnJvci9lcnJvcic7XG5pbXBvcnQgdHlwZSB7IFN0eWxlQXBwZW5kIH0gZnJvbSAnLi4vLi4vdXNlL3VzZS1jb3JlJztcbmltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnLi4vLi4vdXRpbC9kb20nO1xuaW1wb3J0IHsgaXNFbGVtZW50LCBpc05vZGUsIGlzUXdpa0VsZW1lbnQgfSBmcm9tICcuLi8uLi91dGlsL2VsZW1lbnQnO1xuaW1wb3J0IHsgbG9nRGVidWcsIGxvZ0Vycm9yLCBsb2dXYXJuIH0gZnJvbSAnLi4vLi4vdXRpbC9sb2cnO1xuaW1wb3J0IHsgUVNsb3QsIFFTbG90UmVmLCBRU3R5bGUgfSBmcm9tICcuLi8uLi91dGlsL21hcmtlcnMnO1xuaW1wb3J0IHsgcURldiB9IGZyb20gJy4uLy4uL3V0aWwvcWRldic7XG5pbXBvcnQgeyBkaXJlY3RHZXRBdHRyaWJ1dGUsIGRpcmVjdFNldEF0dHJpYnV0ZSB9IGZyb20gJy4uL2Zhc3QtY2FsbHMnO1xuaW1wb3J0IHR5cGUgeyBSZW5kZXJTdGF0aWNDb250ZXh0IH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBRd2lrRWxlbWVudCwgVmlydHVhbEVsZW1lbnQgfSBmcm9tICcuL3ZpcnR1YWwtZWxlbWVudCc7XG5pbXBvcnQge1xuICBjbGVhbnVwVHJlZSxcbiAgZGlyZWN0QXBwZW5kQ2hpbGQsXG4gIGRpcmVjdEluc2VydEFmdGVyLFxuICBkaXJlY3RJbnNlcnRCZWZvcmUsXG4gIGRpcmVjdFJlbW92ZUNoaWxkLFxuICBnZXRDaGlsZHJlbixcbiAgaXNDaGlsZENvbXBvbmVudCxcbiAgaXNTbG90VGVtcGxhdGUsXG4gIFNWR19OUyxcbn0gZnJvbSAnLi92aXNpdG9yJztcblxuZXhwb3J0IGNvbnN0IHNldEF0dHJpYnV0ZSA9IChcbiAgc3RhdGljQ3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0LFxuICBlbDogUXdpa0VsZW1lbnQsXG4gIHByb3A6IHN0cmluZyxcbiAgdmFsdWU6IGFueVxuKSA9PiB7XG4gIHN0YXRpY0N0eC4kb3BlcmF0aW9ucyQucHVzaCh7XG4gICAgJG9wZXJhdGlvbiQ6IF9zZXRBdHRyaWJ1dGUsXG4gICAgJGFyZ3MkOiBbZWwsIHByb3AsIHZhbHVlXSxcbiAgfSk7XG59O1xuXG5jb25zdCBfc2V0QXR0cmlidXRlID0gKGVsOiBRd2lrRWxlbWVudCwgcHJvcDogc3RyaW5nLCB2YWx1ZTogYW55KSA9PiB7XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlID09PSBmYWxzZSkge1xuICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShwcm9wKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBlbGVtZW50LnNldEF0dHJpYnV0ZSByZXF1aXJlcyBzdHJpbmcuIEJvb2xlYW4gYXR0cmlidXRlcyBhdXRvbWF0aWNhbGx5IGNvbnZlcnQgXCJcIiB0byBgdHJ1ZWBcbiAgICBjb25zdCBzdHIgPSB2YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogU3RyaW5nKHZhbHVlKTtcbiAgICBkaXJlY3RTZXRBdHRyaWJ1dGUoZWwsIHByb3AsIHN0cik7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBzZXRQcm9wZXJ0eSA9IChzdGF0aWNDdHg6IFJlbmRlclN0YXRpY0NvbnRleHQsIG5vZGU6IGFueSwga2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IHtcbiAgc3RhdGljQ3R4LiRvcGVyYXRpb25zJC5wdXNoKHtcbiAgICAkb3BlcmF0aW9uJDogX3NldFByb3BlcnR5LFxuICAgICRhcmdzJDogW25vZGUsIGtleSwgdmFsdWVdLFxuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXRQcm9wZXJ0eVBvc3QgPSAoXG4gIHN0YXRpY0N0eDogUmVuZGVyU3RhdGljQ29udGV4dCxcbiAgbm9kZTogYW55LFxuICBrZXk6IHN0cmluZyxcbiAgdmFsdWU6IGFueVxuKSA9PiB7XG4gIHN0YXRpY0N0eC4kcG9zdE9wZXJhdGlvbnMkLnB1c2goe1xuICAgICRvcGVyYXRpb24kOiBfc2V0UHJvcGVydHksXG4gICAgJGFyZ3MkOiBbbm9kZSwga2V5LCB2YWx1ZV0sXG4gIH0pO1xufTtcblxuY29uc3QgX3NldFByb3BlcnR5ID0gKG5vZGU6IGFueSwga2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IHtcbiAgdHJ5IHtcbiAgICBub2RlW2tleV0gPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCAmJiBpc05vZGUobm9kZSkgJiYgaXNFbGVtZW50KG5vZGUpKSB7XG4gICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nRXJyb3IoY29kZVRvVGV4dChRRXJyb3Jfc2V0UHJvcGVydHkpLCBrZXksIHsgbm9kZSwgdmFsdWUgfSwgZXJyKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUVsZW1lbnQgPSAoZG9jOiBEb2N1bWVudCwgZXhwZWN0VGFnOiBzdHJpbmcsIGlzU3ZnOiBib29sZWFuKTogRWxlbWVudCA9PiB7XG4gIGNvbnN0IGVsID0gaXNTdmcgPyBkb2MuY3JlYXRlRWxlbWVudE5TKFNWR19OUywgZXhwZWN0VGFnKSA6IGRvYy5jcmVhdGVFbGVtZW50KGV4cGVjdFRhZyk7XG5cbiAgcmV0dXJuIGVsO1xufTtcblxuZXhwb3J0IGNvbnN0IGluc2VydEJlZm9yZSA9IDxUIGV4dGVuZHMgTm9kZSB8IFZpcnR1YWxFbGVtZW50PihcbiAgc3RhdGljQ3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0LFxuICBwYXJlbnQ6IFF3aWtFbGVtZW50LFxuICBuZXdDaGlsZDogVCxcbiAgcmVmQ2hpbGQ6IE5vZGUgfCBWaXJ0dWFsRWxlbWVudCB8IG51bGwgfCB1bmRlZmluZWRcbik6IFQgPT4ge1xuICBzdGF0aWNDdHguJG9wZXJhdGlvbnMkLnB1c2goe1xuICAgICRvcGVyYXRpb24kOiBkaXJlY3RJbnNlcnRCZWZvcmUsXG4gICAgJGFyZ3MkOiBbcGFyZW50LCBuZXdDaGlsZCwgcmVmQ2hpbGQgPyByZWZDaGlsZCA6IG51bGxdLFxuICB9KTtcbiAgcmV0dXJuIG5ld0NoaWxkO1xufTtcblxuZXhwb3J0IGNvbnN0IGluc2VydEFmdGVyID0gPFQgZXh0ZW5kcyBOb2RlIHwgVmlydHVhbEVsZW1lbnQ+KFxuICBzdGF0aWNDdHg6IFJlbmRlclN0YXRpY0NvbnRleHQsXG4gIHBhcmVudDogUXdpa0VsZW1lbnQsXG4gIG5ld0NoaWxkOiBULFxuICByZWZDaGlsZDogTm9kZSB8IFZpcnR1YWxFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZFxuKTogVCA9PiB7XG4gIHN0YXRpY0N0eC4kb3BlcmF0aW9ucyQucHVzaCh7XG4gICAgJG9wZXJhdGlvbiQ6IGRpcmVjdEluc2VydEFmdGVyLFxuICAgICRhcmdzJDogW3BhcmVudCwgbmV3Q2hpbGQsIHJlZkNoaWxkID8gcmVmQ2hpbGQgOiBudWxsXSxcbiAgfSk7XG4gIHJldHVybiBuZXdDaGlsZDtcbn07XG5cbmV4cG9ydCBjb25zdCBhcHBlbmRDaGlsZCA9IDxUIGV4dGVuZHMgTm9kZSB8IFZpcnR1YWxFbGVtZW50PihcbiAgc3RhdGljQ3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0LFxuICBwYXJlbnQ6IFF3aWtFbGVtZW50LFxuICBuZXdDaGlsZDogVFxuKTogVCA9PiB7XG4gIHN0YXRpY0N0eC4kb3BlcmF0aW9ucyQucHVzaCh7XG4gICAgJG9wZXJhdGlvbiQ6IGRpcmVjdEFwcGVuZENoaWxkLFxuICAgICRhcmdzJDogW3BhcmVudCwgbmV3Q2hpbGRdLFxuICB9KTtcbiAgcmV0dXJuIG5ld0NoaWxkO1xufTtcblxuZXhwb3J0IGNvbnN0IGFwcGVuZEhlYWRTdHlsZSA9IChzdGF0aWNDdHg6IFJlbmRlclN0YXRpY0NvbnRleHQsIHN0eWxlVGFzazogU3R5bGVBcHBlbmQpID0+IHtcbiAgc3RhdGljQ3R4LiRjb250YWluZXJTdGF0ZSQuJHN0eWxlSWRzJC5hZGQoc3R5bGVUYXNrLnN0eWxlSWQpO1xuICBzdGF0aWNDdHguJHBvc3RPcGVyYXRpb25zJC5wdXNoKHtcbiAgICAkb3BlcmF0aW9uJDogX2FwcGVuZEhlYWRTdHlsZSxcbiAgICAkYXJncyQ6IFtzdGF0aWNDdHguJGNvbnRhaW5lclN0YXRlJCwgc3R5bGVUYXNrXSxcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3Qgc2V0Q2xhc3NsaXN0ID0gKFxuICBzdGF0aWNDdHg6IFJlbmRlclN0YXRpY0NvbnRleHQsXG4gIGVsbTogRWxlbWVudCxcbiAgdG9SZW1vdmU6IHN0cmluZ1tdLFxuICB0b0FkZDogc3RyaW5nW11cbikgPT4ge1xuICBzdGF0aWNDdHguJG9wZXJhdGlvbnMkLnB1c2goe1xuICAgICRvcGVyYXRpb24kOiBfc2V0Q2xhc3NsaXN0LFxuICAgICRhcmdzJDogW2VsbSwgdG9SZW1vdmUsIHRvQWRkXSxcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgX3NldENsYXNzbGlzdCA9IChlbG06IEVsZW1lbnQsIHRvUmVtb3ZlOiBzdHJpbmdbXSwgdG9BZGQ6IHN0cmluZ1tdKSA9PiB7XG4gIGNvbnN0IGNsYXNzTGlzdCA9IGVsbS5jbGFzc0xpc3Q7XG4gIGNsYXNzTGlzdC5yZW1vdmUoLi4udG9SZW1vdmUpO1xuICBjbGFzc0xpc3QuYWRkKC4uLnRvQWRkKTtcbn07XG5cbmV4cG9ydCBjb25zdCBfYXBwZW5kSGVhZFN0eWxlID0gKGNvbnRhaW5lclN0YXRlOiBDb250YWluZXJTdGF0ZSwgc3R5bGVUYXNrOiBTdHlsZUFwcGVuZCkgPT4ge1xuICBjb25zdCBjb250YWluZXJFbCA9IGNvbnRhaW5lclN0YXRlLiRjb250YWluZXJFbCQ7XG4gIGNvbnN0IGRvYyA9IGdldERvY3VtZW50KGNvbnRhaW5lckVsKTtcbiAgY29uc3QgaXNEb2MgPSBkb2MuZG9jdW1lbnRFbGVtZW50ID09PSBjb250YWluZXJFbDtcbiAgY29uc3QgaGVhZEVsID0gZG9jLmhlYWQ7XG4gIGNvbnN0IHN0eWxlID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIGlmIChpc0RvYyAmJiAhaGVhZEVsKSB7XG4gICAgbG9nV2FybignZG9jdW1lbnQuaGVhZCBpcyB1bmRlZmluZWQnKTtcbiAgfVxuICBkaXJlY3RTZXRBdHRyaWJ1dGUoc3R5bGUsIFFTdHlsZSwgc3R5bGVUYXNrLnN0eWxlSWQpO1xuICBkaXJlY3RTZXRBdHRyaWJ1dGUoc3R5bGUsICdoaWRkZW4nLCAnJyk7XG5cbiAgc3R5bGUudGV4dENvbnRlbnQgPSBzdHlsZVRhc2suY29udGVudDtcbiAgaWYgKGlzRG9jICYmIGhlYWRFbCkge1xuICAgIGRpcmVjdEFwcGVuZENoaWxkKGhlYWRFbCwgc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIGRpcmVjdEluc2VydEJlZm9yZShjb250YWluZXJFbCwgc3R5bGUsIGNvbnRhaW5lckVsLmZpcnN0Q2hpbGQpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcHJlcGVuZCA9IChzdGF0aWNDdHg6IFJlbmRlclN0YXRpY0NvbnRleHQsIHBhcmVudDogUXdpa0VsZW1lbnQsIG5ld0NoaWxkOiBOb2RlKSA9PiB7XG4gIHN0YXRpY0N0eC4kb3BlcmF0aW9ucyQucHVzaCh7XG4gICAgJG9wZXJhdGlvbiQ6IGRpcmVjdFByZXBlbmQsXG4gICAgJGFyZ3MkOiBbcGFyZW50LCBuZXdDaGlsZF0sXG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGRpcmVjdFByZXBlbmQgPSAocGFyZW50OiBRd2lrRWxlbWVudCwgbmV3Q2hpbGQ6IE5vZGUpID0+IHtcbiAgZGlyZWN0SW5zZXJ0QmVmb3JlKHBhcmVudCwgbmV3Q2hpbGQsIHBhcmVudC5maXJzdENoaWxkKTtcbn07XG5cbmV4cG9ydCBjb25zdCByZW1vdmVOb2RlID0gKHN0YXRpY0N0eDogUmVuZGVyU3RhdGljQ29udGV4dCwgZWw6IE5vZGUgfCBWaXJ0dWFsRWxlbWVudCkgPT4ge1xuICBpZiAoaXNRd2lrRWxlbWVudChlbCkpIHtcbiAgICBjb25zdCBzdWJzTWFuYWdlciA9IHN0YXRpY0N0eC4kY29udGFpbmVyU3RhdGUkLiRzdWJzTWFuYWdlciQ7XG4gICAgY2xlYW51cFRyZWUoZWwgYXMgRWxlbWVudCwgc3RhdGljQ3R4LCBzdWJzTWFuYWdlciwgdHJ1ZSk7XG4gIH1cbiAgc3RhdGljQ3R4LiRvcGVyYXRpb25zJC5wdXNoKHtcbiAgICAkb3BlcmF0aW9uJDogX3JlbW92ZU5vZGUsXG4gICAgJGFyZ3MkOiBbZWwsIHN0YXRpY0N0eF0sXG4gIH0pO1xufTtcblxuY29uc3QgX3JlbW92ZU5vZGUgPSAoZWw6IE5vZGUgfCBWaXJ0dWFsRWxlbWVudCwgc3RhdGljQ3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0KSA9PiB7XG4gIGNvbnN0IHBhcmVudCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gIGlmIChwYXJlbnQpIHtcbiAgICBkaXJlY3RSZW1vdmVDaGlsZChwYXJlbnQsIGVsKTtcbiAgfSBlbHNlIGlmIChxRGV2KSB7XG4gICAgbG9nV2FybignVHJ5aW5nIHRvIHJlbW92ZSBjb21wb25lbnQgYWxyZWFkeSByZW1vdmVkJywgZWwpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlVGVtcGxhdGUgPSAoZG9jOiBEb2N1bWVudCwgc2xvdE5hbWU6IHN0cmluZykgPT4ge1xuICBjb25zdCB0ZW1wbGF0ZSA9IGNyZWF0ZUVsZW1lbnQoZG9jLCAncTp0ZW1wbGF0ZScsIGZhbHNlKTtcbiAgZGlyZWN0U2V0QXR0cmlidXRlKHRlbXBsYXRlLCBRU2xvdCwgc2xvdE5hbWUpO1xuICBkaXJlY3RTZXRBdHRyaWJ1dGUodGVtcGxhdGUsICdoaWRkZW4nLCAnJyk7XG4gIGRpcmVjdFNldEF0dHJpYnV0ZSh0ZW1wbGF0ZSwgJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcblxuICByZXR1cm4gdGVtcGxhdGU7XG59O1xuXG5leHBvcnQgY29uc3QgZXhlY3V0ZURPTVJlbmRlciA9IChzdGF0aWNDdHg6IFJlbmRlclN0YXRpY0NvbnRleHQpID0+IHtcbiAgZm9yIChjb25zdCBvcCBvZiBzdGF0aWNDdHguJG9wZXJhdGlvbnMkKSB7XG4gICAgLy8gUEVSRihtaXNrbyk6IHBvbHltb3JwaGljIGV4ZWN1dGlvblxuICAgIG9wLiRvcGVyYXRpb24kLmFwcGx5KHVuZGVmaW5lZCwgb3AuJGFyZ3MkKTtcbiAgfVxuICByZXNvbHZlU2xvdFByb2plY3Rpb24oc3RhdGljQ3R4KTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRLZXkgPSAoZWw6IFF3aWtFbGVtZW50KTogc3RyaW5nIHwgbnVsbCA9PiB7XG4gIHJldHVybiBkaXJlY3RHZXRBdHRyaWJ1dGUoZWwsICdxOmtleScpO1xufTtcblxuZXhwb3J0IGNvbnN0IHNldEtleSA9IChlbDogUXdpa0VsZW1lbnQsIGtleTogc3RyaW5nIHwgbnVsbCkgPT4ge1xuICBpZiAoa2V5ICE9PSBudWxsKSB7XG4gICAgZGlyZWN0U2V0QXR0cmlidXRlKGVsLCAncTprZXknLCBrZXkpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcmVzb2x2ZVNsb3RQcm9qZWN0aW9uID0gKHN0YXRpY0N0eDogUmVuZGVyU3RhdGljQ29udGV4dCkgPT4ge1xuICAvLyBTbG90cyByZW1vdmVkXG4gIGNvbnN0IHN1YnNNYW5hZ2VyID0gc3RhdGljQ3R4LiRjb250YWluZXJTdGF0ZSQuJHN1YnNNYW5hZ2VyJDtcbiAgZm9yIChjb25zdCBzbG90RWwgb2Ygc3RhdGljQ3R4LiRybVNsb3RzJCkge1xuICAgIGNvbnN0IGtleSA9IGdldEtleShzbG90RWwpO1xuICAgIGFzc2VydERlZmluZWQoa2V5LCAnc2xvdHMgbXVzdCBoYXZlIGEga2V5Jyk7XG5cbiAgICBjb25zdCBzbG90Q2hpbGRyZW4gPSBnZXRDaGlsZHJlbihzbG90RWwsIGlzQ2hpbGRDb21wb25lbnQpO1xuICAgIGlmIChzbG90Q2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3Qgc3JlZiA9IHNsb3RFbC5nZXRBdHRyaWJ1dGUoUVNsb3RSZWYpO1xuICAgICAgY29uc3QgaG9zdEN0eCA9IHN0YXRpY0N0eC4kcm9vdHMkLmZpbmQoKHIpID0+IHIuJGlkJCA9PT0gc3JlZik7XG4gICAgICBpZiAoaG9zdEN0eCkge1xuICAgICAgICBjb25zdCBob3N0RWxtID0gaG9zdEN0eC4kZWxlbWVudCQ7XG4gICAgICAgIGlmIChob3N0RWxtLmlzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgY29uc3QgaGFzVGVtcGxhdGUgPSBnZXRDaGlsZHJlbihob3N0RWxtLCBpc1Nsb3RUZW1wbGF0ZSkuc29tZShcbiAgICAgICAgICAgIChub2RlOiBhbnkpID0+IGRpcmVjdEdldEF0dHJpYnV0ZShub2RlLCBRU2xvdCkgPT09IGtleVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBpZiAoIWhhc1RlbXBsYXRlKSB7XG4gICAgICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGNyZWF0ZVRlbXBsYXRlKHN0YXRpY0N0eC4kZG9jJCwga2V5KTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2Ygc2xvdENoaWxkcmVuKSB7XG4gICAgICAgICAgICAgIGRpcmVjdEFwcGVuZENoaWxkKHRlbXBsYXRlLCBjaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXJlY3RJbnNlcnRCZWZvcmUoaG9zdEVsbSwgdGVtcGxhdGUsIGhvc3RFbG0uZmlyc3RDaGlsZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsZWFudXBUcmVlKHNsb3RFbCwgc3RhdGljQ3R4LCBzdWJzTWFuYWdlciwgZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjbGVhbnVwVHJlZShzbG90RWwsIHN0YXRpY0N0eCwgc3Vic01hbmFnZXIsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgc2xvdCBjb250ZW50IGNhbm5vdCBiZSByZWxvY2F0ZWQsIGl0IG1lYW5zIGl0J3MgY29udGVudCBpcyBkZWZpbml0ZWx5IHJlbW92ZWRcbiAgICAgICAgLy8gQ2xlYW51cCBuZWVkcyB0byBiZSBleGVjdXRlZFxuICAgICAgICBjbGVhbnVwVHJlZShzbG90RWwsIHN0YXRpY0N0eCwgc3Vic01hbmFnZXIsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBTbG90cyBhZGRlZFxuICBmb3IgKGNvbnN0IFtzbG90RWwsIGhvc3RFbG1dIG9mIHN0YXRpY0N0eC4kYWRkU2xvdHMkKSB7XG4gICAgY29uc3Qga2V5ID0gZ2V0S2V5KHNsb3RFbCk7XG4gICAgYXNzZXJ0RGVmaW5lZChrZXksICdzbG90cyBtdXN0IGhhdmUgYSBrZXknKTtcblxuICAgIGNvbnN0IHRlbXBsYXRlID0gZ2V0Q2hpbGRyZW4oaG9zdEVsbSwgaXNTbG90VGVtcGxhdGUpLmZpbmQoKG5vZGU6IGFueSkgPT4ge1xuICAgICAgcmV0dXJuIG5vZGUuZ2V0QXR0cmlidXRlKFFTbG90KSA9PT0ga2V5O1xuICAgIH0pIGFzIEVsZW1lbnQgfCB1bmRlZmluZWQ7XG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICBnZXRDaGlsZHJlbih0ZW1wbGF0ZSwgaXNDaGlsZENvbXBvbmVudCkuZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgZGlyZWN0QXBwZW5kQ2hpbGQoc2xvdEVsLCBjaGlsZCk7XG4gICAgICB9KTtcbiAgICAgIHRlbXBsYXRlLnJlbW92ZSgpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHByaW50UmVuZGVyU3RhdHMgPSAoc3RhdGljQ3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0KSA9PiB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAhPSBudWxsKSB7XG4gICAgICBjb25zdCBieU9wOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge307XG4gICAgICBmb3IgKGNvbnN0IG9wIG9mIHN0YXRpY0N0eC4kb3BlcmF0aW9ucyQpIHtcbiAgICAgICAgYnlPcFtvcC4kb3BlcmF0aW9uJC5uYW1lXSA9IChieU9wW29wLiRvcGVyYXRpb24kLm5hbWVdID8/IDApICsgMTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN0YXRzID0ge1xuICAgICAgICBieU9wLFxuICAgICAgICByb290czogc3RhdGljQ3R4LiRyb290cyQubWFwKChjdHgpID0+IGN0eC4kZWxlbWVudCQpLFxuICAgICAgICBob3N0RWxlbWVudHM6IEFycmF5LmZyb20oc3RhdGljQ3R4LiRob3N0RWxlbWVudHMkKSxcbiAgICAgICAgb3BlcmF0aW9uczogc3RhdGljQ3R4LiRvcGVyYXRpb25zJC5tYXAoKHYpID0+IFt2LiRvcGVyYXRpb24kLm5hbWUsIC4uLnYuJGFyZ3MkXSksXG4gICAgICB9O1xuICAgICAgY29uc3Qgbm9PcHMgPSBzdGF0aWNDdHguJG9wZXJhdGlvbnMkLmxlbmd0aCA9PT0gMDtcbiAgICAgIGxvZ0RlYnVnKCdSZW5kZXIgc3RhdHMuJywgbm9PcHMgPyAnTm8gb3BlcmF0aW9ucycgOiAnJywgc3RhdHMpO1xuICAgIH1cbiAgfVxufTtcbiJdfQ==","import { assertEqual, assertFail, assertTrue } from '../../error/assert';\nimport { VIRTUAL_SYMBOL } from '../../state/constants';\nimport { isComment, isElement, isNodeElement, isQwikElement, isVirtualElement, } from '../../util/element';\nimport { qSerialize, seal } from '../../util/qdev';\nimport { directGetAttribute } from '../fast-calls';\nimport { createElement } from './operations';\nimport { SVG_NS, getChildren } from './visitor';\nexport const newVirtualElement = (doc, isSvg) => {\n    const open = doc.createComment('qv ');\n    const close = doc.createComment('/qv');\n    return new VirtualElementImpl(open, close, isSvg);\n};\nexport const parseVirtualAttributes = (str) => {\n    if (!str) {\n        return {};\n    }\n    const attributes = str.split(' ');\n    return Object.fromEntries(attributes.map((attr) => {\n        const index = attr.indexOf('=');\n        if (index >= 0) {\n            return [attr.slice(0, index), unescape(attr.slice(index + 1))];\n        }\n        else {\n            return [attr, ''];\n        }\n    }));\n};\nexport const serializeVirtualAttributes = (map) => {\n    const attributes = [];\n    Object.entries(map).forEach(([key, value]) => {\n        if (!value) {\n            attributes.push(`${key}`);\n        }\n        else {\n            attributes.push(`${key}=${escape(value)}`);\n        }\n    });\n    return attributes.join(' ');\n};\nconst SHOW_COMMENT = 128;\nconst FILTER_ACCEPT = 1;\nconst FILTER_REJECT = 2;\nexport const walkerVirtualByAttribute = (el, prop, value) => {\n    return el.ownerDocument.createTreeWalker(el, SHOW_COMMENT, {\n        acceptNode(c) {\n            const virtual = getVirtualElement(c);\n            if (virtual) {\n                return directGetAttribute(virtual, prop) === value ? FILTER_ACCEPT : FILTER_REJECT;\n            }\n            return FILTER_REJECT;\n        },\n    });\n};\nexport const queryVirtualByAttribute = (el, prop, value) => {\n    const walker = walkerVirtualByAttribute(el, prop, value);\n    const open = walker.firstChild();\n    if (open) {\n        return getVirtualElement(open);\n    }\n    return null;\n};\nexport const queryAllVirtualByAttribute = (el, prop, value) => {\n    const walker = walkerVirtualByAttribute(el, prop, value);\n    const pars = [];\n    let currentNode = null;\n    while ((currentNode = walker.nextNode())) {\n        pars.push(getVirtualElement(currentNode));\n    }\n    return pars;\n};\nexport const escape = (s) => {\n    return s.replace(/ /g, '+');\n};\nexport const unescape = (s) => {\n    return s.replace(/\\+/g, ' ');\n};\nexport const VIRTUAL = ':virtual';\nexport class VirtualElementImpl {\n    constructor(open, close, isSvg) {\n        this.open = open;\n        this.close = close;\n        this.isSvg = isSvg;\n        this._qc_ = null;\n        this.nodeType = 111;\n        this.localName = VIRTUAL;\n        this.nodeName = VIRTUAL;\n        throw new Error('SHOULD NOT BE CALLED');\n        const doc = (this.ownerDocument = open.ownerDocument);\n        this.$template$ = createElement(doc, 'template', false);\n        this.$attributes$ = parseVirtualAttributes(open.data.slice(3));\n        assertTrue(open.data.startsWith('qv '), 'comment is not a qv');\n        open[VIRTUAL_SYMBOL] = this;\n        close[VIRTUAL_SYMBOL] = this;\n        seal(this);\n    }\n    insertBefore(node, ref) {\n        const parent = this.parentElement;\n        if (parent) {\n            const ref2 = ref ? ref : this.close;\n            parent.insertBefore(node, ref2);\n        }\n        else {\n            this.$template$.insertBefore(node, ref);\n        }\n        return node;\n    }\n    remove() {\n        const parent = this.parentElement;\n        if (parent) {\n            const ch = this.childNodes;\n            assertEqual(this.$template$.childElementCount, 0, 'children should be empty');\n            parent.removeChild(this.open);\n            for (let i = 0; i < ch.length; i++) {\n                this.$template$.appendChild(ch[i]);\n            }\n            parent.removeChild(this.close);\n        }\n    }\n    appendChild(node) {\n        return this.insertBefore(node, null);\n    }\n    insertBeforeTo(newParent, child) {\n        // const ch = this.childNodes;\n        const ch = this.childNodes;\n        // TODO\n        // if (this.parentElement) {\n        //   console.warn('already attached');\n        // }\n        newParent.insertBefore(this.open, child);\n        for (const c of ch) {\n            newParent.insertBefore(c, child);\n        }\n        newParent.insertBefore(this.close, child);\n        assertEqual(this.$template$.childElementCount, 0, 'children should be empty');\n    }\n    appendTo(newParent) {\n        this.insertBeforeTo(newParent, null);\n    }\n    get namespaceURI() {\n        return this.parentElement?.namespaceURI ?? '';\n    }\n    removeChild(child) {\n        if (this.parentElement) {\n            this.parentElement.removeChild(child);\n        }\n        else {\n            this.$template$.removeChild(child);\n        }\n    }\n    getAttribute(prop) {\n        return this.$attributes$[prop] ?? null;\n    }\n    hasAttribute(prop) {\n        return prop in this.$attributes$;\n    }\n    setAttribute(prop, value) {\n        this.$attributes$[prop] = value;\n        if (qSerialize) {\n            this.open.data = updateComment(this.$attributes$);\n        }\n    }\n    removeAttribute(prop) {\n        delete this.$attributes$[prop];\n        if (qSerialize) {\n            this.open.data = updateComment(this.$attributes$);\n        }\n    }\n    matches(_) {\n        return false;\n    }\n    compareDocumentPosition(other) {\n        return this.open.compareDocumentPosition(other);\n    }\n    closest(query) {\n        const parent = this.parentElement;\n        if (parent) {\n            return parent.closest(query);\n        }\n        return null;\n    }\n    querySelectorAll(query) {\n        const result = [];\n        const ch = getChildren(this, isNodeElement);\n        ch.forEach((el) => {\n            if (isQwikElement(el)) {\n                if (el.matches(query)) {\n                    result.push(el);\n                }\n                result.concat(Array.from(el.querySelectorAll(query)));\n            }\n        });\n        return result;\n    }\n    querySelector(query) {\n        for (const el of this.childNodes) {\n            if (isElement(el)) {\n                if (el.matches(query)) {\n                    return el;\n                }\n                const v = el.querySelector(query);\n                if (v !== null) {\n                    return v;\n                }\n            }\n        }\n        return null;\n    }\n    get innerHTML() {\n        return '';\n    }\n    set innerHTML(html) {\n        const parent = this.parentElement;\n        if (parent) {\n            this.childNodes.forEach((a) => this.removeChild(a));\n            this.$template$.innerHTML = html;\n            parent.insertBefore(this.$template$.content, this.close);\n        }\n        else {\n            this.$template$.innerHTML = html;\n        }\n    }\n    get firstChild() {\n        if (this.parentElement) {\n            const first = this.open.nextSibling;\n            if (first === this.close) {\n                return null;\n            }\n            return first;\n        }\n        else {\n            return this.$template$.firstChild;\n        }\n    }\n    get nextSibling() {\n        return this.close.nextSibling;\n    }\n    get previousSibling() {\n        return this.open.previousSibling;\n    }\n    get childNodes() {\n        if (!this.parentElement) {\n            return Array.from(this.$template$.childNodes);\n        }\n        const nodes = [];\n        let node = this.open;\n        while ((node = node.nextSibling)) {\n            if (node === this.close) {\n                break;\n            }\n            nodes.push(node);\n        }\n        return nodes;\n    }\n    get isConnected() {\n        return this.open.isConnected;\n    }\n    /** The DOM parent element (not the vDOM parent, use findVirtual for that) */\n    get parentElement() {\n        return this.open.parentElement;\n    }\n}\nconst updateComment = (attributes) => {\n    return `qv ${serializeVirtualAttributes(attributes)}`;\n};\nexport const processVirtualNodes = (node) => {\n    if (node == null) {\n        return null;\n    }\n    if (isComment(node)) {\n        const virtual = getVirtualElement(node);\n        if (virtual) {\n            return virtual;\n        }\n    }\n    return node;\n};\nconst findClose = (open) => {\n    let node = open;\n    let stack = 1;\n    while ((node = node.nextSibling)) {\n        if (isComment(node)) {\n            // We don't want to resume virtual nodes but if they're already resumed, use them\n            const virtual = node[VIRTUAL_SYMBOL];\n            if (virtual) {\n                // This is not our existing virtual node because otherwise findClose wouldn't have been called\n                node = virtual;\n            }\n            else if (node.data.startsWith('qv ')) {\n                stack++;\n            }\n            else if (node.data === '/qv') {\n                stack--;\n                if (stack === 0) {\n                    return node;\n                }\n            }\n        }\n    }\n    assertFail('close not found');\n};\nexport const getVirtualElement = (open) => {\n    const virtual = open[VIRTUAL_SYMBOL];\n    if (virtual) {\n        return virtual;\n    }\n    if (open.data.startsWith('qv ')) {\n        const close = findClose(open);\n        return new VirtualElementImpl(open, close, open.parentElement?.namespaceURI === SVG_NS);\n    }\n    return null;\n};\nexport const getRootNode = (node) => {\n    if (node == null) {\n        return null; // TODO\n    }\n    if (isVirtualElement(node)) {\n        return node.open;\n    }\n    else {\n        return node;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertTrue } from '../error/assert';\nimport { qError, QError_invalidContext, QError_notFoundContext } from '../error/error';\nimport { getVirtualElement, } from '../render/dom/virtual-element';\nimport { verifySerializable } from '../state/common';\nimport { Q_CTX, VIRTUAL_SYMBOL } from '../state/constants';\nimport { getContext } from '../state/context';\nimport { isComment } from '../util/element';\nimport { qDev, qSerialize } from '../util/qdev';\nimport { isObject } from '../util/types';\nimport { fromCamelToKebabCase } from '../v2/shared/event-names';\nimport { invoke } from './use-core';\nimport { useSequentialScope } from './use-sequential-scope';\n// <docs markdown=\"../readme.md#createContextId\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#createContextId instead)\n/**\n * Create a context ID to be used in your application. The name should be written with no spaces.\n *\n * Context is a way to pass stores to the child components without prop-drilling.\n *\n * Use `createContextId()` to create a `ContextId`. A `ContextId` is just a serializable identifier\n * for the context. It is not the context value itself. See `useContextProvider()` and\n * `useContext()` for the values. Qwik needs a serializable ID for the context so that the it can\n * track context providers and consumers in a way that survives resumability.\n *\n * ### Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContextId<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n *\n * @param name - The name of the context.\n * @public\n */\n// </docs>\nexport const createContextId = (name) => {\n    assertTrue(/^[\\w/.-]+$/.test(name), 'Context name must only contain A-Z,a-z,0-9, _', name);\n    return /*#__PURE__*/ Object.freeze({\n        id: fromCamelToKebabCase(name),\n    });\n};\n// <docs markdown=\"../readme.md#useContextProvider\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useContextProvider instead)\n/**\n * Assign a value to a Context.\n *\n * Use `useContextProvider()` to assign a value to a context. The assignment happens in the\n * component's function. Once assigned, use `useContext()` in any child component to retrieve the\n * value.\n *\n * Context is a way to pass stores to the child components without prop-drilling. Note that scalar\n * values are allowed, but for reactivity you need signals or stores.\n *\n * ### Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContextId<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n *\n * @param context - The context to assign a value to.\n * @param value - The value to assign to the context.\n * @public\n */\n// </docs>\nexport const useContextProvider = (context, newValue) => {\n    const { val, set, elCtx, iCtx } = useSequentialScope();\n    if (val !== undefined) {\n        return;\n    }\n    if (qDev) {\n        validateContext(context);\n    }\n    if (qDev && qSerialize) {\n        verifySerializable(newValue);\n    }\n    if (iCtx.$container2$) {\n        iCtx.$container2$.setContext(iCtx.$hostElement$, context, newValue);\n    }\n    else {\n        const contexts = (elCtx.$contexts$ || (elCtx.$contexts$ = new Map()));\n        contexts.set(context.id, newValue);\n    }\n    set(1);\n};\n// <docs markdown=\"../readme.md#useContext\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useContext instead)\n/**\n * Retrieve Context value.\n *\n * Use `useContext()` to retrieve the value of context in a component. To retrieve a value a parent\n * component needs to invoke `useContextProvider()` to assign a value.\n *\n * ### Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContextId<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n *\n * @param context - The context to retrieve a value from.\n * @public\n */\n// </docs>\nexport const useContext = (context, defaultValue) => {\n    const { val, set, iCtx, elCtx } = useSequentialScope();\n    if (val !== undefined) {\n        return val;\n    }\n    if (qDev) {\n        validateContext(context);\n    }\n    let value;\n    if (iCtx.$container2$) {\n        value = iCtx.$container2$.resolveContext(iCtx.$hostElement$, context);\n    }\n    else {\n        value = resolveContext(context, elCtx, iCtx.$renderCtx$.$static$.$containerState$);\n    }\n    if (typeof defaultValue === 'function') {\n        return set(invoke(undefined, defaultValue, value));\n    }\n    if (value !== undefined) {\n        return set(value);\n    }\n    if (defaultValue !== undefined) {\n        return set(defaultValue);\n    }\n    throw qError(QError_notFoundContext, context.id);\n};\n/** Find a wrapping Virtual component in the DOM */\nconst findParentCtx = (el, containerState) => {\n    let node = el;\n    let stack = 1;\n    while (node && !node.hasAttribute?.('q:container')) {\n        // Walk the siblings backwards, each comment might be the Virtual wrapper component\n        while ((node = node.previousSibling)) {\n            if (isComment(node)) {\n                const virtual = node[VIRTUAL_SYMBOL];\n                if (virtual) {\n                    const qtx = virtual[Q_CTX];\n                    if (node === virtual.open) {\n                        // We started inside this node so this is our parent\n                        return qtx ?? getContext(virtual, containerState);\n                    }\n                    // This is a sibling, check if it knows our parent\n                    if (qtx?.$parentCtx$) {\n                        return qtx.$parentCtx$;\n                    }\n                    // Skip over this entire virtual sibling\n                    node = virtual;\n                    continue;\n                }\n                if (node.data === '/qv') {\n                    stack++;\n                }\n                else if (node.data.startsWith('qv ')) {\n                    stack--;\n                    if (stack === 0) {\n                        return getContext(getVirtualElement(node), containerState);\n                    }\n                }\n            }\n        }\n        // No more siblings, walk up the DOM tree. The parent will never be a Virtual component.\n        node = el.parentElement;\n        el = node;\n    }\n    return null;\n};\nconst getParentProvider = (ctx, containerState) => {\n    // `null` means there's no parent, `undefined` means we don't know yet.\n    if (ctx.$parentCtx$ === undefined) {\n        // Not fully resumed container, find context from DOM\n        // We cannot recover $realParentCtx$ from this but that's fine because we don't need to pause on the client\n        ctx.$parentCtx$ = findParentCtx(ctx.$element$, containerState);\n    }\n    /**\n     * Note, the parentCtx is used during pause to to get the immediate parent, so we can't shortcut\n     * the search for $contexts$ here. If that turns out to be needed, it needs to be cached in a\n     * separate property.\n     */\n    return ctx.$parentCtx$;\n};\nexport const resolveContext = (context, hostCtx, containerState) => {\n    const contextID = context.id;\n    if (!hostCtx) {\n        return;\n    }\n    let ctx = hostCtx;\n    while (ctx) {\n        const found = ctx.$contexts$?.get(contextID);\n        if (found) {\n            return found;\n        }\n        ctx = getParentProvider(ctx, containerState);\n    }\n};\nexport const validateContext = (context) => {\n    if (!isObject(context) || typeof context.id !== 'string' || context.id.length === 0) {\n        throw qError(QError_invalidContext, context);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { isServerPlatform } from '../platform/platform';\nimport { tryGetContext } from '../state/context';\nimport { createContextId, resolveContext } from '../use/use-context';\nimport { isVirtualElement } from '../util/element';\nimport { qDev } from '../util/qdev';\nexport const ERROR_CONTEXT = /*#__PURE__*/ createContextId('qk-error');\nexport const handleError = (err, hostElement, containerState) => {\n    const elCtx = tryGetContext(hostElement);\n    if (qDev) {\n        // Clean vdom\n        if (!isServerPlatform() && typeof document !== 'undefined' && isVirtualElement(hostElement)) {\n            // (hostElement as any).$vdom$ = null;\n            elCtx.$vdom$ = null;\n            const errorDiv = document.createElement('errored-host');\n            if (err && err instanceof Error) {\n                errorDiv.props = { error: err };\n            }\n            errorDiv.setAttribute('q:key', '_error_');\n            errorDiv.append(...hostElement.childNodes);\n            hostElement.appendChild(errorDiv);\n        }\n        if (err && err instanceof Error) {\n            if (!('hostElement' in err)) {\n                err['hostElement'] = hostElement;\n            }\n        }\n        if (!isRecoverable(err)) {\n            throw err;\n        }\n    }\n    if (isServerPlatform()) {\n        throw err;\n    }\n    else {\n        const errorStore = resolveContext(ERROR_CONTEXT, elCtx, containerState);\n        if (errorStore === undefined) {\n            throw err;\n        }\n        errorStore.error = err;\n    }\n};\nexport const isRecoverable = (err) => {\n    if (err && err instanceof Error) {\n        if ('plugin' in err) {\n            return false;\n        }\n    }\n    return true;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItaGFuZGxpbmcuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2Vycm9yLWhhbmRsaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFRcEMsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLGFBQWEsQ0FBQyxlQUFlLENBQXFCLFVBQVUsQ0FBQyxDQUFDO0FBRTNGLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLEdBQVEsRUFBRSxXQUF3QixFQUFFLGNBQThCLEVBQUUsRUFBRTtJQUNoRyxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFFLENBQUM7SUFDMUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNULGFBQWE7UUFDYixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxPQUFPLFFBQVEsS0FBSyxXQUFXLElBQUksZ0JBQWdCLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztZQUM1RixzQ0FBc0M7WUFDdEMsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7WUFDcEIsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUN4RCxJQUFJLEdBQUcsSUFBSSxHQUFHLFlBQVksS0FBSyxFQUFFLENBQUM7Z0JBQy9CLFFBQWdCLENBQUMsS0FBSyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDO1lBQzNDLENBQUM7WUFDRCxRQUFRLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztZQUMxQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzNDLFdBQVcsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEMsQ0FBQztRQUVELElBQUksR0FBRyxJQUFJLEdBQUcsWUFBWSxLQUFLLEVBQUUsQ0FBQztZQUNoQyxJQUFJLENBQUMsQ0FBQyxhQUFhLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDM0IsR0FBVyxDQUFDLGFBQWEsQ0FBQyxHQUFHLFdBQVcsQ0FBQztZQUM1QyxDQUFDO1FBQ0gsQ0FBQztRQUNELElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUN4QixNQUFNLEdBQUcsQ0FBQztRQUNaLENBQUM7SUFDSCxDQUFDO0lBQ0QsSUFBSSxnQkFBZ0IsRUFBRSxFQUFFLENBQUM7UUFDdkIsTUFBTSxHQUFHLENBQUM7SUFDWixDQUFDO1NBQU0sQ0FBQztRQUNOLE1BQU0sVUFBVSxHQUFHLGNBQWMsQ0FBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ3hFLElBQUksVUFBVSxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQzdCLE1BQU0sR0FBRyxDQUFDO1FBQ1osQ0FBQztRQUNELFVBQVUsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO0lBQ3pCLENBQUM7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxHQUFRLEVBQUUsRUFBRTtJQUN4QyxJQUFJLEdBQUcsSUFBSSxHQUFHLFlBQVksS0FBSyxFQUFFLENBQUM7UUFDaEMsSUFBSSxRQUFRLElBQUksR0FBRyxFQUFFLENBQUM7WUFDcEIsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO0lBQ0gsQ0FBQztJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDb250YWluZXJTdGF0ZSB9IGZyb20gJy4uL2NvbnRhaW5lci9jb250YWluZXInO1xuaW1wb3J0IHsgaXNTZXJ2ZXJQbGF0Zm9ybSB9IGZyb20gJy4uL3BsYXRmb3JtL3BsYXRmb3JtJztcbmltcG9ydCB7IHRyeUdldENvbnRleHQgfSBmcm9tICcuLi9zdGF0ZS9jb250ZXh0JztcbmltcG9ydCB7IGNyZWF0ZUNvbnRleHRJZCwgcmVzb2x2ZUNvbnRleHQgfSBmcm9tICcuLi91c2UvdXNlLWNvbnRleHQnO1xuaW1wb3J0IHsgaXNWaXJ0dWFsRWxlbWVudCB9IGZyb20gJy4uL3V0aWwvZWxlbWVudCc7XG5pbXBvcnQgeyBxRGV2IH0gZnJvbSAnLi4vdXRpbC9xZGV2JztcbmltcG9ydCB0eXBlIHsgUXdpa0VsZW1lbnQgfSBmcm9tICcuL2RvbS92aXJ0dWFsLWVsZW1lbnQnO1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGludGVyZmFjZSBFcnJvckJvdW5kYXJ5U3RvcmUge1xuICBlcnJvcjogYW55IHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgY29uc3QgRVJST1JfQ09OVEVYVCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlQ29udGV4dElkPEVycm9yQm91bmRhcnlTdG9yZT4oJ3FrLWVycm9yJyk7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVFcnJvciA9IChlcnI6IGFueSwgaG9zdEVsZW1lbnQ6IFF3aWtFbGVtZW50LCBjb250YWluZXJTdGF0ZTogQ29udGFpbmVyU3RhdGUpID0+IHtcbiAgY29uc3QgZWxDdHggPSB0cnlHZXRDb250ZXh0KGhvc3RFbGVtZW50KSE7XG4gIGlmIChxRGV2KSB7XG4gICAgLy8gQ2xlYW4gdmRvbVxuICAgIGlmICghaXNTZXJ2ZXJQbGF0Zm9ybSgpICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNWaXJ0dWFsRWxlbWVudChob3N0RWxlbWVudCkpIHtcbiAgICAgIC8vIChob3N0RWxlbWVudCBhcyBhbnkpLiR2ZG9tJCA9IG51bGw7XG4gICAgICBlbEN0eC4kdmRvbSQgPSBudWxsO1xuICAgICAgY29uc3QgZXJyb3JEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdlcnJvcmVkLWhvc3QnKTtcbiAgICAgIGlmIChlcnIgJiYgZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgKGVycm9yRGl2IGFzIGFueSkucHJvcHMgPSB7IGVycm9yOiBlcnIgfTtcbiAgICAgIH1cbiAgICAgIGVycm9yRGl2LnNldEF0dHJpYnV0ZSgncTprZXknLCAnX2Vycm9yXycpO1xuICAgICAgZXJyb3JEaXYuYXBwZW5kKC4uLmhvc3RFbGVtZW50LmNoaWxkTm9kZXMpO1xuICAgICAgaG9zdEVsZW1lbnQuYXBwZW5kQ2hpbGQoZXJyb3JEaXYpO1xuICAgIH1cblxuICAgIGlmIChlcnIgJiYgZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIGlmICghKCdob3N0RWxlbWVudCcgaW4gZXJyKSkge1xuICAgICAgICAoZXJyIGFzIGFueSlbJ2hvc3RFbGVtZW50J10gPSBob3N0RWxlbWVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFpc1JlY292ZXJhYmxlKGVycikpIHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH1cbiAgaWYgKGlzU2VydmVyUGxhdGZvcm0oKSkge1xuICAgIHRocm93IGVycjtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBlcnJvclN0b3JlID0gcmVzb2x2ZUNvbnRleHQoRVJST1JfQ09OVEVYVCwgZWxDdHgsIGNvbnRhaW5lclN0YXRlKTtcbiAgICBpZiAoZXJyb3JTdG9yZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIGVycm9yU3RvcmUuZXJyb3IgPSBlcnI7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBpc1JlY292ZXJhYmxlID0gKGVycjogYW55KSA9PiB7XG4gIGlmIChlcnIgJiYgZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICBpZiAoJ3BsdWdpbicgaW4gZXJyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufTtcbiJdfQ==","import { intToStr, strToInt } from '../container/container';\nimport { assertDefined, assertEqual } from '../error/assert';\nimport { QError_trackUseStore, codeToText } from '../error/error';\nimport { isServerPlatform } from '../platform/platform';\nimport { assertQrl, assertSignal, createQRL } from '../qrl/qrl-class';\nimport { _hW, notifyTask } from '../render/dom/notify-render';\nimport { handleError } from '../render/error-handling';\nimport { SubscriptionType, getSubscriptionManager, noSerialize, } from '../state/common';\nimport { QObjectManagerSymbol } from '../state/constants';\nimport { QObjectSignalFlags, SIGNAL_UNASSIGNED } from '../state/signal';\nimport { logError, logErrorAndStop } from '../util/log';\nimport { ComputedEvent, ResourceEvent, TaskEvent } from '../util/markers';\nimport { delay, isPromise, safeCall } from '../util/promises';\nimport { isFunction, isObject } from '../util/types';\nimport { ChoreType } from '../v2/shared/scheduler';\nimport {} from '../v2/shared/types';\nimport { ComputedSignal, EffectProperty, isSignal, throwIfQRLNotResolved, } from '../v2/signal/v2-signal';\nimport {} from '../v2/signal/v2-signal.public';\nimport { unwrapStore } from '../v2/signal/v2-store';\nimport { clearSubscriberEffectDependencies, Subscriber } from '../v2/signal/v2-subscriber';\nimport { invoke, newInvokeContext, untrack, waitAndRun } from './use-core';\nimport { useOn, useOnDocument } from './use-on';\nimport { useSequentialScope } from './use-sequential-scope';\nexport var TaskFlags;\n(function (TaskFlags) {\n    TaskFlags[TaskFlags[\"VISIBLE_TASK\"] = 1] = \"VISIBLE_TASK\";\n    TaskFlags[TaskFlags[\"TASK\"] = 2] = \"TASK\";\n    TaskFlags[TaskFlags[\"RESOURCE\"] = 4] = \"RESOURCE\";\n    TaskFlags[TaskFlags[\"COMPUTED\"] = 8] = \"COMPUTED\";\n    TaskFlags[TaskFlags[\"DIRTY\"] = 16] = \"DIRTY\";\n})(TaskFlags || (TaskFlags = {}));\n// <docs markdown=\"../readme.md#useTask\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useTask instead)\n/**\n * Reruns the `taskFn` when the observed inputs change.\n *\n * Use `useTask` to observe changes on a set of inputs, and then re-execute the `taskFn` when those\n * inputs change.\n *\n * The `taskFn` only executes if the observed inputs change. To observe the inputs, use the `obs`\n * function to wrap property reads. This creates subscriptions that will trigger the `taskFn` to\n * rerun.\n *\n * @param task - Function which should be re-executed when changes to the inputs are detected\n * @public\n *\n * ### Example\n *\n * The `useTask` function is used to observe the `store.count` property. Any changes to the\n * `store.count` cause the `taskFn` to execute which in turn updates the `store.doubleCount` to\n * the double of `store.count`.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *     doubleCount: 0,\n *     debounced: 0,\n *   });\n *\n *   // Double count task\n *   useTask$(({ track }) => {\n *     const count = track(() => store.count);\n *     store.doubleCount = 2 * count;\n *   });\n *\n *   // Debouncer task\n *   useTask$(({ track }) => {\n *     const doubleCount = track(() => store.doubleCount);\n *     const timer = setTimeout(() => {\n *       store.debounced = doubleCount;\n *     }, 2000);\n *     return () => {\n *       clearTimeout(timer);\n *     };\n *   });\n *   return (\n *     <div>\n *       <div>\n *         {store.count} / {store.doubleCount}\n *       </div>\n *       <div>{store.debounced}</div>\n *     </div>\n *   );\n * });\n * ```\n *\n * @public\n * @see `Tracker`\n */\n// </docs>\nexport const useTaskQrl = (qrl, opts) => {\n    const { val, set, iCtx, i, elCtx } = useSequentialScope();\n    if (val) {\n        return;\n    }\n    assertQrl(qrl);\n    set(1);\n    if (iCtx.$container2$) {\n        const host = iCtx.$hostElement$;\n        const task = new Task(TaskFlags.DIRTY | TaskFlags.TASK, i, iCtx.$hostElement$, qrl, undefined, null);\n        // In V2 we add the task to the sequential scope. We need to do this\n        // in order to be able to retrieve it later when the parent element is\n        // deleted and we need to be able to release the task subscriptions.\n        set(task);\n        const result = runTask2(task, iCtx.$container2$, host);\n        if (isPromise(result)) {\n            throw result;\n        }\n        qrl.$resolveLazy$(host);\n        if (isServerPlatform()) {\n            useRunTask(task, opts?.eagerness);\n        }\n    }\n    else {\n        const containerState = iCtx.$renderCtx$.$static$.$containerState$;\n        const task = new Task(TaskFlags.DIRTY | TaskFlags.TASK, i, elCtx.$element$, qrl, undefined, null);\n        qrl.$resolveLazy$(containerState.$containerEl$);\n        if (!elCtx.$tasks$) {\n            elCtx.$tasks$ = [];\n        }\n        elCtx.$tasks$.push(task);\n        waitAndRun(iCtx, () => runTask(task, containerState, iCtx.$renderCtx$));\n        if (isServerPlatform()) {\n            useRunTask(task, opts?.eagerness);\n        }\n    }\n};\nexport const runTask2 = (task, container, host) => {\n    task.$flags$ &= ~TaskFlags.DIRTY;\n    cleanupTask(task);\n    const iCtx = newInvokeContext(container.$locale$, host, undefined, TaskEvent);\n    iCtx.$container2$ = container;\n    const taskFn = task.$qrl$.getFn(iCtx, () => clearSubscriberEffectDependencies(task));\n    const track = (obj, prop) => {\n        const ctx = newInvokeContext();\n        ctx.$effectSubscriber$ = [task, EffectProperty.COMPONENT];\n        ctx.$container2$ = container;\n        return invoke(ctx, () => {\n            if (isFunction(obj)) {\n                return obj();\n            }\n            if (prop) {\n                return obj[prop];\n            }\n            else if (isSignal(obj)) {\n                return obj.value;\n            }\n            else {\n                return obj;\n            }\n        });\n    };\n    const handleError = (reason) => container.handleError(reason, host);\n    let cleanupFns = null;\n    const cleanup = (fn) => {\n        if (typeof fn == 'function') {\n            if (!cleanupFns) {\n                cleanupFns = [];\n                task.$destroy$ = noSerialize(() => {\n                    task.$destroy$ = null;\n                    cleanupFns.forEach((fn) => {\n                        try {\n                            fn();\n                        }\n                        catch (err) {\n                            handleError(err);\n                        }\n                    });\n                });\n            }\n            cleanupFns.push(fn);\n        }\n    };\n    const taskApi = { track, cleanup };\n    const result = safeCall(() => taskFn(taskApi), cleanup, (err) => {\n        if (isPromise(err)) {\n            return err.then(() => runTask2(task, container, host));\n        }\n        else {\n            return handleError(err);\n        }\n    });\n    return result;\n};\n/** @public */\nexport const useComputedQrl = (qrl) => {\n    const { val, set } = useSequentialScope();\n    if (val) {\n        return val;\n    }\n    assertQrl(qrl);\n    const signal = new ComputedSignal(null, qrl);\n    set(signal);\n    throwIfQRLNotResolved(qrl);\n    return signal;\n};\n// <docs markdown=\"../readme.md#useVisibleTask\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useVisibleTask instead)\n/**\n * ```tsx\n * const Timer = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *   });\n *\n *   useVisibleTask$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       store.count++;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *\n *   return <div>{store.count}</div>;\n * });\n * ```\n *\n * @public\n */\n// </docs>\nexport const useVisibleTaskQrl = (qrl, opts) => {\n    const { val, set, i, iCtx, elCtx } = useSequentialScope();\n    const eagerness = opts?.strategy ?? 'intersection-observer';\n    if (val) {\n        if (isServerPlatform()) {\n            useRunTask(val, eagerness);\n        }\n        return;\n    }\n    assertQrl(qrl);\n    if (iCtx.$container2$) {\n        const task = new Task(TaskFlags.VISIBLE_TASK, i, iCtx.$hostElement$, qrl, undefined, null);\n        set(task);\n        useRunTask(task, eagerness);\n        if (!isServerPlatform()) {\n            qrl.$resolveLazy$(iCtx.$hostElement$);\n            iCtx.$container2$.$scheduler$(ChoreType.VISIBLE, task);\n        }\n    }\n    else {\n        const task = new Task(TaskFlags.VISIBLE_TASK, i, elCtx.$element$, qrl, undefined, null);\n        const containerState = iCtx.$renderCtx$.$static$.$containerState$;\n        if (!elCtx.$tasks$) {\n            elCtx.$tasks$ = [];\n        }\n        elCtx.$tasks$.push(task);\n        set(task);\n        useRunTask(task, eagerness);\n        if (!isServerPlatform()) {\n            qrl.$resolveLazy$(containerState.$containerEl$);\n            notifyTask(task, containerState);\n        }\n    }\n};\nexport const isResourceTask = (task) => {\n    return (task.$flags$ & TaskFlags.RESOURCE) !== 0;\n};\nexport const isComputedTask = (task) => {\n    return (task.$flags$ & TaskFlags.COMPUTED) !== 0;\n};\nexport const runSubscriber = async (task, containerState, rCtx) => {\n    assertEqual(!!(task.$flags$ & TaskFlags.DIRTY), true, 'Resource is not dirty', task);\n    if (isResourceTask(task)) {\n        return runResource(task, containerState, rCtx);\n    }\n    else if (isComputedTask(task)) {\n        return runComputed(task, containerState, rCtx);\n    }\n    else {\n        return runTask(task, containerState, rCtx);\n    }\n};\nexport const runSubscriber2 = async (task, container, host) => {\n    assertEqual(!!(task.$flags$ & TaskFlags.DIRTY), true, 'Task is not dirty', task);\n    if (isResourceTask(task)) {\n        return runResource(task, container, host);\n    }\n    else {\n        return runTask2(task, container, host);\n    }\n};\nexport const runResource = (task, container, host) => {\n    task.$flags$ &= ~TaskFlags.DIRTY;\n    cleanupTask(task);\n    const iCtx = newInvokeContext(container.$locale$, host, undefined, ResourceEvent);\n    iCtx.$container2$ = container;\n    const taskFn = task.$qrl$.getFn(iCtx, () => clearSubscriberEffectDependencies(task));\n    const resource = task.$state$;\n    assertDefined(resource, 'useResource: when running a resource, \"task.resource\" must be a defined.', task);\n    const track = (obj, prop) => {\n        const ctx = newInvokeContext();\n        ctx.$effectSubscriber$ = [task, EffectProperty.COMPONENT];\n        ctx.$container2$ = container;\n        return invoke(ctx, () => {\n            if (isFunction(obj)) {\n                return obj();\n            }\n            if (prop) {\n                return obj[prop];\n            }\n            else if (isSignal(obj)) {\n                return obj.value;\n            }\n            else {\n                return obj;\n            }\n        });\n    };\n    const handleError = (reason) => container.handleError(reason, host);\n    const cleanups = [];\n    task.$destroy$ = noSerialize(() => {\n        cleanups.forEach((fn) => {\n            try {\n                fn();\n            }\n            catch (err) {\n                handleError(err);\n            }\n        });\n        done = true;\n    });\n    const resourceTarget = unwrapStore(resource);\n    const opts = {\n        track,\n        cleanup(fn) {\n            if (typeof fn === 'function') {\n                cleanups.push(fn);\n            }\n        },\n        cache(policy) {\n            let milliseconds = 0;\n            if (policy === 'immutable') {\n                milliseconds = Infinity;\n            }\n            else {\n                milliseconds = policy;\n            }\n            resource._cache = milliseconds;\n        },\n        previous: resourceTarget._resolved,\n    };\n    let resolve;\n    let reject;\n    let done = false;\n    const setState = (resolved, value) => {\n        if (!done) {\n            done = true;\n            if (resolved) {\n                done = true;\n                resource.loading = false;\n                resource._state = 'resolved';\n                resource._resolved = value;\n                resource._error = undefined;\n                // console.log('RESOURCE.resolved: ', value);\n                resolve(value);\n            }\n            else {\n                done = true;\n                resource.loading = false;\n                resource._state = 'rejected';\n                resource._error = value;\n                reject(value);\n            }\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Add cleanup to resolve the resource if we are trying to run the same resource again while the\n     * previous one is not resolved yet. The next `runResource` run will call this cleanup\n     */\n    cleanups.push(() => {\n        if (untrack(() => resource.loading) === true) {\n            const value = untrack(() => resource._resolved);\n            setState(true, value);\n        }\n    });\n    // Execute mutation inside empty invocation\n    invoke(iCtx, () => {\n        // console.log('RESOURCE.pending: ');\n        resource._state = 'pending';\n        resource.loading = !isServerPlatform();\n        const promise = (resource.value = new Promise((r, re) => {\n            resolve = r;\n            reject = re;\n        }));\n        promise.catch(ignoreErrorToPreventNodeFromCrashing);\n    });\n    const promise = safeCall(() => Promise.resolve(taskFn(opts)), (value) => {\n        setState(true, value);\n    }, (err) => {\n        if (isPromise(err)) {\n            return err.then(() => runResource(task, container, host));\n        }\n        else {\n            setState(false, err);\n        }\n    });\n    const timeout = resourceTarget._timeout;\n    if (timeout > 0) {\n        return Promise.race([\n            promise,\n            delay(timeout).then(() => {\n                if (setState(false, new Error('timeout'))) {\n                    cleanupTask(task);\n                }\n            }),\n        ]);\n    }\n    return promise;\n};\nconst ignoreErrorToPreventNodeFromCrashing = (err) => {\n    // ignore error to prevent node from crashing\n    // node will crash in promise is rejected and no one is listening to the rejection.\n};\nexport const runTask = (task, containerState, rCtx) => {\n    task.$flags$ &= ~TaskFlags.DIRTY;\n    cleanupTask(task);\n    const hostElement = task.$el$;\n    const iCtx = newInvokeContext(rCtx.$static$.$locale$, hostElement, undefined, TaskEvent);\n    iCtx.$renderCtx$ = rCtx;\n    const { $subsManager$: subsManager } = containerState;\n    const taskFn = task.$qrl$.getFn(iCtx, () => {\n        subsManager.$clearSub$(task);\n    });\n    const track = (obj, prop) => {\n        if (isFunction(obj)) {\n            const ctx = newInvokeContext();\n            ctx.$subscriber$ = [SubscriptionType.HOST, task];\n            return invoke(ctx, obj);\n        }\n        const manager = getSubscriptionManager(obj);\n        if (manager) {\n            manager.$addSub$([SubscriptionType.HOST, task], prop);\n        }\n        else {\n            logErrorAndStop(codeToText(QError_trackUseStore), obj);\n        }\n        if (prop) {\n            return obj[prop];\n        }\n        else if (isSignal(obj)) {\n            return obj.value;\n        }\n        else {\n            return obj;\n        }\n    };\n    const cleanups = [];\n    task.$destroy$ = noSerialize(() => {\n        cleanups.forEach((fn) => fn());\n    });\n    const opts = {\n        track,\n        cleanup(callback) {\n            cleanups.push(callback);\n        },\n    };\n    return safeCall(() => taskFn(opts), (returnValue) => {\n        if (isFunction(returnValue)) {\n            cleanups.push(returnValue);\n        }\n    }, (reason) => {\n        handleError(reason, hostElement, rCtx.$static$.$containerState$);\n    });\n};\nexport const runComputed = (task, containerState, rCtx) => {\n    assertSignal(task.$state$);\n    task.$flags$ &= ~TaskFlags.DIRTY;\n    cleanupTask(task);\n    const hostElement = task.$el$;\n    const iCtx = newInvokeContext(rCtx.$static$.$locale$, hostElement, undefined, ComputedEvent);\n    iCtx.$subscriber$ = [SubscriptionType.HOST, task];\n    iCtx.$renderCtx$ = rCtx;\n    const { $subsManager$: subsManager } = containerState;\n    const taskFn = task.$qrl$.getFn(iCtx, () => {\n        subsManager.$clearSub$(task);\n    });\n    return safeCall(taskFn, (returnValue) => untrack(() => {\n        const signal = task.$state$;\n        signal[QObjectSignalFlags] &= ~SIGNAL_UNASSIGNED;\n        signal.untrackedValue = returnValue;\n        signal[QObjectManagerSymbol].$notifySubs$();\n    }), (reason) => {\n        handleError(reason, hostElement, rCtx.$static$.$containerState$);\n    });\n};\nexport const cleanupTask = (task) => {\n    const destroy = task.$destroy$;\n    if (destroy) {\n        task.$destroy$ = null;\n        try {\n            destroy();\n        }\n        catch (err) {\n            logError(err);\n        }\n    }\n};\nconst useRunTask = (task, eagerness) => {\n    if (eagerness === 'visible' || eagerness === 'intersection-observer') {\n        useOn('qvisible', getTaskHandlerQrl(task));\n    }\n    else if (eagerness === 'load' || eagerness === 'document-ready') {\n        useOnDocument('qinit', getTaskHandlerQrl(task));\n    }\n    else if (eagerness === 'idle' || eagerness === 'document-idle') {\n        useOnDocument('qidle', getTaskHandlerQrl(task));\n    }\n};\nconst getTaskHandlerQrl = (task) => {\n    const taskQrl = task.$qrl$;\n    const taskHandler = createQRL(taskQrl.$chunk$, '_hW', _hW, null, null, [task], taskQrl.$symbol$);\n    // Needed for chunk lookup in dev mode\n    if (taskQrl.dev) {\n        taskHandler.dev = taskQrl.dev;\n    }\n    return taskHandler;\n};\nexport const isSubscriberDescriptor = (obj) => {\n    return isObject(obj) && obj instanceof Task;\n};\nexport const serializeTask = (task, getObjId) => {\n    let value = `${intToStr(task.$flags$)} ${intToStr(task.$index$)} ${getObjId(task.$qrl$)} ${getObjId(task.$el$)}`;\n    if (task.$state$) {\n        value += ` ${getObjId(task.$state$)}`;\n    }\n    return value;\n};\nexport const parseTask = (data) => {\n    const [flags, index, qrl, el, resource] = data.split(' ');\n    return new Task(strToInt(flags), strToInt(index), el, qrl, resource, null);\n};\nexport class Task extends Subscriber {\n    constructor($flags$, $index$, $el$, $qrl$, $state$, $destroy$) {\n        super();\n        this.$flags$ = $flags$;\n        this.$index$ = $index$;\n        this.$el$ = $el$;\n        this.$qrl$ = $qrl$;\n        this.$state$ = $state$;\n        this.$destroy$ = $destroy$;\n    }\n}\nexport const isTask = (value) => {\n    return value instanceof Task;\n};\n//# sourceMappingURL=data:application/json;base64,","import { cleanupTask } from '../use/use-task';\nimport { getProxyTarget } from './common';\nimport { getDomListeners } from './listeners';\nimport { seal } from '../util/qdev';\nimport { directGetAttribute } from '../render/fast-calls';\nimport { assertQwikElement } from '../error/assert';\nimport { ELEMENT_ID, ELEMENT_PROPS, ELEMENT_SEQ, OnRenderProp, QScopedStyle, } from '../util/markers';\nimport { createPropsState, createProxy, setObjectFlags } from './store';\nimport { _CONST_PROPS, Q_CTX, QObjectImmutable } from './constants';\nimport { isElement } from '../util/element';\nexport const HOST_FLAG_DIRTY = 1 << 0;\nexport const HOST_FLAG_NEED_ATTACH_LISTENER = 1 << 1;\nexport const HOST_FLAG_MOUNTED = 1 << 2;\nexport const HOST_FLAG_DYNAMIC = 1 << 3;\nexport const HOST_REMOVED = 1 << 4;\nexport const tryGetContext = (element) => {\n    return element[Q_CTX];\n};\nexport const getContext = (el, containerState) => {\n    assertQwikElement(el);\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        return ctx;\n    }\n    const elCtx = createContext(el);\n    const elementID = directGetAttribute(el, ELEMENT_ID);\n    if (elementID) {\n        const pauseCtx = containerState.$pauseCtx$;\n        elCtx.$id$ = elementID;\n        if (pauseCtx) {\n            const { getObject, meta, refs } = pauseCtx;\n            if (isElement(el)) {\n                // regular elements have listeners;\n                const refMap = refs[elementID];\n                if (refMap) {\n                    elCtx.$refMap$ = refMap.split(' ').map(getObject);\n                    elCtx.li = getDomListeners(elCtx, containerState.$containerEl$);\n                }\n            }\n            else {\n                // Virtual elements are Components\n                const styleIds = el.getAttribute(QScopedStyle);\n                elCtx.$scopeIds$ = styleIds ? styleIds.split('|') : null;\n                const ctxMeta = meta[elementID];\n                if (ctxMeta) {\n                    const seq = ctxMeta.s;\n                    const host = ctxMeta.h;\n                    const contexts = ctxMeta.c;\n                    const tasks = ctxMeta.w;\n                    if (seq) {\n                        elCtx.$seq$ = seq.split(' ').map(getObject);\n                    }\n                    if (tasks) {\n                        elCtx.$tasks$ = tasks.split(' ').map(getObject);\n                    }\n                    if (contexts) {\n                        elCtx.$contexts$ = new Map();\n                        for (const part of contexts.split(' ')) {\n                            const [key, value] = part.split('=');\n                            elCtx.$contexts$.set(key, getObject(value));\n                        }\n                    }\n                    // Restore sequence scoping\n                    if (host) {\n                        const [renderQrl, props] = host.split(' ');\n                        elCtx.$flags$ = HOST_FLAG_MOUNTED;\n                        if (renderQrl) {\n                            elCtx.$componentQrl$ = getObject(renderQrl);\n                        }\n                        if (props) {\n                            const propsObj = getObject(props);\n                            elCtx.$props$ = propsObj;\n                            setObjectFlags(propsObj, QObjectImmutable);\n                            propsObj[_CONST_PROPS] = getImmutableFromProps(propsObj);\n                        }\n                        else {\n                            elCtx.$props$ = createProxy(createPropsState(), containerState);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    const onRenderProp = directGetAttribute(el, OnRenderProp);\n    if (onRenderProp) {\n        const getObject = containerState.$pauseCtx$.getObject;\n        elCtx.$componentQrl$ = getObject(onRenderProp);\n        const propId = directGetAttribute(el, ELEMENT_PROPS);\n        propId && (elCtx.$props$ = getObject(propId));\n        const seq = directGetAttribute(el, ELEMENT_SEQ);\n        seq && (elCtx.$seq$ = getObject(seq));\n    }\n    return elCtx;\n};\nconst getImmutableFromProps = (props) => {\n    const immutable = {};\n    const target = getProxyTarget(props);\n    for (const key in target) {\n        if (key.startsWith('_IMMUTABLE_PREFIX')) {\n            immutable[key.slice('_IMMUTABLE_PREFIX'.length)] = target[key];\n        }\n    }\n    return immutable;\n};\nexport const createContext = (element) => {\n    const ctx = {\n        $flags$: 0,\n        $id$: '',\n        $element$: element,\n        $refMap$: [],\n        li: [],\n        $tasks$: null,\n        $seq$: null,\n        $slots$: null,\n        $scopeIds$: null,\n        $appendStyles$: null,\n        $props$: null,\n        $vdom$: null,\n        $componentQrl$: null,\n        $contexts$: null,\n        $dynamicSlots$: null,\n        $parentCtx$: undefined,\n        $realParentCtx$: undefined,\n    };\n    seal(ctx);\n    element[Q_CTX] = ctx;\n    return ctx;\n};\nexport const cleanupContext = (elCtx, subsManager) => {\n    elCtx.$tasks$?.forEach((task) => {\n        subsManager.$clearSub$(task);\n        cleanupTask(task);\n    });\n    elCtx.$componentQrl$ = null;\n    elCtx.$seq$ = null;\n    elCtx.$tasks$ = null;\n};\n//# sourceMappingURL=data:application/json;base64,","import { tryGetInvokeContext } from './use-core';\nlet _locale = undefined;\n/**\n * Retrieve the current locale.\n *\n * If no current locale and there is no `defaultLocale` the function throws an error.\n *\n * @returns The locale.\n * @internal\n */\nexport function getLocale(defaultLocale) {\n    if (_locale === undefined) {\n        const ctx = tryGetInvokeContext();\n        if (ctx && ctx.$locale$) {\n            return ctx.$locale$;\n        }\n        if (defaultLocale !== undefined) {\n            return defaultLocale;\n        }\n        throw new Error('Reading `locale` outside of context.');\n    }\n    return _locale;\n}\n/**\n * Override the `getLocale` with `lang` within the `fn` execution.\n *\n * @internal\n */\nexport function withLocale(locale, fn) {\n    const previousLang = _locale;\n    try {\n        _locale = locale;\n        return fn();\n    }\n    finally {\n        _locale = previousLang;\n    }\n}\n/**\n * Globally set a lang.\n *\n * This can be used only in browser. Server execution requires that each request could potentially\n * be a different lang, therefore setting a global lang would produce incorrect responses.\n *\n * @param lang\n */\nexport function setLocale(locale) {\n    _locale = locale;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWxvY2FsZS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLWxvY2FsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFakQsSUFBSSxPQUFPLEdBQXVCLFNBQVMsQ0FBQztBQUU1Qzs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFVLFNBQVMsQ0FBQyxhQUFzQjtJQUM5QyxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUUsQ0FBQztRQUMxQixNQUFNLEdBQUcsR0FBRyxtQkFBbUIsRUFBRSxDQUFDO1FBQ2xDLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN4QixPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUM7UUFDdEIsQ0FBQztRQUNELElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQ2hDLE9BQU8sYUFBYSxDQUFDO1FBQ3ZCLENBQUM7UUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUNELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FBSSxNQUFjLEVBQUUsRUFBVztJQUN2RCxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUM7SUFDN0IsSUFBSSxDQUFDO1FBQ0gsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUNqQixPQUFPLEVBQUUsRUFBRSxDQUFDO0lBQ2QsQ0FBQztZQUFTLENBQUM7UUFDVCxPQUFPLEdBQUcsWUFBWSxDQUFDO0lBQ3pCLENBQUM7QUFDSCxDQUFDO0FBRUQ7Ozs7Ozs7R0FPRztBQUNILE1BQU0sVUFBVSxTQUFTLENBQUMsTUFBYztJQUN0QyxPQUFPLEdBQUcsTUFBTSxDQUFDO0FBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0cnlHZXRJbnZva2VDb250ZXh0IH0gZnJvbSAnLi91c2UtY29yZSc7XG5cbmxldCBfbG9jYWxlOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGN1cnJlbnQgbG9jYWxlLlxuICpcbiAqIElmIG5vIGN1cnJlbnQgbG9jYWxlIGFuZCB0aGVyZSBpcyBubyBgZGVmYXVsdExvY2FsZWAgdGhlIGZ1bmN0aW9uIHRocm93cyBhbiBlcnJvci5cbiAqXG4gKiBAcmV0dXJucyBUaGUgbG9jYWxlLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhbGUoZGVmYXVsdExvY2FsZT86IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmIChfbG9jYWxlID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBjdHggPSB0cnlHZXRJbnZva2VDb250ZXh0KCk7XG4gICAgaWYgKGN0eCAmJiBjdHguJGxvY2FsZSQpIHtcbiAgICAgIHJldHVybiBjdHguJGxvY2FsZSQ7XG4gICAgfVxuICAgIGlmIChkZWZhdWx0TG9jYWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0TG9jYWxlO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlYWRpbmcgYGxvY2FsZWAgb3V0c2lkZSBvZiBjb250ZXh0LicpO1xuICB9XG4gIHJldHVybiBfbG9jYWxlO1xufVxuXG4vKipcbiAqIE92ZXJyaWRlIHRoZSBgZ2V0TG9jYWxlYCB3aXRoIGBsYW5nYCB3aXRoaW4gdGhlIGBmbmAgZXhlY3V0aW9uLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aExvY2FsZTxUPihsb2NhbGU6IHN0cmluZywgZm46ICgpID0+IFQpOiBUIHtcbiAgY29uc3QgcHJldmlvdXNMYW5nID0gX2xvY2FsZTtcbiAgdHJ5IHtcbiAgICBfbG9jYWxlID0gbG9jYWxlO1xuICAgIHJldHVybiBmbigpO1xuICB9IGZpbmFsbHkge1xuICAgIF9sb2NhbGUgPSBwcmV2aW91c0xhbmc7XG4gIH1cbn1cblxuLyoqXG4gKiBHbG9iYWxseSBzZXQgYSBsYW5nLlxuICpcbiAqIFRoaXMgY2FuIGJlIHVzZWQgb25seSBpbiBicm93c2VyLiBTZXJ2ZXIgZXhlY3V0aW9uIHJlcXVpcmVzIHRoYXQgZWFjaCByZXF1ZXN0IGNvdWxkIHBvdGVudGlhbGx5XG4gKiBiZSBhIGRpZmZlcmVudCBsYW5nLCB0aGVyZWZvcmUgc2V0dGluZyBhIGdsb2JhbCBsYW5nIHdvdWxkIHByb2R1Y2UgaW5jb3JyZWN0IHJlc3BvbnNlcy5cbiAqXG4gKiBAcGFyYW0gbGFuZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0TG9jYWxlKGxvY2FsZTogc3RyaW5nKTogdm9pZCB7XG4gIF9sb2NhbGUgPSBsb2NhbGU7XG59XG4iXX0=","import { _getContainerState } from '../container/container';\nimport { assertDefined } from '../error/assert';\nimport { qError, QError_useInvokeContext, QError_useMethodOutsideContext } from '../error/error';\nimport { getContext, HOST_FLAG_DYNAMIC } from '../state/context';\nimport { ComputedEvent, QContainerSelector, QLocaleAttr, RenderEvent, ResourceEvent, TaskEvent, } from '../util/markers';\nimport { isPromise } from '../util/promises';\nimport { seal } from '../util/qdev';\nimport { isArray } from '../util/types';\nimport { setLocale } from './use-locale';\nimport { vnode_getNode, vnode_isElementVNode, vnode_isVNode } from '../v2/client/vnode';\nimport { _getQContainerElement } from '../v2/client/dom-container';\nlet _context;\n/** @public */\nexport const tryGetInvokeContext = () => {\n    if (!_context) {\n        const context = typeof document !== 'undefined' && document && document.__q_context__;\n        if (!context) {\n            return undefined;\n        }\n        if (isArray(context)) {\n            return (document.__q_context__ = newInvokeContextFromTuple(context));\n        }\n        return context;\n    }\n    return _context;\n};\nexport const getInvokeContext = () => {\n    const ctx = tryGetInvokeContext();\n    if (!ctx) {\n        throw qError(QError_useMethodOutsideContext);\n    }\n    return ctx;\n};\nexport const useInvokeContext = () => {\n    const ctx = tryGetInvokeContext();\n    if (!ctx || ctx.$event$ !== RenderEvent) {\n        throw qError(QError_useInvokeContext);\n    }\n    assertDefined(ctx.$hostElement$, `invoke: $hostElement$ must be defined`, ctx);\n    assertDefined(ctx.$effectSubscriber$, `invoke: $effectSubscriber$ must be defined`, ctx);\n    return ctx;\n};\nexport const useContainerState = () => {\n    const ctx = useInvokeContext();\n    return ctx.$renderCtx$.$static$.$containerState$;\n};\nexport function useBindInvokeContext(fn) {\n    if (fn == null) {\n        return fn;\n    }\n    const ctx = getInvokeContext();\n    return function (...args) {\n        return (invokeApply).call(this, ctx, fn, args);\n    };\n}\n/** Call a function with the given InvokeContext and given arguments. */\nexport function invoke(context, fn, ...args) {\n    return invokeApply.call(this, context, fn, args);\n}\n/** Call a function with the given InvokeContext and array of arguments. */\nexport function invokeApply(context, fn, args) {\n    const previousContext = _context;\n    let returnValue;\n    try {\n        _context = context;\n        returnValue = fn.apply(this, args);\n    }\n    finally {\n        _context = previousContext;\n    }\n    return returnValue;\n}\nexport const waitAndRun = (ctx, callback) => {\n    const waitOn = ctx.$waitOn$;\n    if (waitOn.length === 0) {\n        const result = callback();\n        if (isPromise(result)) {\n            waitOn.push(result);\n        }\n    }\n    else {\n        waitOn.push(Promise.all(waitOn).then(callback));\n    }\n};\nexport const newInvokeContextFromTuple = ([element, event, url]) => {\n    const container = element.closest(QContainerSelector);\n    const locale = container?.getAttribute(QLocaleAttr) || undefined;\n    locale && setLocale(locale);\n    return newInvokeContext(locale, undefined, element, event, url);\n};\n// TODO how about putting url and locale (and event/custom?) in to a \"static\" object\nexport const newInvokeContext = (locale, hostElement, element, event, url) => {\n    // ServerRequestEvent has .locale, but it's not always defined.\n    const $locale$ = locale || (typeof event === 'object' && event && 'locale' in event ? event.locale : undefined);\n    const ctx = {\n        $url$: url,\n        $i$: 0,\n        $hostElement$: hostElement,\n        $element$: element,\n        $event$: event,\n        $qrl$: undefined,\n        $waitOn$: undefined,\n        $subscriber$: undefined,\n        $effectSubscriber$: undefined,\n        $renderCtx$: undefined,\n        $locale$,\n        $container2$: undefined,\n    };\n    seal(ctx);\n    return ctx;\n};\n/**\n * Don't track listeners for this callback\n *\n * @public\n */\nexport const untrack = (fn) => {\n    return invoke(undefined, fn);\n};\nconst trackInvocation = /*#__PURE__*/ newInvokeContext(undefined, undefined, undefined, RenderEvent);\n/**\n * Mark sub as a listener for the signal\n *\n * @public\n */\nexport const trackSignalV1 = (signal, sub) => {\n    trackInvocation.$subscriber$ = sub; // todo(mhevery): delete me after signal 2\n    return invoke(trackInvocation, () => signal.value);\n};\n/**\n * @param fn\n * @param subscriber\n * @param property `true` - subscriber is component `false` - subscriber is VNode `string` -\n *   subscriber is property\n * @param container\n * @returns\n */\nexport const trackSignal = (fn, subscriber, property, container, data) => {\n    const previousSubscriber = trackInvocation.$effectSubscriber$;\n    const previousContainer = trackInvocation.$container2$;\n    try {\n        trackInvocation.$effectSubscriber$ = [subscriber, property];\n        if (data) {\n            trackInvocation.$effectSubscriber$.push(data);\n        }\n        trackInvocation.$container2$ = container;\n        return invoke(trackInvocation, fn);\n    }\n    finally {\n        trackInvocation.$effectSubscriber$ = previousSubscriber;\n        trackInvocation.$container2$ = previousContainer;\n    }\n};\nexport const trackRead = (readFn, sub) => {\n    trackInvocation.$subscriber$ = sub;\n    return invoke(trackInvocation, readFn);\n};\n/** @internal */\nexport const _getContextElement = () => {\n    const iCtx = tryGetInvokeContext();\n    if (iCtx) {\n        const hostElement = iCtx.$hostElement$;\n        let element;\n        if (vnode_isVNode(hostElement) && vnode_isElementVNode(hostElement)) {\n            element = vnode_getNode(hostElement);\n        }\n        else {\n            element = hostElement;\n        }\n        return element ?? iCtx.$qrl$?.$setContainer$(undefined);\n    }\n};\n/** @internal */\nexport const _getContextEvent = () => {\n    const iCtx = tryGetInvokeContext();\n    if (iCtx) {\n        return iCtx.$event$;\n    }\n};\n/** @internal */\nexport const _jsxBranch = (input) => {\n    const iCtx = tryGetInvokeContext();\n    if (iCtx && iCtx.$hostElement$ && iCtx.$renderCtx$ && !iCtx.$container2$) {\n        const hostElement = iCtx.$hostElement$;\n        const elCtx = getContext(hostElement, iCtx.$renderCtx$.$static$.$containerState$);\n        elCtx.$flags$ |= HOST_FLAG_DYNAMIC;\n    }\n    return input;\n};\n/** @internal */\nexport const _waitUntilRendered = (elm) => {\n    const containerEl = _getQContainerElement(elm);\n    if (!containerEl) {\n        return Promise.resolve();\n    }\n    const container = containerEl.qContainer;\n    return container?.renderDone ?? Promise.resolve();\n};\n//# sourceMappingURL=data:application/json;base64,","var _a;\nimport { assertEqual } from '../error/assert';\nimport { tryGetInvokeContext } from '../use/use-core';\nimport { logWarn } from '../util/log';\nimport { ComputedEvent, RenderEvent } from '../util/markers';\nimport { qDev, qSerialize } from '../util/qdev';\nimport { isObject } from '../util/types';\nimport { WrappedSignal, isSignal } from '../v2/signal/v2-signal';\nimport { getStoreTarget } from '../v2/signal/v2-store';\nimport { LocalSubscriptionManager, getSubscriptionManager, verifySerializable, } from './common';\nimport { QObjectManagerSymbol, _CONST_PROPS, _IMMUTABLE } from './constants';\n/** @internal */\nexport const _createSignal = (value, subsManager, flags, subscriptions) => {\n    const manager = subsManager.$createManager$(subscriptions);\n    const signal = new SignalImpl(value, manager, flags);\n    return signal;\n};\nexport const QObjectSignalFlags = Symbol('proxy manager');\nexport const SIGNAL_IMMUTABLE = 1 << 0;\nexport const SIGNAL_UNASSIGNED = 1 << 1;\nexport const SignalUnassignedException = Symbol('unassigned signal');\nexport class SignalBase {\n}\nexport class SignalImpl extends SignalBase {\n    constructor(v, manager, flags) {\n        super();\n        this[_a] = 0;\n        this.untrackedValue = v;\n        this[QObjectManagerSymbol] = manager;\n        this[QObjectSignalFlags] = flags;\n    }\n    // prevent accidental use as value\n    valueOf() {\n        if (qDev) {\n            throw new TypeError('Cannot coerce a Signal, use `.value` instead');\n        }\n    }\n    toString() {\n        return `[Signal ${String(this.value)}]`;\n    }\n    toJSON() {\n        return { value: this.value };\n    }\n    get value() {\n        if (this[QObjectSignalFlags] & SIGNAL_UNASSIGNED) {\n            throw SignalUnassignedException;\n        }\n        const sub = tryGetInvokeContext()?.$subscriber$;\n        if (sub) {\n            this[QObjectManagerSymbol].$addSub$(sub);\n        }\n        return this.untrackedValue;\n    }\n    set value(v) {\n        if (qDev) {\n            if (this[QObjectSignalFlags] & SIGNAL_IMMUTABLE) {\n                throw new Error('Cannot mutate immutable signal');\n            }\n            if (qSerialize) {\n                verifySerializable(v);\n            }\n            const invokeCtx = tryGetInvokeContext();\n            if (invokeCtx) {\n                if (invokeCtx.$event$ === RenderEvent) {\n                    logWarn('State mutation inside render function. Use useTask$() instead.', String(invokeCtx.$hostElement$));\n                }\n                else if (invokeCtx.$event$ === ComputedEvent) {\n                    logWarn('State mutation inside useComputed$() is an antipattern. Use useTask$() instead', String(invokeCtx.$hostElement$));\n                }\n            }\n        }\n        const manager = this[QObjectManagerSymbol];\n        const oldValue = this.untrackedValue;\n        if (manager && oldValue !== v) {\n            this.untrackedValue = v;\n            manager.$notifySubs$();\n        }\n    }\n}\n_a = QObjectSignalFlags;\nexport class SignalDerived extends SignalBase {\n    constructor($func$, $args$, $funcStr$) {\n        super();\n        this.$func$ = $func$;\n        this.$args$ = $args$;\n        this.$funcStr$ = $funcStr$;\n    }\n    get value() {\n        return this.$func$.apply(undefined, this.$args$);\n    }\n    get [QObjectManagerSymbol]() {\n        const args = this.$args$;\n        if (args?.length >= 2 && typeof args[0] === 'object' && typeof args[1] === 'string') {\n            const subMgr = getSubscriptionManager(args[0]);\n            if (subMgr) {\n                return new DerivedSubscriptionManager(subMgr, args[1]);\n            }\n        }\n        return undefined;\n    }\n}\nconst notImplemented = () => {\n    throw new Error();\n};\nclass DerivedSubscriptionManager {\n    constructor($delegate$, $prop$) {\n        this.$delegate$ = $delegate$;\n        this.$prop$ = $prop$;\n        this.$addSubs$ = notImplemented;\n        this.$addToGroup$ = notImplemented;\n        this.$unsubGroup$ = notImplemented;\n        this.$unsubEntry$ = notImplemented;\n        this.$notifySubs$ = notImplemented;\n    }\n    $addSub$(sub, key) {\n        this.$delegate$.$addSub$(sub, this.$prop$);\n    }\n}\nexport class SignalWrapper extends SignalBase {\n    constructor(ref, prop) {\n        super();\n        this.ref = ref;\n        this.prop = prop;\n    }\n    get [QObjectManagerSymbol]() {\n        return getSubscriptionManager(this.ref);\n    }\n    get value() {\n        return this.ref[this.prop];\n    }\n    set value(value) {\n        this.ref[this.prop] = value;\n    }\n}\n/**\n * Checks if a given object is a `Signal`.\n *\n * @param obj - The object to check if `Signal`.\n * @returns Boolean - True if the object is a `Signal`.\n * @public\n */\nexport const isSignalV1 = (obj) => {\n    return obj instanceof SignalBase;\n};\nconst getProp = (obj, prop) => obj[prop];\n/** @internal */\nexport const _wrapProp = (obj, prop = 'value') => {\n    if (!isObject(obj)) {\n        return obj[prop];\n    }\n    if (isSignal(obj)) {\n        assertEqual(prop, 'value', 'Left side is a signal, prop must be value');\n        if (obj instanceof WrappedSignal) {\n            return obj;\n        }\n        return new WrappedSignal(null, getProp, [obj, prop], null);\n    }\n    if (_CONST_PROPS in obj) {\n        const constProps = obj[_CONST_PROPS];\n        if (constProps && prop in constProps) {\n            // Const props don't need wrapping\n            return constProps[prop];\n        }\n    }\n    else {\n        const target = getStoreTarget(obj);\n        if (target) {\n            const signal = target[prop];\n            const wrappedValue = isSignal(signal)\n                ? signal\n                : new WrappedSignal(null, getProp, [obj, prop], null);\n            return wrappedValue;\n        }\n    }\n    // We need to forward the access to the original object\n    return new WrappedSignal(null, getProp, [obj, prop], null);\n};\n/** @internal @deprecated v1 compat */\nexport const _wrapSignal = (obj, prop) => {\n    const r = _wrapProp(obj, prop);\n    if (r === _IMMUTABLE) {\n        return obj[prop];\n    }\n    return r;\n};\n//# sourceMappingURL=data:application/json;base64,","import { qError, QError_invalidRefValue } from '../error/error';\nimport { seal } from '../util/qdev';\nimport { isFunction } from '../util/types';\nimport { fromKebabToCamelCase } from '../util/case';\nimport { QContainerAttr } from '../util/markers';\nimport { isElement } from '../util/element';\nimport { createSubscriptionManager } from '../state/common';\nimport { isSignalV1 } from '../state/signal';\nimport { directGetAttribute } from '../render/fast-calls';\nimport { isServerPlatform } from '../platform/platform';\nconst CONTAINER_STATE = Symbol('ContainerState');\n/** @internal */\nexport const _getContainerState = (containerEl) => {\n    let state = containerEl[CONTAINER_STATE];\n    if (!state) {\n        containerEl[CONTAINER_STATE] = state = createContainerState(containerEl, directGetAttribute(containerEl, 'q:base') ?? '/');\n    }\n    return state;\n};\nexport const createContainerState = (containerEl, base) => {\n    const containerAttributes = {};\n    if (containerEl) {\n        const attrs = containerEl.attributes;\n        if (attrs) {\n            for (let index = 0; index < attrs.length; index++) {\n                const attr = attrs[index];\n                containerAttributes[attr.name] = attr.value;\n            }\n        }\n    }\n    // @ts-expect-error - v1 code missing StoreTracker\n    const containerState = {\n        $containerEl$: containerEl,\n        $elementIndex$: 0,\n        $styleMoved$: false,\n        $proxyMap$: new WeakMap(),\n        $opsNext$: new Set(),\n        $taskNext$: new Set(),\n        $taskStaging$: new Set(),\n        $hostsNext$: new Set(),\n        $hostsStaging$: new Set(),\n        $styleIds$: new Set(),\n        $events$: new Set(),\n        $serverData$: { containerAttributes },\n        $base$: base,\n        $renderPromise$: undefined,\n        $hostsRendering$: undefined,\n        $pauseCtx$: undefined,\n        $subsManager$: undefined,\n        $inlineFns$: new Map(),\n    };\n    containerState.$subsManager$ = createSubscriptionManager(containerState);\n    seal(containerState);\n    return containerState;\n};\nexport const removeContainerState = (containerEl) => {\n    delete containerEl[CONTAINER_STATE];\n};\nexport const setRef = (value, elm) => {\n    if (isFunction(value)) {\n        return value(elm);\n    }\n    else if (isSignalV1(value)) {\n        if (isServerPlatform()) {\n            // During SSR, assigning a ref should not cause reactivity because\n            // the expectation is that the ref is filled in on the client\n            return (value.untrackedValue = elm);\n        }\n        else {\n            return (value.value = elm);\n        }\n    }\n    throw qError(QError_invalidRefValue, value);\n};\nexport const SHOW_ELEMENT = 1;\nexport const SHOW_COMMENT = 128;\nexport const FILTER_ACCEPT = 1;\nexport const FILTER_REJECT = 2;\nexport const FILTER_SKIP = 3;\nexport const isContainer = (el) => {\n    return isElement(el) && el.hasAttribute(QContainerAttr);\n};\nexport const intToStr = (nu) => {\n    return nu.toString(36);\n};\nexport const strToInt = (nu) => {\n    return parseInt(nu, 36);\n};\nexport const getEventName = (attribute) => {\n    const colonPos = attribute.indexOf(':');\n    if (attribute) {\n        return fromKebabToCamelCase(attribute.slice(colonPos + 1));\n    }\n    else {\n        return attribute;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { isBrowser } from '@builder.io/qwik/build';\nimport { qTest } from './qdev';\nexport const emitEvent = (el, eventName, detail, bubbles) => {\n    if (!qTest && (isBrowser || typeof CustomEvent === 'function')) {\n        if (el) {\n            el.dispatchEvent(new CustomEvent(eventName, {\n                detail,\n                bubbles: bubbles,\n                composed: bubbles,\n            }));\n        }\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC9ldmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDbkQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUUvQixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FDdkIsRUFBdUIsRUFDdkIsU0FBaUIsRUFDakIsTUFBVyxFQUNYLE9BQWdCLEVBQ2hCLEVBQUU7SUFDRixJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsU0FBUyxJQUFJLE9BQU8sV0FBVyxLQUFLLFVBQVUsQ0FBQyxFQUFFLENBQUM7UUFDL0QsSUFBSSxFQUFFLEVBQUUsQ0FBQztZQUNQLEVBQUUsQ0FBQyxhQUFhLENBQ2QsSUFBSSxXQUFXLENBQUMsU0FBUyxFQUFFO2dCQUN6QixNQUFNO2dCQUNOLE9BQU8sRUFBRSxPQUFPO2dCQUNoQixRQUFRLEVBQUUsT0FBTzthQUNsQixDQUFDLENBQ0gsQ0FBQztRQUNKLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNCcm93c2VyIH0gZnJvbSAnQGJ1aWxkZXIuaW8vcXdpay9idWlsZCc7XG5pbXBvcnQgeyBxVGVzdCB9IGZyb20gJy4vcWRldic7XG5cbmV4cG9ydCBjb25zdCBlbWl0RXZlbnQgPSAoXG4gIGVsOiBFbGVtZW50IHwgdW5kZWZpbmVkLFxuICBldmVudE5hbWU6IHN0cmluZyxcbiAgZGV0YWlsOiBhbnksXG4gIGJ1YmJsZXM6IGJvb2xlYW5cbikgPT4ge1xuICBpZiAoIXFUZXN0ICYmIChpc0Jyb3dzZXIgfHwgdHlwZW9mIEN1c3RvbUV2ZW50ID09PSAnZnVuY3Rpb24nKSkge1xuICAgIGlmIChlbCkge1xuICAgICAgZWwuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgbmV3IEN1c3RvbUV2ZW50KGV2ZW50TmFtZSwge1xuICAgICAgICAgIGRldGFpbCxcbiAgICAgICAgICBidWJibGVzOiBidWJibGVzLFxuICAgICAgICAgIGNvbXBvc2VkOiBidWJibGVzLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn07XG4iXX0=","import { assertDefined, assertTrue } from '../error/assert';\nimport { getDocument } from '../util/dom';\nimport { isComment, isElement, isText } from '../util/element';\nimport { logDebug, logWarn } from '../util/log';\nimport { ELEMENT_ID, QContainerAttr, QInstanceAttr, getQFuncs } from '../util/markers';\nimport { emitEvent } from '../util/event';\nimport { isArray, isSerializableObject, isString } from '../util/types';\nimport { directGetAttribute, directSetAttribute } from '../render/fast-calls';\nimport { createParser, OBJECT_TRANSFORMS, UNDEFINED_PREFIX } from './serializers';\nimport { _getContainerState, isContainer, SHOW_COMMENT, strToInt, } from './container';\nimport { getVirtualElement } from '../render/dom/virtual-element';\nimport { getSubscriptionManager, parseSubscription } from '../state/common';\nimport { createProxy, setObjectFlags } from '../state/store';\nimport { qDev, qSerialize } from '../util/qdev';\nimport { pauseContainer } from './pause';\nimport { isPrimitive } from '../render/dom/render-dom';\nimport { getContext } from '../state/context';\nimport { _getQContainerElement } from '../v2/client/dom-container';\nexport const resumeIfNeeded = (containerEl) => {\n    const isResumed = directGetAttribute(containerEl, QContainerAttr);\n    if (isResumed === 'paused') {\n        resumeContainer(containerEl);\n        if (qSerialize) {\n            appendQwikDevTools(containerEl);\n        }\n    }\n};\nexport const getPauseState = (containerEl) => {\n    const doc = getDocument(containerEl);\n    const isDocElement = containerEl === doc.documentElement;\n    const parentJSON = isDocElement ? doc.body : containerEl;\n    const script = getQwikJSON(parentJSON, 'type');\n    if (script) {\n        const data = script.firstChild.data;\n        return JSON.parse(unescapeText(data) || '{}');\n    }\n};\nexport const resumeContainer = (containerEl) => {\n    if (!isContainer(containerEl)) {\n        logWarn('Skipping resuming because parent element is not q:container');\n        return;\n    }\n    const pauseState = containerEl['_qwikjson_'] ?? getPauseState(containerEl);\n    containerEl['_qwikjson_'] = null;\n    if (!pauseState) {\n        logWarn('Skipping resuming qwik/json metadata was not found.');\n        return;\n    }\n    const doc = getDocument(containerEl);\n    const hash = containerEl.getAttribute(QInstanceAttr);\n    const isDocElement = containerEl === doc.documentElement;\n    const parentJSON = isDocElement ? doc.body : containerEl;\n    if (qDev) {\n        const script = getQwikJSON(parentJSON, 'type');\n        if (!script) {\n            logWarn('Skipping resuming qwik/json metadata was not found.');\n            return;\n        }\n    }\n    const inlinedFunctions = getQFuncs(doc, hash);\n    const containerState = _getContainerState(containerEl);\n    // Collect all elements\n    const elements = new Map();\n    const text = new Map();\n    let node = null;\n    let container = 0;\n    // Collect all virtual elements\n    const elementWalker = doc.createTreeWalker(containerEl, SHOW_COMMENT);\n    while ((node = elementWalker.nextNode())) {\n        const data = node.data;\n        if (container === 0) {\n            if (data.startsWith('qv ')) {\n                const id = getID(data); // TODO: remove\n                if (id >= 0) {\n                    elements.set(id, node);\n                }\n            }\n            else if (data.startsWith('t=')) {\n                const id = data.slice(2);\n                const index = strToInt(id);\n                const textNode = getTextNode(node);\n                elements.set(index, textNode);\n                text.set(index, textNode.data);\n            }\n        }\n        if (data === 'cq') {\n            container++;\n        }\n        else if (data === '/cq') {\n            container--;\n        }\n    }\n    // Collect all elements\n    // If there are nested container, we are forced to take a slower path.\n    // In order to check if there are nested containers, we use the `'qc📦'` class.\n    // This is because checking for class is the fastest way for the browser to find it.\n    const slotPath = containerEl.getElementsByClassName('qc📦').length !== 0;\n    containerEl.querySelectorAll('[q\\\\:id]').forEach((el) => {\n        if (slotPath && el.closest('[q\\\\:container]') !== containerEl) {\n            return;\n        }\n        const id = directGetAttribute(el, ELEMENT_ID);\n        assertDefined(id, `resume: element missed q:id`, el);\n        const index = strToInt(id);\n        elements.set(index, el);\n    });\n    const parser = createParser(containerState, doc);\n    const finalized = new Map();\n    const revived = new Set();\n    const getObject = (id) => {\n        assertTrue(typeof id === 'string' && id.length > 0, 'resume: id must be an non-empty string, got:', id);\n        if (finalized.has(id)) {\n            return finalized.get(id);\n        }\n        return computeObject(id);\n    };\n    const computeObject = (id) => {\n        // Handle elements\n        if (id.startsWith('#')) {\n            const elementId = id.slice(1);\n            const index = strToInt(elementId);\n            assertTrue(elements.has(index), `missing element for id:`, elementId);\n            const rawElement = elements.get(index);\n            assertDefined(rawElement, `missing element for id:`, elementId);\n            if (isComment(rawElement)) {\n                if (!rawElement.isConnected) {\n                    finalized.set(id, undefined);\n                    return undefined;\n                }\n                const virtual = getVirtualElement(rawElement);\n                finalized.set(id, virtual);\n                getContext(virtual, containerState);\n                return virtual;\n            }\n            else if (isElement(rawElement)) {\n                finalized.set(id, rawElement);\n                getContext(rawElement, containerState);\n                return rawElement;\n            }\n            finalized.set(id, rawElement);\n            return rawElement;\n        }\n        else if (id.startsWith('@')) {\n            const funcId = id.slice(1);\n            const index = strToInt(funcId);\n            const func = inlinedFunctions[index];\n            assertDefined(func, `missing inlined function for id:`, funcId);\n            return func;\n        }\n        else if (id.startsWith('*')) {\n            const elementId = id.slice(1);\n            const index = strToInt(elementId);\n            assertTrue(elements.has(index), `missing element for id:`, elementId);\n            const str = text.get(index);\n            assertDefined(str, `missing element for id:`, elementId);\n            finalized.set(id, str);\n            return str;\n        }\n        const index = strToInt(id);\n        const objs = pauseState.objs;\n        assertTrue(objs.length > index, 'resume: index is out of bounds', id);\n        let value = objs[index];\n        if (isString(value)) {\n            value = value === UNDEFINED_PREFIX ? undefined : parser.prepare(value);\n        }\n        let obj = value;\n        for (let i = id.length - 1; i >= 0; i--) {\n            const code = id[i];\n            const transform = OBJECT_TRANSFORMS[code];\n            if (!transform) {\n                break;\n            }\n            obj = transform(obj, containerState);\n        }\n        finalized.set(id, obj);\n        if (!isPrimitive(value) && !revived.has(index)) {\n            revived.add(index);\n            reviveSubscriptions(value, index, pauseState.subs, getObject, containerState, parser);\n            reviveNestedObjects(value, getObject, parser);\n        }\n        return obj;\n    };\n    containerState.$elementIndex$ = 100000;\n    containerState.$pauseCtx$ = {\n        getObject,\n        meta: pauseState.ctx,\n        refs: pauseState.refs,\n    };\n    directSetAttribute(containerEl, QContainerAttr, 'resumed');\n    logDebug('Container resumed');\n    emitEvent(containerEl, 'qresume', undefined, true);\n};\nconst reviveSubscriptions = (value, i, objsSubs, getObject, containerState, parser) => {\n    const subs = objsSubs[i];\n    if (subs) {\n        const converted = [];\n        let flag = 0;\n        for (const sub of subs) {\n            if (sub.startsWith('_')) {\n                flag = parseInt(sub.slice(1), 10);\n            }\n            else {\n                const parsed = parseSubscription(sub, getObject);\n                if (parsed) {\n                    converted.push(parsed);\n                }\n            }\n        }\n        if (flag > 0) {\n            setObjectFlags(value, flag);\n        }\n        if (!parser.subs(value, converted)) {\n            const proxy = containerState.$proxyMap$.get(value);\n            if (proxy) {\n                getSubscriptionManager(proxy).$addSubs$(converted);\n            }\n            else {\n                createProxy(value, containerState, converted);\n            }\n        }\n    }\n};\nconst reviveNestedObjects = (obj, getObject, parser) => {\n    if (parser.fill(obj, getObject)) {\n        return;\n    }\n    if (obj && typeof obj == 'object') {\n        if (isArray(obj)) {\n            for (let i = 0; i < obj.length; i++) {\n                obj[i] = getObject(obj[i]);\n            }\n        }\n        else if (isSerializableObject(obj)) {\n            for (const key in obj) {\n                obj[key] = getObject(obj[key]);\n            }\n        }\n    }\n};\nconst unescapeText = (str) => {\n    return str.replace(/\\\\x3C(\\/?script)/gi, '<$1');\n};\nexport const getQwikJSON = (parentElm, attribute) => {\n    let child = parentElm.lastElementChild;\n    while (child) {\n        if (child.tagName === 'SCRIPT' && directGetAttribute(child, attribute) === 'qwik/json') {\n            return child;\n        }\n        child = child.previousElementSibling;\n    }\n    return undefined;\n};\nconst getTextNode = (mark) => {\n    const nextNode = mark.nextSibling;\n    if (isText(nextNode)) {\n        return nextNode;\n    }\n    else {\n        const textNode = mark.ownerDocument.createTextNode('');\n        mark.parentElement.insertBefore(textNode, mark);\n        return textNode;\n    }\n};\nexport const appendQwikDevTools = (containerEl) => {\n    containerEl['qwik'] = {\n        pause: () => pauseContainer(containerEl),\n        state: _getContainerState(containerEl),\n    };\n};\nexport const getID = (stuff) => {\n    const index = stuff.indexOf('q:id=');\n    if (index > 0) {\n        return strToInt(stuff.slice(index + 5));\n    }\n    return -1;\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined } from '../error/assert';\nimport { inflateQrl, parseQRL } from '../qrl/qrl';\nimport { getInvokeContext } from './use-core';\nimport { assertQrl } from '../qrl/qrl-class';\nimport { getContext } from '../state/context';\nimport { resumeIfNeeded } from '../container/resume';\nimport { _getContainerState } from '../container/container';\nimport { _getQContainerElement, getDomContainer } from '../v2/client/dom-container';\n// <docs markdown=\"../readme.md#useLexicalScope\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useLexicalScope instead)\n/**\n * Used by the Qwik Optimizer to restore the lexically scoped variables.\n *\n * This method should not be present in the application source code.\n *\n * NOTE: `useLexicalScope` method can only be used in the synchronous portion of the callback\n * (before any `await` statements.)\n *\n * @internal\n */\n// </docs>\nexport const useLexicalScope = () => {\n    const context = getInvokeContext();\n    let qrl = context.$qrl$;\n    if (!qrl) {\n        const el = context.$element$;\n        assertDefined(el, 'invoke: element must be defined inside useLexicalScope()', context);\n        const containerElement = _getQContainerElement(el);\n        assertDefined(containerElement, `invoke: cant find parent q:container of`, el);\n        if (containerElement.getAttribute('q:runtime') == '2') {\n            const container = getDomContainer(containerElement);\n            qrl = container.parseQRL(decodeURIComponent(String(context.$url$)));\n        }\n        else {\n            qrl = parseQRL(decodeURIComponent(String(context.$url$)), containerElement);\n            assertQrl(qrl);\n            resumeIfNeeded(containerElement);\n            const elCtx = getContext(el, _getContainerState(containerElement));\n            inflateQrl(qrl, elCtx);\n        }\n    }\n    else {\n        assertQrl(qrl);\n        assertDefined(qrl.$captureRef$, 'invoke: qrl $captureRef$ must be defined inside useLexicalScope()', qrl);\n    }\n    return qrl.$captureRef$;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWxleGljYWwtc2NvcGUucHVibGljLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtbGV4aWNhbC1zY29wZS5wdWJsaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUM5QyxPQUFPLEVBQUUsU0FBUyxFQUFvQixNQUFNLGtCQUFrQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGVBQWUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXBGLGlEQUFpRDtBQUNqRCx5Q0FBeUM7QUFDekMsOENBQThDO0FBQzlDOzs7Ozs7Ozs7R0FTRztBQUNILFVBQVU7QUFDVixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsR0FBNkIsRUFBRTtJQUM1RCxNQUFNLE9BQU8sR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ25DLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUF5QyxDQUFDO0lBQzVELElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNULE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDN0IsYUFBYSxDQUFDLEVBQUUsRUFBRSwwREFBMEQsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2RixNQUFNLGdCQUFnQixHQUFHLHFCQUFxQixDQUFDLEVBQUUsQ0FBZ0IsQ0FBQztRQUNsRSxhQUFhLENBQUMsZ0JBQWdCLEVBQUUseUNBQXlDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDL0UsSUFBSSxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7WUFDdEQsTUFBTSxTQUFTLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDcEQsR0FBRyxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUF5QixDQUFDO1FBQzlGLENBQUM7YUFBTSxDQUFDO1lBQ04sR0FBRyxHQUFHLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztZQUM1RSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDZixjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUNqQyxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsRUFBRSxFQUFFLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztZQUNuRSxVQUFVLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3pCLENBQUM7SUFDSCxDQUFDO1NBQU0sQ0FBQztRQUNOLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNmLGFBQWEsQ0FDWCxHQUFHLENBQUMsWUFBWSxFQUNoQixtRUFBbUUsRUFDbkUsR0FBRyxDQUNKLENBQUM7SUFDSixDQUFDO0lBQ0QsT0FBTyxHQUFJLENBQUMsWUFBb0IsQ0FBQztBQUNuQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnREZWZpbmVkIH0gZnJvbSAnLi4vZXJyb3IvYXNzZXJ0JztcbmltcG9ydCB7IGluZmxhdGVRcmwsIHBhcnNlUVJMIH0gZnJvbSAnLi4vcXJsL3FybCc7XG5pbXBvcnQgeyBnZXRJbnZva2VDb250ZXh0IH0gZnJvbSAnLi91c2UtY29yZSc7XG5pbXBvcnQgeyBhc3NlcnRRcmwsIHR5cGUgUVJMSW50ZXJuYWwgfSBmcm9tICcuLi9xcmwvcXJsLWNsYXNzJztcbmltcG9ydCB7IGdldENvbnRleHQgfSBmcm9tICcuLi9zdGF0ZS9jb250ZXh0JztcbmltcG9ydCB7IHJlc3VtZUlmTmVlZGVkIH0gZnJvbSAnLi4vY29udGFpbmVyL3Jlc3VtZSc7XG5pbXBvcnQgeyBfZ2V0Q29udGFpbmVyU3RhdGUgfSBmcm9tICcuLi9jb250YWluZXIvY29udGFpbmVyJztcbmltcG9ydCB7IF9nZXRRQ29udGFpbmVyRWxlbWVudCwgZ2V0RG9tQ29udGFpbmVyIH0gZnJvbSAnLi4vdjIvY2xpZW50L2RvbS1jb250YWluZXInO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VMZXhpY2FsU2NvcGVcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjdXNlTGV4aWNhbFNjb3BlIGluc3RlYWQpXG4vKipcbiAqIFVzZWQgYnkgdGhlIFF3aWsgT3B0aW1pemVyIHRvIHJlc3RvcmUgdGhlIGxleGljYWxseSBzY29wZWQgdmFyaWFibGVzLlxuICpcbiAqIFRoaXMgbWV0aG9kIHNob3VsZCBub3QgYmUgcHJlc2VudCBpbiB0aGUgYXBwbGljYXRpb24gc291cmNlIGNvZGUuXG4gKlxuICogTk9URTogYHVzZUxleGljYWxTY29wZWAgbWV0aG9kIGNhbiBvbmx5IGJlIHVzZWQgaW4gdGhlIHN5bmNocm9ub3VzIHBvcnRpb24gb2YgdGhlIGNhbGxiYWNrXG4gKiAoYmVmb3JlIGFueSBgYXdhaXRgIHN0YXRlbWVudHMuKVxuICpcbiAqIEBpbnRlcm5hbFxuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3QgdXNlTGV4aWNhbFNjb3BlID0gPFZBUlMgZXh0ZW5kcyBhbnlbXT4oKTogVkFSUyA9PiB7XG4gIGNvbnN0IGNvbnRleHQgPSBnZXRJbnZva2VDb250ZXh0KCk7XG4gIGxldCBxcmwgPSBjb250ZXh0LiRxcmwkIGFzIFFSTEludGVybmFsPHVua25vd24+IHwgdW5kZWZpbmVkO1xuICBpZiAoIXFybCkge1xuICAgIGNvbnN0IGVsID0gY29udGV4dC4kZWxlbWVudCQ7XG4gICAgYXNzZXJ0RGVmaW5lZChlbCwgJ2ludm9rZTogZWxlbWVudCBtdXN0IGJlIGRlZmluZWQgaW5zaWRlIHVzZUxleGljYWxTY29wZSgpJywgY29udGV4dCk7XG4gICAgY29uc3QgY29udGFpbmVyRWxlbWVudCA9IF9nZXRRQ29udGFpbmVyRWxlbWVudChlbCkgYXMgSFRNTEVsZW1lbnQ7XG4gICAgYXNzZXJ0RGVmaW5lZChjb250YWluZXJFbGVtZW50LCBgaW52b2tlOiBjYW50IGZpbmQgcGFyZW50IHE6Y29udGFpbmVyIG9mYCwgZWwpO1xuICAgIGlmIChjb250YWluZXJFbGVtZW50LmdldEF0dHJpYnV0ZSgncTpydW50aW1lJykgPT0gJzInKSB7XG4gICAgICBjb25zdCBjb250YWluZXIgPSBnZXREb21Db250YWluZXIoY29udGFpbmVyRWxlbWVudCk7XG4gICAgICBxcmwgPSBjb250YWluZXIucGFyc2VRUkwoZGVjb2RlVVJJQ29tcG9uZW50KFN0cmluZyhjb250ZXh0LiR1cmwkKSkpIGFzIFFSTEludGVybmFsPHVua25vd24+O1xuICAgIH0gZWxzZSB7XG4gICAgICBxcmwgPSBwYXJzZVFSTChkZWNvZGVVUklDb21wb25lbnQoU3RyaW5nKGNvbnRleHQuJHVybCQpKSwgY29udGFpbmVyRWxlbWVudCk7XG4gICAgICBhc3NlcnRRcmwocXJsKTtcbiAgICAgIHJlc3VtZUlmTmVlZGVkKGNvbnRhaW5lckVsZW1lbnQpO1xuICAgICAgY29uc3QgZWxDdHggPSBnZXRDb250ZXh0KGVsLCBfZ2V0Q29udGFpbmVyU3RhdGUoY29udGFpbmVyRWxlbWVudCkpO1xuICAgICAgaW5mbGF0ZVFybChxcmwsIGVsQ3R4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYXNzZXJ0UXJsKHFybCk7XG4gICAgYXNzZXJ0RGVmaW5lZChcbiAgICAgIHFybC4kY2FwdHVyZVJlZiQsXG4gICAgICAnaW52b2tlOiBxcmwgJGNhcHR1cmVSZWYkIG11c3QgYmUgZGVmaW5lZCBpbnNpZGUgdXNlTGV4aWNhbFNjb3BlKCknLFxuICAgICAgcXJsXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcXJsIS4kY2FwdHVyZVJlZiQgYXMgVkFSUztcbn07XG4iXX0=","import { getLastSubscription } from '../../state/common';\nimport { getContext, tryGetContext } from '../../state/context';\nimport { trackSignalV1 } from '../../use/use-core';\nimport { logError } from '../../util/log';\nimport { serializeClassWithHost, stringifyStyle } from '../execute-component';\nimport { insertBefore, removeNode } from './operations';\nimport { getVdom, processData } from './render-dom';\nimport { SVG_NS, createElm, diffVnode, getVnodeFromEl, smartSetProperty } from './visitor';\nimport { Virtual, JSXNodeImpl } from '../jsx/jsx-runtime';\nimport { isPromise } from '../../util/promises';\nimport { isQwikElement } from '../../util/element';\nexport const executeSignalOperation = (rCtx, operation) => {\n    try {\n        const type = operation[0];\n        const staticCtx = rCtx.$static$;\n        switch (type) {\n            case 1:\n            case 2: {\n                let elm;\n                let hostElm;\n                if (type === 1) {\n                    elm = operation[1];\n                    hostElm = operation[3];\n                }\n                else {\n                    elm = operation[3];\n                    hostElm = operation[1];\n                }\n                // assertTrue(elm.isConnected, 'element must be connected to the dom');\n                // assertTrue(hostElm.isConnected, 'host element must be connected to the dom');\n                const elCtx = tryGetContext(elm);\n                if (elCtx == null) {\n                    return;\n                }\n                const prop = operation[4];\n                const isSVG = elm.namespaceURI === SVG_NS;\n                staticCtx.$containerState$.$subsManager$.$clearSignal$(operation);\n                let value = trackSignalV1(operation[2], operation.slice(0, -1));\n                if (prop === 'class') {\n                    value = serializeClassWithHost(value, tryGetContext(hostElm));\n                }\n                else if (prop === 'style') {\n                    value = stringifyStyle(value);\n                }\n                const vdom = getVdom(elCtx);\n                if (prop in vdom.$varProps$ && vdom.$varProps$[prop] === value) {\n                    return;\n                }\n                vdom.$varProps$[prop] = value;\n                return smartSetProperty(staticCtx, elm, prop, value, isSVG);\n            }\n            case 3:\n            case 4: {\n                const elm = operation[3];\n                if (!staticCtx.$visited$.includes(elm)) {\n                    // assertTrue(elm.isConnected, 'text node must be connected to the dom');\n                    staticCtx.$containerState$.$subsManager$.$clearSignal$(operation);\n                    // MISKO: I believe no `invocationContext` is OK because the JSX in signal\n                    // has already been converted to JSX and there is nothing to execute there.\n                    const invocationContext = undefined;\n                    let signalValue = trackSignalV1(operation[2], operation.slice(0, -1));\n                    const subscription = getLastSubscription();\n                    if (Array.isArray(signalValue)) {\n                        signalValue = new JSXNodeImpl(Virtual, {}, null, signalValue, 0, null);\n                    }\n                    let newVnode = processData(signalValue, invocationContext);\n                    if (isPromise(newVnode)) {\n                        logError('Rendering promises in JSX signals is not supported');\n                    }\n                    else {\n                        if (newVnode === undefined) {\n                            newVnode = processData('', invocationContext);\n                        }\n                        const oldVnode = getVnodeFromEl(elm);\n                        const element = getQwikElement(operation[1]);\n                        rCtx.$cmpCtx$ = getContext(element, rCtx.$static$.$containerState$);\n                        if (oldVnode.$type$ == newVnode.$type$ &&\n                            oldVnode.$key$ == newVnode.$key$ &&\n                            oldVnode.$id$ == newVnode.$id$) {\n                            diffVnode(rCtx, oldVnode, newVnode, 0);\n                        }\n                        else {\n                            const promises = []; // TODO(misko): hook this up\n                            const oldNode = oldVnode.$elm$;\n                            const newElm = createElm(rCtx, newVnode, 0, promises);\n                            if (promises.length) {\n                                logError('Rendering promises in JSX signals is not supported');\n                            }\n                            subscription[3] = newElm;\n                            insertBefore(rCtx.$static$, elm.parentElement, newElm, oldNode);\n                            oldNode && removeNode(staticCtx, oldNode);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    catch (e) {\n        // Ignore\n    }\n};\nfunction getQwikElement(element) {\n    while (element) {\n        if (isQwikElement(element)) {\n            return element;\n        }\n        element = element.parentElement;\n    }\n    throw new Error('Not found');\n}\n//# sourceMappingURL=data:application/json;base64,","import { _getContainerState } from '../../container/container';\nimport { resumeIfNeeded } from '../../container/resume';\nimport { assertDefined, assertTrue } from '../../error/assert';\nimport { getPlatform, isServerPlatform } from '../../platform/platform';\nimport { HOST_FLAG_DIRTY, getContext } from '../../state/context';\nimport { useLexicalScope } from '../../use/use-lexical-scope.public';\nimport { TaskFlags, isSubscriberDescriptor, runSubscriber, } from '../../use/use-task';\nimport { getDocument } from '../../util/dom';\nimport { logError, logWarn } from '../../util/log';\nimport { QStyle } from '../../util/markers';\nimport { maybeThen } from '../../util/promises';\nimport { qDev } from '../../util/qdev';\nimport { getDomContainer, isDomContainer } from '../../v2/client/dom-container';\nimport { vnode_isVNode } from '../../v2/client/vnode';\nimport { ChoreType } from '../../v2/shared/scheduler';\nimport { createRenderContext } from '../execute-component';\nimport { directGetAttribute } from '../fast-calls';\nimport { appendChild, printRenderStats } from './operations';\nimport { renderComponent } from './render-dom';\nimport { executeSignalOperation } from './signals';\nimport { getRootNode } from './virtual-element';\nimport { IS_HEAD, IS_SVG, SVG_NS, executeContextWithScrollAndTransition } from './visitor';\nexport const notifyChange = (subAction, containerState) => {\n    if (subAction[0] === 0) {\n        const host = subAction[1];\n        if (isSubscriberDescriptor(host)) {\n            notifyTask(host, containerState);\n        }\n        else {\n            notifyRender(host, containerState);\n        }\n    }\n    else {\n        notifySignalOperation(subAction, containerState);\n    }\n};\n/**\n * Mark component for rendering.\n *\n * Use `notifyRender` method to mark a component for rendering at some later point in time. This\n * method uses `getPlatform(doc).queueRender` for scheduling of the rendering. The default\n * implementation of the method is to use `requestAnimationFrame` to do actual rendering.\n *\n * The method is intended to coalesce multiple calls into `notifyRender` into a single call for\n * rendering.\n *\n * @param hostElement - Host-element of the component to re-render.\n * @returns A promise which is resolved when the component has been rendered.\n */\nconst notifyRender = (hostElement, containerState) => {\n    if (vnode_isVNode(hostElement)) {\n        const container2 = containerState;\n        container2.markComponentForRender(hostElement);\n    }\n    else {\n        const server = isServerPlatform();\n        if (!server) {\n            resumeIfNeeded(containerState.$containerEl$);\n        }\n        const elCtx = getContext(hostElement, containerState);\n        assertDefined(elCtx.$componentQrl$, `render: notified host element must have a defined $renderQrl$`, elCtx);\n        if (elCtx.$flags$ & HOST_FLAG_DIRTY) {\n            return;\n        }\n        elCtx.$flags$ |= HOST_FLAG_DIRTY;\n        const activeRendering = containerState.$hostsRendering$ !== undefined;\n        if (activeRendering) {\n            containerState.$hostsStaging$.add(elCtx);\n        }\n        else {\n            if (server) {\n                logWarn('Can not rerender in server platform');\n                return undefined;\n            }\n            containerState.$hostsNext$.add(elCtx);\n            scheduleFrame(containerState);\n        }\n    }\n};\nconst notifySignalOperation = (op, containerState) => {\n    const activeRendering = containerState.$hostsRendering$ !== undefined;\n    containerState.$opsNext$.add(op);\n    if (!activeRendering) {\n        scheduleFrame(containerState);\n    }\n};\nexport const notifyTask = (task, containerState) => {\n    if (task.$flags$ & TaskFlags.DIRTY) {\n        return;\n    }\n    task.$flags$ |= TaskFlags.DIRTY;\n    if (isDomContainer(containerState)) {\n        // TODO @mhevery please add $state$ to the ContainerState type if this is correct\n        containerState.$tasks$.push(task);\n        containerState.scheduleRender();\n    }\n    else {\n        const activeRendering = containerState.$hostsRendering$ !== undefined;\n        if (activeRendering) {\n            containerState.$taskStaging$.add(task);\n        }\n        else {\n            containerState.$taskNext$.add(task);\n            scheduleFrame(containerState);\n        }\n    }\n};\nconst scheduleFrame = (containerState) => {\n    if (containerState.$renderPromise$ === undefined) {\n        containerState.$renderPromise$ = getPlatform().nextTick(() => renderMarked(containerState));\n    }\n    return containerState.$renderPromise$;\n};\n/**\n * Low-level API used by the Optimizer to process `useTask$()` API. This method is not intended to\n * be used by developers.\n *\n * @internal\n */\nexport const _hW = () => {\n    const [task] = useLexicalScope();\n    const container = getDomContainer(task.$el$);\n    const type = task.$flags$ & TaskFlags.VISIBLE_TASK ? ChoreType.VISIBLE : ChoreType.TASK;\n    container.$scheduler$(type, task);\n};\nconst renderMarked = async (containerState) => {\n    const containerEl = containerState.$containerEl$;\n    const doc = getDocument(containerEl);\n    try {\n        const rCtx = createRenderContext(doc, containerState);\n        const staticCtx = rCtx.$static$;\n        const hostsRendering = (containerState.$hostsRendering$ = new Set(containerState.$hostsNext$));\n        containerState.$hostsNext$.clear();\n        await executeTasksBefore(containerState, rCtx);\n        containerState.$hostsStaging$.forEach((host) => {\n            hostsRendering.add(host);\n        });\n        containerState.$hostsStaging$.clear();\n        const signalOperations = Array.from(containerState.$opsNext$);\n        containerState.$opsNext$.clear();\n        const renderingQueue = Array.from(hostsRendering);\n        sortNodes(renderingQueue);\n        if (!containerState.$styleMoved$ && renderingQueue.length > 0) {\n            containerState.$styleMoved$ = true;\n            const parentJSON = containerEl === doc.documentElement ? doc.body : containerEl;\n            parentJSON.querySelectorAll('style[q\\\\:style]').forEach((el) => {\n                containerState.$styleIds$.add(directGetAttribute(el, QStyle));\n                appendChild(staticCtx, doc.head, el);\n            });\n        }\n        for (const elCtx of renderingQueue) {\n            const el = elCtx.$element$;\n            if (!staticCtx.$hostElements$.has(el)) {\n                if (elCtx.$componentQrl$) {\n                    assertTrue(el.isConnected, 'element must be connected to the dom');\n                    staticCtx.$roots$.push(elCtx);\n                    try {\n                        await renderComponent(rCtx, elCtx, getFlags(el.parentElement));\n                    }\n                    catch (err) {\n                        if (qDev) {\n                            throw err;\n                        }\n                        else {\n                            logError(err);\n                        }\n                    }\n                }\n            }\n        }\n        signalOperations.forEach((op) => {\n            executeSignalOperation(rCtx, op);\n        });\n        // Add post operations\n        staticCtx.$operations$.push(...staticCtx.$postOperations$);\n        // Early exist, no dom operations\n        if (staticCtx.$operations$.length === 0) {\n            printRenderStats(staticCtx);\n            await postRendering(containerState, rCtx);\n            return;\n        }\n        await executeContextWithScrollAndTransition(staticCtx);\n        printRenderStats(staticCtx);\n        return postRendering(containerState, rCtx);\n    }\n    catch (err) {\n        logError(err);\n    }\n};\nconst getFlags = (el) => {\n    let flags = 0;\n    if (el) {\n        if (el.namespaceURI === SVG_NS) {\n            flags |= IS_SVG;\n        }\n        if (el.tagName === 'HEAD') {\n            flags |= IS_HEAD;\n        }\n    }\n    return flags;\n};\nexport const postRendering = async (containerState, rCtx) => {\n    const hostElements = rCtx.$static$.$hostElements$;\n    await executeTasksAfter(containerState, rCtx, (task, stage) => {\n        if ((task.$flags$ & TaskFlags.VISIBLE_TASK) === 0) {\n            return false;\n        }\n        if (stage) {\n            return hostElements.has(task.$el$);\n        }\n        return true;\n    });\n    // Clear staging\n    containerState.$hostsStaging$.forEach((el) => {\n        containerState.$hostsNext$.add(el);\n    });\n    containerState.$hostsStaging$.clear();\n    containerState.$hostsRendering$ = undefined;\n    containerState.$renderPromise$ = undefined;\n    const pending = containerState.$hostsNext$.size +\n        containerState.$taskNext$.size +\n        containerState.$opsNext$.size;\n    if (pending > 0) {\n        // Immediately render again\n        containerState.$renderPromise$ = renderMarked(containerState);\n    }\n};\nconst isTask = (task) => (task.$flags$ & TaskFlags.TASK) !== 0;\nconst isResourceTask = (task) => (task.$flags$ & TaskFlags.RESOURCE) !== 0;\nconst executeTasksBefore = async (containerState, rCtx) => {\n    const containerEl = containerState.$containerEl$;\n    const resourcesPromises = [];\n    const taskPromises = [];\n    containerState.$taskNext$.forEach((task) => {\n        if (isTask(task)) {\n            taskPromises.push(maybeThen(task.$qrl$.$resolveLazy$(containerEl), () => task));\n            containerState.$taskNext$.delete(task);\n        }\n        if (isResourceTask(task)) {\n            resourcesPromises.push(maybeThen(task.$qrl$.$resolveLazy$(containerEl), () => task));\n            containerState.$taskNext$.delete(task);\n        }\n    });\n    do {\n        // Run staging effected\n        containerState.$taskStaging$.forEach((task) => {\n            if (isTask(task)) {\n                taskPromises.push(maybeThen(task.$qrl$.$resolveLazy$(containerEl), () => task));\n            }\n            else if (isResourceTask(task)) {\n                resourcesPromises.push(maybeThen(task.$qrl$.$resolveLazy$(containerEl), () => task));\n            }\n            else {\n                containerState.$taskNext$.add(task);\n            }\n        });\n        containerState.$taskStaging$.clear();\n        // Wait for all promises\n        if (taskPromises.length > 0) {\n            const tasks = await Promise.all(taskPromises);\n            sortTasks(tasks);\n            await Promise.all(tasks.map((task) => {\n                return runSubscriber(task, containerState, rCtx);\n            }));\n            taskPromises.length = 0;\n        }\n    } while (containerState.$taskStaging$.size > 0);\n    if (resourcesPromises.length > 0) {\n        const resources = await Promise.all(resourcesPromises);\n        sortTasks(resources);\n        // no await so these run concurrently with the rendering\n        for (const task of resources) {\n            runSubscriber(task, containerState, rCtx);\n        }\n    }\n};\n/** Execute tasks that are dirty during SSR render */\nexport const executeSSRTasks = (containerState, rCtx) => {\n    const containerEl = containerState.$containerEl$;\n    const staging = containerState.$taskStaging$;\n    if (!staging.size) {\n        return;\n    }\n    const taskPromises = [];\n    let tries = 20;\n    const runTasks = () => {\n        // SSR dirty tasks are in taskStaging\n        staging.forEach((task) => {\n            if (isTask(task)) {\n                taskPromises.push(maybeThen(task.$qrl$.$resolveLazy$(containerEl), () => task));\n            }\n            // We ignore other types of tasks, they are handled via waitOn\n        });\n        staging.clear();\n        // Wait for all promises\n        if (taskPromises.length > 0) {\n            return Promise.all(taskPromises).then(async (tasks) => {\n                sortTasks(tasks);\n                await Promise.all(tasks.map((task) => {\n                    return runSubscriber(task, containerState, rCtx);\n                }));\n                taskPromises.length = 0;\n                if (--tries && staging.size > 0) {\n                    return runTasks();\n                }\n                if (!tries) {\n                    logWarn(`Infinite task loop detected. Tasks:\\n${Array.from(staging)\n                        .map((task) => `  ${task.$qrl$.$symbol$}`)\n                        .join('\\n')}`);\n                }\n            });\n        }\n    };\n    return runTasks();\n};\nconst executeTasksAfter = async (containerState, rCtx, taskPred) => {\n    const taskPromises = [];\n    const containerEl = containerState.$containerEl$;\n    containerState.$taskNext$.forEach((task) => {\n        if (taskPred(task, false)) {\n            if (task.$el$.isConnected) {\n                taskPromises.push(maybeThen(task.$qrl$.$resolveLazy$(containerEl), () => task));\n            }\n            containerState.$taskNext$.delete(task);\n        }\n    });\n    do {\n        // Run staging effected\n        containerState.$taskStaging$.forEach((task) => {\n            if (task.$el$.isConnected) {\n                if (taskPred(task, true)) {\n                    taskPromises.push(maybeThen(task.$qrl$.$resolveLazy$(containerEl), () => task));\n                }\n                else {\n                    containerState.$taskNext$.add(task);\n                }\n            }\n        });\n        containerState.$taskStaging$.clear();\n        // Wait for all promises\n        if (taskPromises.length > 0) {\n            const tasks = await Promise.all(taskPromises);\n            sortTasks(tasks);\n            for (const task of tasks) {\n                runSubscriber(task, containerState, rCtx);\n            }\n            taskPromises.length = 0;\n        }\n    } while (containerState.$taskStaging$.size > 0);\n};\nconst sortNodes = (elements) => {\n    elements.sort((a, b) => a.$element$.compareDocumentPosition(getRootNode(b.$element$)) & 2 ? 1 : -1);\n};\nconst sortTasks = (tasks) => {\n    const isServer = isServerPlatform();\n    tasks.sort((a, b) => {\n        if (isServer || a.$el$ === b.$el$) {\n            return a.$index$ < b.$index$ ? -1 : 1;\n        }\n        return (a.$el$.compareDocumentPosition(getRootNode(b.$el$)) & 2) !== 0 ? 1 : -1;\n    });\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined, assertFail, assertTrue } from '../error/assert';\nimport { QError_verifySerializable, qError } from '../error/error';\nimport { notifyChange } from '../render/dom/notify-render';\nimport { serializeAttribute } from '../render/execute-component';\nimport { trackSignalV1 } from '../use/use-core';\nimport { TaskFlags, isComputedTask, isResourceTask, isSubscriberDescriptor, isTask, } from '../use/use-task';\nimport { isNode } from '../util/element';\nimport { logError, throwErrorAndStop } from '../util/log';\nimport { ELEMENT_PROPS, OnRenderProp } from '../util/markers';\nimport { isPromise } from '../util/promises';\nimport { seal } from '../util/qdev';\nimport { isArray, isFunction, isObject, isSerializableObject } from '../util/types';\nimport { ElementVNodeProps } from '../v2/client/types';\nimport { VNodeJournalOpCode, vnode_setAttr } from '../v2/client/vnode';\nimport { ChoreType } from '../v2/shared/scheduler';\nimport { canSerialize2 } from '../v2/shared/shared-serialization';\nimport { isContainer2 } from '../v2/shared/types';\nimport { isSignal } from '../v2/signal/v2-signal';\nimport { unwrapStore } from '../v2/signal/v2-store';\nimport { QObjectFlagsSymbol, QObjectManagerSymbol, QObjectTargetSymbol } from './constants';\nimport { tryGetContext } from './context';\n/** @internal */\nexport const verifySerializable = (value, preMessage) => {\n    const seen = new Set();\n    return _verifySerializable(value, seen, '_', preMessage);\n};\nconst _verifySerializable = (value, seen, ctx, preMessage) => {\n    const unwrapped = unwrapStore(value);\n    if (unwrapped == null) {\n        return value;\n    }\n    if (shouldSerialize(unwrapped)) {\n        if (seen.has(unwrapped)) {\n            return value;\n        }\n        seen.add(unwrapped);\n        if (isSignal(unwrapped)) {\n            return value;\n        }\n        if (canSerialize2(unwrapped)) {\n            return value;\n        }\n        const typeObj = typeof unwrapped;\n        switch (typeObj) {\n            case 'object':\n                if (isPromise(unwrapped)) {\n                    return value;\n                }\n                if (isNode(unwrapped)) {\n                    return value;\n                }\n                if (isArray(unwrapped)) {\n                    let expectIndex = 0;\n                    // Make sure the array has no holes\n                    unwrapped.forEach((v, i) => {\n                        if (i !== expectIndex) {\n                            throw qError(QError_verifySerializable, unwrapped);\n                        }\n                        _verifySerializable(v, seen, ctx + '[' + i + ']');\n                        expectIndex = i + 1;\n                    });\n                    return value;\n                }\n                if (isSerializableObject(unwrapped)) {\n                    for (const [key, item] of Object.entries(unwrapped)) {\n                        _verifySerializable(item, seen, ctx + '.' + key);\n                    }\n                    return value;\n                }\n                break;\n            case 'boolean':\n            case 'string':\n            case 'number':\n                return value;\n        }\n        let message = '';\n        if (preMessage) {\n            message = preMessage;\n        }\n        else {\n            message = 'Value cannot be serialized';\n        }\n        if (ctx !== '_') {\n            message += ` in ${ctx},`;\n        }\n        if (typeObj === 'object') {\n            message += ` because it's an instance of \"${value?.constructor.name}\". You might need to use 'noSerialize()' or use an object literal instead. Check out https://qwik.dev/docs/advanced/dollar/`;\n        }\n        else if (typeObj === 'function') {\n            const fnName = value.name;\n            message += ` because it's a function named \"${fnName}\". You might need to convert it to a QRL using $(fn):\\n\\nconst ${fnName} = $(${String(value)});\\n\\nPlease check out https://qwik.dev/docs/advanced/qrl/ for more information.`;\n        }\n        console.error('Trying to serialize', value);\n        throwErrorAndStop(message);\n    }\n    return value;\n};\nconst noSerializeSet = /*#__PURE__*/ new WeakSet();\nconst weakSerializeSet = /*#__PURE__*/ new WeakSet();\nexport const shouldSerialize = (obj) => {\n    if (isObject(obj) || isFunction(obj)) {\n        return !noSerializeSet.has(obj);\n    }\n    return true;\n};\nexport const fastSkipSerialize = (obj) => {\n    return noSerializeSet.has(obj);\n};\nexport const fastWeakSerialize = (obj) => {\n    return weakSerializeSet.has(obj);\n};\n// <docs markdown=\"../readme.md#noSerialize\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#noSerialize instead)\n/**\n * Marks a property on a store as non-serializable.\n *\n * At times it is necessary to store values on a store that are non-serializable. Normally this is a\n * runtime error as Store wants to eagerly report when a non-serializable property is assigned to\n * it.\n *\n * You can use `noSerialize()` to mark a value as non-serializable. The value is persisted in the\n * Store but does not survive serialization. The implication is that when your application is\n * resumed, the value of this object will be `undefined`. You will be responsible for recovering\n * from this.\n *\n * See: [noSerialize Tutorial](http://qwik.dev/tutorial/store/no-serialize)\n *\n * @public\n */\n// </docs>\nexport const noSerialize = (input) => {\n    if (input != null) {\n        noSerializeSet.add(input);\n    }\n    return input;\n};\n/** @internal */\nexport const _weakSerialize = (input) => {\n    weakSerializeSet.add(input);\n    return input;\n};\nexport const isConnected = (sub) => {\n    if (isSubscriberDescriptor(sub)) {\n        return isConnected(sub.$el$);\n    }\n    else {\n        return !!tryGetContext(sub) || sub.isConnected;\n    }\n};\n/** @public */\nexport const unwrapProxy = (proxy) => {\n    return isObject(proxy) ? (getProxyTarget(proxy) ?? proxy) : proxy;\n};\nexport const getProxyTarget = (obj) => {\n    return obj[QObjectTargetSymbol];\n};\nexport const getSubscriptionManager = (obj) => {\n    return obj[QObjectManagerSymbol];\n};\nexport const getProxyFlags = (obj) => {\n    return obj[QObjectFlagsSymbol];\n};\n/** @internal */\nexport var SubscriptionType;\n(function (SubscriptionType) {\n    SubscriptionType[SubscriptionType[\"HOST\"] = 0] = \"HOST\";\n    SubscriptionType[SubscriptionType[\"PROP_IMMUTABLE\"] = 1] = \"PROP_IMMUTABLE\";\n    SubscriptionType[SubscriptionType[\"PROP_MUTABLE\"] = 2] = \"PROP_MUTABLE\";\n    SubscriptionType[SubscriptionType[\"TEXT_IMMUTABLE\"] = 3] = \"TEXT_IMMUTABLE\";\n    SubscriptionType[SubscriptionType[\"TEXT_MUTABLE\"] = 4] = \"TEXT_MUTABLE\";\n})(SubscriptionType || (SubscriptionType = {}));\nexport var SubscriptionProp;\n(function (SubscriptionProp) {\n    SubscriptionProp[SubscriptionProp[\"TYPE\"] = 0] = \"TYPE\";\n    SubscriptionProp[SubscriptionProp[\"HOST\"] = 1] = \"HOST\";\n    SubscriptionProp[SubscriptionProp[\"SIGNAL\"] = 2] = \"SIGNAL\";\n    SubscriptionProp[SubscriptionProp[\"ELEMENT\"] = 3] = \"ELEMENT\";\n    SubscriptionProp[SubscriptionProp[\"ELEMENT_PROP\"] = 4] = \"ELEMENT_PROP\";\n    SubscriptionProp[SubscriptionProp[\"STYLE_ID\"] = 5] = \"STYLE_ID\";\n})(SubscriptionProp || (SubscriptionProp = {}));\nexport const serializeSubscription = (sub, getObjId) => {\n    const type = sub[SubscriptionProp.TYPE];\n    const host = typeof sub[SubscriptionProp.HOST] === 'string'\n        ? sub[SubscriptionProp.HOST]\n        : getObjId(sub[SubscriptionProp.HOST]);\n    if (!host) {\n        return undefined;\n    }\n    let base = type + ' ' + host;\n    let key;\n    if (type === SubscriptionType.HOST) {\n        key = sub[SubscriptionProp.SIGNAL];\n    }\n    else {\n        const signalID = getObjId(sub[SubscriptionProp.SIGNAL]);\n        if (!signalID) {\n            return undefined;\n        }\n        if (type <= SubscriptionType.PROP_MUTABLE) {\n            key = sub[SubscriptionProp.ELEMENT_PROP];\n            base += ` ${signalID} ${must(getObjId(sub[SubscriptionProp.ELEMENT]))} ${sub[SubscriptionProp.ELEMENT_PROP]}`;\n        }\n        else if (type <= SubscriptionType.TEXT_MUTABLE) {\n            key =\n                sub.length > SubscriptionProp.ELEMENT_PROP ? sub[SubscriptionProp.ELEMENT_PROP] : undefined;\n            const nodeID = typeof sub[SubscriptionProp.ELEMENT] === 'string'\n                ? sub[SubscriptionProp.ELEMENT]\n                : must(getObjId(sub[SubscriptionProp.ELEMENT]));\n            base += ` ${signalID} ${nodeID}`;\n        }\n        else {\n            assertFail('Should not get here: ' + type);\n        }\n    }\n    if (key) {\n        base += ` ${encodeURI(key)}`;\n    }\n    return base;\n};\nexport const parseSubscription = (sub, getObject) => {\n    const parts = sub.split(' ');\n    const type = parseInt(parts[0], 10);\n    assertTrue(parts.length >= 2, 'At least 2 parts');\n    const host = getObject(parts[1]);\n    if (!host) {\n        return undefined;\n    }\n    if (isSubscriberDescriptor(host) && !host.$el$) {\n        return undefined;\n    }\n    if (type === SubscriptionType.HOST) {\n        assertTrue(parts.length <= 3, 'Max 3 parts');\n        return [type, host, parts.length === 3 ? safeDecode(parts[2]) : undefined];\n    }\n    else if (type <= 2) {\n        assertTrue(parts.length === 6 || parts.length === 7, 'Type B has 5');\n        return [\n            type,\n            host,\n            getObject(parts[2]),\n            getObject(parts[3]),\n            parts[4],\n            safeDecode(parts[5]),\n            safeDecode(parts[6]),\n        ];\n    }\n    assertTrue(type <= 4 && (parts.length === 4 || parts.length === 5), 'Type C has 4');\n    return [\n        type,\n        host,\n        getObject(parts[2]),\n        getObject(parts[3]),\n        safeDecode(parts[4]),\n    ];\n};\nconst safeDecode = (str) => {\n    if (str !== undefined) {\n        return decodeURI(str);\n    }\n    return undefined;\n};\nexport const createSubscriptionManager = (containerState) => {\n    const groupToManagers = new Map();\n    const manager = {\n        $groupToManagers$: groupToManagers,\n        $createManager$: (initialMap) => {\n            return new LocalSubscriptionManager(groupToManagers, containerState, initialMap);\n        },\n        $clearSub$: (group) => {\n            const managers = groupToManagers.get(group);\n            if (managers) {\n                for (const manager of managers) {\n                    manager.$unsubGroup$(group);\n                }\n                groupToManagers.delete(group);\n                managers.length = 0;\n            }\n        },\n        $clearSignal$: (signal) => {\n            const managers = groupToManagers.get(signal[SubscriptionProp.HOST]);\n            if (managers) {\n                for (const manager of managers) {\n                    manager.$unsubEntry$(signal);\n                }\n            }\n        },\n    };\n    seal(manager);\n    return manager;\n};\nexport class LocalSubscriptionManager {\n    constructor($groupToManagers$, $containerState$, initialMap) {\n        this.$groupToManagers$ = $groupToManagers$;\n        this.$containerState$ = $containerState$;\n        this.$subs$ = [];\n        if (initialMap) {\n            this.$addSubs$(initialMap);\n        }\n        seal(this);\n    }\n    $addSubs$(subs) {\n        this.$subs$.push(...subs);\n        for (const sub of this.$subs$) {\n            this.$addToGroup$(sub[SubscriptionProp.HOST], this);\n        }\n    }\n    $addToGroup$(group, manager) {\n        let managers = this.$groupToManagers$.get(group);\n        if (!managers) {\n            this.$groupToManagers$.set(group, (managers = []));\n        }\n        if (!managers.includes(manager)) {\n            managers.push(manager);\n        }\n    }\n    $unsubGroup$(group) {\n        const subs = this.$subs$;\n        for (let i = 0; i < subs.length; i++) {\n            const found = subs[i][SubscriptionProp.HOST] === group;\n            if (found) {\n                subs.splice(i, 1);\n                i--;\n            }\n        }\n    }\n    $unsubEntry$(entry) {\n        const [type, group, signal, elm] = entry;\n        const subs = this.$subs$;\n        if (type === SubscriptionType.PROP_IMMUTABLE || type === SubscriptionType.PROP_MUTABLE) {\n            const prop = entry[SubscriptionProp.ELEMENT_PROP];\n            for (let i = 0; i < subs.length; i++) {\n                const sub = subs[i];\n                const match = sub[SubscriptionProp.TYPE] === type &&\n                    sub[SubscriptionProp.HOST] === group &&\n                    sub[SubscriptionProp.SIGNAL] === signal &&\n                    sub[SubscriptionProp.ELEMENT] === elm &&\n                    sub[SubscriptionProp.ELEMENT_PROP] === prop;\n                if (match) {\n                    subs.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n        else if (type === SubscriptionType.TEXT_IMMUTABLE || type === SubscriptionType.TEXT_MUTABLE) {\n            for (let i = 0; i < subs.length; i++) {\n                const sub = subs[i];\n                const match = sub[SubscriptionProp.TYPE] === type &&\n                    sub[SubscriptionProp.HOST] === group &&\n                    sub[SubscriptionProp.SIGNAL] === signal &&\n                    sub[SubscriptionProp.ELEMENT] === elm;\n                if (match) {\n                    subs.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n    }\n    $addSub$(sub, key) {\n        const subs = this.$subs$;\n        const group = sub[SubscriptionProp.HOST];\n        if (sub[SubscriptionProp.TYPE] === SubscriptionType.HOST &&\n            subs.some(([_type, _group, _key]) => _type === SubscriptionType.HOST && _group === group && _key === key)) {\n            return;\n        }\n        subs.push((__lastSubscription = [...sub, key]));\n        this.$addToGroup$(group, this);\n    }\n    $notifySubs$(key) {\n        // TODO(HACK): we are resubscribing to the signal, so we are removing a sub, we need to iterate over a copy of subs\n        const subs = [...this.$subs$];\n        for (const sub of subs) {\n            const compare = sub[sub.length - 1];\n            if (key && compare && compare !== key) {\n                continue;\n            }\n            if (isContainer2(this.$containerState$)) {\n                const type = sub[SubscriptionProp.TYPE];\n                const host = sub[SubscriptionProp.HOST];\n                const scheduler = this.$containerState$.$scheduler$;\n                if (type == SubscriptionType.HOST) {\n                    if (isTask(host)) {\n                        if (isComputedTask(host)) {\n                            // scheduler(ChoreType.COMPUTED, host);\n                        }\n                        else if (isResourceTask(host)) {\n                            scheduler(ChoreType.RESOURCE, host);\n                        }\n                        else {\n                            const task = host;\n                            scheduler(task.$flags$ & TaskFlags.VISIBLE_TASK ? ChoreType.VISIBLE : ChoreType.TASK, task);\n                        }\n                    }\n                    else {\n                        const componentQrl = this.$containerState$.getHostProp(host, OnRenderProp);\n                        assertDefined(componentQrl, 'No Component found at this location');\n                        const componentProps = this.$containerState$.getHostProp(host, ELEMENT_PROPS);\n                        scheduler(ChoreType.COMPONENT, host, componentQrl, componentProps);\n                    }\n                }\n                else {\n                    const signal = sub[SubscriptionProp.SIGNAL];\n                    /**\n                     * TODO(HACK): we need to resubscribe to the value. Example:\n                     *\n                     * ```\n                     * component$(() => {\n                     *  const first = useSignal('');\n                     *  const second = useSignal('');\n                     *\n                     *  return (\n                     *  <>\n                     *     <button\n                     *       onClick$={() => {\n                     *         first.value = 'foo';\n                     *         second.value = 'foo';\n                     *       }}\n                     *     ></button>\n                     *     <div>\n                     *       {first.value && second.value && first.value === second.value ? 'equal' : 'not-equal'}\n                     *      </div>\n                     *   </>\n                     *  );\n                     * });\n                     * ```\n                     *\n                     * If the first value is falsy then the `second.value` is never executing, so the\n                     * subscription is not created.\n                     */\n                    this.$containerState$.$subsManager$.$clearSignal$(sub);\n                    const value = trackSignalV1(signal, sub);\n                    // end HACK\n                    if (type == SubscriptionType.PROP_IMMUTABLE || type == SubscriptionType.PROP_MUTABLE) {\n                        const target = sub[SubscriptionProp.ELEMENT];\n                        const propKey = sub[SubscriptionProp.ELEMENT_PROP];\n                        const styleScopedId = sub[SubscriptionProp.STYLE_ID];\n                        updateNodeProp(this.$containerState$, styleScopedId || null, target, propKey, \n                        // untrack(() => signal.value),\n                        value, type == SubscriptionType.PROP_IMMUTABLE);\n                    }\n                    else {\n                        scheduler(ChoreType.NODE_DIFF, host, sub[SubscriptionProp.ELEMENT], \n                        // untrack(() => signal.value)\n                        value);\n                    }\n                }\n            }\n            else {\n                notifyChange(sub, this.$containerState$);\n            }\n        }\n    }\n}\nfunction updateNodeProp(container, styleScopedId, target, propKey, propValue, immutable) {\n    let value = propValue;\n    value = serializeAttribute(propKey, value, styleScopedId);\n    if (!immutable) {\n        vnode_setAttr(container.$journal$, target, propKey, value);\n    }\n    else {\n        // the immutable attr/prop should not be saved into vnode props, so just push to the journal\n        const element = target[ElementVNodeProps.element];\n        container.$journal$.push(VNodeJournalOpCode.SetAttribute, element, propKey, value);\n    }\n    container.$scheduler$(ChoreType.JOURNAL_FLUSH);\n}\nlet __lastSubscription;\nexport function getLastSubscription() {\n    // HACK(misko): This is a hack to get the last subscription.\n    // It is used by `executeSignalOperation` to update the target element\n    // after the subscription has been created.\n    return __lastSubscription;\n}\nconst must = (a) => {\n    if (a == null) {\n        throw logError('must be non null', a);\n    }\n    return a;\n};\n//# sourceMappingURL=data:application/json;base64,","import { isDev } from '@builder.io/qwik/build';\nimport { assertDefined } from '../error/assert';\nimport { qError, QError_qrlIsNotFunction } from '../error/error';\nimport { getPlatform, isServerPlatform } from '../platform/platform';\nimport { verifySerializable } from '../state/common';\nimport {} from '../state/signal';\nimport { invoke, newInvokeContext, newInvokeContextFromTuple, tryGetInvokeContext, } from '../use/use-core';\nimport { getQFuncs, QInstanceAttr } from '../util/markers';\nimport { maybeThen } from '../util/promises';\nimport { qDev, qSerialize, qTest, seal } from '../util/qdev';\nimport { isArray, isFunction } from '../util/types';\nimport { isSignal } from '../v2/signal/v2-signal';\nexport const isQrl = (value) => {\n    return typeof value === 'function' && typeof value.getSymbol === 'function';\n};\n// Make sure this value is same as value in `platform.ts`\nexport const SYNC_QRL = '<sync>';\n/** Sync QRL is a function which is serialized into `<script q:func=\"qwik/json\">` tag. */\nexport const isSyncQrl = (value) => {\n    return isQrl(value) && value.$symbol$ == SYNC_QRL;\n};\nexport const createQRL = (chunk, symbol, symbolRef, symbolFn, capture, captureRef, refSymbol) => {\n    if (qDev && qSerialize) {\n        if (captureRef) {\n            for (const item of captureRef) {\n                verifySerializable(item, 'Captured variable in the closure can not be serialized');\n            }\n        }\n    }\n    let _containerEl;\n    const qrl = async function (...args) {\n        const fn = invokeFn.call(this, tryGetInvokeContext());\n        const result = await fn(...args);\n        return result;\n    };\n    const setContainer = (el) => {\n        if (!_containerEl) {\n            _containerEl = el;\n        }\n        return _containerEl;\n    };\n    // Wrap functions to provide their lexical scope\n    const wrapFn = (fn) => {\n        if (typeof fn !== 'function' || (!capture?.length && !captureRef?.length)) {\n            return fn;\n        }\n        return function (...args) {\n            let context = tryGetInvokeContext();\n            if (context) {\n                return fn.apply(this, args);\n            }\n            context = newInvokeContext();\n            context.$qrl$ = qrl;\n            context.$event$ = this;\n            return invoke.call(this, context, fn, ...args);\n        };\n    };\n    const resolve = async (containerEl) => {\n        if (symbolRef !== null) {\n            // Resolving (Promise) or already resolved (value)\n            return symbolRef;\n        }\n        if (containerEl) {\n            setContainer(containerEl);\n        }\n        if (chunk === '') {\n            // Sync QRL\n            assertDefined(_containerEl, 'Sync QRL must have container element');\n            const hash = _containerEl.getAttribute(QInstanceAttr);\n            const doc = _containerEl.ownerDocument;\n            const qFuncs = getQFuncs(doc, hash);\n            // No need to wrap, syncQRLs can't have captured scope\n            return (qrl.resolved = symbolRef = qFuncs[Number(symbol)]);\n        }\n        const start = now();\n        const ctx = tryGetInvokeContext();\n        if (symbolFn !== null) {\n            symbolRef = symbolFn().then((module) => (qrl.resolved = symbolRef = wrapFn(module[symbol])));\n        }\n        else {\n            const imported = getPlatform().importSymbol(_containerEl, chunk, symbol);\n            symbolRef = maybeThen(imported, (ref) => (qrl.resolved = symbolRef = wrapFn(ref)));\n        }\n        symbolRef.finally(() => emitUsedSymbol(symbol, ctx?.$element$, start));\n        return symbolRef;\n    };\n    const resolveLazy = (containerEl) => {\n        return symbolRef !== null ? symbolRef : resolve(containerEl);\n    };\n    function invokeFn(currentCtx, beforeFn) {\n        // Note that we bind the current `this`\n        return (...args) => maybeThen(resolveLazy(), (f) => {\n            if (!isFunction(f)) {\n                throw qError(QError_qrlIsNotFunction);\n            }\n            if (beforeFn && beforeFn() === false) {\n                return;\n            }\n            const context = createOrReuseInvocationContext(currentCtx);\n            const prevQrl = context.$qrl$;\n            const prevEvent = context.$event$;\n            // Note that we set the qrl here instead of in wrapFn because\n            // it is possible we're called on a copied qrl\n            context.$qrl$ = qrl;\n            context.$event$ || (context.$event$ = this);\n            try {\n                return invoke.call(this, context, f, ...args);\n            }\n            finally {\n                context.$qrl$ = prevQrl;\n                context.$event$ = prevEvent;\n            }\n        });\n    }\n    const createOrReuseInvocationContext = (invoke) => {\n        if (invoke == null) {\n            return newInvokeContext();\n        }\n        else if (isArray(invoke)) {\n            return newInvokeContextFromTuple(invoke);\n        }\n        else {\n            return invoke;\n        }\n    };\n    const resolvedSymbol = refSymbol ?? symbol;\n    const hash = getSymbolHash(resolvedSymbol);\n    Object.assign(qrl, {\n        getSymbol: () => resolvedSymbol,\n        getHash: () => hash,\n        getCaptured: () => captureRef,\n        resolve,\n        $resolveLazy$: resolveLazy,\n        $setContainer$: setContainer,\n        $chunk$: chunk,\n        $symbol$: symbol,\n        $refSymbol$: refSymbol,\n        $hash$: hash,\n        getFn: invokeFn,\n        $capture$: capture,\n        $captureRef$: captureRef,\n        dev: null,\n        resolved: undefined,\n    });\n    if (symbolRef) {\n        // Replace symbolRef with (a promise for) the value or wrapped function\n        symbolRef = maybeThen(symbolRef, (resolved) => (qrl.resolved = symbolRef = wrapFn(resolved)));\n    }\n    if (isDev) {\n        Object.defineProperty(qrl, '_devOnlySymbolRef', {\n            get() {\n                return symbolRef;\n            },\n        });\n    }\n    if (qDev) {\n        seal(qrl);\n    }\n    return qrl;\n};\nexport const getSymbolHash = (symbolName) => {\n    const index = symbolName.lastIndexOf('_');\n    if (index > -1) {\n        return symbolName.slice(index + 1);\n    }\n    return symbolName;\n};\nexport function assertQrl(qrl) {\n    if (qDev) {\n        if (!isQrl(qrl)) {\n            throw new Error('Not a QRL');\n        }\n    }\n}\nexport function assertSignal(obj) {\n    if (qDev) {\n        if (!isSignal(obj) && !isSignal(obj)) {\n            throw new Error('Not a Signal');\n        }\n    }\n}\nconst EMITTED = /*#__PURE__*/ new Set();\nexport const emitUsedSymbol = (symbol, element, reqTime) => {\n    if (!EMITTED.has(symbol)) {\n        EMITTED.add(symbol);\n        emitEvent('qsymbol', {\n            symbol,\n            element,\n            reqTime,\n        });\n    }\n};\nexport const emitEvent = (eventName, detail) => {\n    if (!qTest && !isServerPlatform() && typeof document === 'object') {\n        document.dispatchEvent(new CustomEvent(eventName, {\n            bubbles: false,\n            detail,\n        }));\n    }\n};\nconst now = () => {\n    if (qTest || isServerPlatform()) {\n        return 0;\n    }\n    if (typeof performance === 'object') {\n        return performance.now();\n    }\n    return 0;\n};\n//# sourceMappingURL=data:application/json;base64,","import { qDev, qRuntimeQrl } from '../util/qdev';\nimport { SYNC_QRL, createQRL } from './qrl-class';\nlet runtimeSymbolId = 0;\n// <docs markdown=\"../readme.md#$\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#$ instead)\n/**\n * Qwik Optimizer marker function.\n *\n * Use `$(...)` to tell Qwik Optimizer to extract the expression in `$(...)` into a lazy-loadable\n * resource referenced by `QRL`.\n *\n * @param expression - Expression which should be lazy loaded\n * @public\n * @see `implicit$FirstArg` for additional `____$(...)` rules.\n *\n * In this example, `$(...)` is used to capture the callback function of `onmousemove` into a\n * lazy-loadable reference. This allows the code to refer to the function without actually\n * loading the function. In this example, the callback function does not get loaded until\n * `mousemove` event fires.\n *\n * ```tsx\n * useOnDocument(\n *   'mousemove',\n *   $((event) => console.log('mousemove', event))\n * );\n * ```\n *\n * In this code, the Qwik Optimizer detects `$(...)` and transforms the code into:\n *\n * ```tsx\n * // FILE: <current file>\n * useOnDocument('mousemove', qrl('./chunk-abc.js', 'onMousemove'));\n *\n * // FILE: chunk-abc.js\n * export const onMousemove = () => console.log('mousemove');\n * ```\n *\n * ## Special Rules\n *\n * The Qwik Optimizer places special rules on functions that can be lazy-loaded.\n *\n * 1. The expression of the `$(expression)` function must be importable by the system.\n * (expression shows up in `import` or has `export`)\n * 2. If inlined function, then all lexically captured values must be:\n *    - importable (vars show up in `import`s or `export`s)\n *    - const (The capturing process differs from JS capturing in that writing to captured\n * variables does not update them, and therefore writes are forbidden. The best practice is that\n * all captured variables are constants.)\n *    - Must be runtime serializable.\n *\n * ```tsx\n *\n * import { createContextId, useContext, useContextProvider } from './use/use-context';\n * import { Resource, useResource$ } from './use/use-resource';\n * import { useSignal } from './use/use-signal';\n *\n * export const greet = () => console.log('greet');\n * function topLevelFn() {}\n *\n * function myCode() {\n *   const store = useStore({});\n *   function localFn() {}\n *   // Valid Examples\n *   $(greet); // greet is importable\n *   $(() => greet()); // greet is importable;\n *   $(() => console.log(store)); // store is serializable.\n *\n *   // Compile time errors\n *   $(topLevelFn); // ERROR: `topLevelFn` not importable\n *   $(() => topLevelFn()); // ERROR: `topLevelFn` not importable\n *\n *   // Runtime errors\n *   $(localFn); // ERROR: `localFn` fails serialization\n *   $(() => localFn()); // ERROR: `localFn` fails serialization\n * }\n *\n * ```\n */\n// </docs>\nexport const $ = (expression) => {\n    if (!qRuntimeQrl && qDev) {\n        throw new Error('Optimizer should replace all usages of $() with some special syntax. If you need to create a QRL manually, use inlinedQrl() instead.');\n    }\n    return createQRL(null, 's' + runtimeSymbolId++, expression, null, null, null, null);\n};\n/** @private Use To avoid optimizer replacement */\nexport const dollar = $;\n/** @public */\nexport const eventQrl = (qrl) => {\n    return qrl;\n};\n/**\n * Extract function into a synchronously loadable QRL.\n *\n * NOTE: Synchronous QRLs functions can't close over any variables, including exports.\n *\n * @param fn - Function to extract.\n * @returns\n * @alpha\n */\nexport const sync$ = (fn) => {\n    if (!qRuntimeQrl && qDev) {\n        throw new Error('Optimizer should replace all usages of sync$() with some special syntax. If you need to create a QRL manually, use inlinedSyncQrl() instead.');\n    }\n    if (qDev) {\n        // To make sure that in dev mode we don't accidentally capture context in `sync$()` we serialize and deserialize the function.\n        // eslint-disable-next-line no-new-func\n        fn = new Function('return ' + fn.toString())();\n    }\n    return createQRL('', SYNC_QRL, fn, null, null, null, null);\n};\n/**\n * Extract function into a synchronously loadable QRL.\n *\n * NOTE: Synchronous QRLs functions can't close over any variables, including exports.\n *\n * @param fn - Extracted function\n * @param serializedFn - Serialized function in string form.\n * @returns\n * @alpha\n */\nexport const _qrlSync = function (fn, serializedFn) {\n    if (serializedFn === undefined) {\n        serializedFn = fn.toString();\n    }\n    return createQRL('', SYNC_QRL, fn, null, null, null, null);\n};\n//# sourceMappingURL=data:application/json;base64,","import { dollar } from '../qrl/qrl.public';\nimport { SERIALIZABLE_STATE } from '../container/serializers';\nimport { _CONST_PROPS, _VAR_PROPS, _jsxSorted } from '../internal';\n// <docs markdown=\"../readme.md#component\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#component instead)\n/**\n * Declare a Qwik component that can be used to create UI.\n *\n * Use `component$` to declare a Qwik component. A Qwik component is a special kind of component\n * that allows the Qwik framework to lazy load and execute the component independently of other Qwik\n * components as well as lazy load the component's life-cycle hooks and event handlers.\n *\n * Side note: You can also declare regular (standard JSX) components that will have standard\n * synchronous behavior.\n *\n * Qwik component is a facade that describes how the component should be used without forcing the\n * implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n *\n * ### Example\n *\n * An example showing how to create a counter component:\n *\n * ```tsx\n * export interface CounterProps {\n *   initialValue?: number;\n *   step?: number;\n * }\n * export const Counter = component$((props: CounterProps) => {\n *   const state = useStore({ count: props.initialValue || 0 });\n *   return (\n *     <div>\n *       <span>{state.count}</span>\n *       <button onClick$={() => (state.count += props.step || 1)}>+</button>\n *     </div>\n *   );\n * });\n * ```\n *\n * - `component$` is how a component gets declared.\n * - `{ value?: number; step?: number }` declares the public (props) interface of the component.\n * - `{ count: number }` declares the private (state) interface of the component.\n *\n * The above can then be used like so:\n *\n * ```tsx\n * export const OtherComponent = component$(() => {\n *   return <Counter initialValue={100} />;\n * });\n * ```\n *\n * See also: `component`, `useCleanup`, `onResume`, `onPause`, `useOn`, `useOnDocument`,\n * `useOnWindow`, `useStyles`\n *\n * @public\n */\n// </docs>\nexport const componentQrl = (componentQrl) => {\n    // Return a QComponent Factory function.\n    const QwikComponent = () => { };\n    QwikComponent[SERIALIZABLE_STATE] = [componentQrl];\n    return QwikComponent;\n};\nexport const isQwikComponent = (component) => {\n    return typeof component == 'function' && component[SERIALIZABLE_STATE] !== undefined;\n};\n// <docs markdown=\"../readme.md#component\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#component instead)\n/**\n * Declare a Qwik component that can be used to create UI.\n *\n * Use `component$` to declare a Qwik component. A Qwik component is a special kind of component\n * that allows the Qwik framework to lazy load and execute the component independently of other Qwik\n * components as well as lazy load the component's life-cycle hooks and event handlers.\n *\n * Side note: You can also declare regular (standard JSX) components that will have standard\n * synchronous behavior.\n *\n * Qwik component is a facade that describes how the component should be used without forcing the\n * implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n *\n * ### Example\n *\n * An example showing how to create a counter component:\n *\n * ```tsx\n * export interface CounterProps {\n *   initialValue?: number;\n *   step?: number;\n * }\n * export const Counter = component$((props: CounterProps) => {\n *   const state = useStore({ count: props.initialValue || 0 });\n *   return (\n *     <div>\n *       <span>{state.count}</span>\n *       <button onClick$={() => (state.count += props.step || 1)}>+</button>\n *     </div>\n *   );\n * });\n * ```\n *\n * - `component$` is how a component gets declared.\n * - `{ value?: number; step?: number }` declares the public (props) interface of the component.\n * - `{ count: number }` declares the private (state) interface of the component.\n *\n * The above can then be used like so:\n *\n * ```tsx\n * export const OtherComponent = component$(() => {\n *   return <Counter initialValue={100} />;\n * });\n * ```\n *\n * See also: `component`, `useCleanup`, `onResume`, `onPause`, `useOn`, `useOnDocument`,\n * `useOnWindow`, `useStyles`\n *\n * @public\n */\n// </docs>\nexport const component$ = (onMount) => {\n    return componentQrl(dollar(onMount));\n};\n//# sourceMappingURL=data:application/json;base64,","import { eventQrl } from './qrl.public';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\n/** @public */\nexport const event$ = implicit$FirstArg(eventQrl);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXJsLnB1YmxpYy5kb2xsYXIuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcXJsL3FybC5wdWJsaWMuZG9sbGFyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDeEMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFNUQsY0FBYztBQUNkLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV2ZW50UXJsIH0gZnJvbSAnLi9xcmwucHVibGljJztcbmltcG9ydCB7IGltcGxpY2l0JEZpcnN0QXJnIH0gZnJvbSAnLi4vdXRpbC9pbXBsaWNpdF9kb2xsYXInO1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGNvbnN0IGV2ZW50JCA9IGltcGxpY2l0JEZpcnN0QXJnKGV2ZW50UXJsKTtcbiJdfQ==","import { isDocument, isElement } from '../../util/element';\nimport { ChoreType } from '../shared/scheduler';\nimport { QContainerValue } from '../shared/types';\nimport { DomContainer, getDomContainer } from './dom-container';\nimport { cleanup } from './vnode-diff';\nimport { QContainerAttr } from '../../util/markers';\n/**\n * Render JSX.\n *\n * Use this method to render JSX. This function does reconciling which means it always tries to\n * reuse what is already in the DOM (rather then destroy and recreate content.) It returns a cleanup\n * function you could use for cleaning up subscriptions.\n *\n * @param parent - Element which will act as a parent to `jsxNode`. When possible the rendering will\n *   try to reuse existing nodes.\n * @param jsxNode - JSX to render\n * @returns An object containing a cleanup function.\n * @public\n */\nexport const render2 = async (parent, jsxNode, opts = {}) => {\n    if (isDocument(parent)) {\n        let child = parent.firstChild;\n        while (child && !isElement(child)) {\n            child = child.nextSibling;\n        }\n        parent = child;\n    }\n    parent.setAttribute(QContainerAttr, QContainerValue.RESUMED);\n    const container = getDomContainer(parent);\n    container.$serverData$ = opts.serverData || {};\n    const host = container.rootVNode;\n    container.$scheduler$(ChoreType.NODE_DIFF, host, host, jsxNode);\n    await container.$scheduler$(ChoreType.WAIT_FOR_ALL);\n    return {\n        cleanup: () => {\n            cleanup(container, container.rootVNode);\n        },\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLXJlbmRlci5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS92Mi9jbGllbnQvZG9tLXJlbmRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzNELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsZUFBZSxFQUFtQyxNQUFNLGlCQUFpQixDQUFDO0FBQ25GLE9BQU8sRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN2QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFcEQ7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFDMUIsTUFBMEIsRUFDMUIsT0FBMkMsRUFDM0MsT0FBc0IsRUFBRSxFQUNELEVBQUU7SUFDekIsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUN2QixJQUFJLEtBQUssR0FBZ0IsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUMzQyxPQUFPLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ2xDLEtBQUssR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO1FBQzVCLENBQUM7UUFDRCxNQUFNLEdBQUcsS0FBZ0IsQ0FBQztJQUM1QixDQUFDO0lBQ0EsTUFBa0IsQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUUxRSxNQUFNLFNBQVMsR0FBRyxlQUFlLENBQUMsTUFBcUIsQ0FBaUIsQ0FBQztJQUN6RSxTQUFTLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDO0lBQy9DLE1BQU0sSUFBSSxHQUFnQixTQUFTLENBQUMsU0FBcUIsQ0FBQztJQUMxRCxTQUFTLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFrQixDQUFDLENBQUM7SUFDM0UsTUFBTSxTQUFTLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNwRCxPQUFPO1FBQ0wsT0FBTyxFQUFFLEdBQUcsRUFBRTtZQUNaLE9BQU8sQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzFDLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBKU1hOb2RlIH0gZnJvbSAnQGJ1aWxkZXIuaW8vcXdpayc7XG5pbXBvcnQgdHlwZSB7IFJlbmRlck9wdGlvbnMsIFJlbmRlclJlc3VsdCB9IGZyb20gJy4uLy4uL3JlbmRlci9kb20vcmVuZGVyLnB1YmxpYyc7XG5pbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50LCBKU1hPdXRwdXQgfSBmcm9tICcuLi8uLi9yZW5kZXIvanN4L3R5cGVzL2pzeC1ub2RlJztcbmltcG9ydCB7IGlzRG9jdW1lbnQsIGlzRWxlbWVudCB9IGZyb20gJy4uLy4uL3V0aWwvZWxlbWVudCc7XG5pbXBvcnQgeyBDaG9yZVR5cGUgfSBmcm9tICcuLi9zaGFyZWQvc2NoZWR1bGVyJztcbmltcG9ydCB7IFFDb250YWluZXJWYWx1ZSwgdHlwZSBIb3N0RWxlbWVudCwgdHlwZSBmaXhNZUFueSB9IGZyb20gJy4uL3NoYXJlZC90eXBlcyc7XG5pbXBvcnQgeyBEb21Db250YWluZXIsIGdldERvbUNvbnRhaW5lciB9IGZyb20gJy4vZG9tLWNvbnRhaW5lcic7XG5pbXBvcnQgeyBjbGVhbnVwIH0gZnJvbSAnLi92bm9kZS1kaWZmJztcbmltcG9ydCB7IFFDb250YWluZXJBdHRyIH0gZnJvbSAnLi4vLi4vdXRpbC9tYXJrZXJzJztcblxuLyoqXG4gKiBSZW5kZXIgSlNYLlxuICpcbiAqIFVzZSB0aGlzIG1ldGhvZCB0byByZW5kZXIgSlNYLiBUaGlzIGZ1bmN0aW9uIGRvZXMgcmVjb25jaWxpbmcgd2hpY2ggbWVhbnMgaXQgYWx3YXlzIHRyaWVzIHRvXG4gKiByZXVzZSB3aGF0IGlzIGFscmVhZHkgaW4gdGhlIERPTSAocmF0aGVyIHRoZW4gZGVzdHJveSBhbmQgcmVjcmVhdGUgY29udGVudC4pIEl0IHJldHVybnMgYSBjbGVhbnVwXG4gKiBmdW5jdGlvbiB5b3UgY291bGQgdXNlIGZvciBjbGVhbmluZyB1cCBzdWJzY3JpcHRpb25zLlxuICpcbiAqIEBwYXJhbSBwYXJlbnQgLSBFbGVtZW50IHdoaWNoIHdpbGwgYWN0IGFzIGEgcGFyZW50IHRvIGBqc3hOb2RlYC4gV2hlbiBwb3NzaWJsZSB0aGUgcmVuZGVyaW5nIHdpbGxcbiAqICAgdHJ5IHRvIHJldXNlIGV4aXN0aW5nIG5vZGVzLlxuICogQHBhcmFtIGpzeE5vZGUgLSBKU1ggdG8gcmVuZGVyXG4gKiBAcmV0dXJucyBBbiBvYmplY3QgY29udGFpbmluZyBhIGNsZWFudXAgZnVuY3Rpb24uXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCByZW5kZXIyID0gYXN5bmMgKFxuICBwYXJlbnQ6IEVsZW1lbnQgfCBEb2N1bWVudCxcbiAganN4Tm9kZTogSlNYT3V0cHV0IHwgRnVuY3Rpb25Db21wb25lbnQ8YW55PixcbiAgb3B0czogUmVuZGVyT3B0aW9ucyA9IHt9XG4pOiBQcm9taXNlPFJlbmRlclJlc3VsdD4gPT4ge1xuICBpZiAoaXNEb2N1bWVudChwYXJlbnQpKSB7XG4gICAgbGV0IGNoaWxkOiBOb2RlIHwgbnVsbCA9IHBhcmVudC5maXJzdENoaWxkO1xuICAgIHdoaWxlIChjaGlsZCAmJiAhaXNFbGVtZW50KGNoaWxkKSkge1xuICAgICAgY2hpbGQgPSBjaGlsZC5uZXh0U2libGluZztcbiAgICB9XG4gICAgcGFyZW50ID0gY2hpbGQgYXMgRWxlbWVudDtcbiAgfVxuICAocGFyZW50IGFzIEVsZW1lbnQpLnNldEF0dHJpYnV0ZShRQ29udGFpbmVyQXR0ciwgUUNvbnRhaW5lclZhbHVlLlJFU1VNRUQpO1xuXG4gIGNvbnN0IGNvbnRhaW5lciA9IGdldERvbUNvbnRhaW5lcihwYXJlbnQgYXMgSFRNTEVsZW1lbnQpIGFzIERvbUNvbnRhaW5lcjtcbiAgY29udGFpbmVyLiRzZXJ2ZXJEYXRhJCA9IG9wdHMuc2VydmVyRGF0YSB8fCB7fTtcbiAgY29uc3QgaG9zdDogSG9zdEVsZW1lbnQgPSBjb250YWluZXIucm9vdFZOb2RlIGFzIGZpeE1lQW55O1xuICBjb250YWluZXIuJHNjaGVkdWxlciQoQ2hvcmVUeXBlLk5PREVfRElGRiwgaG9zdCwgaG9zdCwganN4Tm9kZSBhcyBKU1hOb2RlKTtcbiAgYXdhaXQgY29udGFpbmVyLiRzY2hlZHVsZXIkKENob3JlVHlwZS5XQUlUX0ZPUl9BTEwpO1xuICByZXR1cm4ge1xuICAgIGNsZWFudXA6ICgpID0+IHtcbiAgICAgIGNsZWFudXAoY29udGFpbmVyLCBjb250YWluZXIucm9vdFZOb2RlKTtcbiAgICB9LFxuICB9O1xufTtcbiJdfQ==","import { isFunction } from '../util/types';\nimport { StoreFlags, getOrCreateStore } from '../v2/signal/v2-store';\nimport { invoke } from './use-core';\nimport { useSequentialScope } from './use-sequential-scope';\n// <docs markdown=\"../readme.md#useStore\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStore instead)\n/**\n * Creates an object that Qwik can track across serializations.\n *\n * Use `useStore` to create a state for your application. The returned object is a proxy that has a\n * unique ID. The ID of the object is used in the `QRL`s to refer to the store.\n *\n * ### Example\n *\n * Example showing how `useStore` is used in Counter example to keep track of the count.\n *\n * ```tsx\n * const Stores = component$(() => {\n *   const counter = useCounter(1);\n *\n *   // Reactivity happens even for nested objects and arrays\n *   const userData = useStore({\n *     name: 'Manu',\n *     address: {\n *       address: '',\n *       city: '',\n *     },\n *     orgs: [],\n *   });\n *\n *   // useStore() can also accept a function to calculate the initial value\n *   const state = useStore(() => {\n *     return {\n *       value: expensiveInitialValue(),\n *     };\n *   });\n *\n *   return (\n *     <div>\n *       <div>Counter: {counter.value}</div>\n *       <Child userData={userData} state={state} />\n *     </div>\n *   );\n * });\n *\n * function useCounter(step: number) {\n *   // Multiple stores can be created in custom hooks for convenience and composability\n *   const counterStore = useStore({\n *     value: 0,\n *   });\n *   useVisibleTask$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       counterStore.value += step;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *   return counterStore;\n * }\n * ```\n *\n * @public\n */\n// </docs>\nexport const useStore = (initialState, opts) => {\n    const { val, set, iCtx } = useSequentialScope();\n    if (val != null) {\n        return val;\n    }\n    const value = isFunction(initialState) ? invoke(undefined, initialState) : initialState;\n    if (opts?.reactive === false) {\n        set(value);\n        return value;\n    }\n    else {\n        const containerState = iCtx.$container2$;\n        const recursive = opts?.deep ?? true;\n        const flags = recursive ? StoreFlags.RECURSIVE : StoreFlags.NONE;\n        const newStore = getOrCreateStore(value, flags, containerState);\n        set(newStore);\n        return newStore;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXN0b3JlLnB1YmxpYy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXN0b3JlLnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBVzVELDBDQUEwQztBQUMxQyx5Q0FBeUM7QUFDekMsdUNBQXVDO0FBQ3ZDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBMERHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUN0QixZQUFtQyxFQUNuQyxJQUFzQixFQUNmLEVBQUU7SUFDVCxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxrQkFBa0IsRUFBUyxDQUFDO0lBQ3ZELElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ2hCLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUNELE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO0lBQ3hGLElBQUksSUFBSSxFQUFFLFFBQVEsS0FBSyxLQUFLLEVBQUUsQ0FBQztRQUM3QixHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDWCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7U0FBTSxDQUFDO1FBQ04sTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUN6QyxNQUFNLFNBQVMsR0FBRyxJQUFJLEVBQUUsSUFBSSxJQUFJLElBQUksQ0FBQztRQUNyQyxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7UUFDakUsTUFBTSxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxjQUFjLENBQUMsQ0FBQztRQUNoRSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDZCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuaW1wb3J0IHsgU3RvcmVGbGFncywgZ2V0T3JDcmVhdGVTdG9yZSB9IGZyb20gJy4uL3YyL3NpZ25hbC92Mi1zdG9yZSc7XG5pbXBvcnQgeyBpbnZva2UgfSBmcm9tICcuL3VzZS1jb3JlJztcbmltcG9ydCB7IHVzZVNlcXVlbnRpYWxTY29wZSB9IGZyb20gJy4vdXNlLXNlcXVlbnRpYWwtc2NvcGUnO1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGludGVyZmFjZSBVc2VTdG9yZU9wdGlvbnMge1xuICAvKiogSWYgYHRydWVgIHRoZW4gYWxsIG5lc3RlZCBvYmplY3RzIGFuZCBhcnJheXMgd2lsbCBiZSB0cmFja2VkIGFzIHdlbGwuIERlZmF1bHQgaXMgYHRydWVgLiAqL1xuICBkZWVwPzogYm9vbGVhbjtcblxuICAvKiogSWYgYGZhbHNlYCB0aGVuIHRoZSBvYmplY3Qgd2lsbCBub3QgYmUgdHJhY2tlZCBmb3IgY2hhbmdlcy4gRGVmYXVsdCBpcyBgdHJ1ZWAuICovXG4gIHJlYWN0aXZlPzogYm9vbGVhbjtcbn1cblxuLy8gPGRvY3MgbWFya2Rvd249XCIuLi9yZWFkbWUubWQjdXNlU3RvcmVcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjdXNlU3RvcmUgaW5zdGVhZClcbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgdGhhdCBRd2lrIGNhbiB0cmFjayBhY3Jvc3Mgc2VyaWFsaXphdGlvbnMuXG4gKlxuICogVXNlIGB1c2VTdG9yZWAgdG8gY3JlYXRlIGEgc3RhdGUgZm9yIHlvdXIgYXBwbGljYXRpb24uIFRoZSByZXR1cm5lZCBvYmplY3QgaXMgYSBwcm94eSB0aGF0IGhhcyBhXG4gKiB1bmlxdWUgSUQuIFRoZSBJRCBvZiB0aGUgb2JqZWN0IGlzIHVzZWQgaW4gdGhlIGBRUkxgcyB0byByZWZlciB0byB0aGUgc3RvcmUuXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqXG4gKiBFeGFtcGxlIHNob3dpbmcgaG93IGB1c2VTdG9yZWAgaXMgdXNlZCBpbiBDb3VudGVyIGV4YW1wbGUgdG8ga2VlcCB0cmFjayBvZiB0aGUgY291bnQuXG4gKlxuICogYGBgdHN4XG4gKiBjb25zdCBTdG9yZXMgPSBjb21wb25lbnQkKCgpID0+IHtcbiAqICAgY29uc3QgY291bnRlciA9IHVzZUNvdW50ZXIoMSk7XG4gKlxuICogICAvLyBSZWFjdGl2aXR5IGhhcHBlbnMgZXZlbiBmb3IgbmVzdGVkIG9iamVjdHMgYW5kIGFycmF5c1xuICogICBjb25zdCB1c2VyRGF0YSA9IHVzZVN0b3JlKHtcbiAqICAgICBuYW1lOiAnTWFudScsXG4gKiAgICAgYWRkcmVzczoge1xuICogICAgICAgYWRkcmVzczogJycsXG4gKiAgICAgICBjaXR5OiAnJyxcbiAqICAgICB9LFxuICogICAgIG9yZ3M6IFtdLFxuICogICB9KTtcbiAqXG4gKiAgIC8vIHVzZVN0b3JlKCkgY2FuIGFsc28gYWNjZXB0IGEgZnVuY3Rpb24gdG8gY2FsY3VsYXRlIHRoZSBpbml0aWFsIHZhbHVlXG4gKiAgIGNvbnN0IHN0YXRlID0gdXNlU3RvcmUoKCkgPT4ge1xuICogICAgIHJldHVybiB7XG4gKiAgICAgICB2YWx1ZTogZXhwZW5zaXZlSW5pdGlhbFZhbHVlKCksXG4gKiAgICAgfTtcbiAqICAgfSk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxkaXY+XG4gKiAgICAgICA8ZGl2PkNvdW50ZXI6IHtjb3VudGVyLnZhbHVlfTwvZGl2PlxuICogICAgICAgPENoaWxkIHVzZXJEYXRhPXt1c2VyRGF0YX0gc3RhdGU9e3N0YXRlfSAvPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfSk7XG4gKlxuICogZnVuY3Rpb24gdXNlQ291bnRlcihzdGVwOiBudW1iZXIpIHtcbiAqICAgLy8gTXVsdGlwbGUgc3RvcmVzIGNhbiBiZSBjcmVhdGVkIGluIGN1c3RvbSBob29rcyBmb3IgY29udmVuaWVuY2UgYW5kIGNvbXBvc2FiaWxpdHlcbiAqICAgY29uc3QgY291bnRlclN0b3JlID0gdXNlU3RvcmUoe1xuICogICAgIHZhbHVlOiAwLFxuICogICB9KTtcbiAqICAgdXNlVmlzaWJsZVRhc2skKCgpID0+IHtcbiAqICAgICAvLyBPbmx5IHJ1bnMgaW4gdGhlIGNsaWVudFxuICogICAgIGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICogICAgICAgY291bnRlclN0b3JlLnZhbHVlICs9IHN0ZXA7XG4gKiAgICAgfSwgNTAwKTtcbiAqICAgICByZXR1cm4gKCkgPT4ge1xuICogICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gKiAgICAgfTtcbiAqICAgfSk7XG4gKiAgIHJldHVybiBjb3VudGVyU3RvcmU7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VTdG9yZSA9IDxTVEFURSBleHRlbmRzIG9iamVjdD4oXG4gIGluaXRpYWxTdGF0ZTogU1RBVEUgfCAoKCkgPT4gU1RBVEUpLFxuICBvcHRzPzogVXNlU3RvcmVPcHRpb25zXG4pOiBTVEFURSA9PiB7XG4gIGNvbnN0IHsgdmFsLCBzZXQsIGlDdHggfSA9IHVzZVNlcXVlbnRpYWxTY29wZTxTVEFURT4oKTtcbiAgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuICBjb25zdCB2YWx1ZSA9IGlzRnVuY3Rpb24oaW5pdGlhbFN0YXRlKSA/IGludm9rZSh1bmRlZmluZWQsIGluaXRpYWxTdGF0ZSkgOiBpbml0aWFsU3RhdGU7XG4gIGlmIChvcHRzPy5yZWFjdGl2ZSA9PT0gZmFsc2UpIHtcbiAgICBzZXQodmFsdWUpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBjb250YWluZXJTdGF0ZSA9IGlDdHguJGNvbnRhaW5lcjIkO1xuICAgIGNvbnN0IHJlY3Vyc2l2ZSA9IG9wdHM/LmRlZXAgPz8gdHJ1ZTtcbiAgICBjb25zdCBmbGFncyA9IHJlY3Vyc2l2ZSA/IFN0b3JlRmxhZ3MuUkVDVVJTSVZFIDogU3RvcmVGbGFncy5OT05FO1xuICAgIGNvbnN0IG5ld1N0b3JlID0gZ2V0T3JDcmVhdGVTdG9yZSh2YWx1ZSwgZmxhZ3MsIGNvbnRhaW5lclN0YXRlKTtcbiAgICBzZXQobmV3U3RvcmUpO1xuICAgIHJldHVybiBuZXdTdG9yZTtcbiAgfVxufTtcbiJdfQ==","import { getNextIndex, getNextUniqueIndex } from '../render/execute-component';\nimport { hashCode } from '../util/hash_code';\nimport { OnRenderProp } from '../util/markers';\nimport { isDomContainer } from '../v2/client/dom-container';\nimport { useSequentialScope } from './use-sequential-scope';\n/** @public */\nexport const useId = () => {\n    const { val, set, elCtx, iCtx } = useSequentialScope();\n    if (val != null) {\n        return val;\n    }\n    if (iCtx.$container2$) {\n        const containerBase = isDomContainer(iCtx.$container2$)\n            ? ''\n            : iCtx.$container2$.buildBase || '';\n        const base = containerBase ? hashCode(containerBase) : '';\n        const componentQrl = iCtx.$container2$.getHostProp(iCtx.$hostElement$, OnRenderProp);\n        const hash = componentQrl?.getHash() || '';\n        const counter = getNextUniqueIndex(iCtx.$container2$) || '';\n        const id = `${base}-${hash}-${counter}`; // If no base and no hash, then \"--#\"\n        return set(id);\n    }\n    else {\n        const containerBase = iCtx.$renderCtx$?.$static$?.$containerState$?.$base$ || '';\n        const base = containerBase ? hashCode(containerBase) : '';\n        const hash = elCtx.$componentQrl$?.getHash() || '';\n        const counter = getNextIndex(iCtx.$renderCtx$) || '';\n        const id = `${base}-${hash}-${counter}`; // If no base and no hash, then \"--#\"\n        return set(id);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWlkLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFlBQVksRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQy9FLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRzVELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTVELGNBQWM7QUFDZCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsR0FBVyxFQUFFO0lBQ2hDLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxrQkFBa0IsRUFBVSxDQUFDO0lBQy9ELElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ2hCLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUNELElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3RCLE1BQU0sYUFBYSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO1lBQ3JELENBQUMsQ0FBQyxFQUFFO1lBQ0osQ0FBQyxDQUFFLElBQUksQ0FBQyxZQUE2QixDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUM7UUFDeEQsTUFBTSxJQUFJLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUMxRCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FDaEQsSUFBSSxDQUFDLGFBQXlCLEVBQzlCLFlBQVksQ0FDQyxDQUFDO1FBQ2hCLE1BQU0sSUFBSSxHQUFHLFlBQVksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDM0MsTUFBTSxPQUFPLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM1RCxNQUFNLEVBQUUsR0FBRyxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksT0FBTyxFQUFFLENBQUMsQ0FBQyxxQ0FBcUM7UUFDOUUsT0FBTyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDakIsQ0FBQztTQUFNLENBQUM7UUFDTixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLElBQUksRUFBRSxDQUFDO1FBQ2pGLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDMUQsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLGNBQWMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDbkQsTUFBTSxPQUFPLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDckQsTUFBTSxFQUFFLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLE9BQU8sRUFBRSxDQUFDLENBQUMscUNBQXFDO1FBQzlFLE9BQU8sR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2pCLENBQUM7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFFSTCB9IGZyb20gJy4uJztcbmltcG9ydCB7IGdldE5leHRJbmRleCwgZ2V0TmV4dFVuaXF1ZUluZGV4IH0gZnJvbSAnLi4vcmVuZGVyL2V4ZWN1dGUtY29tcG9uZW50JztcbmltcG9ydCB7IGhhc2hDb2RlIH0gZnJvbSAnLi4vdXRpbC9oYXNoX2NvZGUnO1xuaW1wb3J0IHsgT25SZW5kZXJQcm9wIH0gZnJvbSAnLi4vdXRpbC9tYXJrZXJzJztcbmltcG9ydCB7IGlzRG9tQ29udGFpbmVyIH0gZnJvbSAnLi4vdjIvY2xpZW50L2RvbS1jb250YWluZXInO1xuaW1wb3J0IHR5cGUgeyBmaXhNZUFueSB9IGZyb20gJy4uL3YyL3NoYXJlZC90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IFNTUkNvbnRhaW5lciB9IGZyb20gJy4uL3YyL3Nzci9zc3ItdHlwZXMnO1xuaW1wb3J0IHsgdXNlU2VxdWVudGlhbFNjb3BlIH0gZnJvbSAnLi91c2Utc2VxdWVudGlhbC1zY29wZSc7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgdXNlSWQgPSAoKTogc3RyaW5nID0+IHtcbiAgY29uc3QgeyB2YWwsIHNldCwgZWxDdHgsIGlDdHggfSA9IHVzZVNlcXVlbnRpYWxTY29wZTxzdHJpbmc+KCk7XG4gIGlmICh2YWwgIT0gbnVsbCkge1xuICAgIHJldHVybiB2YWw7XG4gIH1cbiAgaWYgKGlDdHguJGNvbnRhaW5lcjIkKSB7XG4gICAgY29uc3QgY29udGFpbmVyQmFzZSA9IGlzRG9tQ29udGFpbmVyKGlDdHguJGNvbnRhaW5lcjIkKVxuICAgICAgPyAnJ1xuICAgICAgOiAoaUN0eC4kY29udGFpbmVyMiQgYXMgU1NSQ29udGFpbmVyKS5idWlsZEJhc2UgfHwgJyc7XG4gICAgY29uc3QgYmFzZSA9IGNvbnRhaW5lckJhc2UgPyBoYXNoQ29kZShjb250YWluZXJCYXNlKSA6ICcnO1xuICAgIGNvbnN0IGNvbXBvbmVudFFybCA9IGlDdHguJGNvbnRhaW5lcjIkLmdldEhvc3RQcm9wKFxuICAgICAgaUN0eC4kaG9zdEVsZW1lbnQkIGFzIGZpeE1lQW55LFxuICAgICAgT25SZW5kZXJQcm9wXG4gICAgKSBhcyBRUkwgfCBudWxsO1xuICAgIGNvbnN0IGhhc2ggPSBjb21wb25lbnRRcmw/LmdldEhhc2goKSB8fCAnJztcbiAgICBjb25zdCBjb3VudGVyID0gZ2V0TmV4dFVuaXF1ZUluZGV4KGlDdHguJGNvbnRhaW5lcjIkKSB8fCAnJztcbiAgICBjb25zdCBpZCA9IGAke2Jhc2V9LSR7aGFzaH0tJHtjb3VudGVyfWA7IC8vIElmIG5vIGJhc2UgYW5kIG5vIGhhc2gsIHRoZW4gXCItLSNcIlxuICAgIHJldHVybiBzZXQoaWQpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGNvbnRhaW5lckJhc2UgPSBpQ3R4LiRyZW5kZXJDdHgkPy4kc3RhdGljJD8uJGNvbnRhaW5lclN0YXRlJD8uJGJhc2UkIHx8ICcnO1xuICAgIGNvbnN0IGJhc2UgPSBjb250YWluZXJCYXNlID8gaGFzaENvZGUoY29udGFpbmVyQmFzZSkgOiAnJztcbiAgICBjb25zdCBoYXNoID0gZWxDdHguJGNvbXBvbmVudFFybCQ/LmdldEhhc2goKSB8fCAnJztcbiAgICBjb25zdCBjb3VudGVyID0gZ2V0TmV4dEluZGV4KGlDdHguJHJlbmRlckN0eCQpIHx8ICcnO1xuICAgIGNvbnN0IGlkID0gYCR7YmFzZX0tJHtoYXNofS0ke2NvdW50ZXJ9YDsgLy8gSWYgbm8gYmFzZSBhbmQgbm8gaGFzaCwgdGhlbiBcIi0tI1wiXG4gICAgcmV0dXJuIHNldChpZCk7XG4gIH1cbn07XG4iXX0=","import { tryGetInvokeContext } from './use-core';\n/** @public */\nexport function useServerData(key, defaultValue) {\n    const ctx = tryGetInvokeContext();\n    if (ctx?.$container2$) {\n        return ctx?.$container2$.$serverData$[key] ?? defaultValue;\n    }\n    else {\n        return ctx?.$renderCtx$?.$static$.$containerState$.$serverData$[key] ?? defaultValue;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWVudi1kYXRhLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtZW52LWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBUWpELGNBQWM7QUFDZCxNQUFNLFVBQVUsYUFBYSxDQUFDLEdBQVcsRUFBRSxZQUFrQjtJQUMzRCxNQUFNLEdBQUcsR0FBRyxtQkFBbUIsRUFBRSxDQUFDO0lBQ2xDLElBQUksR0FBRyxFQUFFLFlBQVksRUFBRSxDQUFDO1FBQ3RCLE9BQU8sR0FBRyxFQUFFLFlBQVksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksWUFBWSxDQUFDO0lBQzdELENBQUM7U0FBTSxDQUFDO1FBQ04sT0FBTyxHQUFHLEVBQUUsV0FBVyxFQUFFLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksWUFBWSxDQUFDO0lBQ3ZGLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHJ5R2V0SW52b2tlQ29udGV4dCB9IGZyb20gJy4vdXNlLWNvcmUnO1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNlcnZlckRhdGE8VD4oa2V5OiBzdHJpbmcpOiBUIHwgdW5kZWZpbmVkO1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNlcnZlckRhdGE8VCwgQiA9IFQ+KGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWU6IEIpOiBUIHwgQjtcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VTZXJ2ZXJEYXRhKGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWU/OiBhbnkpIHtcbiAgY29uc3QgY3R4ID0gdHJ5R2V0SW52b2tlQ29udGV4dCgpO1xuICBpZiAoY3R4Py4kY29udGFpbmVyMiQpIHtcbiAgICByZXR1cm4gY3R4Py4kY29udGFpbmVyMiQuJHNlcnZlckRhdGEkW2tleV0gPz8gZGVmYXVsdFZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjdHg/LiRyZW5kZXJDdHgkPy4kc3RhdGljJC4kY29udGFpbmVyU3RhdGUkLiRzZXJ2ZXJEYXRhJFtrZXldID8/IGRlZmF1bHRWYWx1ZTtcbiAgfVxufVxuIl19","/* eslint-disable no-console */\nimport { ComponentStylesPrefixContent } from '../util/markers';\nimport { qDev } from '../util/qdev';\n// Make sure this is always set to `false` in production, but it is useful to set for `true` in development for debugging.\nconst DEBUG = false;\nexport const STYLE_CACHE = /*#__PURE__*/ new Map();\nexport const getScopedStyles = (css, scopeId) => {\n    if (qDev) {\n        return scopeStylesheet(css, scopeId);\n    }\n    let styleCss = STYLE_CACHE.get(scopeId);\n    if (!styleCss) {\n        STYLE_CACHE.set(scopeId, (styleCss = scopeStylesheet(css, scopeId)));\n    }\n    return styleCss;\n};\nexport const scopeStylesheet = (css, scopeId) => {\n    const end = css.length;\n    const out = [];\n    const stack = [];\n    let idx = 0;\n    let lastIdx = idx;\n    let mode = rule;\n    let lastCh = 0;\n    DEBUG && console.log('--------------------------');\n    while (idx < end) {\n        DEBUG && console.log(css);\n        DEBUG && console.log(new Array(idx).fill(' ').join('') + '^');\n        DEBUG && console.log('MODE', ...stack.map(modeToString), modeToString(mode));\n        const chIdx = idx;\n        let ch = css.charCodeAt(idx++);\n        if (ch === BACKSLASH) {\n            idx++;\n            ch = A; // Pretend it's a letter\n        }\n        const arcs = STATE_MACHINE[mode];\n        for (let i = 0; i < arcs.length; i++) {\n            const arc = arcs[i];\n            const [expectLastCh, expectCh, newMode] = arc;\n            if (expectLastCh === lastCh ||\n                expectLastCh === ANY ||\n                (expectLastCh === IDENT && isIdent(lastCh)) ||\n                (expectLastCh === WHITESPACE && isWhiteSpace(lastCh))) {\n                if (expectCh === ch ||\n                    expectCh === ANY ||\n                    (expectCh === IDENT && isIdent(ch)) ||\n                    (expectCh === NOT_IDENT && !isIdent(ch) && ch !== DOT) ||\n                    (expectCh === WHITESPACE && isWhiteSpace(ch))) {\n                    if (arc.length == 3 || lookAhead(arc)) {\n                        if (arc.length > 3) {\n                            // If matched on lookAhead than we we have to update current `ch`\n                            ch = css.charCodeAt(idx - 1);\n                        }\n                        DEBUG &&\n                            console.log('MATCH', charToString(expectLastCh), charToString(expectCh), modeToString(newMode));\n                        // We found a match!\n                        if (newMode === EXIT || newMode == EXIT_INSERT_SCOPE) {\n                            if (newMode === EXIT_INSERT_SCOPE) {\n                                if (mode === starSelector && !shouldNotInsertScoping()) {\n                                    // Replace `*` with the scoping elementClassIdSelector.\n                                    if (isChainedSelector(ch)) {\n                                        // *foo\n                                        flush(idx - 2);\n                                    }\n                                    else {\n                                        // * (by itself)\n                                        insertScopingSelector(idx - 2);\n                                    }\n                                    lastIdx++;\n                                }\n                                else {\n                                    if (!isChainedSelector(ch)) {\n                                        // We are exiting one of the Selector so we may need to\n                                        const offset = expectCh == NOT_IDENT ? 1 : expectCh == CLOSE_PARENTHESIS ? 2 : 0;\n                                        insertScopingSelector(idx - offset);\n                                    }\n                                }\n                            }\n                            if (expectCh === NOT_IDENT) {\n                                // NOT_IDENT is not a real character more like lack of what we expected.\n                                // if pseudoGlobal we need to give it a chance to exit as well.\n                                // For this reason we need to reparse the last character again.\n                                idx--;\n                                ch = lastCh;\n                            }\n                            do {\n                                mode = stack.pop() || rule;\n                                if (mode === pseudoGlobal) {\n                                    // Skip over the `)` in `:global(...)`.\n                                    flush(idx - 1);\n                                    lastIdx++;\n                                }\n                            } while (isSelfClosingRule(mode));\n                        }\n                        else {\n                            stack.push(mode);\n                            if (mode === pseudoGlobal && newMode === rule) {\n                                flush(idx - 8); // `:global(`.length\n                                lastIdx = idx; // skip over \":global(\"\n                            }\n                            else if (newMode === pseudoElement) {\n                                // We are entering pseudoElement `::foo`; insert scoping in front of it.\n                                insertScopingSelector(chIdx);\n                            }\n                            mode = newMode;\n                            ch == SPACE; // Pretend not an identifier so that we don't flush again on elementClassIdSelector\n                        }\n                        break; // get out of the for loop as we found a match\n                    }\n                }\n            }\n        }\n        lastCh = ch;\n    }\n    flush(idx);\n    return out.join('');\n    function flush(idx) {\n        out.push(css.substring(lastIdx, idx));\n        DEBUG && console.log('FLUSH', out.join(''));\n        lastIdx = idx;\n    }\n    function insertScopingSelector(idx) {\n        if (mode === pseudoGlobal || shouldNotInsertScoping()) {\n            return;\n        }\n        flush(idx);\n        out.push('.', ComponentStylesPrefixContent, scopeId);\n        DEBUG && console.log('INSERT', out.join(''));\n    }\n    function lookAhead(arc) {\n        let prefix = 0; // Ignore vendor prefixes such as `-webkit-`.\n        if (css.charCodeAt(idx) === DASH) {\n            for (let i = 1; i < 10; i++) {\n                // give up after 10 characters\n                if (css.charCodeAt(idx + i) === DASH) {\n                    prefix = i + 1;\n                    break;\n                }\n            }\n        }\n        words: for (let arcIndx = 3; arcIndx < arc.length; arcIndx++) {\n            const txt = arc[arcIndx];\n            for (let i = 0; i < txt.length; i++) {\n                if ((css.charCodeAt(idx + i + prefix) | LOWERCASE) !== txt.charCodeAt(i)) {\n                    continue words;\n                }\n            }\n            // we found a match;\n            idx += txt.length + prefix;\n            return true;\n        }\n        return false;\n    }\n    function shouldNotInsertScoping() {\n        return stack.indexOf(pseudoGlobal) !== -1 || stack.indexOf(atRuleSelector) !== -1;\n    }\n};\nconst isIdent = (ch) => {\n    return ((ch >= _0 && ch <= _9) ||\n        (ch >= A && ch <= Z) ||\n        (ch >= a && ch <= z) ||\n        ch >= 0x80 ||\n        ch === UNDERSCORE ||\n        ch === DASH);\n};\nconst isChainedSelector = (ch) => {\n    return ch === COLON || ch === DOT || ch === OPEN_BRACKET || ch === HASH || isIdent(ch);\n};\nconst isSelfClosingRule = (mode) => {\n    return (mode === atRuleBlock || mode === atRuleSelector || mode === atRuleInert || mode === pseudoGlobal);\n};\nconst isWhiteSpace = (ch) => {\n    return ch === SPACE || ch === TAB || ch === NEWLINE || ch === CARRIAGE_RETURN;\n};\nconst modeToString = (mode) => {\n    return [\n        'rule',\n        'elementClassIdSelector',\n        'starSelector',\n        'pseudoClassWithSelector',\n        'pseudoClass',\n        'pseudoGlobal',\n        'pseudoElement',\n        'attrSelector',\n        'inertParenthesis',\n        'inertBlock',\n        'atRuleSelector',\n        'atRuleBlock',\n        'atInert',\n        'body',\n        'stringSingle',\n        'stringDouble',\n        'commentMultiline',\n        'EXIT',\n        'EXIT_INSERT_SCOPE',\n    ][mode];\n};\nconst charToString = (ch) => {\n    return ['ANY', 'IDENT', 'NOT_IDENT', 'WHITESPACE'][ch] || String.fromCharCode(ch);\n};\nconst rule = 0; // top level initial space.\nconst elementClassIdSelector = 1; // .elementClassIdSelector {}\nconst starSelector = 2; // * {}\nconst pseudoClassWithSelector = 3; // :pseudoClass(elementClassIdSelector) {}\nconst pseudoClass = 4; // :pseudoClass {}\nconst pseudoGlobal = 5; // :global(elementClassIdSelector)\nconst pseudoElement = 6; // ::pseudoElement {}\nconst attrSelector = 7; // [attr] {}\nconst inertParenthesis = 8; // (ignored)\nconst inertBlock = 9; // {ignored}\nconst atRuleSelector = 10; // @keyframe elementClassIdSelector {}\nconst atRuleBlock = 11; // @media {elementClassIdSelector {}}\nconst atRuleInert = 12; // @atRule something;\nconst body = 13; // .elementClassIdSelector {body}\nconst stringSingle = 14; // 'text'\nconst stringDouble = 15; // 'text'\nconst commentMultiline = 16; // /* ... */\n// NOT REAL MODES\nconst EXIT = 17; // Exit the mode\nconst EXIT_INSERT_SCOPE = 18; // Exit the mode INSERT SCOPE\nconst ANY = 0;\nconst IDENT = 1;\nconst NOT_IDENT = 2;\nconst WHITESPACE = 3;\nconst TAB = 9; // `\\t`.charCodeAt(0);\nconst NEWLINE = 10; // `\\n`.charCodeAt(0);\nconst CARRIAGE_RETURN = 13; // `\\r`.charCodeAt(0);\nconst SPACE = 32; // ` `.charCodeAt(0);\nconst DOUBLE_QUOTE = 34; // `\"`.charCodeAt(0);\nconst HASH = 35; // `#`.charCodeAt(0);\nconst SINGLE_QUOTE = 39; // `'`.charCodeAt(0);\nconst OPEN_PARENTHESIS = 40; // `(`.charCodeAt(0);\nconst CLOSE_PARENTHESIS = 41; // `)`.charCodeAt(0);\nconst STAR = 42; // `*`.charCodeAt(0);\n// const COMMA = 44; // `,`.charCodeAt(0);\nconst DASH = 45; // `-`.charCodeAt(0);\nconst DOT = 46; // `.`.charCodeAt(0);\nconst FORWARD_SLASH = 47; // `/`.charCodeAt(0);\nconst _0 = 48; // `0`.charCodeAt(0);\nconst _9 = 57; // `9`.charCodeAt(0);\nconst COLON = 58; // `:`.charCodeAt(0);\nconst SEMICOLON = 59; // `;`.charCodeAt(0);\n// const LESS_THAN = 60; // `<`.charCodeAt(0);\nconst AT = 64; // `@`.charCodeAt(0);\nconst A = 65; // `A`.charCodeAt(0);\nconst Z = 90; // `Z`.charCodeAt(0);\nconst OPEN_BRACKET = 91; // `[`.charCodeAt(0);\nconst CLOSE_BRACKET = 93; // `]`.charCodeAt(0);\nconst BACKSLASH = 92; // `\\\\`.charCodeAt(0);\nconst UNDERSCORE = 95; // `_`.charCodeAt(0);\nconst LOWERCASE = 0x20; // `a`.charCodeAt(0);\nconst a = 97; // `a`.charCodeAt(0);\n// const d = 100; // `d`.charCodeAt(0);\n// const g = 103; // 'g'.charCodeAt(0);\n// const h = 104; // `h`.charCodeAt(0);\n// const i = 105; // `i`.charCodeAt(0);\n// const l = 108; // `l`.charCodeAt(0);\n// const t = 116; // `t`.charCodeAt(0);\nconst z = 122; // `z`.charCodeAt(0);\nconst OPEN_BRACE = 123; // `{`.charCodeAt(0);\nconst CLOSE_BRACE = 125; // `}`.charCodeAt(0);\nconst STRINGS_COMMENTS = /*__PURE__*/ (() => [\n    [ANY, SINGLE_QUOTE, stringSingle],\n    [ANY, DOUBLE_QUOTE, stringDouble],\n    [ANY, FORWARD_SLASH, commentMultiline, '*'],\n])();\nconst STATE_MACHINE = /*__PURE__*/ (() => [\n    [\n        /// rule\n        [ANY, STAR, starSelector],\n        [ANY, OPEN_BRACKET, attrSelector],\n        [ANY, COLON, pseudoElement, ':', 'before', 'after', 'first-letter', 'first-line'],\n        [ANY, COLON, pseudoGlobal, 'global'],\n        [\n            ANY,\n            COLON,\n            pseudoClassWithSelector,\n            'has',\n            'host-context',\n            'not',\n            'where',\n            'is',\n            'matches',\n            'any',\n        ],\n        [ANY, COLON, pseudoClass],\n        [ANY, IDENT, elementClassIdSelector],\n        [ANY, DOT, elementClassIdSelector],\n        [ANY, HASH, elementClassIdSelector],\n        [ANY, AT, atRuleSelector, 'keyframe'],\n        [ANY, AT, atRuleBlock, 'media', 'supports', 'container'],\n        [ANY, AT, atRuleInert],\n        [ANY, OPEN_BRACE, body],\n        [FORWARD_SLASH, STAR, commentMultiline],\n        [ANY, SEMICOLON, EXIT],\n        [ANY, CLOSE_BRACE, EXIT],\n        [ANY, CLOSE_PARENTHESIS, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// elementClassIdSelector\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// starSelector\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoClassWithSelector\n        [ANY, OPEN_PARENTHESIS, rule],\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoClass\n        [ANY, OPEN_PARENTHESIS, inertParenthesis],\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoGlobal\n        [ANY, OPEN_PARENTHESIS, rule],\n        [ANY, NOT_IDENT, EXIT],\n    ],\n    [\n        /// pseudoElement\n        [ANY, NOT_IDENT, EXIT],\n    ],\n    [\n        /// attrSelector\n        [ANY, CLOSE_BRACKET, EXIT_INSERT_SCOPE],\n        [ANY, SINGLE_QUOTE, stringSingle],\n        [ANY, DOUBLE_QUOTE, stringDouble],\n    ],\n    [\n        /// inertParenthesis\n        [ANY, CLOSE_PARENTHESIS, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// inertBlock\n        [ANY, CLOSE_BRACE, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleSelector\n        [ANY, CLOSE_BRACE, EXIT],\n        [WHITESPACE, IDENT, elementClassIdSelector],\n        [ANY, COLON, pseudoGlobal, 'global'],\n        [ANY, OPEN_BRACE, body],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleBlock\n        [ANY, OPEN_BRACE, rule],\n        [ANY, SEMICOLON, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleInert\n        [ANY, SEMICOLON, EXIT],\n        [ANY, OPEN_BRACE, inertBlock],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// body\n        [ANY, CLOSE_BRACE, EXIT],\n        [ANY, OPEN_BRACE, body],\n        [ANY, OPEN_PARENTHESIS, inertParenthesis],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// stringSingle\n        [ANY, SINGLE_QUOTE, EXIT],\n    ],\n    [\n        /// stringDouble\n        [ANY, DOUBLE_QUOTE, EXIT],\n    ],\n    [\n        /// commentMultiline\n        [STAR, FORWARD_SLASH, EXIT],\n    ],\n])();\n//# sourceMappingURL=data:application/json;base64,","import { styleContent, styleKey } from '../style/qrl-styles';\nimport {} from '../qrl/qrl.public';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { getScopedStyles } from '../style/scoped-stylesheet';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { assertQrl } from '../qrl/qrl-class';\nimport { isPromise } from '../util/promises';\nimport { assertDefined } from '../error/assert';\nimport { ComponentStylesPrefixContent } from '../util/markers';\n// <docs markdown=\"../readme.md#useStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStyles instead)\n/**\n * A lazy-loadable reference to a component's styles.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import styles from './code-block.css?inline';\n *\n * export const CmpStyles = component$(() => {\n *   useStyles$(styles);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @public\n * @see `useStylesScoped`\n */\n// </docs>\nexport const useStylesQrl = (styles) => {\n    return {\n        styleId: _useStyles(styles, (str) => str, false),\n    };\n};\n// <docs markdown=\"../readme.md#useStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStyles instead)\n/**\n * A lazy-loadable reference to a component's styles.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import styles from './code-block.css?inline';\n *\n * export const CmpStyles = component$(() => {\n *   useStyles$(styles);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @public\n * @see `useStylesScoped`\n */\n// </docs>\nexport const useStyles$ = /*#__PURE__*/ implicit$FirstArg(useStylesQrl);\n// <docs markdown=\"../readme.md#useStylesScoped\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStylesScoped instead)\n/**\n * A lazy-loadable reference to a component's styles, that is scoped to the component.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import scoped from './code-block.css?inline';\n *\n * export const CmpScopedStyles = component$(() => {\n *   useStylesScoped$(scoped);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @public\n * @see `useStyles`\n */\n// </docs>\nexport const useStylesScopedQrl = (styles) => {\n    return {\n        scopeId: ComponentStylesPrefixContent + _useStyles(styles, getScopedStyles, true),\n    };\n};\n// <docs markdown=\"../readme.md#useStylesScoped\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStylesScoped instead)\n/**\n * A lazy-loadable reference to a component's styles, that is scoped to the component.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import scoped from './code-block.css?inline';\n *\n * export const CmpScopedStyles = component$(() => {\n *   useStylesScoped$(scoped);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @public\n * @see `useStyles`\n */\n// </docs>\nexport const useStylesScoped$ = /*#__PURE__*/ implicit$FirstArg(useStylesScopedQrl);\nconst _useStyles = (styleQrl, transform, scoped) => {\n    assertQrl(styleQrl);\n    const { val, set, iCtx, i, elCtx } = useSequentialScope();\n    if (val) {\n        return val;\n    }\n    if (iCtx.$container2$) {\n        const styleId = styleKey(styleQrl, i);\n        const host = iCtx.$hostElement$;\n        set(styleId);\n        const value = styleQrl.$resolveLazy$(host);\n        if (isPromise(value)) {\n            value.then((val) => iCtx.$container2$.$appendStyle$(transform(val, styleId), styleId, host, scoped));\n            throw value;\n        }\n        else {\n            iCtx.$container2$.$appendStyle$(transform(value, styleId), styleId, host, scoped);\n        }\n        return styleId;\n    }\n    else {\n        const styleId = styleKey(styleQrl, i);\n        const containerState = iCtx.$renderCtx$.$static$.$containerState$;\n        set(styleId);\n        if (!elCtx.$appendStyles$) {\n            elCtx.$appendStyles$ = [];\n        }\n        if (!elCtx.$scopeIds$) {\n            elCtx.$scopeIds$ = [];\n        }\n        if (scoped) {\n            elCtx.$scopeIds$.push(styleContent(styleId));\n        }\n        if (containerState.$styleIds$.has(styleId)) {\n            return styleId;\n        }\n        containerState.$styleIds$.add(styleId);\n        const value = styleQrl.$resolveLazy$(containerState.$containerEl$);\n        const appendStyle = (styleText) => {\n            assertDefined(elCtx.$appendStyles$, 'appendStyles must be defined');\n            elCtx.$appendStyles$.push({\n                styleId,\n                content: transform(styleText, styleId),\n            });\n        };\n        if (isPromise(value)) {\n            iCtx.$waitOn$.push(value.then(appendStyle));\n        }\n        else {\n            appendStyle(value);\n        }\n        return styleId;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { isQwikComponent } from '../component/component.public';\nimport { isFunction } from '../util/types';\nimport { createSignal } from '../v2/signal/v2-signal.public';\nimport { invoke } from './use-core';\nimport { useSequentialScope } from './use-sequential-scope';\n/** @public */\nexport const useSignal = (initialState) => {\n    const { val, set } = useSequentialScope();\n    if (val != null) {\n        return val;\n    }\n    const value = isFunction(initialState) && !isQwikComponent(initialState)\n        ? invoke(undefined, initialState)\n        : initialState;\n    const signal = createSignal(value);\n    return set(signal);\n};\n/**\n * Stores a value which is retained for the lifetime of the component.\n *\n * If the value is a function, the function is invoked to calculate the actual value.\n *\n * @deprecated This is a technology preview\n * @public\n */\nexport const useConstant = (value) => {\n    const { val, set } = useSequentialScope();\n    if (val != null) {\n        return val;\n    }\n    // Note: We are not using `invoke` here because we don't want to clear the context\n    value = isFunction(value) && !isQwikComponent(value) ? value() : value;\n    return set(value);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXNpZ25hbC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXNpZ25hbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDaEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsWUFBWSxFQUFlLE1BQU0sK0JBQStCLENBQUM7QUFDMUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNwQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQVE1RCxjQUFjO0FBQ2QsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFjLENBQVEsWUFBb0IsRUFBaUIsRUFBRTtJQUNqRixNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLGtCQUFrQixFQUFpQixDQUFDO0lBQ3pELElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ2hCLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVELE1BQU0sS0FBSyxHQUNULFVBQVUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUM7UUFDeEQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsWUFBbUIsQ0FBQztRQUN4QyxDQUFDLENBQUMsWUFBWSxDQUFDO0lBQ25CLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBUSxLQUFLLENBQUMsQ0FBQztJQUMxQyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNyQixDQUFDLENBQUM7QUFFRjs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUksS0FBb0IsRUFBSyxFQUFFO0lBQ3hELE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsa0JBQWtCLEVBQUssQ0FBQztJQUM3QyxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNoQixPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFDRCxrRkFBa0Y7SUFDbEYsS0FBSyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUN2RSxPQUFPLEdBQUcsQ0FBQyxLQUFVLENBQUMsQ0FBQztBQUN6QixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1F3aWtDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnQvY29tcG9uZW50LnB1YmxpYyc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVTaWduYWwsIHR5cGUgU2lnbmFsIH0gZnJvbSAnLi4vdjIvc2lnbmFsL3YyLXNpZ25hbC5wdWJsaWMnO1xuaW1wb3J0IHsgaW52b2tlIH0gZnJvbSAnLi91c2UtY29yZSc7XG5pbXBvcnQgeyB1c2VTZXF1ZW50aWFsU2NvcGUgfSBmcm9tICcuL3VzZS1zZXF1ZW50aWFsLXNjb3BlJztcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXNlU2lnbmFsIHtcbiAgPFQ+KCk6IFNpZ25hbDxUIHwgdW5kZWZpbmVkPjtcbiAgPFQ+KHZhbHVlOiBUIHwgKCgpID0+IFQpKTogU2lnbmFsPFQ+O1xufVxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGNvbnN0IHVzZVNpZ25hbDogVXNlU2lnbmFsID0gPFNUQVRFPihpbml0aWFsU3RhdGU/OiBTVEFURSk6IFNpZ25hbDxTVEFURT4gPT4ge1xuICBjb25zdCB7IHZhbCwgc2V0IH0gPSB1c2VTZXF1ZW50aWFsU2NvcGU8U2lnbmFsPFNUQVRFPj4oKTtcbiAgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuXG4gIGNvbnN0IHZhbHVlID1cbiAgICBpc0Z1bmN0aW9uKGluaXRpYWxTdGF0ZSkgJiYgIWlzUXdpa0NvbXBvbmVudChpbml0aWFsU3RhdGUpXG4gICAgICA/IGludm9rZSh1bmRlZmluZWQsIGluaXRpYWxTdGF0ZSBhcyBhbnkpXG4gICAgICA6IGluaXRpYWxTdGF0ZTtcbiAgY29uc3Qgc2lnbmFsID0gY3JlYXRlU2lnbmFsPFNUQVRFPih2YWx1ZSk7XG4gIHJldHVybiBzZXQoc2lnbmFsKTtcbn07XG5cbi8qKlxuICogU3RvcmVzIGEgdmFsdWUgd2hpY2ggaXMgcmV0YWluZWQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LlxuICpcbiAqIElmIHRoZSB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCB0aGUgZnVuY3Rpb24gaXMgaW52b2tlZCB0byBjYWxjdWxhdGUgdGhlIGFjdHVhbCB2YWx1ZS5cbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGlzIGEgdGVjaG5vbG9neSBwcmV2aWV3XG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VDb25zdGFudCA9IDxUPih2YWx1ZTogKCgpID0+IFQpIHwgVCk6IFQgPT4ge1xuICBjb25zdCB7IHZhbCwgc2V0IH0gPSB1c2VTZXF1ZW50aWFsU2NvcGU8VD4oKTtcbiAgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuICAvLyBOb3RlOiBXZSBhcmUgbm90IHVzaW5nIGBpbnZva2VgIGhlcmUgYmVjYXVzZSB3ZSBkb24ndCB3YW50IHRvIGNsZWFyIHRoZSBjb250ZXh0XG4gIHZhbHVlID0gaXNGdW5jdGlvbih2YWx1ZSkgJiYgIWlzUXdpa0NvbXBvbmVudCh2YWx1ZSkgPyB2YWx1ZSgpIDogdmFsdWU7XG4gIHJldHVybiBzZXQodmFsdWUgYXMgVCk7XG59O1xuIl19","import { implicit$FirstArg } from '../util/implicit_dollar';\nimport { useComputedQrl, useTaskQrl, useVisibleTaskQrl } from './use-task';\n/** @public */\nexport const useComputed$ = implicit$FirstArg(useComputedQrl);\n// <docs markdown=\"../readme.md#useTask\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useTask instead)\n/**\n * Reruns the `taskFn` when the observed inputs change.\n *\n * Use `useTask` to observe changes on a set of inputs, and then re-execute the `taskFn` when those\n * inputs change.\n *\n * The `taskFn` only executes if the observed inputs change. To observe the inputs, use the `obs`\n * function to wrap property reads. This creates subscriptions that will trigger the `taskFn` to\n * rerun.\n *\n * @param task - Function which should be re-executed when changes to the inputs are detected\n * @public\n *\n * ### Example\n *\n * The `useTask` function is used to observe the `store.count` property. Any changes to the\n * `store.count` cause the `taskFn` to execute which in turn updates the `store.doubleCount` to\n * the double of `store.count`.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *     doubleCount: 0,\n *     debounced: 0,\n *   });\n *\n *   // Double count task\n *   useTask$(({ track }) => {\n *     const count = track(() => store.count);\n *     store.doubleCount = 2 * count;\n *   });\n *\n *   // Debouncer task\n *   useTask$(({ track }) => {\n *     const doubleCount = track(() => store.doubleCount);\n *     const timer = setTimeout(() => {\n *       store.debounced = doubleCount;\n *     }, 2000);\n *     return () => {\n *       clearTimeout(timer);\n *     };\n *   });\n *   return (\n *     <div>\n *       <div>\n *         {store.count} / {store.doubleCount}\n *       </div>\n *       <div>{store.debounced}</div>\n *     </div>\n *   );\n * });\n * ```\n *\n * @public\n * @see `Tracker`\n */\n// </docs>\nexport const useTask$ = /*#__PURE__*/ implicit$FirstArg(useTaskQrl);\n// <docs markdown=\"../readme.md#useVisibleTask\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useVisibleTask instead)\n/**\n * ```tsx\n * const Timer = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *   });\n *\n *   useVisibleTask$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       store.count++;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *\n *   return <div>{store.count}</div>;\n * });\n * ```\n *\n * @public\n */\n// </docs>\nexport const useVisibleTask$ = /*#__PURE__*/ implicit$FirstArg(useVisibleTaskQrl);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXRhc2stZG9sbGFyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtdGFzay1kb2xsYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFNUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUUsaUJBQWlCLEVBQW1CLE1BQU0sWUFBWSxDQUFDO0FBTTVGLGNBQWM7QUFDZCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQWEsaUJBQWlCLENBQUMsY0FBYyxDQUFDLENBQUM7QUFFeEUseUNBQXlDO0FBQ3pDLHlDQUF5QztBQUN6QyxzQ0FBc0M7QUFDdEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBd0RHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxhQUFhLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUM7QUFFcEUsZ0RBQWdEO0FBQ2hELHlDQUF5QztBQUN6Qyw2Q0FBNkM7QUFDN0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FzQkc7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW1wbGljaXQkRmlyc3RBcmcgfSBmcm9tICcuLi91dGlsL2ltcGxpY2l0X2RvbGxhcic7XG5pbXBvcnQgdHlwZSB7IFJlYWRvbmx5U2lnbmFsIH0gZnJvbSAnLi4vdjIvc2lnbmFsL3YyLXNpZ25hbC5wdWJsaWMnO1xuaW1wb3J0IHsgdXNlQ29tcHV0ZWRRcmwsIHVzZVRhc2tRcmwsIHVzZVZpc2libGVUYXNrUXJsLCB0eXBlIENvbXB1dGVkRm4gfSBmcm9tICcuL3VzZS10YXNrJztcblxuaW50ZXJmYWNlIENvbXB1dGVkIHtcbiAgPFQ+KHFybDogQ29tcHV0ZWRGbjxUPik6IFJlYWRvbmx5U2lnbmFsPFQ+O1xufVxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGNvbnN0IHVzZUNvbXB1dGVkJDogQ29tcHV0ZWQgPSBpbXBsaWNpdCRGaXJzdEFyZyh1c2VDb21wdXRlZFFybCk7XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI3VzZVRhc2tcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjdXNlVGFzayBpbnN0ZWFkKVxuLyoqXG4gKiBSZXJ1bnMgdGhlIGB0YXNrRm5gIHdoZW4gdGhlIG9ic2VydmVkIGlucHV0cyBjaGFuZ2UuXG4gKlxuICogVXNlIGB1c2VUYXNrYCB0byBvYnNlcnZlIGNoYW5nZXMgb24gYSBzZXQgb2YgaW5wdXRzLCBhbmQgdGhlbiByZS1leGVjdXRlIHRoZSBgdGFza0ZuYCB3aGVuIHRob3NlXG4gKiBpbnB1dHMgY2hhbmdlLlxuICpcbiAqIFRoZSBgdGFza0ZuYCBvbmx5IGV4ZWN1dGVzIGlmIHRoZSBvYnNlcnZlZCBpbnB1dHMgY2hhbmdlLiBUbyBvYnNlcnZlIHRoZSBpbnB1dHMsIHVzZSB0aGUgYG9ic2BcbiAqIGZ1bmN0aW9uIHRvIHdyYXAgcHJvcGVydHkgcmVhZHMuIFRoaXMgY3JlYXRlcyBzdWJzY3JpcHRpb25zIHRoYXQgd2lsbCB0cmlnZ2VyIHRoZSBgdGFza0ZuYCB0b1xuICogcmVydW4uXG4gKlxuICogQHBhcmFtIHRhc2sgLSBGdW5jdGlvbiB3aGljaCBzaG91bGQgYmUgcmUtZXhlY3V0ZWQgd2hlbiBjaGFuZ2VzIHRvIHRoZSBpbnB1dHMgYXJlIGRldGVjdGVkXG4gKiBAcHVibGljXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqXG4gKiBUaGUgYHVzZVRhc2tgIGZ1bmN0aW9uIGlzIHVzZWQgdG8gb2JzZXJ2ZSB0aGUgYHN0b3JlLmNvdW50YCBwcm9wZXJ0eS4gQW55IGNoYW5nZXMgdG8gdGhlXG4gKiBgc3RvcmUuY291bnRgIGNhdXNlIHRoZSBgdGFza0ZuYCB0byBleGVjdXRlIHdoaWNoIGluIHR1cm4gdXBkYXRlcyB0aGUgYHN0b3JlLmRvdWJsZUNvdW50YCB0b1xuICogdGhlIGRvdWJsZSBvZiBgc3RvcmUuY291bnRgLlxuICpcbiAqIGBgYHRzeFxuICogY29uc3QgQ21wID0gY29tcG9uZW50JCgoKSA9PiB7XG4gKiAgIGNvbnN0IHN0b3JlID0gdXNlU3RvcmUoe1xuICogICAgIGNvdW50OiAwLFxuICogICAgIGRvdWJsZUNvdW50OiAwLFxuICogICAgIGRlYm91bmNlZDogMCxcbiAqICAgfSk7XG4gKlxuICogICAvLyBEb3VibGUgY291bnQgdGFza1xuICogICB1c2VUYXNrJCgoeyB0cmFjayB9KSA9PiB7XG4gKiAgICAgY29uc3QgY291bnQgPSB0cmFjaygoKSA9PiBzdG9yZS5jb3VudCk7XG4gKiAgICAgc3RvcmUuZG91YmxlQ291bnQgPSAyICogY291bnQ7XG4gKiAgIH0pO1xuICpcbiAqICAgLy8gRGVib3VuY2VyIHRhc2tcbiAqICAgdXNlVGFzayQoKHsgdHJhY2sgfSkgPT4ge1xuICogICAgIGNvbnN0IGRvdWJsZUNvdW50ID0gdHJhY2soKCkgPT4gc3RvcmUuZG91YmxlQ291bnQpO1xuICogICAgIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gKiAgICAgICBzdG9yZS5kZWJvdW5jZWQgPSBkb3VibGVDb3VudDtcbiAqICAgICB9LCAyMDAwKTtcbiAqICAgICByZXR1cm4gKCkgPT4ge1xuICogICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAqICAgICB9O1xuICogICB9KTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPGRpdj5cbiAqICAgICAgICAge3N0b3JlLmNvdW50fSAvIHtzdG9yZS5kb3VibGVDb3VudH1cbiAqICAgICAgIDwvZGl2PlxuICogICAgICAgPGRpdj57c3RvcmUuZGVib3VuY2VkfTwvZGl2PlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKiBAc2VlIGBUcmFja2VyYFxuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3QgdXNlVGFzayQgPSAvKiNfX1BVUkVfXyovIGltcGxpY2l0JEZpcnN0QXJnKHVzZVRhc2tRcmwpO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VWaXNpYmxlVGFza1wiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCN1c2VWaXNpYmxlVGFzayBpbnN0ZWFkKVxuLyoqXG4gKiBgYGB0c3hcbiAqIGNvbnN0IFRpbWVyID0gY29tcG9uZW50JCgoKSA9PiB7XG4gKiAgIGNvbnN0IHN0b3JlID0gdXNlU3RvcmUoe1xuICogICAgIGNvdW50OiAwLFxuICogICB9KTtcbiAqXG4gKiAgIHVzZVZpc2libGVUYXNrJCgoKSA9PiB7XG4gKiAgICAgLy8gT25seSBydW5zIGluIHRoZSBjbGllbnRcbiAqICAgICBjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcbiAqICAgICAgIHN0b3JlLmNvdW50Kys7XG4gKiAgICAgfSwgNTAwKTtcbiAqICAgICByZXR1cm4gKCkgPT4ge1xuICogICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gKiAgICAgfTtcbiAqICAgfSk7XG4gKlxuICogICByZXR1cm4gPGRpdj57c3RvcmUuY291bnR9PC9kaXY+O1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VWaXNpYmxlVGFzayQgPSAvKiNfX1BVUkVfXyovIGltcGxpY2l0JEZpcnN0QXJnKHVzZVZpc2libGVUYXNrUXJsKTtcbiJdfQ==","import { qrl } from '../qrl/qrl';\nimport { ERROR_CONTEXT } from '../render/error-handling';\nimport { useContextProvider } from './use-context';\nimport { useOn } from './use-on';\nimport { useStore } from './use-store.public';\n/** @public */\nexport const useErrorBoundary = () => {\n    const store = useStore({\n        error: undefined,\n    });\n    useOn('error-boundary', qrl('/runtime', 'error', [store]));\n    useContextProvider(ERROR_CONTEXT, store);\n    return store;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWVycm9yLWJvdW5kYXJ5LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtZXJyb3ItYm91bmRhcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNqQyxPQUFPLEVBQTJCLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2xGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUU5QyxjQUFjO0FBQ2QsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBaUMsRUFBRTtJQUNqRSxNQUFNLEtBQUssR0FBdUIsUUFBUSxDQUFDO1FBQ3pDLEtBQUssRUFBRSxTQUFTO0tBQ2pCLENBQUMsQ0FBQztJQUNILEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsVUFBVSxFQUFFLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzRCxrQkFBa0IsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFekMsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBxcmwgfSBmcm9tICcuLi9xcmwvcXJsJztcbmltcG9ydCB7IHR5cGUgRXJyb3JCb3VuZGFyeVN0b3JlLCBFUlJPUl9DT05URVhUIH0gZnJvbSAnLi4vcmVuZGVyL2Vycm9yLWhhbmRsaW5nJztcbmltcG9ydCB7IHVzZUNvbnRleHRQcm92aWRlciB9IGZyb20gJy4vdXNlLWNvbnRleHQnO1xuaW1wb3J0IHsgdXNlT24gfSBmcm9tICcuL3VzZS1vbic7XG5pbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJy4vdXNlLXN0b3JlLnB1YmxpYyc7XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgdXNlRXJyb3JCb3VuZGFyeSA9ICgpOiBSZWFkb25seTxFcnJvckJvdW5kYXJ5U3RvcmU+ID0+IHtcbiAgY29uc3Qgc3RvcmU6IEVycm9yQm91bmRhcnlTdG9yZSA9IHVzZVN0b3JlKHtcbiAgICBlcnJvcjogdW5kZWZpbmVkLFxuICB9KTtcbiAgdXNlT24oJ2Vycm9yLWJvdW5kYXJ5JywgcXJsKCcvcnVudGltZScsICdlcnJvcicsIFtzdG9yZV0pKTtcbiAgdXNlQ29udGV4dFByb3ZpZGVyKEVSUk9SX0NPTlRFWFQsIHN0b3JlKTtcblxuICByZXR1cm4gc3RvcmU7XG59O1xuIl19","import { isDev } from '@builder.io/qwik/build';\nimport { _jsxSorted } from '../internal';\nimport { useServerData } from '../use/use-env-data';\nimport { QBaseAttr, QManifestHashAttr } from '../util/markers';\n/**\n * Install a service worker which will prefetch the bundles.\n *\n * There can only be one service worker per page. Because there can be many separate Qwik Containers\n * on the page each container needs to load its prefetch graph using `PrefetchGraph` component.\n *\n * @param opts - Options for the prefetch service worker.\n *\n *   - `base` - Base URL for the service worker. Default is `import.meta.env.BASE_URL`, which is defined\n *       by Vite's `config.base` and defaults to `/`.\n *   - `scope` - Base URL for when the service-worker will activate. Default is `/`\n *   - `path` - Path to the service worker. Default is `qwik-prefetch-service-worker.js` unless you pass\n *       a path that starts with a `/` then the base is ignored. Default is\n *       `qwik-prefetch-service-worker.js`\n *   - `verbose` - Verbose logging for the service worker installation. Default is `false`\n *   - `nonce` - Optional nonce value for security purposes, defaults to `undefined`.\n *\n * @alpha\n */\nexport const PrefetchServiceWorker = (opts) => {\n    const isTest = import.meta.env.TEST;\n    if (isDev && !isTest) {\n        const props = {\n            dangerouslySetInnerHTML: '<!-- PrefetchServiceWorker is disabled in dev mode. -->',\n        };\n        return _jsxSorted('script', null, props, null, 0, 'prefetch-service-worker');\n    }\n    const serverData = useServerData('containerAttributes', {});\n    // if an MFE app has a custom BASE_URL then this will be the correct value\n    // if you're not using MFE from another codebase then you want to override this value to your custom setup\n    const baseUrl = import.meta.env.BASE_URL || '/';\n    const resolvedOpts = {\n        base: serverData['q:base'],\n        manifestHash: serverData['q:manifest-hash'],\n        scope: '/',\n        verbose: false,\n        path: 'qwik-prefetch-service-worker.js',\n        ...opts,\n    };\n    if (opts?.path?.startsWith?.('/')) {\n        // allow different path and base\n        resolvedOpts.path = opts.path;\n    }\n    else {\n        // baseUrl: '/'\n        // path: 'qwik-prefetch-service-worker.js'\n        // the file 'qwik-prefetch-service-worker.js' is not located in /build/\n        resolvedOpts.path = baseUrl + resolvedOpts.path;\n    }\n    let code = PREFETCH_CODE.replace('URL', resolvedOpts.path).replace('SCOPE', resolvedOpts.scope);\n    if (!isDev) {\n        code = code.replaceAll(/\\s+/gm, '');\n    }\n    const props = {\n        dangerouslySetInnerHTML: [\n            '(' + code + ')(',\n            [\n                JSON.stringify(resolvedOpts.base),\n                JSON.stringify(resolvedOpts.manifestHash),\n                'navigator.serviceWorker',\n                'window.qwikPrefetchSW||(window.qwikPrefetchSW=[])',\n                resolvedOpts.verbose,\n            ].join(','),\n            ');',\n        ].join(''),\n        nonce: resolvedOpts.nonce,\n    };\n    return _jsxSorted('script', null, props, null, 0, 'prefetch-service-worker');\n};\nconst PREFETCH_CODE = /*#__PURE__*/ ((b, // base\nh, // manifest hash\nc, // Service worker container\nq, // Queue of messages to send to the service worker.\nv // Verbose mode\n) => {\n    c.register('URL', { scope: 'SCOPE' }).then((sw, onReady) => {\n        onReady = () => q.forEach((q.push = (v) => sw.active.postMessage(v)));\n        sw.installing\n            ? sw.installing.addEventListener('statechange', (e) => e.target.state == 'activated' && onReady())\n            : onReady();\n    });\n    v && q.push(['verbose']);\n    document.addEventListener('qprefetch', (e) => e.detail.bundles && q.push(['prefetch', b, ...e.detail.bundles]));\n}).toString();\n/**\n * Load the prefetch graph for the container.\n *\n * Each Qwik container needs to include its own prefetch graph.\n *\n * @param opts - Options for the loading prefetch graph.\n *\n *   - `base` - Base of the graph. For a default installation this will default to the q:base value\n *       `/build/`. But if more than one MFE is installed on the page, then each MFE needs to have\n *       its own base.\n *   - `manifestHash` - Hash of the manifest file to load. If not provided the hash will be extracted\n *       from the container attribute `q:manifest-hash` and assume the default build file\n *       `${base}/q-bundle-graph-${manifestHash}.json`.\n *   - `manifestURL` - URL of the manifest file to load if non-standard bundle graph location name.\n *\n * @alpha\n */\nexport const PrefetchGraph = (opts = {}) => {\n    const isTest = import.meta.env.TEST;\n    if (isDev && !isTest) {\n        const props = {\n            dangerouslySetInnerHTML: '<!-- PrefetchGraph is disabled in dev mode. -->',\n        };\n        return _jsxSorted('script', null, props, null, 0, 'prefetch-graph');\n    }\n    const serverData = useServerData('containerAttributes', {});\n    const resolvedOpts = {\n        // /build/q-bundle-graph-${manifestHash}.json is always within the q:base location /build/\n        base: serverData[QBaseAttr],\n        manifestHash: serverData[QManifestHashAttr],\n        scope: '/',\n        verbose: false,\n        path: 'qwik-prefetch-service-worker.js',\n        ...opts,\n    };\n    const args = JSON.stringify([\n        'graph-url',\n        resolvedOpts.base,\n        `q-bundle-graph-${resolvedOpts.manifestHash}.json`,\n    ]);\n    const code = `(window.qwikPrefetchSW||(window.qwikPrefetchSW=[])).push(${args})`;\n    const props = {\n        dangerouslySetInnerHTML: code,\n        nonce: opts.nonce,\n    };\n    return _jsxSorted('script', null, props, null, 0, 'prefetch-graph');\n};\n//# sourceMappingURL=data:application/json;base64,"],"names":["isElement","tryGetContext","fromCamelToKebabCase","SVG_NS","FLUSH_COMMENT","isQrl","parseQRL","isTask","getKey","createSignal","_createSignal","_createComputedSignal","jsxToString","_a","IS_HEAD","IS_IMMUTABLE","processData","setComponentProps","registerQwikEvent","getSlotName","setEvent","isResourceTask","isContainer","SHOW_COMMENT","FILTER_REJECT","emitEvent"],"mappings":"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AoB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAC3D,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC;AAClC,IAAI,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;AAC5F,IAAI,WAAW,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;AACrD,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC;AAClB,IAAI,OAAO,QAAQ,CAAC;AACpB,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,YAAY,GAAG,CAAC,WAAW,EAAE,IAAI,KAAK;AACnD,IAAI,OAAO,cAAc,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC;AACrD,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,QAAQ,GAAG,CAAC,KAAK,KAAK;AACnC;AACA,IAAI,OAAO,UAAU,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,yBAAyB,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;AACvF,EAAE;AACF,SAAS,yBAA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,SAAS,CAAC,IAAI,CAAC,CAAC;AACtC,QAAQ,OAAO,IAAI,kBAAkB,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,aAAa,EAAE,YAAY,KAAK,MAAM,CAAC,CAAC;AAChG,KAAK;AACL,IAAI,OAAO,IAAI,CAAC;AAChB,CAAC,CAAC;AACK,MAAM,WAAW,GAAG,CAAC,IAAI,KAAK;AACrC,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AACtB,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK;AACL,IAAI,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE;AAChC,QAAQ,OAAO,IAAI,CAAC,IAAI,CAAC;AACzB,KAAK;AACL,SAAS;AACT,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK;AACL,CAAC;;ACrTD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,eAAe,GAAG,CAAC,IAAI,KAAK;AACzC,IAAI,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,+CAA+C,EAAE,IAAI,CAAC,CAAC;AAC/F,IAAI,qBAAqB,MAAM,CAAC,MAAM,CAAC;AACvC,QAAQ,EAAE,EAAE,oBAAoB,CAAC,IAAI,CAAC;AACtC,KAAK,CAAC,CAAC;AACP,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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AE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAC/D,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,QAAQ,GAAG,UAAU,EAAE,EAAE,YAAY,EAAE;AACpD,IAAI,IAAI,YAAY,KAAK,SAAS,EAAE;AACpC,QAAQ,YAAY,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC;AACrC,KAAK;AACL,IAAI,OAAO,SAAS,CAAC,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAC/D;;AC5HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,YAAY,GAAG,CAAC,YAAY,KAAK;AAC9C;AACA,IAAI,MAAM,aAAa,GAAG,MAAM,GAAG,CAAC;AACpC,IAAI,aAAa,CAAC,kBAAkB,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AACvD,IAAI,OAAO,aAAa,CAAC;AACzB,EAAE;AACK,MAAM,eAAe,GAAG,CAAC,SAAS,KAAK;AAC9C,IAAI,OAAO,OAAO,SAAS,IAAI,UAAU,IAAI,SAAS,CAAC,kBAAkB,CAAC,KAAK,SAAS,CAAC;AACzF,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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"}